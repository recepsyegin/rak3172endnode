
_0RAKConfig.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c488  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0801c5c0  0801c5c0  0001d5c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801d16c  0801d16c  0001e16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801d244  0801d244  0001f138  2**0
                  CONTENTS, READONLY
  5 .ARM          00000008  0801d244  0801d244  0001e244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801d24c  0801d24c  0001f138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801d24c  0801d24c  0001e24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .fini_array   00000004  0801d250  0801d250  0001e250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000138  20000000  0801d254  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000020fc  20000138  0801d38c  0001f138  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002234  0801d38c  0001f234  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001f138  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042d7e  00000000  00000000  0001f162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a451  00000000  00000000  00061ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032d0  00000000  00000000  0006c338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000268b  00000000  00000000  0006f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000288a8  00000000  00000000  00071c93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003eb4d  00000000  00000000  0009a53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbda1  00000000  00000000  000d9088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a4e29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d0c8  00000000  00000000  001a4e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000080  00000000  00000000  001b1f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000138 	.word	0x20000138
 8000154:	00000000 	.word	0x00000000
 8000158:	0801c5a8 	.word	0x0801c5a8

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000013c 	.word	0x2000013c
 8000174:	0801c5a8 	.word	0x0801c5a8

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_f2iz>:
 800087c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000880:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000884:	d30f      	bcc.n	80008a6 <__aeabi_f2iz+0x2a>
 8000886:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800088a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800088e:	d90d      	bls.n	80008ac <__aeabi_f2iz+0x30>
 8000890:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000894:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000898:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800089c:	fa23 f002 	lsr.w	r0, r3, r2
 80008a0:	bf18      	it	ne
 80008a2:	4240      	negne	r0, r0
 80008a4:	4770      	bx	lr
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	4770      	bx	lr
 80008ac:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80008b0:	d101      	bne.n	80008b6 <__aeabi_f2iz+0x3a>
 80008b2:	0242      	lsls	r2, r0, #9
 80008b4:	d105      	bne.n	80008c2 <__aeabi_f2iz+0x46>
 80008b6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80008ba:	bf08      	it	eq
 80008bc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008c0:	4770      	bx	lr
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	4770      	bx	lr

080008c8 <__aeabi_uldivmod>:
 80008c8:	b953      	cbnz	r3, 80008e0 <__aeabi_uldivmod+0x18>
 80008ca:	b94a      	cbnz	r2, 80008e0 <__aeabi_uldivmod+0x18>
 80008cc:	2900      	cmp	r1, #0
 80008ce:	bf08      	it	eq
 80008d0:	2800      	cmpeq	r0, #0
 80008d2:	bf1c      	itt	ne
 80008d4:	f04f 31ff 	movne.w	r1, #4294967295
 80008d8:	f04f 30ff 	movne.w	r0, #4294967295
 80008dc:	f000 b988 	b.w	8000bf0 <__aeabi_idiv0>
 80008e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008e8:	f000 f806 	bl	80008f8 <__udivmoddi4>
 80008ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f4:	b004      	add	sp, #16
 80008f6:	4770      	bx	lr

080008f8 <__udivmoddi4>:
 80008f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008fc:	9d08      	ldr	r5, [sp, #32]
 80008fe:	468e      	mov	lr, r1
 8000900:	4604      	mov	r4, r0
 8000902:	4688      	mov	r8, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14a      	bne.n	800099e <__udivmoddi4+0xa6>
 8000908:	428a      	cmp	r2, r1
 800090a:	4617      	mov	r7, r2
 800090c:	d962      	bls.n	80009d4 <__udivmoddi4+0xdc>
 800090e:	fab2 f682 	clz	r6, r2
 8000912:	b14e      	cbz	r6, 8000928 <__udivmoddi4+0x30>
 8000914:	f1c6 0320 	rsb	r3, r6, #32
 8000918:	fa01 f806 	lsl.w	r8, r1, r6
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	40b7      	lsls	r7, r6
 8000922:	ea43 0808 	orr.w	r8, r3, r8
 8000926:	40b4      	lsls	r4, r6
 8000928:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800092c:	fa1f fc87 	uxth.w	ip, r7
 8000930:	fbb8 f1fe 	udiv	r1, r8, lr
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	fb0e 8811 	mls	r8, lr, r1, r8
 800093a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800093e:	fb01 f20c 	mul.w	r2, r1, ip
 8000942:	429a      	cmp	r2, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x62>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f101 30ff 	add.w	r0, r1, #4294967295
 800094c:	f080 80ea 	bcs.w	8000b24 <__udivmoddi4+0x22c>
 8000950:	429a      	cmp	r2, r3
 8000952:	f240 80e7 	bls.w	8000b24 <__udivmoddi4+0x22c>
 8000956:	3902      	subs	r1, #2
 8000958:	443b      	add	r3, r7
 800095a:	1a9a      	subs	r2, r3, r2
 800095c:	b2a3      	uxth	r3, r4
 800095e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000962:	fb0e 2210 	mls	r2, lr, r0, r2
 8000966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800096a:	fb00 fc0c 	mul.w	ip, r0, ip
 800096e:	459c      	cmp	ip, r3
 8000970:	d909      	bls.n	8000986 <__udivmoddi4+0x8e>
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	f100 32ff 	add.w	r2, r0, #4294967295
 8000978:	f080 80d6 	bcs.w	8000b28 <__udivmoddi4+0x230>
 800097c:	459c      	cmp	ip, r3
 800097e:	f240 80d3 	bls.w	8000b28 <__udivmoddi4+0x230>
 8000982:	443b      	add	r3, r7
 8000984:	3802      	subs	r0, #2
 8000986:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800098a:	eba3 030c 	sub.w	r3, r3, ip
 800098e:	2100      	movs	r1, #0
 8000990:	b11d      	cbz	r5, 800099a <__udivmoddi4+0xa2>
 8000992:	40f3      	lsrs	r3, r6
 8000994:	2200      	movs	r2, #0
 8000996:	e9c5 3200 	strd	r3, r2, [r5]
 800099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800099e:	428b      	cmp	r3, r1
 80009a0:	d905      	bls.n	80009ae <__udivmoddi4+0xb6>
 80009a2:	b10d      	cbz	r5, 80009a8 <__udivmoddi4+0xb0>
 80009a4:	e9c5 0100 	strd	r0, r1, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	4608      	mov	r0, r1
 80009ac:	e7f5      	b.n	800099a <__udivmoddi4+0xa2>
 80009ae:	fab3 f183 	clz	r1, r3
 80009b2:	2900      	cmp	r1, #0
 80009b4:	d146      	bne.n	8000a44 <__udivmoddi4+0x14c>
 80009b6:	4573      	cmp	r3, lr
 80009b8:	d302      	bcc.n	80009c0 <__udivmoddi4+0xc8>
 80009ba:	4282      	cmp	r2, r0
 80009bc:	f200 8105 	bhi.w	8000bca <__udivmoddi4+0x2d2>
 80009c0:	1a84      	subs	r4, r0, r2
 80009c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80009c6:	2001      	movs	r0, #1
 80009c8:	4690      	mov	r8, r2
 80009ca:	2d00      	cmp	r5, #0
 80009cc:	d0e5      	beq.n	800099a <__udivmoddi4+0xa2>
 80009ce:	e9c5 4800 	strd	r4, r8, [r5]
 80009d2:	e7e2      	b.n	800099a <__udivmoddi4+0xa2>
 80009d4:	2a00      	cmp	r2, #0
 80009d6:	f000 8090 	beq.w	8000afa <__udivmoddi4+0x202>
 80009da:	fab2 f682 	clz	r6, r2
 80009de:	2e00      	cmp	r6, #0
 80009e0:	f040 80a4 	bne.w	8000b2c <__udivmoddi4+0x234>
 80009e4:	1a8a      	subs	r2, r1, r2
 80009e6:	0c03      	lsrs	r3, r0, #16
 80009e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009ec:	b280      	uxth	r0, r0
 80009ee:	b2bc      	uxth	r4, r7
 80009f0:	2101      	movs	r1, #1
 80009f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80009f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80009fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d907      	bls.n	8000a16 <__udivmoddi4+0x11e>
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a0c:	d202      	bcs.n	8000a14 <__udivmoddi4+0x11c>
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	f200 80e0 	bhi.w	8000bd4 <__udivmoddi4+0x2dc>
 8000a14:	46c4      	mov	ip, r8
 8000a16:	1a9b      	subs	r3, r3, r2
 8000a18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000a1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000a20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000a24:	fb02 f404 	mul.w	r4, r2, r4
 8000a28:	429c      	cmp	r4, r3
 8000a2a:	d907      	bls.n	8000a3c <__udivmoddi4+0x144>
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a32:	d202      	bcs.n	8000a3a <__udivmoddi4+0x142>
 8000a34:	429c      	cmp	r4, r3
 8000a36:	f200 80ca 	bhi.w	8000bce <__udivmoddi4+0x2d6>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	1b1b      	subs	r3, r3, r4
 8000a3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a42:	e7a5      	b.n	8000990 <__udivmoddi4+0x98>
 8000a44:	f1c1 0620 	rsb	r6, r1, #32
 8000a48:	408b      	lsls	r3, r1
 8000a4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000a4e:	431f      	orrs	r7, r3
 8000a50:	fa0e f401 	lsl.w	r4, lr, r1
 8000a54:	fa20 f306 	lsr.w	r3, r0, r6
 8000a58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a60:	4323      	orrs	r3, r4
 8000a62:	fa00 f801 	lsl.w	r8, r0, r1
 8000a66:	fa1f fc87 	uxth.w	ip, r7
 8000a6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000a6e:	0c1c      	lsrs	r4, r3, #16
 8000a70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000a82:	d909      	bls.n	8000a98 <__udivmoddi4+0x1a0>
 8000a84:	193c      	adds	r4, r7, r4
 8000a86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a8a:	f080 809c 	bcs.w	8000bc6 <__udivmoddi4+0x2ce>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	f240 8099 	bls.w	8000bc6 <__udivmoddi4+0x2ce>
 8000a94:	3802      	subs	r0, #2
 8000a96:	443c      	add	r4, r7
 8000a98:	eba4 040e 	sub.w	r4, r4, lr
 8000a9c:	fa1f fe83 	uxth.w	lr, r3
 8000aa0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000aa4:	fb09 4413 	mls	r4, r9, r3, r4
 8000aa8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000aac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ab0:	45a4      	cmp	ip, r4
 8000ab2:	d908      	bls.n	8000ac6 <__udivmoddi4+0x1ce>
 8000ab4:	193c      	adds	r4, r7, r4
 8000ab6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000aba:	f080 8082 	bcs.w	8000bc2 <__udivmoddi4+0x2ca>
 8000abe:	45a4      	cmp	ip, r4
 8000ac0:	d97f      	bls.n	8000bc2 <__udivmoddi4+0x2ca>
 8000ac2:	3b02      	subs	r3, #2
 8000ac4:	443c      	add	r4, r7
 8000ac6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000aca:	eba4 040c 	sub.w	r4, r4, ip
 8000ace:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ad2:	4564      	cmp	r4, ip
 8000ad4:	4673      	mov	r3, lr
 8000ad6:	46e1      	mov	r9, ip
 8000ad8:	d362      	bcc.n	8000ba0 <__udivmoddi4+0x2a8>
 8000ada:	d05f      	beq.n	8000b9c <__udivmoddi4+0x2a4>
 8000adc:	b15d      	cbz	r5, 8000af6 <__udivmoddi4+0x1fe>
 8000ade:	ebb8 0203 	subs.w	r2, r8, r3
 8000ae2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ae6:	fa04 f606 	lsl.w	r6, r4, r6
 8000aea:	fa22 f301 	lsr.w	r3, r2, r1
 8000aee:	431e      	orrs	r6, r3
 8000af0:	40cc      	lsrs	r4, r1
 8000af2:	e9c5 6400 	strd	r6, r4, [r5]
 8000af6:	2100      	movs	r1, #0
 8000af8:	e74f      	b.n	800099a <__udivmoddi4+0xa2>
 8000afa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000afe:	0c01      	lsrs	r1, r0, #16
 8000b00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000b04:	b280      	uxth	r0, r0
 8000b06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4638      	mov	r0, r7
 8000b0e:	463c      	mov	r4, r7
 8000b10:	46b8      	mov	r8, r7
 8000b12:	46be      	mov	lr, r7
 8000b14:	2620      	movs	r6, #32
 8000b16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000b1a:	eba2 0208 	sub.w	r2, r2, r8
 8000b1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b22:	e766      	b.n	80009f2 <__udivmoddi4+0xfa>
 8000b24:	4601      	mov	r1, r0
 8000b26:	e718      	b.n	800095a <__udivmoddi4+0x62>
 8000b28:	4610      	mov	r0, r2
 8000b2a:	e72c      	b.n	8000986 <__udivmoddi4+0x8e>
 8000b2c:	f1c6 0220 	rsb	r2, r6, #32
 8000b30:	fa2e f302 	lsr.w	r3, lr, r2
 8000b34:	40b7      	lsls	r7, r6
 8000b36:	40b1      	lsls	r1, r6
 8000b38:	fa20 f202 	lsr.w	r2, r0, r2
 8000b3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b40:	430a      	orrs	r2, r1
 8000b42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b46:	b2bc      	uxth	r4, r7
 8000b48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b4c:	0c11      	lsrs	r1, r2, #16
 8000b4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b52:	fb08 f904 	mul.w	r9, r8, r4
 8000b56:	40b0      	lsls	r0, r6
 8000b58:	4589      	cmp	r9, r1
 8000b5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b5e:	b280      	uxth	r0, r0
 8000b60:	d93e      	bls.n	8000be0 <__udivmoddi4+0x2e8>
 8000b62:	1879      	adds	r1, r7, r1
 8000b64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b68:	d201      	bcs.n	8000b6e <__udivmoddi4+0x276>
 8000b6a:	4589      	cmp	r9, r1
 8000b6c:	d81f      	bhi.n	8000bae <__udivmoddi4+0x2b6>
 8000b6e:	eba1 0109 	sub.w	r1, r1, r9
 8000b72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b76:	fb09 f804 	mul.w	r8, r9, r4
 8000b7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b7e:	b292      	uxth	r2, r2
 8000b80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b84:	4542      	cmp	r2, r8
 8000b86:	d229      	bcs.n	8000bdc <__udivmoddi4+0x2e4>
 8000b88:	18ba      	adds	r2, r7, r2
 8000b8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b8e:	d2c4      	bcs.n	8000b1a <__udivmoddi4+0x222>
 8000b90:	4542      	cmp	r2, r8
 8000b92:	d2c2      	bcs.n	8000b1a <__udivmoddi4+0x222>
 8000b94:	f1a9 0102 	sub.w	r1, r9, #2
 8000b98:	443a      	add	r2, r7
 8000b9a:	e7be      	b.n	8000b1a <__udivmoddi4+0x222>
 8000b9c:	45f0      	cmp	r8, lr
 8000b9e:	d29d      	bcs.n	8000adc <__udivmoddi4+0x1e4>
 8000ba0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ba4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ba8:	3801      	subs	r0, #1
 8000baa:	46e1      	mov	r9, ip
 8000bac:	e796      	b.n	8000adc <__udivmoddi4+0x1e4>
 8000bae:	eba7 0909 	sub.w	r9, r7, r9
 8000bb2:	4449      	add	r1, r9
 8000bb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000bb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbc:	fb09 f804 	mul.w	r8, r9, r4
 8000bc0:	e7db      	b.n	8000b7a <__udivmoddi4+0x282>
 8000bc2:	4673      	mov	r3, lr
 8000bc4:	e77f      	b.n	8000ac6 <__udivmoddi4+0x1ce>
 8000bc6:	4650      	mov	r0, sl
 8000bc8:	e766      	b.n	8000a98 <__udivmoddi4+0x1a0>
 8000bca:	4608      	mov	r0, r1
 8000bcc:	e6fd      	b.n	80009ca <__udivmoddi4+0xd2>
 8000bce:	443b      	add	r3, r7
 8000bd0:	3a02      	subs	r2, #2
 8000bd2:	e733      	b.n	8000a3c <__udivmoddi4+0x144>
 8000bd4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd8:	443b      	add	r3, r7
 8000bda:	e71c      	b.n	8000a16 <__udivmoddi4+0x11e>
 8000bdc:	4649      	mov	r1, r9
 8000bde:	e79c      	b.n	8000b1a <__udivmoddi4+0x222>
 8000be0:	eba1 0109 	sub.w	r1, r1, r9
 8000be4:	46c4      	mov	ip, r8
 8000be6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bea:	fb09 f804 	mul.w	r8, r9, r4
 8000bee:	e7c4      	b.n	8000b7a <__udivmoddi4+0x282>

08000bf0 <__aeabi_idiv0>:
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c18:	68fb      	ldr	r3, [r7, #12]
}
 8000c1a:	bf00      	nop
 8000c1c:	3714      	adds	r7, #20
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000c30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000c3e:	bf00      	nop
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr

08000c48 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000c4c:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c4e:	4a24      	ldr	r2, [pc, #144]	@ (8000ce0 <MX_ADC_Init+0x98>)
 8000c50:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c52:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c54:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000c58:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c6e:	2204      	movs	r2, #4
 8000c70:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c78:	4b18      	ldr	r3, [pc, #96]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c92:	4b12      	ldr	r3, [pc, #72]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c98:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000ca8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cac:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000cb0:	2207      	movs	r2, #7
 8000cb2:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_ADC_Init+0x94>)
 8000cca:	f001 ff11 	bl	8002af0 <HAL_ADC_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000cd4:	f000 fc72 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000154 	.word	0x20000154
 8000ce0:	40012400 	.word	0x40012400

08000ce4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <HAL_ADC_MspInit+0x24>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d103      	bne.n	8000cfe <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cf6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000cfa:	f7ff ff7b 	bl	8000bf4 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40012400 	.word	0x40012400

08000d0c <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a05      	ldr	r2, [pc, #20]	@ (8000d30 <HAL_ADC_MspDeInit+0x24>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d103      	bne.n	8000d26 <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000d1e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d22:	f7ff ff7f 	bl	8000c24 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40012400 	.word	0x40012400

08000d34 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000d38:	4b03      	ldr	r3, [pc, #12]	@ (8000d48 <SYS_InitMeasurement+0x14>)
 8000d3a:	4a04      	ldr	r2, [pc, #16]	@ (8000d4c <SYS_InitMeasurement+0x18>)
 8000d3c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000154 	.word	0x20000154
 8000d4c:	40012400 	.word	0x40012400

08000d50 <SYS_GetTemperatureLevel>:

  /* USER CODE END SYS_DeInitMeasurement_1 */
}

int16_t SYS_GetTemperatureLevel(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetTemperatureLevel_1 */

  /* USER CODE END SYS_GetTemperatureLevel_1 */
  __IO int16_t temperatureDegreeC = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	803b      	strh	r3, [r7, #0]
  uint32_t measuredLevel = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	607b      	str	r3, [r7, #4]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8000d5e:	f000 f869 	bl	8000e34 <SYS_GetBatteryLevel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	807b      	strh	r3, [r7, #2]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8000d66:	482d      	ldr	r0, [pc, #180]	@ (8000e1c <SYS_GetTemperatureLevel+0xcc>)
 8000d68:	f000 f898 	bl	8000e9c <ADC_ReadChannels>
 8000d6c:	6078      	str	r0, [r7, #4]

  /* convert ADC level to temperature */
  /* check whether device has temperature sensor calibrated in production */
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8000d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000e20 <SYS_GetTemperatureLevel+0xd0>)
 8000d70:	881a      	ldrh	r2, [r3, #0]
 8000d72:	4b2c      	ldr	r3, [pc, #176]	@ (8000e24 <SYS_GetTemperatureLevel+0xd4>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d026      	beq.n	8000dc8 <SYS_GetTemperatureLevel+0x78>
  {
    /* Device with temperature sensor calibrated in production:
       use device optimized parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8000d7a:	4b29      	ldr	r3, [pc, #164]	@ (8000e20 <SYS_GetTemperatureLevel+0xd0>)
 8000d7c:	881a      	ldrh	r2, [r3, #0]
 8000d7e:	4b29      	ldr	r3, [pc, #164]	@ (8000e24 <SYS_GetTemperatureLevel+0xd4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d01c      	beq.n	8000dc0 <SYS_GetTemperatureLevel+0x70>
 8000d86:	887b      	ldrh	r3, [r7, #2]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	4a25      	ldr	r2, [pc, #148]	@ (8000e28 <SYS_GetTemperatureLevel+0xd8>)
 8000d92:	fba2 2303 	umull	r2, r3, r2, r3
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b22      	ldr	r3, [pc, #136]	@ (8000e24 <SYS_GetTemperatureLevel+0xd4>)
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2264      	movs	r2, #100	@ 0x64
 8000da2:	fb03 f202 	mul.w	r2, r3, r2
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <SYS_GetTemperatureLevel+0xd0>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	4619      	mov	r1, r3
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <SYS_GetTemperatureLevel+0xd4>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	1acb      	subs	r3, r1, r3
 8000db2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	331e      	adds	r3, #30
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	e001      	b.n	8000dc4 <SYS_GetTemperatureLevel+0x74>
 8000dc0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8000dc4:	803b      	strh	r3, [r7, #0]
 8000dc6:	e01d      	b.n	8000e04 <SYS_GetTemperatureLevel+0xb4>
  }
  else
  {
    /* Device with temperature sensor not calibrated in production:
       use generic parameters */
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	fb03 f202 	mul.w	r2, r3, r2
 8000dd0:	4b16      	ldr	r3, [pc, #88]	@ (8000e2c <SYS_GetTemperatureLevel+0xdc>)
 8000dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8000dd6:	1ad2      	subs	r2, r2, r3
 8000dd8:	0852      	lsrs	r2, r2, #1
 8000dda:	4413      	add	r3, r2
 8000ddc:	0adb      	lsrs	r3, r3, #11
 8000dde:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	f5a3 2339 	sub.w	r3, r3, #757760	@ 0xb9000
 8000dea:	f5a3 630c 	sub.w	r3, r3, #2240	@ 0x8c0
 8000dee:	4a10      	ldr	r2, [pc, #64]	@ (8000e30 <SYS_GetTemperatureLevel+0xe0>)
 8000df0:	fb82 1203 	smull	r1, r2, r2, r3
 8000df4:	1292      	asrs	r2, r2, #10
 8000df6:	17db      	asrs	r3, r3, #31
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	331e      	adds	r3, #30
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	803b      	strh	r3, [r7, #0]
                                                              measuredLevel,
                                                              LL_ADC_RESOLUTION_12B);
  }

  /* from int16 to q8.7*/
  temperatureDegreeC <<= 8;
 8000e04:	883b      	ldrh	r3, [r7, #0]
 8000e06:	b21b      	sxth	r3, r3
 8000e08:	021b      	lsls	r3, r3, #8
 8000e0a:	b21b      	sxth	r3, r3
 8000e0c:	803b      	strh	r3, [r7, #0]

  return (int16_t) temperatureDegreeC;
 8000e0e:	883b      	ldrh	r3, [r7, #0]
 8000e10:	b21b      	sxth	r3, r3
  /* USER CODE BEGIN SYS_GetTemperatureLevel_2 */

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	b0001000 	.word	0xb0001000
 8000e20:	1fff75c8 	.word	0x1fff75c8
 8000e24:	1fff75a8 	.word	0x1fff75a8
 8000e28:	09ee009f 	.word	0x09ee009f
 8000e2c:	00100101 	.word	0x00100101
 8000e30:	68db8bad 	.word	0x68db8bad

08000e34 <SYS_GetBatteryLevel>:

uint16_t SYS_GetBatteryLevel(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8000e42:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <SYS_GetBatteryLevel+0x5c>)
 8000e44:	f000 f82a 	bl	8000e9c <ADC_ReadChannels>
 8000e48:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d102      	bne.n	8000e56 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	e016      	b.n	8000e84 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8000e56:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <SYS_GetBatteryLevel+0x60>)
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d00b      	beq.n	8000e7a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <SYS_GetBatteryLevel+0x60>)
 8000e64:	881b      	ldrh	r3, [r3, #0]
 8000e66:	461a      	mov	r2, r3
 8000e68:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8000e6c:	fb03 f202 	mul.w	r2, r3, r2
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	80fb      	strh	r3, [r7, #6]
 8000e78:	e004      	b.n	8000e84 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8000e7a:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <SYS_GetBatteryLevel+0x64>)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e82:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	b4002000 	.word	0xb4002000
 8000e94:	1fff75aa 	.word	0x1fff75aa
 8000e98:	004c08d8 	.word	0x004c08d8

08000e9c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8000eb4:	f7ff fec8 	bl	8000c48 <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8000eb8:	481a      	ldr	r0, [pc, #104]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000eba:	f002 fc38 	bl	800372e <HAL_ADCEx_Calibration_Start>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8000ec4:	f000 fb7a 	bl	80015bc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4812      	ldr	r0, [pc, #72]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000edc:	f002 f944 	bl	8003168 <HAL_ADC_ConfigChannel>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 8000ee6:	f000 fb69 	bl	80015bc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000eec:	f002 f820 	bl	8002f30 <HAL_ADC_Start>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 8000ef6:	f000 fb61 	bl	80015bc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000efa:	f04f 31ff 	mov.w	r1, #4294967295
 8000efe:	4809      	ldr	r0, [pc, #36]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000f00:	f002 f88e 	bl	8003020 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000f06:	f002 f859 	bl	8002fbc <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8000f0a:	4806      	ldr	r0, [pc, #24]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000f0c:	f002 f91f 	bl	800314e <HAL_ADC_GetValue>
 8000f10:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8000f12:	4804      	ldr	r0, [pc, #16]	@ (8000f24 <ADC_ReadChannels+0x88>)
 8000f14:	f001 ff80 	bl	8002e18 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8000f18:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000154 	.word	0x20000154

08000f28 <LL_AHB1_GRP1_EnableClock>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f34:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f44:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr

08000f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff ffe3 	bl	8000f28 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff ffe0 	bl	8000f28 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	200f      	movs	r0, #15
 8000f6e:	f002 fda6 	bl	8003abe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f72:	200f      	movs	r0, #15
 8000f74:	f002 fdbd 	bl	8003af2 <HAL_NVIC_EnableIRQ>

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000f88:	23ff      	movs	r3, #255	@ 0xff
 8000f8a:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000f92:	d311      	bcc.n	8000fb8 <FLASH_IF_Write+0x3c>
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <FLASH_IF_Write+0x48>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	029a      	lsls	r2, r3, #10
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <FLASH_IF_Write+0x4c>)
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d306      	bcc.n	8000fb8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	68f8      	ldr	r0, [r7, #12]
 8000fb0:	f000 f85a 	bl	8001068 <FLASH_IF_INT_Write>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 8000fb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	1fff75e0 	.word	0x1fff75e0
 8000fc8:	03fffc00 	.word	0x03fffc00

08000fcc <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8000fd8:	23ff      	movs	r3, #255	@ 0xff
 8000fda:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8000fe2:	d311      	bcc.n	8001008 <FLASH_IF_Read+0x3c>
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <FLASH_IF_Read+0x48>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	029a      	lsls	r2, r3, #10
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <FLASH_IF_Read+0x4c>)
 8000fec:	4013      	ands	r3, r2
 8000fee:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d306      	bcc.n	8001008 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	f000 f93a 	bl	8001278 <FLASH_IF_INT_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001008:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	1fff75e0 	.word	0x1fff75e0
 8001018:	03fffc00 	.word	0x03fffc00

0800101c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001026:	23ff      	movs	r3, #255	@ 0xff
 8001028:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001030:	d310      	bcc.n	8001054 <FLASH_IF_Erase+0x38>
 8001032:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <FLASH_IF_Erase+0x44>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	029a      	lsls	r2, r3, #10
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <FLASH_IF_Erase+0x48>)
 800103a:	4013      	ands	r3, r2
 800103c:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8001040:	3b01      	subs	r3, #1
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	4293      	cmp	r3, r2
 8001046:	d305      	bcc.n	8001054 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001048:	6839      	ldr	r1, [r7, #0]
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f000 f932 	bl	80012b4 <FLASH_IF_INT_Erase>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001054:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	1fff75e0 	.word	0x1fff75e0
 8001064:	03fffc00 	.word	0x03fffc00

08001068 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b090      	sub	sp, #64	@ 0x40
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t uSource = (uint32_t)pSource;
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t length = uLength;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00c      	beq.n	80010a6 <FLASH_IF_INT_Write+0x3e>
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <FLASH_IF_INT_Write+0x3e>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2b00      	cmp	r3, #0
 800109a:	d104      	bne.n	80010a6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80010a6:	f06f 0305 	mvn.w	r3, #5
 80010aa:	e0da      	b.n	8001262 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80010ac:	f000 f992 	bl	80013d4 <FLASH_IF_INT_Clear_Error>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (ret_status == FLASH_IF_OK)
 80010b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f040 80cf 	bne.w	800125e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80010c0:	f003 f96e 	bl	80043a0 <HAL_FLASH_Unlock>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 80c6 	bne.w	8001258 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80010cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ce:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80010d2:	4b66      	ldr	r3, [pc, #408]	@ (800126c <FLASH_IF_INT_Write+0x204>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	0299      	lsls	r1, r3, #10
 80010d8:	4b65      	ldr	r3, [pc, #404]	@ (8001270 <FLASH_IF_INT_Write+0x208>)
 80010da:	400b      	ands	r3, r1
 80010dc:	fbb2 f1f3 	udiv	r1, r2, r3
 80010e0:	fb01 f303 	mul.w	r3, r1, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 80010ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4413      	add	r3, r2
 80010f0:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a5d      	ldr	r2, [pc, #372]	@ (800126c <FLASH_IF_INT_Write+0x204>)
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	0291      	lsls	r1, r2, #10
 80010fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001270 <FLASH_IF_INT_Write+0x208>)
 80010fe:	400a      	ands	r2, r1
 8001100:	fbb3 f1f2 	udiv	r1, r3, r2
 8001104:	fb01 f202 	mul.w	r2, r1, r2
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	0ada      	lsrs	r2, r3, #11
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	3301      	adds	r3, #1
 8001112:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d905      	bls.n	8001126 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800111a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800111c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001120:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001124:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800112a:	e089      	b.n	8001240 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800112c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800112e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001132:	02db      	lsls	r3, r3, #11
 8001134:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001136:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001138:	68f8      	ldr	r0, [r7, #12]
 800113a:	f000 f925 	bl	8001388 <FLASH_IF_INT_IsEmpty>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d031      	beq.n	80011a8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001144:	4b4b      	ldr	r3, [pc, #300]	@ (8001274 <FLASH_IF_INT_Write+0x20c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d103      	bne.n	8001154 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800114c:	23fa      	movs	r3, #250	@ 0xfa
 800114e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001152:	e07e      	b.n	8001252 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001154:	4b47      	ldr	r3, [pc, #284]	@ (8001274 <FLASH_IF_INT_Write+0x20c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6939      	ldr	r1, [r7, #16]
 800115a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f88a 	bl	8001278 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001164:	4b43      	ldr	r3, [pc, #268]	@ (8001274 <FLASH_IF_INT_Write+0x20c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800116a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800116e:	4413      	add	r3, r2
 8001170:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001174:	b292      	uxth	r2, r2
 8001176:	4618      	mov	r0, r3
 8001178:	f019 fea6 	bl	801aec8 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f896 	bl	80012b4 <FLASH_IF_INT_Erase>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 800118e:	23fe      	movs	r3, #254	@ 0xfe
 8001190:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break; /* exit for loop */
 8001194:	e05d      	b.n	8001252 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 800119a:	4b36      	ldr	r3, [pc, #216]	@ (8001274 <FLASH_IF_INT_Write+0x20c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80011a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80011a4:	61fb      	str	r3, [r7, #28]
 80011a6:	e005      	b.n	80011b4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80011a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
          current_source = uSource;
 80011ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011ae:	623b      	str	r3, [r7, #32]
          current_length = length;
 80011b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011b2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80011b4:	2300      	movs	r3, #0
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011b8:	e026      	b.n	8001208 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80011ba:	6a3a      	ldr	r2, [r7, #32]
 80011bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011be:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80011c6:	2001      	movs	r0, #1
 80011c8:	f003 f8a6 	bl	8004318 <HAL_FLASH_Program>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d113      	bne.n	80011fa <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80011d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d8:	6a3a      	ldr	r2, [r7, #32]
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	4413      	add	r3, r2
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	4299      	cmp	r1, r3
 80011e4:	bf08      	it	eq
 80011e6:	4290      	cmpeq	r0, r2
 80011e8:	d003      	beq.n	80011f2 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 80011ea:	23fc      	movs	r3, #252	@ 0xfc
 80011ec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
              break;
 80011f0:	e00e      	b.n	8001210 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 80011f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f4:	3308      	adds	r3, #8
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f8:	e003      	b.n	8001202 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 80011fa:	23fc      	movs	r3, #252	@ 0xfc
 80011fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
            break;
 8001200:	e006      	b.n	8001210 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001204:	3308      	adds	r3, #8
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3d4      	bcc.n	80011ba <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001210:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8001214:	2b00      	cmp	r3, #0
 8001216:	d11b      	bne.n	8001250 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001218:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800121a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800121c:	4413      	add	r3, r2
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
        uSource += length;
 8001220:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001224:	4413      	add	r3, r2
 8001226:	637b      	str	r3, [r7, #52]	@ 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001232:	bf28      	it	cs
 8001234:	f44f 6300 	movcs.w	r3, #2048	@ 0x800
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800123a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123c:	3301      	adds	r3, #1
 800123e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4413      	add	r3, r2
 8001246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001248:	429a      	cmp	r2, r3
 800124a:	f4ff af6f 	bcc.w	800112c <FLASH_IF_INT_Write+0xc4>
 800124e:	e000      	b.n	8001252 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001250:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001252:	f003 f8c7 	bl	80043e4 <HAL_FLASH_Lock>
 8001256:	e002      	b.n	800125e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001258:	23fb      	movs	r3, #251	@ 0xfb
 800125a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800125e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8001262:	4618      	mov	r0, r3
 8001264:	3740      	adds	r7, #64	@ 0x40
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	1fff75e0 	.word	0x1fff75e0
 8001270:	03fffc00 	.word	0x03fffc00
 8001274:	200001b8 	.word	0x200001b8

08001278 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <FLASH_IF_INT_Read+0x1c>
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 8001294:	f06f 0305 	mvn.w	r3, #5
 8001298:	e008      	b.n	80012ac <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	68b9      	ldr	r1, [r7, #8]
 80012a2:	68f8      	ldr	r0, [r7, #12]
 80012a4:	f019 fe10 	bl	801aec8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80012a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80012d4:	f06f 0305 	mvn.w	r3, #5
 80012d8:	e04e      	b.n	8001378 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80012da:	f000 f87b 	bl	80013d4 <FLASH_IF_INT_Clear_Error>
 80012de:	4603      	mov	r3, r0
 80012e0:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 80012e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d144      	bne.n	8001374 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80012ea:	f003 f859 	bl	80043a0 <HAL_FLASH_Unlock>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d13d      	bne.n	8001370 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 80012f4:	2302      	movs	r3, #2
 80012f6:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <FLASH_IF_INT_Erase+0xcc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0299      	lsls	r1, r3, #10
 8001304:	4b1f      	ldr	r3, [pc, #124]	@ (8001384 <FLASH_IF_INT_Erase+0xd0>)
 8001306:	400b      	ands	r3, r1
 8001308:	fbb2 f1f3 	udiv	r1, r2, r3
 800130c:	fb01 f303 	mul.w	r3, r1, r3
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	0adb      	lsrs	r3, r3, #11
 8001314:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4413      	add	r3, r2
 800131c:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8001320:	3b01      	subs	r3, #1
 8001322:	4a17      	ldr	r2, [pc, #92]	@ (8001380 <FLASH_IF_INT_Erase+0xcc>)
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	0291      	lsls	r1, r2, #10
 8001328:	4a16      	ldr	r2, [pc, #88]	@ (8001384 <FLASH_IF_INT_Erase+0xd0>)
 800132a:	400a      	ands	r2, r1
 800132c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001330:	fb01 f202 	mul.w	r2, r1, r2
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	0ada      	lsrs	r2, r3, #11
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	3301      	adds	r3, #1
 800133e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001340:	f107 0214 	add.w	r2, r7, #20
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	4611      	mov	r1, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f003 f92a 	bl	80045a4 <HAL_FLASHEx_Erase>
 8001350:	4603      	mov	r3, r0
 8001352:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001354:	7fbb      	ldrb	r3, [r7, #30]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800135a:	7fbb      	ldrb	r3, [r7, #30]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d101      	bne.n	8001364 <FLASH_IF_INT_Erase+0xb0>
 8001360:	2301      	movs	r3, #1
 8001362:	e001      	b.n	8001368 <FLASH_IF_INT_Erase+0xb4>
 8001364:	f06f 0301 	mvn.w	r3, #1
 8001368:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800136a:	f003 f83b 	bl	80043e4 <HAL_FLASH_Lock>
 800136e:	e001      	b.n	8001374 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001370:	23fb      	movs	r3, #251	@ 0xfb
 8001372:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001374:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3720      	adds	r7, #32
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	1fff75e0 	.word	0x1fff75e0
 8001384:	03fffc00 	.word	0x03fffc00

08001388 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	e011      	b.n	80013c0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a6:	bf08      	it	eq
 80013a8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013ac:	d002      	beq.n	80013b4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80013ae:	2301      	movs	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
      break;
 80013b2:	e009      	b.n	80013c8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3308      	adds	r3, #8
 80013b8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3308      	adds	r3, #8
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d3e9      	bcc.n	800139c <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80013da:	23fb      	movs	r3, #251	@ 0xfb
 80013dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80013de:	f002 ffdf 	bl	80043a0 <HAL_FLASH_Unlock>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d110      	bne.n	800140a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <FLASH_IF_INT_Clear_Error+0x44>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001418 <FLASH_IF_INT_Clear_Error+0x44>)
 80013ee:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <FLASH_IF_INT_Clear_Error+0x44>)
 80013f6:	f24c 32fa 	movw	r2, #50170	@ 0xc3fa
 80013fa:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 80013fc:	f002 fff2 	bl	80043e4 <HAL_FLASH_Lock>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58004000 	.word	0x58004000

0800141c <LL_AHB2_GRP1_EnableClock>:
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001428:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800142a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4313      	orrs	r3, r2
 8001432:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4013      	ands	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001440:	68fb      	ldr	r3, [r7, #12]
}
 8001442:	bf00      	nop
 8001444:	3714      	adds	r7, #20
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff ffdb 	bl	800141c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2004      	movs	r0, #4
 8001468:	f7ff ffd8 	bl	800141c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001472:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001476:	f003 fb97 	bl	8004ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800147e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	4619      	mov	r1, r3
 8001490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001494:	f003 f95a 	bl	800474c <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014b0:	f023 0218 	bic.w	r2, r3, #24
 80014b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f001 f8e7 	bl	80026a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f815 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f7ff ffb9 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f7ff fd3d 	bl	8000f58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014de:	f000 fe99 	bl	8002214 <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 80014e2:	f008 f9a3 	bl	800982c <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80014e6:	f008 f9a9 	bl	800983c <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 80014ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f2:	f003 fb70 	bl	8004bd6 <HAL_GPIO_TogglePin>
	  HAL_Delay(250);
 80014f6:	20fa      	movs	r0, #250	@ 0xfa
 80014f8:	f000 fb9c 	bl	8001c34 <HAL_Delay>
    MX_LoRaWAN_Process();
 80014fc:	bf00      	nop
 80014fe:	e7f2      	b.n	80014e6 <main+0x1c>

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b09a      	sub	sp, #104	@ 0x68
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0320 	add.w	r3, r7, #32
 800150a:	2248      	movs	r2, #72	@ 0x48
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f01a ff9c 	bl	801c44c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	f107 0308 	add.w	r3, r7, #8
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001526:	f003 fb6f 	bl	8004c08 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff ffb8 	bl	80014a0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <SystemClock_Config+0xb8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001538:	4a1f      	ldr	r2, [pc, #124]	@ (80015b8 <SystemClock_Config+0xb8>)
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b1d      	ldr	r3, [pc, #116]	@ (80015b8 <SystemClock_Config+0xb8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 800154c:	232c      	movs	r3, #44	@ 0x2c
 800154e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001550:	2381      	movs	r3, #129	@ 0x81
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001558:	2300      	movs	r3, #0
 800155a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800155c:	23b0      	movs	r3, #176	@ 0xb0
 800155e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001568:	2300      	movs	r3, #0
 800156a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156c:	f107 0320 	add.w	r3, r7, #32
 8001570:	4618      	mov	r0, r3
 8001572:	f003 fe95 	bl	80052a0 <HAL_RCC_OscConfig>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800157c:	f000 f81e 	bl	80015bc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001580:	234f      	movs	r3, #79	@ 0x4f
 8001582:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001584:	2300      	movs	r3, #0
 8001586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	2102      	movs	r1, #2
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fa00 	bl	80059a4 <HAL_RCC_ClockConfig>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015aa:	f000 f807 	bl	80015bc <Error_Handler>
  }
}
 80015ae:	bf00      	nop
 80015b0:	3768      	adds	r7, #104	@ 0x68
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58000400 	.word	0x58000400

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <Error_Handler+0x8>

080015c8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr

080015e8 <LL_APB1_GRP1_EnableClock>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80015f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001604:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4013      	ands	r3, r2
 800160a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	222c      	movs	r2, #44	@ 0x2c
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f01a ff11 	bl	801c44c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800162a:	4b22      	ldr	r3, [pc, #136]	@ (80016b4 <MX_RTC_Init+0x9c>)
 800162c:	4a22      	ldr	r2, [pc, #136]	@ (80016b8 <MX_RTC_Init+0xa0>)
 800162e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001630:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001632:	221f      	movs	r2, #31
 8001634:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001636:	4b1f      	ldr	r3, [pc, #124]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_RTC_Init+0x9c>)
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001648:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_RTC_Init+0x9c>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800164e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001658:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800165c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800165e:	4815      	ldr	r0, [pc, #84]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001660:	f004 fe5c 	bl	800631c <HAL_RTC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800166a:	f7ff ffa7 	bl	80015bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800166e:	4811      	ldr	r0, [pc, #68]	@ (80016b4 <MX_RTC_Init+0x9c>)
 8001670:	f005 f952 	bl	8006918 <HAL_RTCEx_SetSSRU_IT>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800167a:	f7ff ff9f 	bl	80015bc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800167e:	2300      	movs	r3, #0
 8001680:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001686:	2300      	movs	r3, #0
 8001688:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800168a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800168e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001690:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001694:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	4619      	mov	r1, r3
 800169c:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_RTC_Init+0x9c>)
 800169e:	f004 febf 	bl	8006420 <HAL_RTC_SetAlarm_IT>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80016a8:	f7ff ff88 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	3730      	adds	r7, #48	@ 0x30
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200001bc 	.word	0x200001bc
 80016b8:	40002800 	.word	0x40002800

080016bc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b090      	sub	sp, #64	@ 0x40
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	2238      	movs	r2, #56	@ 0x38
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f01a febd 	bl	801c44c <memset>
  if(rtcHandle->Instance==RTC)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a16      	ldr	r2, [pc, #88]	@ (8001730 <HAL_RTC_MspInit+0x74>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d125      	bne.n	8001728 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016e6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f004 fcfb 	bl	80060e8 <HAL_RCCEx_PeriphCLKConfig>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016f8:	f7ff ff60 	bl	80015bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016fc:	f7ff ff64 	bl	80015c8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001700:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001704:	f7ff ff70 	bl	80015e8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2100      	movs	r1, #0
 800170c:	2002      	movs	r0, #2
 800170e:	f002 f9d6 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001712:	2002      	movs	r0, #2
 8001714:	f002 f9ed 	bl	8003af2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2100      	movs	r1, #0
 800171c:	202a      	movs	r0, #42	@ 0x2a
 800171e:	f002 f9ce 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001722:	202a      	movs	r0, #42	@ 0x2a
 8001724:	f002 f9e5 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001728:	bf00      	nop
 800172a:	3740      	adds	r7, #64	@ 0x40
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40002800 	.word	0x40002800

08001734 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 800173a:	2201      	movs	r2, #1
 800173c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	58000400 	.word	0x58000400

0800174c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001768:	f000 fff4 	bl	8002754 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800176c:	f7ff ffe2 	bl	8001734 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001770:	2001      	movs	r0, #1
 8001772:	f003 fadb 	bl	8004d2c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}

0800177a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800177e:	f000 fff7 	bl	8002770 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001782:	f000 fee3 	bl	800254c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}

0800178a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800178e:	f000 ffe1 	bl	8002754 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001792:	2101      	movs	r1, #1
 8001794:	2000      	movs	r0, #0
 8001796:	f003 fa45 	bl	8004c24 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}

0800179e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80017a2:	f000 ffe5 	bl	8002770 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017ba:	bf00      	nop
 80017bc:	e7fd      	b.n	80017ba <NMI_Handler+0x4>

080017be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c2:	bf00      	nop
 80017c4:	e7fd      	b.n	80017c2 <HardFault_Handler+0x4>

080017c6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ca:	bf00      	nop
 80017cc:	e7fd      	b.n	80017ca <MemManage_Handler+0x4>

080017ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d2:	bf00      	nop
 80017d4:	e7fd      	b.n	80017d2 <BusFault_Handler+0x4>

080017d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017da:	bf00      	nop
 80017dc:	e7fd      	b.n	80017da <UsageFault_Handler+0x4>

080017de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ea:	b480      	push	{r7}
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bc80      	pop	{r7}
 80017f4:	4770      	bx	lr

080017f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001816:	f005 f8bb 	bl	8006990 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001bc 	.word	0x200001bc

08001824 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <DMA1_Channel5_IRQHandler+0x10>)
 800182a:	f002 fc05 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000029c 	.word	0x2000029c

08001838 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <USART2_IRQHandler+0x10>)
 800183e:	f005 fefb 	bl	8007638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000208 	.word	0x20000208

0800184c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <RTC_Alarm_IRQHandler+0x10>)
 8001852:	f004 ff4d 	bl	80066f0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200001bc 	.word	0x200001bc

08001860 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001866:	f005 fc01 	bl	800706c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200001f4 	.word	0x200001f4

08001874 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800187c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001880:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001882:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4313      	orrs	r3, r2
 800188a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800188c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001890:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4013      	ands	r3, r2
 8001896:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001898:	68fb      	ldr	r3, [r7, #12]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <MX_SUBGHZ_Init+0x20>)
 80018aa:	2208      	movs	r2, #8
 80018ac:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	@ (80018c4 <MX_SUBGHZ_Init+0x20>)
 80018b0:	f005 f95a 	bl	8006b68 <HAL_SUBGHZ_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80018ba:	f7ff fe7f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200001f4 	.word	0x200001f4

080018c8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80018d0:	2001      	movs	r0, #1
 80018d2:	f7ff ffcf 	bl	8001874 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2100      	movs	r1, #0
 80018da:	2032      	movs	r0, #50	@ 0x32
 80018dc:	f002 f8ef 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80018e0:	2032      	movs	r0, #50	@ 0x32
 80018e2:	f002 f906 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <LL_RCC_SetClkAfterWakeFromStop>:
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001918:	4b02      	ldr	r3, [pc, #8]	@ (8001924 <LL_FLASH_GetUDN+0x10>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	1fff7580 	.word	0x1fff7580

08001928 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <LL_FLASH_GetDeviceID+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b2db      	uxtb	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	1fff7584 	.word	0x1fff7584

08001940 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <LL_FLASH_GetSTCompanyID+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	0a1b      	lsrs	r3, r3, #8
}
 800194a:	4618      	mov	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	1fff7584 	.word	0x1fff7584

08001958 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ffc6 	bl	80018ee <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001962:	f01a f83d 	bl	801b9e0 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001966:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <SystemApp_Init+0x50>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 800196c:	f000 f982 	bl	8001c74 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001970:	f01a fac6 	bl	801bf00 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <SystemApp_Init+0x54>)
 8001976:	f01a fb71 	bl	801c05c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800197a:	4b0d      	ldr	r3, [pc, #52]	@ (80019b0 <SystemApp_Init+0x58>)
 800197c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001980:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001982:	2002      	movs	r0, #2
 8001984:	f01a fb78 	bl	801c078 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001988:	f7ff f9d4 	bl	8000d34 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 800198c:	f000 f9b2 	bl	8001cf4 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001990:	f019 f9f4 	bl	801ad7c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001994:	2101      	movs	r1, #1
 8001996:	2001      	movs	r0, #1
 8001998:	f019 fa30 	bl	801adfc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800199c:	2101      	movs	r1, #1
 800199e:	2001      	movs	r0, #1
 80019a0:	f019 f9fc 	bl	801ad9c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000200 	.word	0x20000200
 80019ac:	08001b81 	.word	0x08001b81
 80019b0:	58004000 	.word	0x58004000

080019b4 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80019b8:	f019 fa50 	bl	801ae5c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80019ca:	f7ff fa33 	bl	8000e34 <SYS_GetBatteryLevel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80019d2:	88bb      	ldrh	r3, [r7, #4]
 80019d4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80019d8:	4293      	cmp	r3, r2
 80019da:	d902      	bls.n	80019e2 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80019dc:	23fe      	movs	r3, #254	@ 0xfe
 80019de:	71fb      	strb	r3, [r7, #7]
 80019e0:	e014      	b.n	8001a0c <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 80019e8:	d202      	bcs.n	80019f0 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	71fb      	strb	r3, [r7, #7]
 80019ee:	e00d      	b.n	8001a0c <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80019f0:	88bb      	ldrh	r3, [r7, #4]
 80019f2:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 80019f6:	461a      	mov	r2, r3
 80019f8:	4613      	mov	r3, r2
 80019fa:	01db      	lsls	r3, r3, #7
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b05      	ldr	r3, [pc, #20]	@ (8001a18 <GetBatteryLevel+0x58>)
 8001a04:	fba3 2302 	umull	r2, r3, r3, r2
 8001a08:	09db      	lsrs	r3, r3, #7
 8001a0a:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	1b4e81b5 	.word	0x1b4e81b5

08001a1c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001a22:	2300      	movs	r3, #0
 8001a24:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f931 	bl	8001c90 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe ff23 	bl	800087c <__aeabi_f2iz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001a3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001a46:	b590      	push	{r4, r7, lr}
 8001a48:	b087      	sub	sp, #28
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001a52:	f7ff ff5f 	bl	8001914 <LL_FLASH_GetUDN>
 8001a56:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5e:	d138      	bne.n	8001ad2 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001a60:	f000 fe94 	bl	800278c <HAL_GetUIDw0>
 8001a64:	4604      	mov	r4, r0
 8001a66:	f000 fea5 	bl	80027b4 <HAL_GetUIDw2>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4423      	add	r3, r4
 8001a6e:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001a70:	f000 fe96 	bl	80027a0 <HAL_GetUIDw1>
 8001a74:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	0e1a      	lsrs	r2, r3, #24
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3307      	adds	r3, #7
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	0c1a      	lsrs	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3306      	adds	r3, #6
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	0a1a      	lsrs	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3305      	adds	r3, #5
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	0e1a      	lsrs	r2, r3, #24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3303      	adds	r3, #3
 8001aac:	b2d2      	uxtb	r2, r2
 8001aae:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0c1a      	lsrs	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	0a1a      	lsrs	r2, r3, #8
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001ad0:	e031      	b.n	8001b36 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	3307      	adds	r3, #7
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	0a1a      	lsrs	r2, r3, #8
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3306      	adds	r3, #6
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	0c1a      	lsrs	r2, r3, #16
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3305      	adds	r3, #5
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	0e1a      	lsrs	r2, r3, #24
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3304      	adds	r3, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001b00:	f7ff ff12 	bl	8001928 <LL_FLASH_GetDeviceID>
 8001b04:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3303      	adds	r3, #3
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001b10:	f7ff ff16 	bl	8001940 <LL_FLASH_GetSTCompanyID>
 8001b14:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	3302      	adds	r3, #2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	0a1a      	lsrs	r2, r3, #8
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	0c1b      	lsrs	r3, r3, #16
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	701a      	strb	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	371c      	adds	r7, #28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}

08001b3e <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8001b3e:	b590      	push	{r4, r7, lr}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 8001b46:	f7ff fee5 	bl	8001914 <LL_FLASH_GetUDN>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d10d      	bne.n	8001b76 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001b5a:	f000 fe17 	bl	800278c <HAL_GetUIDw0>
 8001b5e:	4604      	mov	r4, r0
 8001b60:	f000 fe1e 	bl	80027a0 <HAL_GetUIDw1>
 8001b64:	4603      	mov	r3, r0
 8001b66:	405c      	eors	r4, r3
 8001b68:	f000 fe24 	bl	80027b4 <HAL_GetUIDw2>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	ea84 0203 	eor.w	r2, r4, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd90      	pop	{r4, r7, pc}
	...

08001b80 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001b8a:	f107 0308 	add.w	r3, r7, #8
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f019 fa74 	bl	801b07c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b9a:	9200      	str	r2, [sp, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <TimestampNow+0x3c>)
 8001b9e:	2110      	movs	r1, #16
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f81d 	bl	8001be0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7fe fae6 	bl	8000178 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0801c5c0 	.word	0x0801c5c0

08001bc0 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f019 f8e8 	bl	801ad9c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f019 f8e0 	bl	801ad9c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001be0:	b40c      	push	{r2, r3}
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
 8001bea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001bf2:	6839      	ldr	r1, [r7, #0]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f019 fc11 	bl	801b420 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c08:	b002      	add	sp, #8
 8001c0a:	4770      	bx	lr

08001c0c <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c16:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_GetTick+0x24>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001c1e:	f000 f935 	bl	8001e8c <TIMER_IF_GetTimerValue>
 8001c22:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000200 	.word	0x20000200

08001c34 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 f9ab 	bl	8001f9a <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c56:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001c5a:	4905      	ldr	r1, [pc, #20]	@ (8001c70 <LL_EXTI_EnableIT_32_63+0x24>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	58000800 	.word	0x58000800

08001c74 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001c78:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001c7c:	f7ff ffe6 	bl	8001c4c <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c80:	f000 fda2 	bl	80027c8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c84:	f000 fda6 	bl	80027d4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001c88:	f000 fdaa 	bl	80027e0 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001c98:	4b11      	ldr	r3, [pc, #68]	@ (8001ce0 <EnvSensors_Read+0x50>)
 8001c9a:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <EnvSensors_Read+0x54>)
 8001c9e:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <EnvSensors_Read+0x58>)
 8001ca2:	60fb      	str	r3, [r7, #12]
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001ca4:	f7ff f854 	bl	8000d50 <SYS_GetTemperatureLevel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	121b      	asrs	r3, r3, #8
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7fe fd90 	bl	80007d4 <__aeabi_i2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	613b      	str	r3, [r7, #16]
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <EnvSensors_Read+0x5c>)
 8001cce:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a07      	ldr	r2, [pc, #28]	@ (8001cf0 <EnvSensors_Read+0x60>)
 8001cd4:	611a      	str	r2, [r3, #16]

  return 0;
 8001cd6:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	42480000 	.word	0x42480000
 8001ce4:	41900000 	.word	0x41900000
 8001ce8:	447a0000 	.word	0x447a0000
 8001cec:	003e090d 	.word	0x003e090d
 8001cf0:	000503ab 	.word	0x000503ab

08001cf4 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
 8001cfe:	687b      	ldr	r3, [r7, #4]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <TIMER_IF_Init+0x5c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d01b      	beq.n	8001d7c <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d44:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <TIMER_IF_Init+0x60>)
 8001d46:	f04f 32ff 	mov.w	r2, #4294967295
 8001d4a:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001d4c:	f7ff fc64 	bl	8001618 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001d50:	f000 f856 	bl	8001e00 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001d54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d58:	480c      	ldr	r0, [pc, #48]	@ (8001d8c <TIMER_IF_Init+0x60>)
 8001d5a:	f004 fc6d 	bl	8006638 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <TIMER_IF_Init+0x60>)
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001d66:	4809      	ldr	r0, [pc, #36]	@ (8001d8c <TIMER_IF_Init+0x60>)
 8001d68:	f004 fda4 	bl	80068b4 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	f000 f9d3 	bl	8002118 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001d72:	f000 f85f 	bl	8001e34 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001d76:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <TIMER_IF_Init+0x5c>)
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000201 	.word	0x20000201
 8001d8c:	200001bc 	.word	0x200001bc

08001d90 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08e      	sub	sp, #56	@ 0x38
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001d9e:	f107 0308 	add.w	r3, r7, #8
 8001da2:	222c      	movs	r2, #44	@ 0x2c
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f01a fb50 	bl	801c44c <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001dac:	f000 f828 	bl	8001e00 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <TIMER_IF_StartTimer+0x68>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	4413      	add	r3, r2
 8001db8:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001dc8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001dcc:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001dce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dd2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001dd4:	f107 0308 	add.w	r3, r7, #8
 8001dd8:	2201      	movs	r2, #1
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	@ (8001dfc <TIMER_IF_StartTimer+0x6c>)
 8001dde:	f004 fb1f 	bl	8006420 <HAL_RTC_SetAlarm_IT>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001de8:	f7ff fbe8 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001dec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3738      	adds	r7, #56	@ 0x38
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000204 	.word	0x20000204
 8001dfc:	200001bc 	.word	0x200001bc

08001e00 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <TIMER_IF_StopTimer+0x2c>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e14:	4806      	ldr	r0, [pc, #24]	@ (8001e30 <TIMER_IF_StopTimer+0x30>)
 8001e16:	f004 fc0f 	bl	8006638 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e1a:	4b05      	ldr	r3, [pc, #20]	@ (8001e30 <TIMER_IF_StopTimer+0x30>)
 8001e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e20:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001e22:	79fb      	ldrb	r3, [r7, #7]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40002800 	.word	0x40002800
 8001e30:	200001bc 	.word	0x200001bc

08001e34 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001e38:	f000 f98e 	bl	8002158 <GetTimerTicks>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4a03      	ldr	r2, [pc, #12]	@ (8001e4c <TIMER_IF_SetTimerContext+0x18>)
 8001e40:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e42:	4b02      	ldr	r3, [pc, #8]	@ (8001e4c <TIMER_IF_SetTimerContext+0x18>)
 8001e44:	681b      	ldr	r3, [r3, #0]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000204 	.word	0x20000204

08001e50 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001e54:	4b02      	ldr	r3, [pc, #8]	@ (8001e60 <TIMER_IF_GetTimerContext+0x10>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000204 	.word	0x20000204

08001e64 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001e6e:	f000 f973 	bl	8002158 <GetTimerTicks>
 8001e72:	4602      	mov	r2, r0
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000204 	.word	0x20000204

08001e8c <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <TIMER_IF_GetTimerValue+0x24>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001e9e:	f000 f95b 	bl	8002158 <GetTimerTicks>
 8001ea2:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001ea4:	687b      	ldr	r3, [r7, #4]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000201 	.word	0x20000201

08001eb4 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001ec2:	687b      	ldr	r3, [r7, #4]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr

08001ece <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001ece:	b5b0      	push	{r4, r5, r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	2000      	movs	r0, #0
 8001ede:	460a      	mov	r2, r1
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	0d95      	lsrs	r5, r2, #22
 8001ee4:	0294      	lsls	r4, r2, #10
 8001ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	4620      	mov	r0, r4
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	f7fe fce9 	bl	80008c8 <__aeabi_uldivmod>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4613      	mov	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001efe:	68fb      	ldr	r3, [r7, #12]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bdb0      	pop	{r4, r5, r7, pc}

08001f08 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001f08:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f0c:	b085      	sub	sp, #20
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001f12:	2100      	movs	r1, #0
 8001f14:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	2000      	movs	r0, #0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	4605      	mov	r5, r0
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f04f 0a00 	mov.w	sl, #0
 8001f26:	f04f 0b00 	mov.w	fp, #0
 8001f2a:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001f2e:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001f32:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001f36:	4650      	mov	r0, sl
 8001f38:	4659      	mov	r1, fp
 8001f3a:	1b02      	subs	r2, r0, r4
 8001f3c:	eb61 0305 	sbc.w	r3, r1, r5
 8001f40:	f04f 0000 	mov.w	r0, #0
 8001f44:	f04f 0100 	mov.w	r1, #0
 8001f48:	0099      	lsls	r1, r3, #2
 8001f4a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f4e:	0090      	lsls	r0, r2, #2
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	eb12 0804 	adds.w	r8, r2, r4
 8001f58:	eb43 0905 	adc.w	r9, r3, r5
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f70:	4690      	mov	r8, r2
 8001f72:	4699      	mov	r9, r3
 8001f74:	4640      	mov	r0, r8
 8001f76:	4649      	mov	r1, r9
 8001f78:	f04f 0200 	mov.w	r2, #0
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	0a82      	lsrs	r2, r0, #10
 8001f82:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001f86:	0a8b      	lsrs	r3, r1, #10
 8001f88:	4613      	mov	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001f98:	4770      	bx	lr

08001f9a <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ff93 	bl	8001ece <TIMER_IF_Convert_ms2Tick>
 8001fa8:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001faa:	f000 f8d5 	bl	8002158 <GetTimerTicks>
 8001fae:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fb0:	e000      	b.n	8001fb4 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001fb2:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001fb4:	f000 f8d0 	bl	8002158 <GetTimerTicks>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d8f6      	bhi.n	8001fb2 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001fd6:	f019 fe51 	bl	801bc7c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b084      	sub	sp, #16
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001fea:	f000 f8a5 	bl	8002138 <TIMER_IF_BkUp_Read_MSBticks>
 8001fee:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 f88f 	bl	8002118 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002002:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002006:	b08c      	sub	sp, #48	@ 0x30
 8002008:	af00      	add	r7, sp, #0
 800200a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002010:	f000 f8a2 	bl	8002158 <GetTimerTicks>
 8002014:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002016:	f000 f88f 	bl	8002138 <TIMER_IF_BkUp_Read_MSBticks>
 800201a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	2200      	movs	r2, #0
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	60fa      	str	r2, [r7, #12]
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	68b9      	ldr	r1, [r7, #8]
 800202e:	000b      	movs	r3, r1
 8002030:	2200      	movs	r2, #0
 8002032:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002034:	2000      	movs	r0, #0
 8002036:	460c      	mov	r4, r1
 8002038:	4605      	mov	r5, r0
 800203a:	eb12 0804 	adds.w	r8, r2, r4
 800203e:	eb43 0905 	adc.w	r9, r3, r5
 8002042:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002046:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	0a82      	lsrs	r2, r0, #10
 8002054:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002058:	0a8b      	lsrs	r3, r1, #10
 800205a:	4613      	mov	r3, r2
 800205c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2200      	movs	r2, #0
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800206c:	f04f 0b00 	mov.w	fp, #0
 8002070:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff46 	bl	8001f08 <TIMER_IF_Convert_Tick2ms>
 800207c:	4603      	mov	r3, r0
 800207e:	b29a      	uxth	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002086:	4618      	mov	r0, r3
 8002088:	3730      	adds	r7, #48	@ 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002090 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	2100      	movs	r1, #0
 800209c:	4803      	ldr	r0, [pc, #12]	@ (80020ac <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800209e:	f004 fc9b 	bl	80069d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	200001bc 	.word	0x200001bc

080020b0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	2101      	movs	r1, #1
 80020bc:	4803      	ldr	r0, [pc, #12]	@ (80020cc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 80020be:	f004 fc8b 	bl	80069d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001bc 	.word	0x200001bc

080020d0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80020da:	2100      	movs	r1, #0
 80020dc:	4804      	ldr	r0, [pc, #16]	@ (80020f0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 80020de:	f004 fc93 	bl	8006a08 <HAL_RTCEx_BKUPRead>
 80020e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	200001bc 	.word	0x200001bc

080020f4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80020fe:	2101      	movs	r1, #1
 8002100:	4804      	ldr	r0, [pc, #16]	@ (8002114 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002102:	f004 fc81 	bl	8006a08 <HAL_RTCEx_BKUPRead>
 8002106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002108:	687b      	ldr	r3, [r7, #4]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200001bc 	.word	0x200001bc

08002118 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	2102      	movs	r1, #2
 8002124:	4803      	ldr	r0, [pc, #12]	@ (8002134 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002126:	f004 fc57 	bl	80069d8 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	200001bc 	.word	0x200001bc

08002138 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800213e:	2102      	movs	r1, #2
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002142:	f004 fc61 	bl	8006a08 <HAL_RTCEx_BKUPRead>
 8002146:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002148:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200001bc 	.word	0x200001bc

08002158 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 800215e:	480b      	ldr	r0, [pc, #44]	@ (800218c <GetTimerTicks+0x34>)
 8002160:	f7ff fdd9 	bl	8001d16 <LL_RTC_TIME_GetSubSecond>
 8002164:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002166:	e003      	b.n	8002170 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002168:	4808      	ldr	r0, [pc, #32]	@ (800218c <GetTimerTicks+0x34>)
 800216a:	f7ff fdd4 	bl	8001d16 <LL_RTC_TIME_GetSubSecond>
 800216e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002170:	4806      	ldr	r0, [pc, #24]	@ (800218c <GetTimerTicks+0x34>)
 8002172:	f7ff fdd0 	bl	8001d16 <LL_RTC_TIME_GetSubSecond>
 8002176:	4602      	mov	r2, r0
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4293      	cmp	r3, r2
 800217c:	d1f4      	bne.n	8002168 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40002800 	.word	0x40002800

08002190 <LL_AHB2_GRP1_EnableClock>:
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800219c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800219e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4013      	ands	r3, r2
 80021b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b4:	68fb      	ldr	r3, [r7, #12]
}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bc80      	pop	{r7}
 80021be:	4770      	bx	lr

080021c0 <LL_APB1_GRP1_EnableClock>:
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80021c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80021d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021e4:	68fb      	ldr	r3, [r7, #12]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr

080021f0 <LL_APB1_GRP1_DisableClock>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80021f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021fc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	43db      	mvns	r3, r3
 8002202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002206:	4013      	ands	r3, r2
 8002208:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b22      	ldr	r3, [pc, #136]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 800221a:	4a23      	ldr	r2, [pc, #140]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800221e:	4b21      	ldr	r3, [pc, #132]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002220:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002226:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222c:	4b1d      	ldr	r3, [pc, #116]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 800222e:	2200      	movs	r2, #0
 8002230:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002232:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 800223a:	220c      	movs	r2, #12
 800223c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002244:	4b17      	ldr	r3, [pc, #92]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002246:	2200      	movs	r2, #0
 8002248:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224a:	4b16      	ldr	r3, [pc, #88]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 800224c:	2200      	movs	r2, #0
 800224e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002250:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002252:	2200      	movs	r2, #0
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002256:	4b13      	ldr	r3, [pc, #76]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002258:	2200      	movs	r2, #0
 800225a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800225c:	4811      	ldr	r0, [pc, #68]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 800225e:	f005 f8ce 	bl	80073fe <HAL_UART_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002268:	f7ff f9a8 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800226c:	2100      	movs	r1, #0
 800226e:	480d      	ldr	r0, [pc, #52]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002270:	f007 f9f1 	bl	8009656 <HAL_UARTEx_SetTxFifoThreshold>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800227a:	f7ff f99f 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800227e:	2100      	movs	r1, #0
 8002280:	4808      	ldr	r0, [pc, #32]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002282:	f007 fa26 	bl	80096d2 <HAL_UARTEx_SetRxFifoThreshold>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800228c:	f7ff f996 	bl	80015bc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002290:	4804      	ldr	r0, [pc, #16]	@ (80022a4 <MX_USART2_UART_Init+0x90>)
 8002292:	f007 f9a5 	bl	80095e0 <HAL_UARTEx_EnableFifoMode>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800229c:	f7ff f98e 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	20000208 	.word	0x20000208
 80022a8:	40004400 	.word	0x40004400

080022ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b096      	sub	sp, #88	@ 0x58
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	605a      	str	r2, [r3, #4]
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	60da      	str	r2, [r3, #12]
 80022c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022c4:	f107 030c 	add.w	r3, r7, #12
 80022c8:	2238      	movs	r2, #56	@ 0x38
 80022ca:	2100      	movs	r1, #0
 80022cc:	4618      	mov	r0, r3
 80022ce:	f01a f8bd 	bl	801c44c <memset>
  if(uartHandle->Instance==USART2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <HAL_UART_MspInit+0xe8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d157      	bne.n	800238c <HAL_UART_MspInit+0xe0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80022dc:	2302      	movs	r3, #2
 80022de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80022e0:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80022e4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022e6:	f107 030c 	add.w	r3, r7, #12
 80022ea:	4618      	mov	r0, r3
 80022ec:	f003 fefc 	bl	80060e8 <HAL_RCCEx_PeriphCLKConfig>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80022f6:	f7ff f961 	bl	80015bc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80022fe:	f7ff ff5f 	bl	80021c0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002302:	2001      	movs	r0, #1
 8002304:	f7ff ff44 	bl	8002190 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USARTx_TX_Pin|USARTx_RX_Pin;
 8002308:	230c      	movs	r3, #12
 800230a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002318:	2307      	movs	r3, #7
 800231a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002320:	4619      	mov	r1, r3
 8002322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002326:	f002 fa11 	bl	800474c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 800232a:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_UART_MspInit+0xec>)
 800232c:	4a1b      	ldr	r2, [pc, #108]	@ (800239c <HAL_UART_MspInit+0xf0>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002330:	4b19      	ldr	r3, [pc, #100]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002332:	2214      	movs	r2, #20
 8002334:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002338:	2210      	movs	r2, #16
 800233a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <HAL_UART_MspInit+0xec>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002344:	2280      	movs	r2, #128	@ 0x80
 8002346:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002348:	4b13      	ldr	r3, [pc, #76]	@ (8002398 <HAL_UART_MspInit+0xec>)
 800234a:	2200      	movs	r2, #0
 800234c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800234e:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002350:	2200      	movs	r2, #0
 8002352:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002354:	4b10      	ldr	r3, [pc, #64]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002356:	2200      	movs	r2, #0
 8002358:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800235a:	4b0f      	ldr	r3, [pc, #60]	@ (8002398 <HAL_UART_MspInit+0xec>)
 800235c:	2200      	movs	r2, #0
 800235e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002360:	480d      	ldr	r0, [pc, #52]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002362:	f001 fbef 	bl	8003b44 <HAL_DMA_Init>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 800236c:	f7ff f926 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a09      	ldr	r2, [pc, #36]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002374:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002376:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_UART_MspInit+0xec>)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800237c:	2200      	movs	r2, #0
 800237e:	2102      	movs	r1, #2
 8002380:	2025      	movs	r0, #37	@ 0x25
 8002382:	f001 fb9c 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002386:	2025      	movs	r0, #37	@ 0x25
 8002388:	f001 fbb3 	bl	8003af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800238c:	bf00      	nop
 800238e:	3758      	adds	r7, #88	@ 0x58
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40004400 	.word	0x40004400
 8002398:	2000029c 	.word	0x2000029c
 800239c:	40020058 	.word	0x40020058

080023a0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a0b      	ldr	r2, [pc, #44]	@ (80023dc <HAL_UART_MspDeInit+0x3c>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d110      	bne.n	80023d4 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80023b2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80023b6:	f7ff ff1b 	bl	80021f0 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_TX_Pin|USARTx_RX_Pin);
 80023ba:	210c      	movs	r1, #12
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f002 fb24 	bl	8004a0c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 fc63 	bl	8003c94 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80023ce:	2025      	movs	r0, #37	@ 0x25
 80023d0:	f001 fb9d 	bl	8003b0e <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40004400 	.word	0x40004400

080023e0 <LL_APB1_GRP1_ForceReset>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <LL_APB1_GRP1_ReleaseReset>:
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800240a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800240e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	43db      	mvns	r3, r3
 8002414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002418:	4013      	ands	r3, r2
 800241a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
	...

08002428 <LL_EXTI_EnableIT_0_31>:
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <LL_EXTI_EnableIT_0_31+0x24>)
 8002432:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002436:	4905      	ldr	r1, [pc, #20]	@ (800244c <LL_EXTI_EnableIT_0_31+0x24>)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4313      	orrs	r3, r2
 800243c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	58000800 	.word	0x58000800

08002450 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002458:	4a07      	ldr	r2, [pc, #28]	@ (8002478 <vcom_Init+0x28>)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800245e:	f7fe fd7b 	bl	8000f58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002462:	f7ff fed7 	bl	8002214 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8002466:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800246a:	f7ff ffdd 	bl	8002428 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800246e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20000300 	.word	0x20000300

0800247c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002480:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002484:	f7ff ffac 	bl	80023e0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8002488:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800248c:	f7ff ffb9 	bl	8002402 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002490:	4804      	ldr	r0, [pc, #16]	@ (80024a4 <vcom_DeInit+0x28>)
 8002492:	f7ff ff85 	bl	80023a0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002496:	200f      	movs	r0, #15
 8002498:	f001 fb39 	bl	8003b0e <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800249c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800249e:	4618      	mov	r0, r3
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000208 	.word	0x20000208

080024a8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	460b      	mov	r3, r1
 80024b2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	461a      	mov	r2, r3
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4804      	ldr	r0, [pc, #16]	@ (80024cc <vcom_Trace_DMA+0x24>)
 80024bc:	f005 f83c 	bl	8007538 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80024c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000208 	.word	0x20000208

080024d0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80024d8:	4a19      	ldr	r2, [pc, #100]	@ (8002540 <vcom_ReceiveInit+0x70>)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80024de:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80024e2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80024ec:	4815      	ldr	r0, [pc, #84]	@ (8002544 <vcom_ReceiveInit+0x74>)
 80024ee:	f006 ffea 	bl	80094c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80024f2:	bf00      	nop
 80024f4:	4b13      	ldr	r3, [pc, #76]	@ (8002544 <vcom_ReceiveInit+0x74>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002502:	d0f7      	beq.n	80024f4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002504:	bf00      	nop
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <vcom_ReceiveInit+0x74>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69db      	ldr	r3, [r3, #28]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002510:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002514:	d1f7      	bne.n	8002506 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <vcom_ReceiveInit+0x74>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <vcom_ReceiveInit+0x74>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002524:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002526:	4807      	ldr	r0, [pc, #28]	@ (8002544 <vcom_ReceiveInit+0x74>)
 8002528:	f007 f828 	bl	800957c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	4906      	ldr	r1, [pc, #24]	@ (8002548 <vcom_ReceiveInit+0x78>)
 8002530:	4804      	ldr	r0, [pc, #16]	@ (8002544 <vcom_ReceiveInit+0x74>)
 8002532:	f004 ffb5 	bl	80074a0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002536:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000304 	.word	0x20000304
 8002544:	20000208 	.word	0x20000208
 8002548:	200002fc 	.word	0x200002fc

0800254c <vcom_Resume>:

void vcom_Resume(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002550:	4808      	ldr	r0, [pc, #32]	@ (8002574 <vcom_Resume+0x28>)
 8002552:	f004 ff54 	bl	80073fe <HAL_UART_Init>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <vcom_Resume+0x14>
  {
    Error_Handler();
 800255c:	f7ff f82e 	bl	80015bc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002560:	4805      	ldr	r0, [pc, #20]	@ (8002578 <vcom_Resume+0x2c>)
 8002562:	f001 faef 	bl	8003b44 <HAL_DMA_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <vcom_Resume+0x24>
  {
    Error_Handler();
 800256c:	f7ff f826 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000208 	.word	0x20000208
 8002578:	2000029c 	.word	0x2000029c

0800257c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a05      	ldr	r2, [pc, #20]	@ (80025a0 <HAL_UART_TxCpltCallback+0x24>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d103      	bne.n	8002596 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <HAL_UART_TxCpltCallback+0x28>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2000      	movs	r0, #0
 8002594:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002596:	bf00      	nop
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40004400 	.word	0x40004400
 80025a4:	20000300 	.word	0x20000300

080025a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0d      	ldr	r2, [pc, #52]	@ (80025ec <HAL_UART_RxCpltCallback+0x44>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d113      	bne.n	80025e2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80025ba:	4b0d      	ldr	r3, [pc, #52]	@ (80025f0 <HAL_UART_RxCpltCallback+0x48>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_UART_RxCpltCallback+0x30>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d105      	bne.n	80025d8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80025cc:	4b08      	ldr	r3, [pc, #32]	@ (80025f0 <HAL_UART_RxCpltCallback+0x48>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2200      	movs	r2, #0
 80025d2:	2101      	movs	r1, #1
 80025d4:	4807      	ldr	r0, [pc, #28]	@ (80025f4 <HAL_UART_RxCpltCallback+0x4c>)
 80025d6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80025d8:	2201      	movs	r2, #1
 80025da:	4906      	ldr	r1, [pc, #24]	@ (80025f4 <HAL_UART_RxCpltCallback+0x4c>)
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f004 ff5f 	bl	80074a0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40004400 	.word	0x40004400
 80025f0:	20000304 	.word	0x20000304
 80025f4:	200002fc 	.word	0x200002fc

080025f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025f8:	480d      	ldr	r0, [pc, #52]	@ (8002630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80025fc:	f7ff fb85 	bl	8001d0a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002600:	480c      	ldr	r0, [pc, #48]	@ (8002634 <LoopForever+0x6>)
  ldr r1, =_edata
 8002602:	490d      	ldr	r1, [pc, #52]	@ (8002638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002604:	4a0d      	ldr	r2, [pc, #52]	@ (800263c <LoopForever+0xe>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002608:	e002      	b.n	8002610 <LoopCopyDataInit>

0800260a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800260c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260e:	3304      	adds	r3, #4

08002610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002614:	d3f9      	bcc.n	800260a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002616:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002618:	4c0a      	ldr	r4, [pc, #40]	@ (8002644 <LoopForever+0x16>)
  movs r3, #0
 800261a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800261c:	e001      	b.n	8002622 <LoopFillZerobss>

0800261e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002620:	3204      	adds	r2, #4

08002622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002624:	d3fb      	bcc.n	800261e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002626:	f019 ff19 	bl	801c45c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800262a:	f7fe ff4e 	bl	80014ca <main>

0800262e <LoopForever>:

LoopForever:
    b LoopForever
 800262e:	e7fe      	b.n	800262e <LoopForever>
  ldr   r0, =_estack
 8002630:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002638:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 800263c:	0801d254 	.word	0x0801d254
  ldr r2, =_sbss
 8002640:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8002644:	20002234 	.word	0x20002234

08002648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002648:	e7fe      	b.n	8002648 <ADC_IRQHandler>
	...

0800264c <LL_DBGMCU_EnableDBGSleepMode>:
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002650:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4a03      	ldr	r2, [pc, #12]	@ (8002664 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6053      	str	r3, [r2, #4]
}
 800265c:	bf00      	nop
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	e0042000 	.word	0xe0042000

08002668 <LL_DBGMCU_EnableDBGStopMode>:
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800266c:	4b04      	ldr	r3, [pc, #16]	@ (8002680 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4a03      	ldr	r2, [pc, #12]	@ (8002680 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8002672:	f043 0302 	orr.w	r3, r3, #2
 8002676:	6053      	str	r3, [r2, #4]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	e0042000 	.word	0xe0042000

08002684 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a03      	ldr	r2, [pc, #12]	@ (800269c <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	6053      	str	r3, [r2, #4]
}
 8002694:	bf00      	nop
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	e0042000 	.word	0xe0042000

080026a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026aa:	2003      	movs	r0, #3
 80026ac:	f001 f9fc 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80026b0:	f003 fb3c 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4a09      	ldr	r2, [pc, #36]	@ (80026dc <HAL_Init+0x3c>)
 80026b8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ba:	200f      	movs	r0, #15
 80026bc:	f000 f810 	bl	80026e0 <HAL_InitTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	e001      	b.n	80026d0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026cc:	f7ff f86d 	bl	80017aa <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000000 	.word	0x20000000

080026e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <HAL_InitTick+0x6c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d024      	beq.n	800273e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026f4:	f003 fb1a 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_InitTick+0x6c>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	4619      	mov	r1, r3
 8002700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002704:	fbb3 f3f1 	udiv	r3, r3, r1
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fa0c 	bl	8003b2a <HAL_SYSTICK_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	d809      	bhi.n	8002732 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800271e:	2200      	movs	r2, #0
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	f04f 30ff 	mov.w	r0, #4294967295
 8002726:	f001 f9ca 	bl	8003abe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_InitTick+0x70>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e007      	b.n	8002742 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e004      	b.n	8002742 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e001      	b.n	8002742 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002742:	7bfb      	ldrb	r3, [r7, #15]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20000008 	.word	0x20000008
 8002750:	20000004 	.word	0x20000004

08002754 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <HAL_SuspendTick+0x18>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a03      	ldr	r2, [pc, #12]	@ (800276c <HAL_SuspendTick+0x18>)
 800275e:	f023 0302 	bic.w	r3, r3, #2
 8002762:	6013      	str	r3, [r2, #0]
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002774:	4b04      	ldr	r3, [pc, #16]	@ (8002788 <HAL_ResumeTick+0x18>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a03      	ldr	r2, [pc, #12]	@ (8002788 <HAL_ResumeTick+0x18>)
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	6013      	str	r3, [r2, #0]
}
 8002780:	bf00      	nop
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8002790:	4b02      	ldr	r3, [pc, #8]	@ (800279c <HAL_GetUIDw0+0x10>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	1fff7590 	.word	0x1fff7590

080027a0 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <HAL_GetUIDw1+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	1fff7594 	.word	0x1fff7594

080027b4 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80027b8:	4b02      	ldr	r3, [pc, #8]	@ (80027c4 <HAL_GetUIDw2+0x10>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	1fff7598 	.word	0x1fff7598

080027c8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80027cc:	f7ff ff3e 	bl	800264c <LL_DBGMCU_EnableDBGSleepMode>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80027d8:	f7ff ff46 	bl	8002668 <LL_DBGMCU_EnableDBGStopMode>
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 80027e4:	f7ff ff4e 	bl	8002684 <LL_DBGMCU_EnableDBGStandbyMode>
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002820:	4618      	mov	r0, r3
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr

0800282a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2107      	movs	r1, #7
 8002842:	fa01 f303 	lsl.w	r3, r1, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	401a      	ands	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800285c:	bf00      	nop
 800285e:	3714      	adds	r7, #20
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695a      	ldr	r2, [r3, #20]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f003 0304 	and.w	r3, r3, #4
 800287a:	2107      	movs	r1, #7
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr

08002896 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	210f      	movs	r1, #15
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	401a      	ands	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0e9b      	lsrs	r3, r3, #26
 80028de:	f003 010f 	and.w	r1, r3, #15
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	f003 031f 	and.w	r3, r3, #31
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002946:	b480      	push	{r7}
 8002948:	b085      	sub	sp, #20
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	695a      	ldr	r2, [r3, #20]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	0219      	lsls	r1, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	400b      	ands	r3, r1
 8002966:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 800296a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800296e:	431a      	orrs	r2, r3
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800298e:	f023 0317 	bic.w	r3, r3, #23
 8002992:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80029b4:	f023 0317 	bic.w	r3, r3, #23
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6093      	str	r3, [r2, #8]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bc80      	pop	{r7}
 80029c4:	4770      	bx	lr

080029c6 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029da:	d101      	bne.n	80029e0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029fc:	f023 0317 	bic.w	r3, r3, #23
 8002a00:	f043 0201 	orr.w	r2, r3, #1
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr

08002a12 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a22:	f023 0317 	bic.w	r3, r3, #23
 8002a26:	f043 0202 	orr.w	r2, r3, #2
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <LL_ADC_IsEnabled+0x18>
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <LL_ADC_IsEnabled+0x1a>
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d101      	bne.n	8002a74 <LL_ADC_IsDisableOngoing+0x18>
 8002a70:	2301      	movs	r3, #1
 8002a72:	e000      	b.n	8002a76 <LL_ADC_IsDisableOngoing+0x1a>
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a90:	f023 0317 	bic.w	r3, r3, #23
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bc80      	pop	{r7}
 8002aa4:	4770      	bx	lr

08002aa6 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002ab6:	f023 0317 	bic.w	r3, r3, #23
 8002aba:	f043 0210 	orr.w	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b04      	cmp	r3, #4
 8002ade:	d101      	bne.n	8002ae4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e17e      	b.n	8002e10 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe f8df 	bl	8000ce4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff ff44 	bl	80029c6 <LL_ADC_IsInternalRegulatorEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d115      	bne.n	8002b70 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff18 	bl	800297e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b4e:	4b9e      	ldr	r3, [pc, #632]	@ (8002dc8 <HAL_ADC_Init+0x2d8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	4a9d      	ldr	r2, [pc, #628]	@ (8002dcc <HAL_ADC_Init+0x2dc>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b62:	e002      	b.n	8002b6a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f9      	bne.n	8002b64 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff26 	bl	80029c6 <LL_ADC_IsInternalRegulatorEnabled>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10d      	bne.n	8002b9c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff ff93 	bl	8002acc <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 8124 	bne.w	8002dfe <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 8120 	bne.w	8002dfe <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc2:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bc6:	f043 0202 	orr.w	r2, r3, #2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff ff30 	bl	8002a38 <LL_ADC_IsEnabled>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 80a7 	bne.w	8002d2e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	7e1b      	ldrb	r3, [r3, #24]
 8002be8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bea:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	7e5b      	ldrb	r3, [r3, #25]
 8002bf0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bf2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	7e9b      	ldrb	r3, [r3, #26]
 8002bf8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bfa:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c00:	2a00      	cmp	r2, #0
 8002c02:	d002      	beq.n	8002c0a <HAL_ADC_Init+0x11a>
 8002c04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c08:	e000      	b.n	8002c0c <HAL_ADC_Init+0x11c>
 8002c0a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c0c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c12:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	da04      	bge.n	8002c26 <HAL_ADC_Init+0x136>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c24:	e001      	b.n	8002c2a <HAL_ADC_Init+0x13a>
 8002c26:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002c2a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002c32:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c34:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d114      	bne.n	8002c70 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7e9b      	ldrb	r3, [r3, #26]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c54:	61bb      	str	r3, [r7, #24]
 8002c56:	e00b      	b.n	8002c70 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c68:	f043 0201 	orr.w	r2, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c84:	4313      	orrs	r3, r2
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002c96:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	69b9      	ldr	r1, [r7, #24]
 8002ca0:	430b      	orrs	r3, r1
 8002ca2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d111      	bne.n	8002ce6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cce:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002cd4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cda:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	4b38      	ldr	r3, [pc, #224]	@ (8002dd0 <HAL_ADC_Init+0x2e0>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	6979      	ldr	r1, [r7, #20]
 8002cf6:	430b      	orrs	r3, r1
 8002cf8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d02:	d014      	beq.n	8002d2e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d0c:	d00f      	beq.n	8002d2e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d16:	d00a      	beq.n	8002d2e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_ADC_Init+0x2e4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d28:	492a      	ldr	r1, [pc, #168]	@ (8002dd4 <HAL_ADC_Init+0x2e4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d36:	461a      	mov	r2, r3
 8002d38:	2100      	movs	r1, #0
 8002d3a:	f7ff fd76 	bl	800282a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d46:	461a      	mov	r2, r3
 8002d48:	4923      	ldr	r1, [pc, #140]	@ (8002dd8 <HAL_ADC_Init+0x2e8>)
 8002d4a:	f7ff fd6e 	bl	800282a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d108      	bne.n	8002d68 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f062 020f 	orn	r2, r2, #15
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d66:	e017      	b.n	8002d98 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d70:	d112      	bne.n	8002d98 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	f003 031c 	and.w	r3, r3, #28
 8002d84:	f06f 020f 	mvn.w	r2, #15
 8002d88:	fa02 f103 	lsl.w	r1, r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fd61 	bl	8002866 <LL_ADC_GetSamplingTimeCommonChannels>
 8002da4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d116      	bne.n	8002ddc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db8:	f023 0303 	bic.w	r3, r3, #3
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dc4:	e023      	b.n	8002e0e <HAL_ADC_Init+0x31e>
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	053e2d63 	.word	0x053e2d63
 8002dd0:	1ffffc02 	.word	0x1ffffc02
 8002dd4:	40012708 	.word	0x40012708
 8002dd8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de0:	f023 0312 	bic.w	r3, r3, #18
 8002de4:	f043 0210 	orr.w	r2, r3, #16
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	f043 0201 	orr.w	r2, r3, #1
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dfc:	e007      	b.n	8002e0e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002e0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3720      	adds	r7, #32
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e07a      	b.n	8002f20 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 face 	bl	80033d8 <ADC_ConversionStop>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fb92 	bl	8003570 <ADC_Disable>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fd9f 	bl	80029a4 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 8002e74:	f023 0303 	bic.w	r3, r3, #3
 8002e78:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f240 329f 	movw	r2, #927	@ 0x39f
 8002e82:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	4b26      	ldr	r3, [pc, #152]	@ (8002f28 <HAL_ADC_DeInit+0x110>)
 8002e90:	400b      	ands	r3, r1
 8002e92:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8002ea2:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0207 	bic.w	r2, r2, #7
 8002eb2:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a1a      	ldr	r2, [r3, #32]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002ec2:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002ed2:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8002ee2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8002ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_ADC_DeInit+0x114>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_ADC_DeInit+0x114>)
 8002ef8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8002efc:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd ff04 	bl	8000d0c <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	833e0200 	.word	0x833e0200
 8002f2c:	40012708 	.word	0x40012708

08002f30 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff fdc5 	bl	8002acc <LL_ADC_REG_IsConversionOngoing>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d132      	bne.n	8002fae <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_Start+0x26>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e02e      	b.n	8002fb4 <HAL_ADC_Start+0x84>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa80 	bl	8003464 <ADC_Enable>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11a      	bne.n	8002fa4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f72:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	221c      	movs	r2, #28
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff fd6f 	bl	8002a80 <LL_ADC_REG_StartConversion>
 8002fa2:	e006      	b.n	8002fb2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002fac:	e001      	b.n	8002fb2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 8002fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Stop+0x16>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e022      	b.n	8003018 <HAL_ADC_Stop+0x5c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9fc 	bl	80033d8 <ADC_ConversionStop>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fac0 	bl	8003570 <ADC_Disable>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	2b08      	cmp	r3, #8
 8003030:	d102      	bne.n	8003038 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8003032:	2308      	movs	r3, #8
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	e010      	b.n	800305a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e077      	b.n	8003146 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8003056:	2304      	movs	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800305a:	f7fe fdd7 	bl	8001c0c <HAL_GetTick>
 800305e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003060:	e021      	b.n	80030a6 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d01d      	beq.n	80030a6 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800306a:	f7fe fdcf 	bl	8001c0c <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <HAL_ADC_PollForConversion+0x60>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d112      	bne.n	80030a6 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e04f      	b.n	8003146 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0d6      	beq.n	8003062 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fbe6 	bl	8002896 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d031      	beq.n	8003134 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	7e9b      	ldrb	r3, [r3, #26]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d12d      	bne.n	8003134 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d126      	bne.n	8003134 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fcee 	bl	8002acc <LL_ADC_REG_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d112      	bne.n	800311c <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 020c 	bic.w	r2, r2, #12
 8003104:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	@ 0x58
 800311a:	e00b      	b.n	8003134 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	7e1b      	ldrb	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	220c      	movs	r2, #12
 8003142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800314e:	b480      	push	{r7}
 8003150:	b083      	sub	sp, #12
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	bc80      	pop	{r7}
 8003164:	4770      	bx	lr
	...

08003168 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003176:	2300      	movs	r3, #0
 8003178:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x28>
 800318c:	2302      	movs	r3, #2
 800318e:	e110      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x24a>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fc95 	bl	8002acc <LL_ADC_REG_IsConversionOngoing>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f040 80f7 	bne.w	8003398 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	f000 80b1 	beq.w	8003316 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031bc:	d004      	beq.n	80031c8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031c2:	4a7e      	ldr	r2, [pc, #504]	@ (80033bc <HAL_ADC_ConfigChannel+0x254>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d108      	bne.n	80031da <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7ff fb92 	bl	80028fc <LL_ADC_REG_SetSequencerChAdd>
 80031d8:	e041      	b.n	800325e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 031f 	and.w	r3, r3, #31
 80031e6:	210f      	movs	r1, #15
 80031e8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d105      	bne.n	8003208 <HAL_ADC_ConfigChannel+0xa0>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0e9b      	lsrs	r3, r3, #26
 8003202:	f003 031f 	and.w	r3, r3, #31
 8003206:	e011      	b.n	800322c <HAL_ADC_ConfigChannel+0xc4>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e003      	b.n	800322c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	6839      	ldr	r1, [r7, #0]
 800322e:	6849      	ldr	r1, [r1, #4]
 8003230:	f001 011f 	and.w	r1, r1, #31
 8003234:	408b      	lsls	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	429a      	cmp	r2, r3
 800324a:	d808      	bhi.n	800325e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	6859      	ldr	r1, [r3, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	f7ff fb2e 	bl	80028ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff fb6b 	bl	8002946 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f280 8097 	bge.w	80033a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800327a:	4851      	ldr	r0, [pc, #324]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 800327c:	f7ff fac8 	bl	8002810 <LL_ADC_GetCommonPathInternalCh>
 8003280:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a4f      	ldr	r2, [pc, #316]	@ (80033c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d120      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11b      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800329c:	4619      	mov	r1, r3
 800329e:	4848      	ldr	r0, [pc, #288]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 80032a0:	f7ff faa4 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a4:	4b48      	ldr	r3, [pc, #288]	@ (80033c8 <HAL_ADC_ConfigChannel+0x260>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	4a48      	ldr	r2, [pc, #288]	@ (80033cc <HAL_ADC_ConfigChannel+0x264>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	099b      	lsrs	r3, r3, #6
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	4613      	mov	r3, r2
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032be:	e002      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f9      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032cc:	e06c      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a3f      	ldr	r2, [pc, #252]	@ (80033d0 <HAL_ADC_ConfigChannel+0x268>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10c      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d107      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032e8:	4619      	mov	r1, r3
 80032ea:	4835      	ldr	r0, [pc, #212]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 80032ec:	f7ff fa7e 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
 80032f0:	e05a      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a37      	ldr	r2, [pc, #220]	@ (80033d4 <HAL_ADC_ConfigChannel+0x26c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d155      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003302:	2b00      	cmp	r3, #0
 8003304:	d150      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800330c:	4619      	mov	r1, r3
 800330e:	482c      	ldr	r0, [pc, #176]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 8003310:	f7ff fa6c 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
 8003314:	e048      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800331e:	d004      	beq.n	800332a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003324:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <HAL_ADC_ConfigChannel+0x254>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d107      	bne.n	800333a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f7ff faf3 	bl	8002920 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	da32      	bge.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003342:	481f      	ldr	r0, [pc, #124]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 8003344:	f7ff fa64 	bl	8002810 <LL_ADC_GetCommonPathInternalCh>
 8003348:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1d      	ldr	r2, [pc, #116]	@ (80033c4 <HAL_ADC_ConfigChannel+0x25c>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d107      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800335a:	4619      	mov	r1, r3
 800335c:	4818      	ldr	r0, [pc, #96]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 800335e:	f7ff fa45 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
 8003362:	e021      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a19      	ldr	r2, [pc, #100]	@ (80033d0 <HAL_ADC_ConfigChannel+0x268>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d107      	bne.n	800337e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003374:	4619      	mov	r1, r3
 8003376:	4812      	ldr	r0, [pc, #72]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 8003378:	f7ff fa38 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
 800337c:	e014      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a14      	ldr	r2, [pc, #80]	@ (80033d4 <HAL_ADC_ConfigChannel+0x26c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10f      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800338e:	4619      	mov	r1, r3
 8003390:	480b      	ldr	r0, [pc, #44]	@ (80033c0 <HAL_ADC_ConfigChannel+0x258>)
 8003392:	f7ff fa2b 	bl	80027ec <LL_ADC_SetCommonPathInternalCh>
 8003396:	e007      	b.n	80033a8 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80033b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3720      	adds	r7, #32
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	80000004 	.word	0x80000004
 80033c0:	40012708 	.word	0x40012708
 80033c4:	b0001000 	.word	0xb0001000
 80033c8:	20000000 	.word	0x20000000
 80033cc:	053e2d63 	.word	0x053e2d63
 80033d0:	b8004000 	.word	0xb8004000
 80033d4:	b4002000 	.word	0xb4002000

080033d8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fb71 	bl	8002acc <LL_ADC_REG_IsConversionOngoing>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d033      	beq.n	8003458 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fb31 	bl	8002a5c <LL_ADC_IsDisableOngoing>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d104      	bne.n	800340a <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fb4e 	bl	8002aa6 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800340a:	f7fe fbff 	bl	8001c0c <HAL_GetTick>
 800340e:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003410:	e01b      	b.n	800344a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003412:	f7fe fbfb 	bl	8001c0c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d914      	bls.n	800344a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00d      	beq.n	800344a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	f043 0210 	orr.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1dc      	bne.n	8003412 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800346c:	2300      	movs	r3, #0
 800346e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff fadf 	bl	8002a38 <LL_ADC_IsEnabled>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d169      	bne.n	8003554 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <ADC_Enable+0xfc>)
 8003488:	4013      	ands	r3, r2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00d      	beq.n	80034aa <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f043 0210 	orr.w	r2, r3, #16
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e055      	b.n	8003556 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fa9c 	bl	80029ec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80034b4:	482b      	ldr	r0, [pc, #172]	@ (8003564 <ADC_Enable+0x100>)
 80034b6:	f7ff f9ab 	bl	8002810 <LL_ADC_GetCommonPathInternalCh>
 80034ba:	4603      	mov	r3, r0
 80034bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034c4:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <ADC_Enable+0x104>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	4a28      	ldr	r2, [pc, #160]	@ (800356c <ADC_Enable+0x108>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80034d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034d6:	e002      	b.n	80034de <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3b01      	subs	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1f9      	bne.n	80034d8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7e5b      	ldrb	r3, [r3, #25]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d033      	beq.n	8003554 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80034ec:	f7fe fb8e 	bl	8001c0c <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f2:	e028      	b.n	8003546 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff fa9d 	bl	8002a38 <LL_ADC_IsEnabled>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fa6f 	bl	80029ec <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800350e:	f7fe fb7d 	bl	8001c0c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d914      	bls.n	8003546 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b01      	cmp	r3, #1
 8003528:	d00d      	beq.n	8003546 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352e:	f043 0210 	orr.w	r2, r3, #16
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353a:	f043 0201 	orr.w	r2, r3, #1
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e007      	b.n	8003556 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b01      	cmp	r3, #1
 8003552:	d1cf      	bne.n	80034f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	80000017 	.word	0x80000017
 8003564:	40012708 	.word	0x40012708
 8003568:	20000000 	.word	0x20000000
 800356c:	053e2d63 	.word	0x053e2d63

08003570 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff fa6d 	bl	8002a5c <LL_ADC_IsDisableOngoing>
 8003582:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff fa55 	bl	8002a38 <LL_ADC_IsEnabled>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d047      	beq.n	8003624 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d144      	bne.n	8003624 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0305 	and.w	r3, r3, #5
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10c      	bne.n	80035c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fa30 	bl	8002a12 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2203      	movs	r2, #3
 80035b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035ba:	f7fe fb27 	bl	8001c0c <HAL_GetTick>
 80035be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035c0:	e029      	b.n	8003616 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f043 0210 	orr.w	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d2:	f043 0201 	orr.w	r2, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e023      	b.n	8003626 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035de:	f7fe fb15 	bl	8001c0c <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d914      	bls.n	8003616 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fe:	f043 0210 	orr.w	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e007      	b.n	8003626 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1dc      	bne.n	80035de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <LL_ADC_SetCalibrationFactor>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800363e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <LL_ADC_GetCalibrationFactor>:
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003668:	4618      	mov	r0, r3
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <LL_ADC_Enable>:
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003682:	f023 0317 	bic.w	r3, r3, #23
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	bc80      	pop	{r7}
 8003696:	4770      	bx	lr

08003698 <LL_ADC_Disable>:
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036a8:	f023 0317 	bic.w	r3, r3, #23
 80036ac:	f043 0202 	orr.w	r2, r3, #2
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr

080036be <LL_ADC_IsEnabled>:
{
 80036be:	b480      	push	{r7}
 80036c0:	b083      	sub	sp, #12
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <LL_ADC_IsEnabled+0x18>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <LL_ADC_IsEnabled+0x1a>
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <LL_ADC_StartCalibration>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80036f2:	f023 0317 	bic.w	r3, r3, #23
 80036f6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	609a      	str	r2, [r3, #8]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <LL_ADC_IsCalibrationOnGoing>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003718:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800371c:	d101      	bne.n	8003722 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003744:	2b01      	cmp	r3, #1
 8003746:	d101      	bne.n	800374c <HAL_ADCEx_Calibration_Start+0x1e>
 8003748:	2302      	movs	r3, #2
 800374a:	e0b9      	b.n	80038c0 <HAL_ADCEx_Calibration_Start+0x192>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff0b 	bl	8003570 <ADC_Disable>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff ffab 	bl	80036be <LL_ADC_IsEnabled>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 809d 	bne.w	80038aa <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003774:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003778:	f043 0202 	orr.w	r2, r3, #2
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	f248 0303 	movw	r3, #32771	@ 0x8003
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
 80037a6:	e02e      	b.n	8003806 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff98 	bl	80036e2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037b2:	e014      	b.n	80037de <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	3301      	adds	r3, #1
 80037b8:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80037c0:	d30d      	bcc.n	80037de <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c6:	f023 0312 	bic.w	r3, r3, #18
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e070      	b.n	80038c0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff90 	bl	8003708 <LL_ADC_IsCalibrationOnGoing>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e2      	bne.n	80037b4 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff ff2f 	bl	8003656 <LL_ADC_GetCalibrationFactor>
 80037f8:	4602      	mov	r2, r0
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	4413      	add	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	3301      	adds	r3, #1
 8003804:	61fb      	str	r3, [r7, #28]
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	2b07      	cmp	r3, #7
 800380a:	d9cd      	bls.n	80037a8 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7ff ff29 	bl	8003672 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69b9      	ldr	r1, [r7, #24]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ff01 	bl	800362e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff31 	bl	8003698 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003836:	f7fe f9e9 	bl	8001c0c <HAL_GetTick>
 800383a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800383c:	e01c      	b.n	8003878 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800383e:	f7fe f9e5 	bl	8001c0c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d915      	bls.n	8003878 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff34 	bl	80036be <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00d      	beq.n	8003878 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003860:	f043 0210 	orr.w	r2, r3, #16
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800386c:	f043 0201 	orr.w	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e023      	b.n	80038c0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff ff1e 	bl	80036be <LL_ADC_IsEnabled>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1da      	bne.n	800383e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68d9      	ldr	r1, [r3, #12]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800389c:	f023 0303 	bic.w	r3, r3, #3
 80038a0:	f043 0201 	orr.w	r2, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	659a      	str	r2, [r3, #88]	@ 0x58
 80038a8:	e005      	b.n	80038b6 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80038be:	7dfb      	ldrb	r3, [r7, #23]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3720      	adds	r7, #32
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d8:	4b0c      	ldr	r3, [pc, #48]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fa:	4a04      	ldr	r2, [pc, #16]	@ (800390c <__NVIC_SetPriorityGrouping+0x44>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	60d3      	str	r3, [r2, #12]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	bc80      	pop	{r7}
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003910:	b480      	push	{r7}
 8003912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <__NVIC_GetPriorityGrouping+0x18>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	0a1b      	lsrs	r3, r3, #8
 800391a:	f003 0307 	and.w	r3, r3, #7
}
 800391e:	4618      	mov	r0, r3
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393a:	2b00      	cmp	r3, #0
 800393c:	db0b      	blt.n	8003956 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800393e:	79fb      	ldrb	r3, [r7, #7]
 8003940:	f003 021f 	and.w	r2, r3, #31
 8003944:	4906      	ldr	r1, [pc, #24]	@ (8003960 <__NVIC_EnableIRQ+0x34>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2001      	movs	r0, #1
 800394e:	fa00 f202 	lsl.w	r2, r0, r2
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	bc80      	pop	{r7}
 800395e:	4770      	bx	lr
 8003960:	e000e100 	.word	0xe000e100

08003964 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	db12      	blt.n	800399c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	f003 021f 	and.w	r2, r3, #31
 800397c:	490a      	ldr	r1, [pc, #40]	@ (80039a8 <__NVIC_DisableIRQ+0x44>)
 800397e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003982:	095b      	lsrs	r3, r3, #5
 8003984:	2001      	movs	r0, #1
 8003986:	fa00 f202 	lsl.w	r2, r0, r2
 800398a:	3320      	adds	r3, #32
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003990:	f3bf 8f4f 	dsb	sy
}
 8003994:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003996:	f3bf 8f6f 	isb	sy
}
 800399a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	e000e100 	.word	0xe000e100

080039ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	6039      	str	r1, [r7, #0]
 80039b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db0a      	blt.n	80039d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	490c      	ldr	r1, [pc, #48]	@ (80039f8 <__NVIC_SetPriority+0x4c>)
 80039c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ca:	0112      	lsls	r2, r2, #4
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	440b      	add	r3, r1
 80039d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d4:	e00a      	b.n	80039ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	b2da      	uxtb	r2, r3
 80039da:	4908      	ldr	r1, [pc, #32]	@ (80039fc <__NVIC_SetPriority+0x50>)
 80039dc:	79fb      	ldrb	r3, [r7, #7]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	3b04      	subs	r3, #4
 80039e4:	0112      	lsls	r2, r2, #4
 80039e6:	b2d2      	uxtb	r2, r2
 80039e8:	440b      	add	r3, r1
 80039ea:	761a      	strb	r2, [r3, #24]
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bc80      	pop	{r7}
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100
 80039fc:	e000ed00 	.word	0xe000ed00

08003a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	f1c3 0307 	rsb	r3, r3, #7
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	bf28      	it	cs
 8003a1e:	2304      	movcs	r3, #4
 8003a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3304      	adds	r3, #4
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d902      	bls.n	8003a30 <NVIC_EncodePriority+0x30>
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	3b03      	subs	r3, #3
 8003a2e:	e000      	b.n	8003a32 <NVIC_EncodePriority+0x32>
 8003a30:	2300      	movs	r3, #0
 8003a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a34:	f04f 32ff 	mov.w	r2, #4294967295
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3e:	43da      	mvns	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	401a      	ands	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a48:	f04f 31ff 	mov.w	r1, #4294967295
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43d9      	mvns	r1, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a58:	4313      	orrs	r3, r2
         );
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3724      	adds	r7, #36	@ 0x24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff90 	bl	80039ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff09 	bl	80038c8 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003acc:	f7ff ff20 	bl	8003910 <__NVIC_GetPriorityGrouping>
 8003ad0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	6978      	ldr	r0, [r7, #20]
 8003ad8:	f7ff ff92 	bl	8003a00 <NVIC_EncodePriority>
 8003adc:	4602      	mov	r2, r0
 8003ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff61 	bl	80039ac <__NVIC_SetPriority>
}
 8003aea:	bf00      	nop
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff ff13 	bl	800392c <__NVIC_EnableIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	4603      	mov	r3, r0
 8003b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff ff21 	bl	8003964 <__NVIC_DisableIRQ>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff96 	bl	8003a64 <SysTick_Config>
 8003b38:	4603      	mov	r3, r0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e08e      	b.n	8003c74 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	4b47      	ldr	r3, [pc, #284]	@ (8003c7c <HAL_DMA_Init+0x138>)
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d80f      	bhi.n	8003b82 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b45      	ldr	r3, [pc, #276]	@ (8003c80 <HAL_DMA_Init+0x13c>)
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a45      	ldr	r2, [pc, #276]	@ (8003c84 <HAL_DMA_Init+0x140>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	009a      	lsls	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a42      	ldr	r2, [pc, #264]	@ (8003c88 <HAL_DMA_Init+0x144>)
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b80:	e00e      	b.n	8003ba0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b40      	ldr	r3, [pc, #256]	@ (8003c8c <HAL_DMA_Init+0x148>)
 8003b8a:	4413      	add	r3, r2
 8003b8c:	4a3d      	ldr	r2, [pc, #244]	@ (8003c84 <HAL_DMA_Init+0x140>)
 8003b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b92:	091b      	lsrs	r3, r3, #4
 8003b94:	009a      	lsls	r2, r3, #2
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a3c      	ldr	r2, [pc, #240]	@ (8003c90 <HAL_DMA_Init+0x14c>)
 8003b9e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bba:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6819      	ldr	r1, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	431a      	orrs	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 fb24 	bl	8004240 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c00:	d102      	bne.n	8003c08 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c10:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c14:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c1e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d010      	beq.n	8003c4a <HAL_DMA_Init+0x106>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d80c      	bhi.n	8003c4a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fb4d 	bl	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e008      	b.n	8003c5c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020407 	.word	0x40020407
 8003c80:	bffdfff8 	.word	0xbffdfff8
 8003c84:	cccccccd 	.word	0xcccccccd
 8003c88:	40020000 	.word	0x40020000
 8003c8c:	bffdfbf8 	.word	0xbffdfbf8
 8003c90:	40020400 	.word	0x40020400

08003c94 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e07b      	b.n	8003d9e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8003da8 <HAL_DMA_DeInit+0x114>)
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d80f      	bhi.n	8003ce2 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	4b38      	ldr	r3, [pc, #224]	@ (8003dac <HAL_DMA_DeInit+0x118>)
 8003cca:	4413      	add	r3, r2
 8003ccc:	4a38      	ldr	r2, [pc, #224]	@ (8003db0 <HAL_DMA_DeInit+0x11c>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	091b      	lsrs	r3, r3, #4
 8003cd4:	009a      	lsls	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a35      	ldr	r2, [pc, #212]	@ (8003db4 <HAL_DMA_DeInit+0x120>)
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ce0:	e00e      	b.n	8003d00 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b33      	ldr	r3, [pc, #204]	@ (8003db8 <HAL_DMA_DeInit+0x124>)
 8003cea:	4413      	add	r3, r2
 8003cec:	4a30      	ldr	r2, [pc, #192]	@ (8003db0 <HAL_DMA_DeInit+0x11c>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	091b      	lsrs	r3, r3, #4
 8003cf4:	009a      	lsls	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8003dbc <HAL_DMA_DeInit+0x128>)
 8003cfe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0c:	f003 021c 	and.w	r2, r3, #28
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	2101      	movs	r1, #1
 8003d16:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa8f 	bl	8004240 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003d32:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00f      	beq.n	8003d5c <HAL_DMA_DeInit+0xc8>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d80b      	bhi.n	8003d5c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fac3 	bl	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003d5a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40020407 	.word	0x40020407
 8003dac:	bffdfff8 	.word	0xbffdfff8
 8003db0:	cccccccd 	.word	0xcccccccd
 8003db4:	40020000 	.word	0x40020000
 8003db8:	bffdfbf8 	.word	0xbffdfbf8
 8003dbc:	40020400 	.word	0x40020400

08003dc0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_DMA_Start_IT+0x20>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e069      	b.n	8003eb4 <HAL_DMA_Start_IT+0xf4>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d155      	bne.n	8003ea0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0201 	bic.w	r2, r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 f9d3 	bl	80041c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d008      	beq.n	8003e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 020e 	orr.w	r2, r2, #14
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e00f      	b.n	8003e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0204 	bic.w	r2, r2, #4
 8003e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 020a 	orr.w	r2, r2, #10
 8003e56:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e74:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e8c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e008      	b.n	8003eb2 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2280      	movs	r2, #128	@ 0x80
 8003ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e04f      	b.n	8003f6e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d008      	beq.n	8003eec <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2204      	movs	r2, #4
 8003ede:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e040      	b.n	8003f6e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 020e 	bic.w	r2, r2, #14
 8003efa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f022 0201 	bic.w	r2, r2, #1
 8003f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	f003 021c 	and.w	r2, r3, #28
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	2101      	movs	r1, #1
 8003f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8003f2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00c      	beq.n	8003f5c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d005      	beq.n	8003f9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2204      	movs	r2, #4
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	73fb      	strb	r3, [r7, #15]
 8003f9a:	e047      	b.n	800402c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 020e 	bic.w	r2, r2, #14
 8003faa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fc6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd0:	f003 021c 	and.w	r2, r3, #28
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	2101      	movs	r1, #1
 8003fda:	fa01 f202 	lsl.w	r2, r1, r2
 8003fde:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fe8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00c      	beq.n	800400c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800400a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
    }
  }
  return status;
 800402c:	7bfb      	ldrb	r3, [r7, #15]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
	...

08004038 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004054:	f003 031c 	and.w	r3, r3, #28
 8004058:	2204      	movs	r2, #4
 800405a:	409a      	lsls	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4013      	ands	r3, r2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d027      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x7c>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f003 0304 	and.w	r3, r3, #4
 800406a:	2b00      	cmp	r3, #0
 800406c:	d022      	beq.n	80040b4 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0320 	and.w	r3, r3, #32
 8004078:	2b00      	cmp	r3, #0
 800407a:	d107      	bne.n	800408c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004090:	f003 021c 	and.w	r2, r3, #28
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004098:	2104      	movs	r1, #4
 800409a:	fa01 f202 	lsl.w	r2, r1, r2
 800409e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 8081 	beq.w	80041ac <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80040b2:	e07b      	b.n	80041ac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b8:	f003 031c 	and.w	r3, r3, #28
 80040bc:	2202      	movs	r2, #2
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d03d      	beq.n	8004144 <HAL_DMA_IRQHandler+0x10c>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d038      	beq.n	8004144 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 020a 	bic.w	r2, r2, #10
 80040ee:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	4b2e      	ldr	r3, [pc, #184]	@ (80041b8 <HAL_DMA_IRQHandler+0x180>)
 8004100:	429a      	cmp	r2, r3
 8004102:	d909      	bls.n	8004118 <HAL_DMA_IRQHandler+0xe0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004108:	f003 031c 	and.w	r3, r3, #28
 800410c:	4a2b      	ldr	r2, [pc, #172]	@ (80041bc <HAL_DMA_IRQHandler+0x184>)
 800410e:	2102      	movs	r1, #2
 8004110:	fa01 f303 	lsl.w	r3, r1, r3
 8004114:	6053      	str	r3, [r2, #4]
 8004116:	e008      	b.n	800412a <HAL_DMA_IRQHandler+0xf2>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411c:	f003 031c 	and.w	r3, r3, #28
 8004120:	4a27      	ldr	r2, [pc, #156]	@ (80041c0 <HAL_DMA_IRQHandler+0x188>)
 8004122:	2102      	movs	r1, #2
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	2b00      	cmp	r3, #0
 8004138:	d038      	beq.n	80041ac <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004142:	e033      	b.n	80041ac <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004148:	f003 031c 	and.w	r3, r3, #28
 800414c:	2208      	movs	r2, #8
 800414e:	409a      	lsls	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d02a      	beq.n	80041ae <HAL_DMA_IRQHandler+0x176>
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d025      	beq.n	80041ae <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 020e 	bic.w	r2, r2, #14
 8004170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004176:	f003 021c 	and.w	r2, r3, #28
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2101      	movs	r1, #1
 8004180:	fa01 f202 	lsl.w	r2, r1, r2
 8004184:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
}
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40020080 	.word	0x40020080
 80041bc:	40020400 	.word	0x40020400
 80041c0:	40020000 	.word	0x40020000

080041c4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041da:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d004      	beq.n	80041ee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80041ec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f003 021c 	and.w	r2, r3, #28
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	2101      	movs	r1, #1
 80041fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004200:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	2b10      	cmp	r3, #16
 8004210:	d108      	bne.n	8004224 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004222:	e007      	b.n	8004234 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
}
 8004234:	bf00      	nop
 8004236:	3714      	adds	r7, #20
 8004238:	46bd      	mov	sp, r7
 800423a:	bc80      	pop	{r7}
 800423c:	4770      	bx	lr
	...

08004240 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8004250:	429a      	cmp	r2, r3
 8004252:	d813      	bhi.n	800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	3b08      	subs	r3, #8
 8004270:	4a14      	ldr	r2, [pc, #80]	@ (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e011      	b.n	80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	009a      	lsls	r2, r3, #2
 8004284:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004286:	4413      	add	r3, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	3b08      	subs	r3, #8
 8004294:	4a0b      	ldr	r2, [pc, #44]	@ (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8004296:	fba2 2303 	umull	r2, r3, r2, r3
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	3307      	adds	r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80042a4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 031f 	and.w	r3, r3, #31
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042b4:	bf00      	nop
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40020407 	.word	0x40020407
 80042c4:	cccccccd 	.word	0xcccccccd
 80042c8:	4002081c 	.word	0x4002081c
 80042cc:	40020880 	.word	0x40020880

080042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042e0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	461a      	mov	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3b01      	subs	r3, #1
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2201      	movs	r2, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004306:	bf00      	nop
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr
 8004310:	1000823f 	.word	0x1000823f
 8004314:	40020940 	.word	0x40020940

08004318 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004326:	4b1c      	ldr	r3, [pc, #112]	@ (8004398 <HAL_FLASH_Program+0x80>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d101      	bne.n	8004332 <HAL_FLASH_Program+0x1a>
 800432e:	2302      	movs	r3, #2
 8004330:	e02d      	b.n	800438e <HAL_FLASH_Program+0x76>
 8004332:	4b19      	ldr	r3, [pc, #100]	@ (8004398 <HAL_FLASH_Program+0x80>)
 8004334:	2201      	movs	r2, #1
 8004336:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004338:	4b17      	ldr	r3, [pc, #92]	@ (8004398 <HAL_FLASH_Program+0x80>)
 800433a:	2200      	movs	r2, #0
 800433c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800433e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004342:	f000 f869 	bl	8004418 <FLASH_WaitForLastOperation>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11a      	bne.n	8004386 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d105      	bne.n	8004362 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800435a:	68b8      	ldr	r0, [r7, #8]
 800435c:	f000 f8be 	bl	80044dc <FLASH_Program_DoubleWord>
 8004360:	e004      	b.n	800436c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4619      	mov	r1, r3
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f000 f8de 	bl	8004528 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800436c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004370:	f000 f852 	bl	8004418 <FLASH_WaitForLastOperation>
 8004374:	4603      	mov	r3, r0
 8004376:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004378:	4b08      	ldr	r3, [pc, #32]	@ (800439c <HAL_FLASH_Program+0x84>)
 800437a:	695a      	ldr	r2, [r3, #20]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	43db      	mvns	r3, r3
 8004380:	4906      	ldr	r1, [pc, #24]	@ (800439c <HAL_FLASH_Program+0x84>)
 8004382:	4013      	ands	r3, r2
 8004384:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004386:	4b04      	ldr	r3, [pc, #16]	@ (8004398 <HAL_FLASH_Program+0x80>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800438c:	7dfb      	ldrb	r3, [r7, #23]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3718      	adds	r7, #24
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20000308 	.word	0x20000308
 800439c:	58004000 	.word	0x58004000

080043a0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80043aa:	4b0b      	ldr	r3, [pc, #44]	@ (80043d8 <HAL_FLASH_Unlock+0x38>)
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0b      	bge.n	80043ca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_FLASH_Unlock+0x38>)
 80043b4:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <HAL_FLASH_Unlock+0x3c>)
 80043b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80043b8:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <HAL_FLASH_Unlock+0x38>)
 80043ba:	4a09      	ldr	r2, [pc, #36]	@ (80043e0 <HAL_FLASH_Unlock+0x40>)
 80043bc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80043be:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_FLASH_Unlock+0x38>)
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da01      	bge.n	80043ca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80043ca:	79fb      	ldrb	r3, [r7, #7]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58004000 	.word	0x58004000
 80043dc:	45670123 	.word	0x45670123
 80043e0:	cdef89ab 	.word	0xcdef89ab

080043e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_FLASH_Lock+0x30>)
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <HAL_FLASH_Lock+0x30>)
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80043f8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_FLASH_Lock+0x30>)
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	db01      	blt.n	8004406 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004406:	79fb      	ldrb	r3, [r7, #7]
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	58004000 	.word	0x58004000

08004418 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8004420:	f7fd fbf4 	bl	8001c0c <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004426:	e009      	b.n	800443c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004428:	f7fd fbf0 	bl	8001c0c <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	d801      	bhi.n	800443c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e046      	b.n	80044ca <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800443c:	4b25      	ldr	r3, [pc, #148]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004448:	d0ee      	beq.n	8004428 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 800444a:	4b22      	ldr	r3, [pc, #136]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800445a:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 800445c:	2201      	movs	r2, #1
 800445e:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004466:	4013      	ands	r3, r2
 8004468:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004470:	d307      	bcc.n	8004482 <FLASH_WaitForLastOperation+0x6a>
 8004472:	4b18      	ldr	r3, [pc, #96]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800447c:	4915      	ldr	r1, [pc, #84]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	618b      	str	r3, [r1, #24]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d004      	beq.n	8004496 <FLASH_WaitForLastOperation+0x7e>
 800448c:	4a11      	ldr	r2, [pc, #68]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004494:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00e      	beq.n	80044ba <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800449c:	4a0e      	ldr	r2, [pc, #56]	@ (80044d8 <FLASH_WaitForLastOperation+0xc0>)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e011      	b.n	80044ca <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80044a6:	f7fd fbb1 	bl	8001c0c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d801      	bhi.n	80044ba <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e007      	b.n	80044ca <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80044ba:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <FLASH_WaitForLastOperation+0xbc>)
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80044c6:	d0ee      	beq.n	80044a6 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	58004000 	.word	0x58004000
 80044d8:	20000308 	.word	0x20000308

080044dc <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80044e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004524 <FLASH_Program_DoubleWord+0x48>)
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004524 <FLASH_Program_DoubleWord+0x48>)
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80044fa:	f3bf 8f6f 	isb	sy
}
 80044fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8004500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	000a      	movs	r2, r1
 800450e:	2300      	movs	r3, #0
 8004510:	68f9      	ldr	r1, [r7, #12]
 8004512:	3104      	adds	r1, #4
 8004514:	4613      	mov	r3, r2
 8004516:	600b      	str	r3, [r1, #0]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	bc80      	pop	{r7}
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	58004000 	.word	0x58004000

08004528 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8004532:	2340      	movs	r3, #64	@ 0x40
 8004534:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800453e:	4b18      	ldr	r3, [pc, #96]	@ (80045a0 <FLASH_Program_Fast+0x78>)
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <FLASH_Program_Fast+0x78>)
 8004544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004548:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454a:	f3ef 8310 	mrs	r3, PRIMASK
 800454e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004550:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8004552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004554:	b672      	cpsid	i
}
 8004556:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	3304      	adds	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	3304      	adds	r3, #4
 800456a:	617b      	str	r3, [r7, #20]
    row_index--;
 800456c:	7ffb      	ldrb	r3, [r7, #31]
 800456e:	3b01      	subs	r3, #1
 8004570:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8004572:	7ffb      	ldrb	r3, [r7, #31]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ef      	bne.n	8004558 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004578:	bf00      	nop
 800457a:	4b09      	ldr	r3, [pc, #36]	@ (80045a0 <FLASH_Program_Fast+0x78>)
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004586:	d0f8      	beq.n	800457a <FLASH_Program_Fast+0x52>
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8004594:	bf00      	nop
 8004596:	3724      	adds	r7, #36	@ 0x24
 8004598:	46bd      	mov	sp, r7
 800459a:	bc80      	pop	{r7}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	58004000 	.word	0x58004000

080045a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80045ae:	4b28      	ldr	r3, [pc, #160]	@ (8004650 <HAL_FLASHEx_Erase+0xac>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d101      	bne.n	80045ba <HAL_FLASHEx_Erase+0x16>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e046      	b.n	8004648 <HAL_FLASHEx_Erase+0xa4>
 80045ba:	4b25      	ldr	r3, [pc, #148]	@ (8004650 <HAL_FLASHEx_Erase+0xac>)
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80045c0:	4b23      	ldr	r3, [pc, #140]	@ (8004650 <HAL_FLASHEx_Erase+0xac>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80045ca:	f7ff ff25 	bl	8004418 <FLASH_WaitForLastOperation>
 80045ce:	4603      	mov	r3, r0
 80045d0:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80045d2:	7bfb      	ldrb	r3, [r7, #15]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d133      	bne.n	8004640 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d108      	bne.n	80045f2 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80045e0:	f000 f838 	bl	8004654 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80045e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80045e8:	f7ff ff16 	bl	8004418 <FLASH_WaitForLastOperation>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	e024      	b.n	800463c <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	e012      	b.n	8004628 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8004602:	68b8      	ldr	r0, [r7, #8]
 8004604:	f000 f836 	bl	8004674 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004608:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800460c:	f7ff ff04 	bl	8004418 <FLASH_WaitForLastOperation>
 8004610:	4603      	mov	r3, r0
 8004612:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004614:	7bfb      	ldrb	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68ba      	ldr	r2, [r7, #8]
 800461e:	601a      	str	r2, [r3, #0]
          break;
 8004620:	e00a      	b.n	8004638 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	3301      	adds	r3, #1
 8004626:	60bb      	str	r3, [r7, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4413      	add	r3, r2
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d3e4      	bcc.n	8004602 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004638:	f000 f878 	bl	800472c <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800463c:	f000 f832 	bl	80046a4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004640:	4b03      	ldr	r3, [pc, #12]	@ (8004650 <HAL_FLASHEx_Erase+0xac>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]

  return status;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000308 	.word	0x20000308

08004654 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004658:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <FLASH_MassErase+0x1c>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	4a04      	ldr	r2, [pc, #16]	@ (8004670 <FLASH_MassErase+0x1c>)
 800465e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6153      	str	r3, [r2, #20]
#endif
}
 8004668:	bf00      	nop
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr
 8004670:	58004000 	.word	0x58004000

08004674 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004674:	b480      	push	{r7}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800467c:	4b08      	ldr	r3, [pc, #32]	@ (80046a0 <FLASH_PageErase+0x2c>)
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4313      	orrs	r3, r2
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <FLASH_PageErase+0x2c>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004690:	f043 0302 	orr.w	r3, r3, #2
 8004694:	6153      	str	r3, [r2, #20]
#endif
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	58004000 	.word	0x58004000

080046a4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80046a4:	b480      	push	{r7}
 80046a6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 80046a8:	4b1f      	ldr	r3, [pc, #124]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d117      	bne.n	80046e4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80046b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046be:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80046c0:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4b16      	ldr	r3, [pc, #88]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046d6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a12      	ldr	r2, [pc, #72]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046e2:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 80046e4:	4b10      	ldr	r3, [pc, #64]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d117      	bne.n	8004720 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80046f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046fa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <FLASH_FlushCaches+0x84>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <FLASH_FlushCaches+0x84>)
 8004702:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b07      	ldr	r3, [pc, #28]	@ (8004728 <FLASH_FlushCaches+0x84>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a06      	ldr	r2, [pc, #24]	@ (8004728 <FLASH_FlushCaches+0x84>)
 800470e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004712:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004714:	4b04      	ldr	r3, [pc, #16]	@ (8004728 <FLASH_FlushCaches+0x84>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a03      	ldr	r2, [pc, #12]	@ (8004728 <FLASH_FlushCaches+0x84>)
 800471a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800471e:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8004720:	bf00      	nop
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	58004000 	.word	0x58004000

0800472c <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800472c:	b480      	push	{r7}
 800472e:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <FLASH_AcknowledgePageErase+0x1c>)
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	4a04      	ldr	r2, [pc, #16]	@ (8004748 <FLASH_AcknowledgePageErase+0x1c>)
 8004736:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 800473a:	f023 0302 	bic.w	r3, r3, #2
 800473e:	6153      	str	r3, [r2, #20]
#endif
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	58004000 	.word	0x58004000

0800474c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800475a:	e140      	b.n	80049de <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	fa01 f303 	lsl.w	r3, r1, r3
 8004768:	4013      	ands	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 8132 	beq.w	80049d8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	2b01      	cmp	r3, #1
 800477e:	d005      	beq.n	800478c <HAL_GPIO_Init+0x40>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d130      	bne.n	80047ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047c2:	2201      	movs	r2, #1
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4013      	ands	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	091b      	lsrs	r3, r3, #4
 80047d8:	f003 0201 	and.w	r2, r3, #1
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d017      	beq.n	800482a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	2203      	movs	r2, #3
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	43db      	mvns	r3, r3
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4013      	ands	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	4313      	orrs	r3, r2
 8004822:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d123      	bne.n	800487e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	08da      	lsrs	r2, r3, #3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3208      	adds	r2, #8
 800483e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004842:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	220f      	movs	r2, #15
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	08da      	lsrs	r2, r3, #3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3208      	adds	r2, #8
 8004878:	6939      	ldr	r1, [r7, #16]
 800487a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	2203      	movs	r2, #3
 800488a:	fa02 f303 	lsl.w	r3, r2, r3
 800488e:	43db      	mvns	r3, r3
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0203 	and.w	r2, r3, #3
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 808c 	beq.w	80049d8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80048c0:	4a4e      	ldr	r2, [pc, #312]	@ (80049fc <HAL_GPIO_Init+0x2b0>)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	089b      	lsrs	r3, r3, #2
 80048c6:	3302      	adds	r3, #2
 80048c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f003 0303 	and.w	r3, r3, #3
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	2207      	movs	r2, #7
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	43db      	mvns	r3, r3
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	4013      	ands	r3, r2
 80048e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80048ea:	d00d      	beq.n	8004908 <HAL_GPIO_Init+0x1bc>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a44      	ldr	r2, [pc, #272]	@ (8004a00 <HAL_GPIO_Init+0x2b4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <HAL_GPIO_Init+0x1b8>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a43      	ldr	r2, [pc, #268]	@ (8004a04 <HAL_GPIO_Init+0x2b8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d101      	bne.n	8004900 <HAL_GPIO_Init+0x1b4>
 80048fc:	2302      	movs	r3, #2
 80048fe:	e004      	b.n	800490a <HAL_GPIO_Init+0x1be>
 8004900:	2307      	movs	r3, #7
 8004902:	e002      	b.n	800490a <HAL_GPIO_Init+0x1be>
 8004904:	2301      	movs	r3, #1
 8004906:	e000      	b.n	800490a <HAL_GPIO_Init+0x1be>
 8004908:	2300      	movs	r3, #0
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	f002 0203 	and.w	r2, r2, #3
 8004910:	0092      	lsls	r2, r2, #2
 8004912:	4093      	lsls	r3, r2
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800491a:	4938      	ldr	r1, [pc, #224]	@ (80049fc <HAL_GPIO_Init+0x2b0>)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	089b      	lsrs	r3, r3, #2
 8004920:	3302      	adds	r3, #2
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004928:	4b37      	ldr	r3, [pc, #220]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	43db      	mvns	r3, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4013      	ands	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800494c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004952:	4b2d      	ldr	r3, [pc, #180]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004976:	4a24      	ldr	r2, [pc, #144]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800497c:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 800497e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004982:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	43db      	mvns	r3, r3
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4013      	ands	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80049a2:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80049aa:	4b17      	ldr	r3, [pc, #92]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 80049ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049b0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4013      	ands	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d003      	beq.n	80049d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80049d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004a08 <HAL_GPIO_Init+0x2bc>)
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	3301      	adds	r3, #1
 80049dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	fa22 f303 	lsr.w	r3, r2, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f aeb7 	bne.w	800475c <HAL_GPIO_Init+0x10>
  }
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	371c      	adds	r7, #28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc80      	pop	{r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40010000 	.word	0x40010000
 8004a00:	48000400 	.word	0x48000400
 8004a04:	48000800 	.word	0x48000800
 8004a08:	58000800 	.word	0x58000800

08004a0c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004a1a:	e0af      	b.n	8004b7c <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 80a2 	beq.w	8004b76 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004a32:	4a59      	ldr	r2, [pc, #356]	@ (8004b98 <HAL_GPIO_DeInit+0x18c>)
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	3302      	adds	r3, #2
 8004a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	2207      	movs	r2, #7
 8004a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4013      	ands	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a5a:	d00d      	beq.n	8004a78 <HAL_GPIO_DeInit+0x6c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a4f      	ldr	r2, [pc, #316]	@ (8004b9c <HAL_GPIO_DeInit+0x190>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <HAL_GPIO_DeInit+0x68>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a4e      	ldr	r2, [pc, #312]	@ (8004ba0 <HAL_GPIO_DeInit+0x194>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d101      	bne.n	8004a70 <HAL_GPIO_DeInit+0x64>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e004      	b.n	8004a7a <HAL_GPIO_DeInit+0x6e>
 8004a70:	2307      	movs	r3, #7
 8004a72:	e002      	b.n	8004a7a <HAL_GPIO_DeInit+0x6e>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_GPIO_DeInit+0x6e>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	f002 0203 	and.w	r2, r2, #3
 8004a80:	0092      	lsls	r2, r2, #2
 8004a82:	4093      	lsls	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d136      	bne.n	8004af8 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004a8a:	4b46      	ldr	r3, [pc, #280]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004a8c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	4943      	ldr	r1, [pc, #268]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a9c:	4b41      	ldr	r3, [pc, #260]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004a9e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	493f      	ldr	r1, [pc, #252]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004aae:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	493b      	ldr	r1, [pc, #236]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004abc:	4b39      	ldr	r3, [pc, #228]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	43db      	mvns	r3, r3
 8004ac4:	4937      	ldr	r1, [pc, #220]	@ (8004ba4 <HAL_GPIO_DeInit+0x198>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f003 0303 	and.w	r3, r3, #3
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ada:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <HAL_GPIO_DeInit+0x18c>)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	089b      	lsrs	r3, r3, #2
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	43da      	mvns	r2, r3
 8004aea:	482b      	ldr	r0, [pc, #172]	@ (8004b98 <HAL_GPIO_DeInit+0x18c>)
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	400a      	ands	r2, r1
 8004af2:	3302      	adds	r3, #2
 8004af4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	2103      	movs	r1, #3
 8004b02:	fa01 f303 	lsl.w	r3, r1, r3
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	08d2      	lsrs	r2, r2, #3
 8004b2c:	4019      	ands	r1, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3208      	adds	r2, #8
 8004b32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2103      	movs	r1, #3
 8004b40:	fa01 f303 	lsl.w	r3, r1, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	401a      	ands	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	2101      	movs	r1, #1
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68da      	ldr	r2, [r3, #12]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2103      	movs	r1, #3
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	401a      	ands	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	fa22 f303 	lsr.w	r3, r2, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f af49 	bne.w	8004a1c <HAL_GPIO_DeInit+0x10>
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	bf00      	nop
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bc80      	pop	{r7}
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	48000400 	.word	0x48000400
 8004ba0:	48000800 	.word	0x48000800
 8004ba4:	58000800 	.word	0x58000800

08004ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	807b      	strh	r3, [r7, #2]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004bb8:	787b      	ldrb	r3, [r7, #1]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d003      	beq.n	8004bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bc4:	e002      	b.n	8004bcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bc80      	pop	{r7}
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	460b      	mov	r3, r1
 8004be0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004be8:	887a      	ldrh	r2, [r7, #2]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4013      	ands	r3, r2
 8004bee:	041a      	lsls	r2, r3, #16
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43d9      	mvns	r1, r3
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	400b      	ands	r3, r1
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	619a      	str	r2, [r3, #24]
}
 8004bfe:	bf00      	nop
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bc80      	pop	{r7}
 8004c06:	4770      	bx	lr

08004c08 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c0c:	4b04      	ldr	r3, [pc, #16]	@ (8004c20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a03      	ldr	r2, [pc, #12]	@ (8004c20 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr
 8004c20:	58000400 	.word	0x58000400

08004c24 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	460b      	mov	r3, r1
 8004c2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10c      	bne.n	8004c50 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004c36:	4b13      	ldr	r3, [pc, #76]	@ (8004c84 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c42:	d10d      	bne.n	8004c60 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004c44:	f000 f83c 	bl	8004cc0 <HAL_PWREx_DisableLowPowerRunMode>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d008      	beq.n	8004c60 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004c4e:	e015      	b.n	8004c7c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004c50:	4b0c      	ldr	r3, [pc, #48]	@ (8004c84 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004c5c:	f000 f822 	bl	8004ca4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c60:	4b09      	ldr	r3, [pc, #36]	@ (8004c88 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a08      	ldr	r2, [pc, #32]	@ (8004c88 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004c66:	f023 0304 	bic.w	r3, r3, #4
 8004c6a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d101      	bne.n	8004c76 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c72:	bf30      	wfi
 8004c74:	e002      	b.n	8004c7c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c76:	bf40      	sev
    __WFE();
 8004c78:	bf20      	wfe
    __WFE();
 8004c7a:	bf20      	wfe
  }
}
 8004c7c:	3708      	adds	r7, #8
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	58000400 	.word	0x58000400
 8004c88:	e000ed00 	.word	0xe000ed00

08004c8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c90:	4b03      	ldr	r3, [pc, #12]	@ (8004ca0 <HAL_PWREx_GetVoltageRange+0x14>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bc80      	pop	{r7}
 8004c9e:	4770      	bx	lr
 8004ca0:	58000400 	.word	0x58000400

08004ca4 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004ca8:	4b04      	ldr	r3, [pc, #16]	@ (8004cbc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a03      	ldr	r2, [pc, #12]	@ (8004cbc <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004cae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	58000400 	.word	0x58000400

08004cc0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004cc6:	4b16      	ldr	r3, [pc, #88]	@ (8004d20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a15      	ldr	r2, [pc, #84]	@ (8004d20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004ccc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004cd0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004cd2:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2232      	movs	r2, #50	@ 0x32
 8004cd8:	fb02 f303 	mul.w	r3, r2, r3
 8004cdc:	4a12      	ldr	r2, [pc, #72]	@ (8004d28 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	0c9b      	lsrs	r3, r3, #18
 8004ce4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004ce6:	e002      	b.n	8004cee <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004cee:	4b0c      	ldr	r3, [pc, #48]	@ (8004d20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004cfa:	d102      	bne.n	8004d02 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f2      	bne.n	8004ce8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004d02:	4b07      	ldr	r3, [pc, #28]	@ (8004d20 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d0e:	d101      	bne.n	8004d14 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e000      	b.n	8004d16 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	58000400 	.word	0x58000400
 8004d24:	20000000 	.word	0x20000000
 8004d28:	431bde83 	.word	0x431bde83

08004d2c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 0307 	bic.w	r3, r3, #7
 8004d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d78 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004d40:	f043 0302 	orr.w	r3, r3, #2
 8004d44:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d46:	4b0d      	ldr	r3, [pc, #52]	@ (8004d7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8004d7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004d58:	bf30      	wfi
 8004d5a:	e002      	b.n	8004d62 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004d5c:	bf40      	sev
    __WFE();
 8004d5e:	bf20      	wfe
    __WFE();
 8004d60:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004d62:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4a05      	ldr	r2, [pc, #20]	@ (8004d7c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004d68:	f023 0304 	bic.w	r3, r3, #4
 8004d6c:	6113      	str	r3, [r2, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr
 8004d78:	58000400 	.word	0x58000400
 8004d7c:	e000ed00 	.word	0xe000ed00

08004d80 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004d80:	b480      	push	{r7}
 8004d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d90:	d101      	bne.n	8004d96 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004d92:	2301      	movs	r3, #1
 8004d94:	e000      	b.n	8004d98 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bc80      	pop	{r7}
 8004d9e:	4770      	bx	lr
 8004da0:	58000400 	.word	0x58000400

08004da4 <LL_RCC_HSE_EnableTcxo>:
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004db6:	6013      	str	r3, [r2, #0]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <LL_RCC_HSE_DisableTcxo>:
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dd2:	6013      	str	r3, [r2, #0]
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dee:	d101      	bne.n	8004df4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004df0:	2301      	movs	r3, #1
 8004df2:	e000      	b.n	8004df6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr

08004dfe <LL_RCC_HSE_Enable>:
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <LL_RCC_HSE_Disable>:
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e2c:	6013      	str	r3, [r2, #0]
}
 8004e2e:	bf00      	nop
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bc80      	pop	{r7}
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_HSE_IsReady>:
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e48:	d101      	bne.n	8004e4e <LL_RCC_HSE_IsReady+0x18>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <LL_RCC_HSE_IsReady+0x1a>
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bc80      	pop	{r7}
 8004e56:	4770      	bx	lr

08004e58 <LL_RCC_HSI_Enable>:
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e6a:	6013      	str	r3, [r2, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bc80      	pop	{r7}
 8004e72:	4770      	bx	lr

08004e74 <LL_RCC_HSI_Disable>:
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e86:	6013      	str	r3, [r2, #0]
}
 8004e88:	bf00      	nop
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_HSI_IsReady>:
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	d101      	bne.n	8004ea8 <LL_RCC_HSI_IsReady+0x18>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e000      	b.n	8004eaa <LL_RCC_HSI_IsReady+0x1a>
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	061b      	lsls	r3, r3, #24
 8004ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	604b      	str	r3, [r1, #4]
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bc80      	pop	{r7}
 8004ed8:	4770      	bx	lr

08004eda <LL_RCC_LSE_IsReady>:
{
 8004eda:	b480      	push	{r7}
 8004edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d101      	bne.n	8004ef2 <LL_RCC_LSE_IsReady+0x18>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <LL_RCC_LSE_IsReady+0x1a>
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <LL_RCC_LSI_Enable>:
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bc80      	pop	{r7}
 8004f1a:	4770      	bx	lr

08004f1c <LL_RCC_LSI_Disable>:
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004f20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_LSI_IsReady>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d101      	bne.n	8004f54 <LL_RCC_LSI_IsReady+0x18>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <LL_RCC_LSI_IsReady+0x1a>
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bc80      	pop	{r7}
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_MSI_Enable>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	6013      	str	r3, [r2, #0]
}
 8004f72:	bf00      	nop
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <LL_RCC_MSI_Disable>:
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6013      	str	r3, [r2, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bc80      	pop	{r7}
 8004f94:	4770      	bx	lr

08004f96 <LL_RCC_MSI_IsReady>:
{
 8004f96:	b480      	push	{r7}
 8004f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d101      	bne.n	8004fac <LL_RCC_MSI_IsReady+0x16>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <LL_RCC_MSI_IsReady+0x18>
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d101      	bne.n	8004fcc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e000      	b.n	8004fce <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <LL_RCC_MSI_GetRange>:
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bc80      	pop	{r7}
 8004fea:	4770      	bx	lr

08004fec <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800500c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <LL_RCC_SetSysClkSource>:
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr

08005052 <LL_RCC_GetSysClkSource>:
{
 8005052:	b480      	push	{r7}
 8005054:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 030c 	and.w	r3, r3, #12
}
 8005060:	4618      	mov	r0, r3
 8005062:	46bd      	mov	sp, r7
 8005064:	bc80      	pop	{r7}
 8005066:	4770      	bx	lr

08005068 <LL_RCC_SetAHBPrescaler>:
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800507a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4313      	orrs	r3, r2
 8005082:	608b      	str	r3, [r1, #8]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <LL_RCC_SetAHB3Prescaler>:
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800509a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800509e:	f023 020f 	bic.w	r2, r3, #15
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80050b0:	bf00      	nop
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bc80      	pop	{r7}
 80050b8:	4770      	bx	lr

080050ba <LL_RCC_SetAPB1Prescaler>:
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	608b      	str	r3, [r1, #8]
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	bc80      	pop	{r7}
 80050de:	4770      	bx	lr

080050e0 <LL_RCC_SetAPB2Prescaler>:
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	608b      	str	r3, [r1, #8]
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr

08005106 <LL_RCC_GetAHBPrescaler>:
{
 8005106:	b480      	push	{r7}
 8005108:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800510a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005114:	4618      	mov	r0, r3
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <LL_RCC_GetAHB3Prescaler>:
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005120:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005124:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005128:	011b      	lsls	r3, r3, #4
 800512a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	bc80      	pop	{r7}
 8005134:	4770      	bx	lr

08005136 <LL_RCC_GetAPB1Prescaler>:
{
 8005136:	b480      	push	{r7}
 8005138:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800513a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8005144:	4618      	mov	r0, r3
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <LL_RCC_GetAPB2Prescaler>:
{
 800514c:	b480      	push	{r7}
 800514e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800515a:	4618      	mov	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005162:	b480      	push	{r7}
 8005164:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005170:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005174:	6013      	str	r3, [r2, #0]
}
 8005176:	bf00      	nop
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr

0800517e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800518c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005190:	6013      	str	r3, [r2, #0]
}
 8005192:	bf00      	nop
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr

0800519a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800519e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051ac:	d101      	bne.n	80051b2 <LL_RCC_PLL_IsReady+0x18>
 80051ae:	2301      	movs	r3, #1
 80051b0:	e000      	b.n	80051b4 <LL_RCC_PLL_IsReady+0x1a>
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	0a1b      	lsrs	r3, r3, #8
 80051c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bc80      	pop	{r7}
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr

080051ea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80051ea:	b480      	push	{r7}
 80051ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bc80      	pop	{r7}
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0303 	and.w	r3, r3, #3
}
 800520e:	4618      	mov	r0, r3
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d101      	bne.n	800522e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800522a:	2301      	movs	r3, #1
 800522c:	e000      	b.n	8005230 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800523c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005240:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800524c:	d101      	bne.n	8005252 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800524e:	2301      	movs	r3, #1
 8005250:	e000      	b.n	8005254 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr

0800525c <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800526e:	d101      	bne.n	8005274 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005270:	2301      	movs	r3, #1
 8005272:	e000      	b.n	8005276 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr

0800527e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800527e:	b480      	push	{r7}
 8005280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005286:	689b      	ldr	r3, [r3, #8]
 8005288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800528c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005290:	d101      	bne.n	8005296 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005292:	2301      	movs	r3, #1
 8005294:	e000      	b.n	8005298 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b088      	sub	sp, #32
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e36f      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052b2:	f7ff fece 	bl	8005052 <LL_RCC_GetSysClkSource>
 80052b6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b8:	f7ff ffa2 	bl	8005200 <LL_RCC_PLL_GetMainSource>
 80052bc:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0320 	and.w	r3, r3, #32
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f000 80c4 	beq.w	8005454 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_RCC_OscConfig+0x3e>
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	2b0c      	cmp	r3, #12
 80052d6:	d176      	bne.n	80053c6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d173      	bne.n	80053c6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e353      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_OscConfig+0x68>
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005306:	e006      	b.n	8005316 <HAL_RCC_OscConfig+0x76>
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005316:	4293      	cmp	r3, r2
 8005318:	d222      	bcs.n	8005360 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fd3c 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e331      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005338:	f043 0308 	orr.w	r3, r3, #8
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005350:	4313      	orrs	r3, r2
 8005352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	4618      	mov	r0, r3
 800535a:	f7ff fe53 	bl	8005004 <LL_RCC_MSI_SetCalibTrimming>
 800535e:	e021      	b.n	80053a4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800536a:	f043 0308 	orr.w	r3, r3, #8
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800537e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005382:	4313      	orrs	r3, r2
 8005384:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff fe3a 	bl	8005004 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fd01 	bl	8005d9c <RCC_SetFlashLatencyFromMSIRange>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e2f6      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053a4:	f000 fcc2 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 80053a8:	4603      	mov	r3, r0
 80053aa:	4aa7      	ldr	r2, [pc, #668]	@ (8005648 <HAL_RCC_OscConfig+0x3a8>)
 80053ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80053ae:	4ba7      	ldr	r3, [pc, #668]	@ (800564c <HAL_RCC_OscConfig+0x3ac>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fd f994 	bl	80026e0 <HAL_InitTick>
 80053b8:	4603      	mov	r3, r0
 80053ba:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80053bc:	7cfb      	ldrb	r3, [r7, #19]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d047      	beq.n	8005452 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	e2e5      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d02c      	beq.n	8005428 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053ce:	f7ff fdc6 	bl	8004f5e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053d2:	f7fc fc1b 	bl	8001c0c <HAL_GetTick>
 80053d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053da:	f7fc fc17 	bl	8001c0c <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e2d2      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80053ec:	f7ff fdd3 	bl	8004f96 <LL_RCC_MSI_IsReady>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f1      	beq.n	80053da <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005400:	f043 0308 	orr.w	r3, r3, #8
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005414:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005418:	4313      	orrs	r3, r2
 800541a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fdef 	bl	8005004 <LL_RCC_MSI_SetCalibTrimming>
 8005426:	e015      	b.n	8005454 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005428:	f7ff fda7 	bl	8004f7a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800542c:	f7fc fbee 	bl	8001c0c <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005434:	f7fc fbea 	bl	8001c0c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e2a5      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005446:	f7ff fda6 	bl	8004f96 <LL_RCC_MSI_IsReady>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1f1      	bne.n	8005434 <HAL_RCC_OscConfig+0x194>
 8005450:	e000      	b.n	8005454 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005452:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b00      	cmp	r3, #0
 800545e:	d058      	beq.n	8005512 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	2b08      	cmp	r3, #8
 8005464:	d005      	beq.n	8005472 <HAL_RCC_OscConfig+0x1d2>
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	2b0c      	cmp	r3, #12
 800546a:	d108      	bne.n	800547e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800546c:	69bb      	ldr	r3, [r7, #24]
 800546e:	2b03      	cmp	r3, #3
 8005470:	d105      	bne.n	800547e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d14b      	bne.n	8005512 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e289      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005490:	4313      	orrs	r3, r2
 8005492:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800549c:	d102      	bne.n	80054a4 <HAL_RCC_OscConfig+0x204>
 800549e:	f7ff fcae 	bl	8004dfe <LL_RCC_HSE_Enable>
 80054a2:	e00d      	b.n	80054c0 <HAL_RCC_OscConfig+0x220>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80054ac:	d104      	bne.n	80054b8 <HAL_RCC_OscConfig+0x218>
 80054ae:	f7ff fc79 	bl	8004da4 <LL_RCC_HSE_EnableTcxo>
 80054b2:	f7ff fca4 	bl	8004dfe <LL_RCC_HSE_Enable>
 80054b6:	e003      	b.n	80054c0 <HAL_RCC_OscConfig+0x220>
 80054b8:	f7ff fcaf 	bl	8004e1a <LL_RCC_HSE_Disable>
 80054bc:	f7ff fc80 	bl	8004dc0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d012      	beq.n	80054ee <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fc fba0 	bl	8001c0c <HAL_GetTick>
 80054cc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054d0:	f7fc fb9c 	bl	8001c0c <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b64      	cmp	r3, #100	@ 0x64
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e257      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80054e2:	f7ff fca8 	bl	8004e36 <LL_RCC_HSE_IsReady>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f1      	beq.n	80054d0 <HAL_RCC_OscConfig+0x230>
 80054ec:	e011      	b.n	8005512 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ee:	f7fc fb8d 	bl	8001c0c <HAL_GetTick>
 80054f2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054f6:	f7fc fb89 	bl	8001c0c <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b64      	cmp	r3, #100	@ 0x64
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e244      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005508:	f7ff fc95 	bl	8004e36 <LL_RCC_HSE_IsReady>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f1      	bne.n	80054f6 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d046      	beq.n	80055ac <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	2b04      	cmp	r3, #4
 8005522:	d005      	beq.n	8005530 <HAL_RCC_OscConfig+0x290>
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d10e      	bne.n	8005548 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b02      	cmp	r3, #2
 800552e:	d10b      	bne.n	8005548 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e22a      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff fcb6 	bl	8004eb2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005546:	e031      	b.n	80055ac <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d019      	beq.n	8005584 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	f7ff fc82 	bl	8004e58 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fc fb5a 	bl	8001c0c <HAL_GetTick>
 8005558:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800555c:	f7fc fb56 	bl	8001c0c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e211      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800556e:	f7ff fc8f 	bl	8004e90 <LL_RCC_HSI_IsReady>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f1      	beq.n	800555c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	4618      	mov	r0, r3
 800557e:	f7ff fc98 	bl	8004eb2 <LL_RCC_HSI_SetCalibTrimming>
 8005582:	e013      	b.n	80055ac <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005584:	f7ff fc76 	bl	8004e74 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fc fb40 	bl	8001c0c <HAL_GetTick>
 800558c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005590:	f7fc fb3c 	bl	8001c0c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e1f7      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80055a2:	f7ff fc75 	bl	8004e90 <LL_RCC_HSI_IsReady>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1f1      	bne.n	8005590 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d06e      	beq.n	8005696 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d056      	beq.n	800566e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80055c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055c8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d031      	beq.n	800563c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e1d0      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d013      	beq.n	8005622 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80055fa:	f7ff fc8f 	bl	8004f1c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80055fe:	f7fc fb05 	bl	8001c0c <HAL_GetTick>
 8005602:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005604:	e008      	b.n	8005618 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005606:	f7fc fb01 	bl	8001c0c <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	2b11      	cmp	r3, #17
 8005612:	d901      	bls.n	8005618 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e1bc      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005618:	f7ff fc90 	bl	8004f3c <LL_RCC_LSI_IsReady>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1f1      	bne.n	8005606 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562a:	f023 0210 	bic.w	r2, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800563c:	f7ff fc5e 	bl	8004efc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005640:	f7fc fae4 	bl	8001c0c <HAL_GetTick>
 8005644:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005646:	e00c      	b.n	8005662 <HAL_RCC_OscConfig+0x3c2>
 8005648:	20000000 	.word	0x20000000
 800564c:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005650:	f7fc fadc 	bl	8001c0c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b11      	cmp	r3, #17
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e197      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005662:	f7ff fc6b 	bl	8004f3c <LL_RCC_LSI_IsReady>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f1      	beq.n	8005650 <HAL_RCC_OscConfig+0x3b0>
 800566c:	e013      	b.n	8005696 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800566e:	f7ff fc55 	bl	8004f1c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005672:	f7fc facb 	bl	8001c0c <HAL_GetTick>
 8005676:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005678:	e008      	b.n	800568c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800567a:	f7fc fac7 	bl	8001c0c <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	2b11      	cmp	r3, #17
 8005686:	d901      	bls.n	800568c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e182      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800568c:	f7ff fc56 	bl	8004f3c <LL_RCC_LSI_IsReady>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1f1      	bne.n	800567a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80d8 	beq.w	8005854 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056a4:	f7ff fb6c 	bl	8004d80 <LL_PWR_IsEnabledBkUpAccess>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d113      	bne.n	80056d6 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80056ae:	f7ff faab 	bl	8004c08 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b2:	f7fc faab 	bl	8001c0c <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ba:	f7fc faa7 	bl	8001c0c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e162      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056cc:	f7ff fb58 	bl	8004d80 <LL_PWR_IsEnabledBkUpAccess>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f1      	beq.n	80056ba <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d07b      	beq.n	80057d6 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b85      	cmp	r3, #133	@ 0x85
 80056e4:	d003      	beq.n	80056ee <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	2b05      	cmp	r3, #5
 80056ec:	d109      	bne.n	8005702 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80056ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056fa:	f043 0304 	orr.w	r3, r3, #4
 80056fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005702:	f7fc fa83 	bl	8001c0c <HAL_GetTick>
 8005706:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800570c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800571c:	e00a      	b.n	8005734 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571e:	f7fc fa75 	bl	8001c0c <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572c:	4293      	cmp	r3, r2
 800572e:	d901      	bls.n	8005734 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e12e      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005734:	f7ff fbd1 	bl	8004eda <LL_RCC_LSE_IsReady>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d0ef      	beq.n	800571e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	2b81      	cmp	r3, #129	@ 0x81
 8005744:	d003      	beq.n	800574e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b85      	cmp	r3, #133	@ 0x85
 800574c:	d121      	bne.n	8005792 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574e:	f7fc fa5d 	bl	8001c0c <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800575c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005764:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005768:	e00a      	b.n	8005780 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800576a:	f7fc fa4f 	bl	8001c0c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005778:	4293      	cmp	r3, r2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e108      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ec      	beq.n	800576a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005790:	e060      	b.n	8005854 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005792:	f7fc fa3b 	bl	8001c0c <HAL_GetTick>
 8005796:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fc fa2d 	bl	8001c0c <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0e6      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1ec      	bne.n	80057ae <HAL_RCC_OscConfig+0x50e>
 80057d4:	e03e      	b.n	8005854 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d6:	f7fc fa19 	bl	8001c0c <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057f0:	e00a      	b.n	8005808 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f2:	f7fc fa0b 	bl	8001c0c <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e0c4      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1ec      	bne.n	80057f2 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005818:	f7fc f9f8 	bl	8001c0c <HAL_GetTick>
 800581c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800581e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005826:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800582a:	f023 0301 	bic.w	r3, r3, #1
 800582e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005832:	e00a      	b.n	800584a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005834:	f7fc f9ea 	bl	8001c0c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005842:	4293      	cmp	r3, r2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e0a3      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 800584a:	f7ff fb46 	bl	8004eda <LL_RCC_LSE_IsReady>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ef      	bne.n	8005834 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8099 	beq.w	8005990 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b0c      	cmp	r3, #12
 8005862:	d06c      	beq.n	800593e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005868:	2b02      	cmp	r3, #2
 800586a:	d14b      	bne.n	8005904 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800586c:	f7ff fc87 	bl	800517e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005870:	f7fc f9cc 	bl	8001c0c <HAL_GetTick>
 8005874:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005876:	e008      	b.n	800588a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005878:	f7fc f9c8 	bl	8001c0c <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b0a      	cmp	r3, #10
 8005884:	d901      	bls.n	800588a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e083      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800588a:	f7ff fc86 	bl	800519a <LL_RCC_PLL_IsReady>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f1      	bne.n	8005878 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	4b40      	ldr	r3, [pc, #256]	@ (800599c <HAL_RCC_OscConfig+0x6fc>)
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058ac:	0212      	lsls	r2, r2, #8
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80058ba:	4311      	orrs	r1, r2
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80058c0:	430a      	orrs	r2, r1
 80058c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ca:	f7ff fc4a 	bl	8005162 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058dc:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058de:	f7fc f995 	bl	8001c0c <HAL_GetTick>
 80058e2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80058e4:	e008      	b.n	80058f8 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e6:	f7fc f991 	bl	8001c0c <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	1ad3      	subs	r3, r2, r3
 80058f0:	2b0a      	cmp	r3, #10
 80058f2:	d901      	bls.n	80058f8 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e04c      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80058f8:	f7ff fc4f 	bl	800519a <LL_RCC_PLL_IsReady>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d0f1      	beq.n	80058e6 <HAL_RCC_OscConfig+0x646>
 8005902:	e045      	b.n	8005990 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005904:	f7ff fc3b 	bl	800517e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005908:	f7fc f980 	bl	8001c0c <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005910:	f7fc f97c 	bl	8001c0c <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b0a      	cmp	r3, #10
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e037      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005922:	f7ff fc3a 	bl	800519a <LL_RCC_PLL_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f1      	bne.n	8005910 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800592c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005936:	4b1a      	ldr	r3, [pc, #104]	@ (80059a0 <HAL_RCC_OscConfig+0x700>)
 8005938:	4013      	ands	r3, r2
 800593a:	60cb      	str	r3, [r1, #12]
 800593c:	e028      	b.n	8005990 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e023      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f003 0203 	and.w	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595c:	429a      	cmp	r2, r3
 800595e:	d115      	bne.n	800598c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800596a:	429a      	cmp	r2, r3
 800596c:	d10e      	bne.n	800598c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	429a      	cmp	r2, r3
 800597c:	d106      	bne.n	800598c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3720      	adds	r7, #32
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	11c1808c 	.word	0x11c1808c
 80059a0:	eefefffc 	.word	0xeefefffc

080059a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e10f      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059b8:	4b89      	ldr	r3, [pc, #548]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d91b      	bls.n	80059fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b86      	ldr	r3, [pc, #536]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f023 0207 	bic.w	r2, r3, #7
 80059ce:	4984      	ldr	r1, [pc, #528]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059d6:	f7fc f919 	bl	8001c0c <HAL_GetTick>
 80059da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059de:	f7fc f915 	bl	8001c0c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0f3      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f0:	4b7b      	ldr	r3, [pc, #492]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0307 	and.w	r3, r3, #7
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d1ef      	bne.n	80059de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d016      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fb2a 	bl	8005068 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a14:	f7fc f8fa 	bl	8001c0c <HAL_GetTick>
 8005a18:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a1c:	f7fc f8f6 	bl	8001c0c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0d4      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a2e:	f7ff fbf2 	bl	8005216 <LL_RCC_IsActiveFlag_HPRE>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d0f1      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d016      	beq.n	8005a72 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fb20 	bl	800508e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a4e:	f7fc f8dd 	bl	8001c0c <HAL_GetTick>
 8005a52:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a56:	f7fc f8d9 	bl	8001c0c <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e0b7      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a68:	f7ff fbe6 	bl	8005238 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f1      	beq.n	8005a56 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d016      	beq.n	8005aac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff fb19 	bl	80050ba <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a88:	f7fc f8c0 	bl	8001c0c <HAL_GetTick>
 8005a8c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a90:	f7fc f8bc 	bl	8001c0c <HAL_GetTick>
 8005a94:	4602      	mov	r2, r0
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	2b02      	cmp	r3, #2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e09a      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005aa2:	f7ff fbdb 	bl	800525c <LL_RCC_IsActiveFlag_PPRE1>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f1      	beq.n	8005a90 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0308 	and.w	r3, r3, #8
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d017      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fb0e 	bl	80050e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ac4:	f7fc f8a2 	bl	8001c0c <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005acc:	f7fc f89e 	bl	8001c0c <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e07c      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ade:	f7ff fbce 	bl	800527e <LL_RCC_IsActiveFlag_PPRE2>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0f1      	beq.n	8005acc <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d043      	beq.n	8005b7c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d106      	bne.n	8005b0a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005afc:	f7ff f99b 	bl	8004e36 <LL_RCC_HSE_IsReady>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d11e      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e066      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	2b03      	cmp	r3, #3
 8005b10:	d106      	bne.n	8005b20 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005b12:	f7ff fb42 	bl	800519a <LL_RCC_PLL_IsReady>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d113      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e05b      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b28:	f7ff fa35 	bl	8004f96 <LL_RCC_MSI_IsReady>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d108      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
 8005b34:	e050      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b36:	f7ff f9ab 	bl	8004e90 <LL_RCC_HSI_IsReady>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e049      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fa6f 	bl	800502c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b4e:	f7fc f85d 	bl	8001c0c <HAL_GetTick>
 8005b52:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b54:	e00a      	b.n	8005b6c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b56:	f7fc f859 	bl	8001c0c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e035      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6c:	f7ff fa71 	bl	8005052 <LL_RCC_GetSysClkSource>
 8005b70:	4602      	mov	r2, r0
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d1ec      	bne.n	8005b56 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b7c:	4b18      	ldr	r3, [pc, #96]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0307 	and.w	r3, r3, #7
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d21b      	bcs.n	8005bc2 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b8a:	4b15      	ldr	r3, [pc, #84]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 0207 	bic.w	r2, r3, #7
 8005b92:	4913      	ldr	r1, [pc, #76]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b9a:	f7fc f837 	bl	8001c0c <HAL_GetTick>
 8005b9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ba0:	e008      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ba2:	f7fc f833 	bl	8001c0c <HAL_GetTick>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1ad3      	subs	r3, r2, r3
 8005bac:	2b02      	cmp	r3, #2
 8005bae:	d901      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e011      	b.n	8005bd8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <HAL_RCC_ClockConfig+0x23c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d1ef      	bne.n	8005ba2 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005bc2:	f000 f8b3 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	4a06      	ldr	r2, [pc, #24]	@ (8005be4 <HAL_RCC_ClockConfig+0x240>)
 8005bca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005bcc:	4b06      	ldr	r3, [pc, #24]	@ (8005be8 <HAL_RCC_ClockConfig+0x244>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fc fd85 	bl	80026e0 <HAL_InitTick>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	58004000 	.word	0x58004000
 8005be4:	20000000 	.word	0x20000000
 8005be8:	20000004 	.word	0x20000004

08005bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bec:	b590      	push	{r4, r7, lr}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bfa:	f7ff fa2a 	bl	8005052 <LL_RCC_GetSysClkSource>
 8005bfe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c00:	f7ff fafe 	bl	8005200 <LL_RCC_PLL_GetMainSource>
 8005c04:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <HAL_RCC_GetSysClockFreq+0x2c>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2b0c      	cmp	r3, #12
 8005c10:	d139      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d136      	bne.n	8005c86 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005c18:	f7ff f9cd 	bl	8004fb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d115      	bne.n	8005c4e <HAL_RCC_GetSysClockFreq+0x62>
 8005c22:	f7ff f9c8 	bl	8004fb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d106      	bne.n	8005c3a <HAL_RCC_GetSysClockFreq+0x4e>
 8005c2c:	f7ff f9d3 	bl	8004fd6 <LL_RCC_MSI_GetRange>
 8005c30:	4603      	mov	r3, r0
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	e005      	b.n	8005c46 <HAL_RCC_GetSysClockFreq+0x5a>
 8005c3a:	f7ff f9d7 	bl	8004fec <LL_RCC_MSI_GetRangeAfterStandby>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	0a1b      	lsrs	r3, r3, #8
 8005c42:	f003 030f 	and.w	r3, r3, #15
 8005c46:	4a36      	ldr	r2, [pc, #216]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x134>)
 8005c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4c:	e014      	b.n	8005c78 <HAL_RCC_GetSysClockFreq+0x8c>
 8005c4e:	f7ff f9b2 	bl	8004fb6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d106      	bne.n	8005c66 <HAL_RCC_GetSysClockFreq+0x7a>
 8005c58:	f7ff f9bd 	bl	8004fd6 <LL_RCC_MSI_GetRange>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	f003 030f 	and.w	r3, r3, #15
 8005c64:	e005      	b.n	8005c72 <HAL_RCC_GetSysClockFreq+0x86>
 8005c66:	f7ff f9c1 	bl	8004fec <LL_RCC_MSI_GetRangeAfterStandby>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	091b      	lsrs	r3, r3, #4
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	4a2b      	ldr	r2, [pc, #172]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x134>)
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d115      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c84:	e012      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c8c:	4b25      	ldr	r3, [pc, #148]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e00c      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d109      	bne.n	8005cac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c98:	f7ff f8a0 	bl	8004ddc <LL_RCC_HSE_IsEnabledDiv2>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d102      	bne.n	8005ca8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005ca2:	4b20      	ldr	r3, [pc, #128]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e001      	b.n	8005cac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005caa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cac:	f7ff f9d1 	bl	8005052 <LL_RCC_GetSysClkSource>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b0c      	cmp	r3, #12
 8005cb4:	d12f      	bne.n	8005d16 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005cb6:	f7ff faa3 	bl	8005200 <LL_RCC_PLL_GetMainSource>
 8005cba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d003      	beq.n	8005cca <HAL_RCC_GetSysClockFreq+0xde>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b03      	cmp	r3, #3
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCC_GetSysClockFreq+0xe4>
 8005cc8:	e00d      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005cca:	4b16      	ldr	r3, [pc, #88]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005ccc:	60fb      	str	r3, [r7, #12]
        break;
 8005cce:	e00d      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005cd0:	f7ff f884 	bl	8004ddc <LL_RCC_HSE_IsEnabledDiv2>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d102      	bne.n	8005ce0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005cda:	4b12      	ldr	r3, [pc, #72]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cdc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005cde:	e005      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005ce0:	4b11      	ldr	r3, [pc, #68]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005ce2:	60fb      	str	r3, [r7, #12]
        break;
 8005ce4:	e002      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	60fb      	str	r3, [r7, #12]
        break;
 8005cea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005cec:	f7ff fa66 	bl	80051bc <LL_RCC_PLL_GetN>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	fb03 f402 	mul.w	r4, r3, r2
 8005cf8:	f7ff fa77 	bl	80051ea <LL_RCC_PLL_GetDivider>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	091b      	lsrs	r3, r3, #4
 8005d00:	3301      	adds	r3, #1
 8005d02:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d06:	f7ff fa65 	bl	80051d4 <LL_RCC_PLL_GetR>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	0f5b      	lsrs	r3, r3, #29
 8005d0e:	3301      	adds	r3, #1
 8005d10:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d14:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005d16:	697b      	ldr	r3, [r7, #20]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	371c      	adds	r7, #28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd90      	pop	{r4, r7, pc}
 8005d20:	0801cb14 	.word	0x0801cb14
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	01e84800 	.word	0x01e84800

08005d2c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b598      	push	{r3, r4, r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d30:	f7ff ff5c 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8005d34:	4604      	mov	r4, r0
 8005d36:	f7ff f9e6 	bl	8005106 <LL_RCC_GetAHBPrescaler>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	4a03      	ldr	r2, [pc, #12]	@ (8005d50 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d48:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	bd98      	pop	{r3, r4, r7, pc}
 8005d50:	0801cab4 	.word	0x0801cab4

08005d54 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d54:	b598      	push	{r3, r4, r7, lr}
 8005d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d58:	f7ff ffe8 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d5c:	4604      	mov	r4, r0
 8005d5e:	f7ff f9ea 	bl	8005136 <LL_RCC_GetAPB1Prescaler>
 8005d62:	4603      	mov	r3, r0
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	4a03      	ldr	r2, [pc, #12]	@ (8005d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d6c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	bd98      	pop	{r3, r4, r7, pc}
 8005d74:	0801caf4 	.word	0x0801caf4

08005d78 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d78:	b598      	push	{r3, r4, r7, lr}
 8005d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d7c:	f7ff ffd6 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d80:	4604      	mov	r4, r0
 8005d82:	f7ff f9e3 	bl	800514c <LL_RCC_GetAPB2Prescaler>
 8005d86:	4603      	mov	r3, r0
 8005d88:	0adb      	lsrs	r3, r3, #11
 8005d8a:	4a03      	ldr	r2, [pc, #12]	@ (8005d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	bd98      	pop	{r3, r4, r7, pc}
 8005d98:	0801caf4 	.word	0x0801caf4

08005d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	4a10      	ldr	r2, [pc, #64]	@ (8005df0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005db4:	f7ff f9b2 	bl	800511c <LL_RCC_GetAHB3Prescaler>
 8005db8:	4603      	mov	r3, r0
 8005dba:	091b      	lsrs	r3, r3, #4
 8005dbc:	f003 030f 	and.w	r3, r3, #15
 8005dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dcc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	4a09      	ldr	r2, [pc, #36]	@ (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd6:	0c9c      	lsrs	r4, r3, #18
 8005dd8:	f7fe ff58 	bl	8004c8c <HAL_PWREx_GetVoltageRange>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4619      	mov	r1, r3
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 f80b 	bl	8005dfc <RCC_SetFlashLatency>
 8005de6:	4603      	mov	r3, r0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3714      	adds	r7, #20
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd90      	pop	{r4, r7, pc}
 8005df0:	0801cb14 	.word	0x0801cb14
 8005df4:	0801cab4 	.word	0x0801cab4
 8005df8:	431bde83 	.word	0x431bde83

08005dfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b08e      	sub	sp, #56	@ 0x38
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005e06:	4a3a      	ldr	r2, [pc, #232]	@ (8005ef0 <RCC_SetFlashLatency+0xf4>)
 8005e08:	f107 0320 	add.w	r3, r7, #32
 8005e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e10:	6018      	str	r0, [r3, #0]
 8005e12:	3304      	adds	r3, #4
 8005e14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005e16:	4a37      	ldr	r2, [pc, #220]	@ (8005ef4 <RCC_SetFlashLatency+0xf8>)
 8005e18:	f107 0318 	add.w	r3, r7, #24
 8005e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	3304      	adds	r3, #4
 8005e24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005e26:	4a34      	ldr	r2, [pc, #208]	@ (8005ef8 <RCC_SetFlashLatency+0xfc>)
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e32:	2300      	movs	r3, #0
 8005e34:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e3c:	d11b      	bne.n	8005e76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e3e:	2300      	movs	r3, #0
 8005e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e42:	e014      	b.n	8005e6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	3338      	adds	r3, #56	@ 0x38
 8005e4a:	443b      	add	r3, r7
 8005e4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d807      	bhi.n	8005e68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	3338      	adds	r3, #56	@ 0x38
 8005e5e:	443b      	add	r3, r7
 8005e60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e66:	e021      	b.n	8005eac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d9e7      	bls.n	8005e44 <RCC_SetFlashLatency+0x48>
 8005e74:	e01a      	b.n	8005eac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e76:	2300      	movs	r3, #0
 8005e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e7a:	e014      	b.n	8005ea6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	3338      	adds	r3, #56	@ 0x38
 8005e82:	443b      	add	r3, r7
 8005e84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d807      	bhi.n	8005ea0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	3338      	adds	r3, #56	@ 0x38
 8005e96:	443b      	add	r3, r7
 8005e98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e9c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e9e:	e005      	b.n	8005eac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d9e7      	bls.n	8005e7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005eac:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <RCC_SetFlashLatency+0x100>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f023 0207 	bic.w	r2, r3, #7
 8005eb4:	4911      	ldr	r1, [pc, #68]	@ (8005efc <RCC_SetFlashLatency+0x100>)
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005ebc:	f7fb fea6 	bl	8001c0c <HAL_GetTick>
 8005ec0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ec2:	e008      	b.n	8005ed6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005ec4:	f7fb fea2 	bl	8001c0c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e007      	b.n	8005ee6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005ed6:	4b09      	ldr	r3, [pc, #36]	@ (8005efc <RCC_SetFlashLatency+0x100>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d1ef      	bne.n	8005ec4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3738      	adds	r7, #56	@ 0x38
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	0801c5cc 	.word	0x0801c5cc
 8005ef4:	0801c5d4 	.word	0x0801c5d4
 8005ef8:	0801c5dc 	.word	0x0801c5dc
 8005efc:	58004000 	.word	0x58004000

08005f00 <LL_RCC_LSE_IsReady>:
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d101      	bne.n	8005f18 <LL_RCC_LSE_IsReady+0x18>
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <LL_RCC_LSE_IsReady+0x1a>
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bc80      	pop	{r7}
 8005f20:	4770      	bx	lr

08005f22 <LL_RCC_SetUSARTClockSource>:
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005f2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	0c1b      	lsrs	r3, r3, #16
 8005f36:	43db      	mvns	r3, r3
 8005f38:	401a      	ands	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f42:	4313      	orrs	r3, r2
 8005f44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bc80      	pop	{r7}
 8005f50:	4770      	bx	lr

08005f52 <LL_RCC_SetI2SClockSource>:
{
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f72:	bf00      	nop
 8005f74:	370c      	adds	r7, #12
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bc80      	pop	{r7}
 8005f7a:	4770      	bx	lr

08005f7c <LL_RCC_SetLPUARTClockSource>:
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005f84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr

08005fa6 <LL_RCC_SetI2CClockSource>:
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	091b      	lsrs	r3, r3, #4
 8005fba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	401a      	ands	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8005fca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr

08005fde <LL_RCC_SetLPTIMClockSource>:
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	0c1b      	lsrs	r3, r3, #16
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	401a      	ands	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <LL_RCC_SetRNGClockSource>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800601c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006020:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006024:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <LL_RCC_SetADCClockSource>:
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006042:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800604e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	bc80      	pop	{r7}
 8006062:	4770      	bx	lr

08006064 <LL_RCC_SetRTCClockSource>:
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800606c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006070:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006074:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006078:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	bc80      	pop	{r7}
 800608c:	4770      	bx	lr

0800608e <LL_RCC_GetRTCClockSource>:
{
 800608e:	b480      	push	{r7}
 8006090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006092:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800609a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800609e:	4618      	mov	r0, r3
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bc80      	pop	{r7}
 80060a4:	4770      	bx	lr

080060a6 <LL_RCC_ForceBackupDomainReset>:
{
 80060a6:	b480      	push	{r7}
 80060a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060be:	bf00      	nop
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80060c6:	b480      	push	{r7}
 80060c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80060ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80060de:	bf00      	nop
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr
	...

080060e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80060f0:	2300      	movs	r3, #0
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80060f4:	2300      	movs	r3, #0
 80060f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80060f8:	2300      	movs	r3, #0
 80060fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d058      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006108:	f7fe fd7e 	bl	8004c08 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800610c:	f7fb fd7e 	bl	8001c0c <HAL_GetTick>
 8006110:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006112:	e009      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006114:	f7fb fd7a 	bl	8001c0c <HAL_GetTick>
 8006118:	4602      	mov	r2, r0
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d902      	bls.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	74fb      	strb	r3, [r7, #19]
        break;
 8006126:	e006      	b.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006128:	4b7b      	ldr	r3, [pc, #492]	@ (8006318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006130:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006134:	d1ee      	bne.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006136:	7cfb      	ldrb	r3, [r7, #19]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d13c      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800613c:	f7ff ffa7 	bl	800608e <LL_RCC_GetRTCClockSource>
 8006140:	4602      	mov	r2, r0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006146:	429a      	cmp	r2, r3
 8006148:	d00f      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800614a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006156:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006158:	f7ff ffa5 	bl	80060a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800615c:	f7ff ffb3 	bl	80060c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d014      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fb fd4a 	bl	8001c0c <HAL_GetTick>
 8006178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800617a:	e00b      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fb fd46 	bl	8001c0c <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d902      	bls.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	74fb      	strb	r3, [r7, #19]
            break;
 8006192:	e004      	b.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006194:	f7ff feb4 	bl	8005f00 <LL_RCC_LSE_IsReady>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d1ee      	bne.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800619e:	7cfb      	ldrb	r3, [r7, #19]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff5b 	bl	8006064 <LL_RCC_SetRTCClockSource>
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061b0:	7cfb      	ldrb	r3, [r7, #19]
 80061b2:	74bb      	strb	r3, [r7, #18]
 80061b4:	e001      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b6:	7cfb      	ldrb	r3, [r7, #19]
 80061b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fea9 	bl	8005f22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fe9e 	bl	8005f22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0320 	and.w	r3, r3, #32
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d004      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7ff fec0 	bl	8005f7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006204:	2b00      	cmp	r3, #0
 8006206:	d004      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff fee6 	bl	8005fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fedb 	bl	8005fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fed0 	bl	8005fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	695b      	ldr	r3, [r3, #20]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fea9 	bl	8005fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fe9e 	bl	8005fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fe93 	bl	8005fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	2b00      	cmp	r3, #0
 800628a:	d011      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fe5e 	bl	8005f52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629e:	d107      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d010      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fea5 	bl	8006010 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d011      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fea3 	bl	800603a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062fc:	d107      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800630c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800630e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	58000400 	.word	0x58000400

0800631c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d071      	beq.n	8006412 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b00      	cmp	r3, #0
 8006338:	d106      	bne.n	8006348 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fb f9ba 	bl	80016bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2202      	movs	r2, #2
 800634c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006350:	4b32      	ldr	r3, [pc, #200]	@ (800641c <HAL_RTC_Init+0x100>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b10      	cmp	r3, #16
 800635a:	d051      	beq.n	8006400 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800635c:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <HAL_RTC_Init+0x100>)
 800635e:	22ca      	movs	r2, #202	@ 0xca
 8006360:	625a      	str	r2, [r3, #36]	@ 0x24
 8006362:	4b2e      	ldr	r3, [pc, #184]	@ (800641c <HAL_RTC_Init+0x100>)
 8006364:	2253      	movs	r2, #83	@ 0x53
 8006366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fa11 	bl	8006790 <RTC_EnterInitMode>
 800636e:	4603      	mov	r3, r0
 8006370:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d13f      	bne.n	80063f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006378:	4b28      	ldr	r3, [pc, #160]	@ (800641c <HAL_RTC_Init+0x100>)
 800637a:	699b      	ldr	r3, [r3, #24]
 800637c:	4a27      	ldr	r2, [pc, #156]	@ (800641c <HAL_RTC_Init+0x100>)
 800637e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006386:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006388:	4b24      	ldr	r3, [pc, #144]	@ (800641c <HAL_RTC_Init+0x100>)
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	4319      	orrs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	430b      	orrs	r3, r1
 800639c:	491f      	ldr	r1, [pc, #124]	@ (800641c <HAL_RTC_Init+0x100>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68da      	ldr	r2, [r3, #12]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	491b      	ldr	r1, [pc, #108]	@ (800641c <HAL_RTC_Init+0x100>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80063b2:	4b1a      	ldr	r3, [pc, #104]	@ (800641c <HAL_RTC_Init+0x100>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063c2:	430b      	orrs	r3, r1
 80063c4:	4915      	ldr	r1, [pc, #84]	@ (800641c <HAL_RTC_Init+0x100>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 fa14 	bl	80067f8 <RTC_ExitInitMode>
 80063d0:	4603      	mov	r3, r0
 80063d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10e      	bne.n	80063f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80063da:	4b10      	ldr	r3, [pc, #64]	@ (800641c <HAL_RTC_Init+0x100>)
 80063dc:	699b      	ldr	r3, [r3, #24]
 80063de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a19      	ldr	r1, [r3, #32]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	4319      	orrs	r1, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	430b      	orrs	r3, r1
 80063f2:	490a      	ldr	r1, [pc, #40]	@ (800641c <HAL_RTC_Init+0x100>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f8:	4b08      	ldr	r3, [pc, #32]	@ (800641c <HAL_RTC_Init+0x100>)
 80063fa:	22ff      	movs	r2, #255	@ 0xff
 80063fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80063fe:	e001      	b.n	8006404 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006400:	2300      	movs	r3, #0
 8006402:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d103      	bne.n	8006412 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006412:	7bfb      	ldrb	r3, [r7, #15]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3710      	adds	r7, #16
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40002800 	.word	0x40002800

08006420 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006420:	b590      	push	{r4, r7, lr}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_RTC_SetAlarm_IT+0x1e>
 800643a:	2302      	movs	r3, #2
 800643c:	e0f3      	b.n	8006626 <HAL_RTC_SetAlarm_IT+0x206>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800644e:	4b78      	ldr	r3, [pc, #480]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006456:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645e:	d06a      	beq.n	8006536 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d13a      	bne.n	80064dc <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006466:	4b72      	ldr	r3, [pc, #456]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	2200      	movs	r2, #0
 8006476:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f9f5 	bl	8006874 <RTC_ByteToBcd2>
 800648a:	4603      	mov	r3, r0
 800648c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	785b      	ldrb	r3, [r3, #1]
 8006492:	4618      	mov	r0, r3
 8006494:	f000 f9ee 	bl	8006874 <RTC_ByteToBcd2>
 8006498:	4603      	mov	r3, r0
 800649a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800649c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	789b      	ldrb	r3, [r3, #2]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f000 f9e6 	bl	8006874 <RTC_ByteToBcd2>
 80064a8:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80064aa:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	78db      	ldrb	r3, [r3, #3]
 80064b2:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80064b4:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f9d8 	bl	8006874 <RTC_ByteToBcd2>
 80064c4:	4603      	mov	r3, r0
 80064c6:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80064c8:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80064d0:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e02c      	b.n	8006536 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	695b      	ldr	r3, [r3, #20]
 80064e0:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80064e4:	d00d      	beq.n	8006502 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80064ee:	d008      	beq.n	8006502 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80064f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2200      	movs	r2, #0
 8006500:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800650e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006514:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	78db      	ldrb	r3, [r3, #3]
 800651a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800651c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006524:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006526:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800652c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006532:	4313      	orrs	r3, r2
 8006534:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006536:	4b3e      	ldr	r3, [pc, #248]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006538:	22ca      	movs	r2, #202	@ 0xca
 800653a:	625a      	str	r2, [r3, #36]	@ 0x24
 800653c:	4b3c      	ldr	r3, [pc, #240]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800653e:	2253      	movs	r2, #83	@ 0x53
 8006540:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800654a:	d12c      	bne.n	80065a6 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800654c:	4b38      	ldr	r3, [pc, #224]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	4a37      	ldr	r2, [pc, #220]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006552:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006556:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800655a:	2201      	movs	r2, #1
 800655c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006564:	d107      	bne.n	8006576 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	699a      	ldr	r2, [r3, #24]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	4930      	ldr	r1, [pc, #192]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006570:	4313      	orrs	r3, r2
 8006572:	644b      	str	r3, [r1, #68]	@ 0x44
 8006574:	e006      	b.n	8006584 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006576:	4a2e      	ldr	r2, [pc, #184]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800657c:	4a2c      	ldr	r2, [pc, #176]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006584:	4a2a      	ldr	r2, [pc, #168]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	f043 0201 	orr.w	r2, r3, #1
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006598:	4b25      	ldr	r3, [pc, #148]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	4a24      	ldr	r2, [pc, #144]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 800659e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 80065a2:	6193      	str	r3, [r2, #24]
 80065a4:	e02b      	b.n	80065fe <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80065a6:	4b22      	ldr	r3, [pc, #136]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	4a21      	ldr	r2, [pc, #132]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065ac:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80065b0:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80065b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065b4:	2202      	movs	r2, #2
 80065b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065be:	d107      	bne.n	80065d0 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	699a      	ldr	r2, [r3, #24]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	4919      	ldr	r1, [pc, #100]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80065ce:	e006      	b.n	80065de <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80065d0:	4a17      	ldr	r2, [pc, #92]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80065d6:	4a16      	ldr	r2, [pc, #88]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80065de:	4a14      	ldr	r2, [pc, #80]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	f043 0202 	orr.w	r2, r3, #2
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80065f2:	4b0f      	ldr	r3, [pc, #60]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 80065f8:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80065fc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80065fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006634 <HAL_RTC_SetAlarm_IT+0x214>)
 8006600:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006604:	4a0b      	ldr	r2, [pc, #44]	@ (8006634 <HAL_RTC_SetAlarm_IT+0x214>)
 8006606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800660a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800660e:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <HAL_RTC_SetAlarm_IT+0x210>)
 8006610:	22ff      	movs	r2, #255	@ 0xff
 8006612:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bd90      	pop	{r4, r7, pc}
 800662e:	bf00      	nop
 8006630:	40002800 	.word	0x40002800
 8006634:	58000800 	.word	0x58000800

08006638 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006648:	2b01      	cmp	r3, #1
 800664a:	d101      	bne.n	8006650 <HAL_RTC_DeactivateAlarm+0x18>
 800664c:	2302      	movs	r3, #2
 800664e:	e048      	b.n	80066e2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2202      	movs	r2, #2
 800665c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006660:	4b22      	ldr	r3, [pc, #136]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 8006662:	22ca      	movs	r2, #202	@ 0xca
 8006664:	625a      	str	r2, [r3, #36]	@ 0x24
 8006666:	4b21      	ldr	r3, [pc, #132]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 8006668:	2253      	movs	r2, #83	@ 0x53
 800666a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006672:	d115      	bne.n	80066a0 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006674:	4b1d      	ldr	r3, [pc, #116]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	4a1c      	ldr	r2, [pc, #112]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800667a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800667e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006680:	4b1a      	ldr	r3, [pc, #104]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 8006682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006684:	4a19      	ldr	r2, [pc, #100]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 8006686:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800668a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006690:	f023 0201 	bic.w	r2, r3, #1
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006698:	4b14      	ldr	r3, [pc, #80]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 800669a:	2201      	movs	r2, #1
 800669c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800669e:	e014      	b.n	80066ca <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80066a0:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	4a11      	ldr	r2, [pc, #68]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066a6:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 80066aa:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80066ac:	4b0f      	ldr	r3, [pc, #60]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066b0:	4a0e      	ldr	r2, [pc, #56]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066b6:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066bc:	f023 0202 	bic.w	r2, r3, #2
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80066c4:	4b09      	ldr	r3, [pc, #36]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066c6:	2202      	movs	r2, #2
 80066c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ca:	4b08      	ldr	r3, [pc, #32]	@ (80066ec <HAL_RTC_DeactivateAlarm+0xb4>)
 80066cc:	22ff      	movs	r2, #255	@ 0xff
 80066ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr
 80066ec:	40002800 	.word	0x40002800

080066f0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80066f8:	4b11      	ldr	r3, [pc, #68]	@ (8006740 <HAL_RTC_AlarmIRQHandler+0x50>)
 80066fa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006700:	4013      	ands	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800670e:	4b0c      	ldr	r3, [pc, #48]	@ (8006740 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006710:	2201      	movs	r2, #1
 8006712:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fb fc5a 	bl	8001fce <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006724:	4b06      	ldr	r3, [pc, #24]	@ (8006740 <HAL_RTC_AlarmIRQHandler+0x50>)
 8006726:	2202      	movs	r2, #2
 8006728:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f94a 	bl	80069c4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40002800 	.word	0x40002800

08006744 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800674c:	4b0f      	ldr	r3, [pc, #60]	@ (800678c <HAL_RTC_WaitForSynchro+0x48>)
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	4a0e      	ldr	r2, [pc, #56]	@ (800678c <HAL_RTC_WaitForSynchro+0x48>)
 8006752:	f023 0320 	bic.w	r3, r3, #32
 8006756:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006758:	f7fb fa58 	bl	8001c0c <HAL_GetTick>
 800675c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800675e:	e009      	b.n	8006774 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006760:	f7fb fa54 	bl	8001c0c <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800676e:	d901      	bls.n	8006774 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <HAL_RTC_WaitForSynchro+0x48>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ef      	beq.n	8006760 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	40002800 	.word	0x40002800

08006790 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800679c:	4b15      	ldr	r3, [pc, #84]	@ (80067f4 <RTC_EnterInitMode+0x64>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d120      	bne.n	80067ea <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80067a8:	4b12      	ldr	r3, [pc, #72]	@ (80067f4 <RTC_EnterInitMode+0x64>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	4a11      	ldr	r2, [pc, #68]	@ (80067f4 <RTC_EnterInitMode+0x64>)
 80067ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067b2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80067b4:	f7fb fa2a 	bl	8001c0c <HAL_GetTick>
 80067b8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067ba:	e00d      	b.n	80067d8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067bc:	f7fb fa26 	bl	8001c0c <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80067ca:	d905      	bls.n	80067d8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2203      	movs	r2, #3
 80067d4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067d8:	4b06      	ldr	r3, [pc, #24]	@ (80067f4 <RTC_EnterInitMode+0x64>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <RTC_EnterInitMode+0x5a>
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d1e8      	bne.n	80067bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80067ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40002800 	.word	0x40002800

080067f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006804:	4b1a      	ldr	r3, [pc, #104]	@ (8006870 <RTC_ExitInitMode+0x78>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	4a19      	ldr	r2, [pc, #100]	@ (8006870 <RTC_ExitInitMode+0x78>)
 800680a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800680e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006810:	4b17      	ldr	r3, [pc, #92]	@ (8006870 <RTC_ExitInitMode+0x78>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10c      	bne.n	8006836 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff ff91 	bl	8006744 <HAL_RTC_WaitForSynchro>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01e      	beq.n	8006866 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2203      	movs	r2, #3
 800682c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e017      	b.n	8006866 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006836:	4b0e      	ldr	r3, [pc, #56]	@ (8006870 <RTC_ExitInitMode+0x78>)
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	4a0d      	ldr	r2, [pc, #52]	@ (8006870 <RTC_ExitInitMode+0x78>)
 800683c:	f023 0320 	bic.w	r3, r3, #32
 8006840:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff ff7e 	bl	8006744 <HAL_RTC_WaitForSynchro>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2203      	movs	r2, #3
 8006852:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800685a:	4b05      	ldr	r3, [pc, #20]	@ (8006870 <RTC_ExitInitMode+0x78>)
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4a04      	ldr	r2, [pc, #16]	@ (8006870 <RTC_ExitInitMode+0x78>)
 8006860:	f043 0320 	orr.w	r3, r3, #32
 8006864:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006866:	7bfb      	ldrb	r3, [r7, #15]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40002800 	.word	0x40002800

08006874 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800687e:	2300      	movs	r3, #0
 8006880:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006882:	79fb      	ldrb	r3, [r7, #7]
 8006884:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006886:	e005      	b.n	8006894 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	3b0a      	subs	r3, #10
 8006892:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006894:	7afb      	ldrb	r3, [r7, #11]
 8006896:	2b09      	cmp	r3, #9
 8006898:	d8f6      	bhi.n	8006888 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	7afb      	ldrb	r3, [r7, #11]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	b2db      	uxtb	r3, r3
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bc80      	pop	{r7}
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d101      	bne.n	80068ca <HAL_RTCEx_EnableBypassShadow+0x16>
 80068c6:	2302      	movs	r3, #2
 80068c8:	e01f      	b.n	800690a <HAL_RTCEx_EnableBypassShadow+0x56>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068da:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80068dc:	22ca      	movs	r2, #202	@ 0xca
 80068de:	625a      	str	r2, [r3, #36]	@ 0x24
 80068e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006914 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80068e2:	2253      	movs	r2, #83	@ 0x53
 80068e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80068e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006914 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006914 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80068ec:	f043 0320 	orr.w	r3, r3, #32
 80068f0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068f2:	4b08      	ldr	r3, [pc, #32]	@ (8006914 <HAL_RTCEx_EnableBypassShadow+0x60>)
 80068f4:	22ff      	movs	r2, #255	@ 0xff
 80068f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	bc80      	pop	{r7}
 8006912:	4770      	bx	lr
 8006914:	40002800 	.word	0x40002800

08006918 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_RTCEx_SetSSRU_IT+0x16>
 800692a:	2302      	movs	r3, #2
 800692c:	e027      	b.n	800697e <HAL_RTCEx_SetSSRU_IT+0x66>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2202      	movs	r2, #2
 800693a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800693e:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006940:	22ca      	movs	r2, #202	@ 0xca
 8006942:	625a      	str	r2, [r3, #36]	@ 0x24
 8006944:	4b10      	ldr	r3, [pc, #64]	@ (8006988 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006946:	2253      	movs	r2, #83	@ 0x53
 8006948:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800694a:	4b0f      	ldr	r3, [pc, #60]	@ (8006988 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	4a0e      	ldr	r2, [pc, #56]	@ (8006988 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006954:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006956:	4b0d      	ldr	r3, [pc, #52]	@ (800698c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800695c:	4a0b      	ldr	r2, [pc, #44]	@ (800698c <HAL_RTCEx_SetSSRU_IT+0x74>)
 800695e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006962:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006966:	4b08      	ldr	r3, [pc, #32]	@ (8006988 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006968:	22ff      	movs	r2, #255	@ 0xff
 800696a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	370c      	adds	r7, #12
 8006982:	46bd      	mov	sp, r7
 8006984:	bc80      	pop	{r7}
 8006986:	4770      	bx	lr
 8006988:	40002800 	.word	0x40002800
 800698c:	58000800 	.word	0x58000800

08006990 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006998:	4b09      	ldr	r3, [pc, #36]	@ (80069c0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800699a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d005      	beq.n	80069b0 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 80069a4:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80069a6:	2240      	movs	r2, #64	@ 0x40
 80069a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fb fb19 	bl	8001fe2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40002800 	.word	0x40002800

080069c4 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr
	...

080069d8 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80069e4:	4b07      	ldr	r3, [pc, #28]	@ (8006a04 <HAL_RTCEx_BKUPWrite+0x2c>)
 80069e6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	697a      	ldr	r2, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	601a      	str	r2, [r3, #0]
}
 80069f8:	bf00      	nop
 80069fa:	371c      	adds	r7, #28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	4000b100 	.word	0x4000b100

08006a08 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006a12:	4b07      	ldr	r3, [pc, #28]	@ (8006a30 <HAL_RTCEx_BKUPRead+0x28>)
 8006a14:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
 8006a2e:	bf00      	nop
 8006a30:	4000b100 	.word	0x4000b100

08006a34 <LL_PWR_SetRadioBusyTrigger>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006a3c:	4b06      	ldr	r3, [pc, #24]	@ (8006a58 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a44:	4904      	ldr	r1, [pc, #16]	@ (8006a58 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	608b      	str	r3, [r1, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bc80      	pop	{r7}
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	58000400 	.word	0x58000400

08006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a60:	4b05      	ldr	r3, [pc, #20]	@ (8006a78 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a66:	4a04      	ldr	r2, [pc, #16]	@ (8006a78 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006a68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a70:	bf00      	nop
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr
 8006a78:	58000400 	.word	0x58000400

08006a7c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a80:	4b05      	ldr	r3, [pc, #20]	@ (8006a98 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a86:	4a04      	ldr	r2, [pc, #16]	@ (8006a98 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006a88:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a90:	bf00      	nop
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	58000400 	.word	0x58000400

08006a9c <LL_PWR_ClearFlag_RFBUSY>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006aa0:	4b03      	ldr	r3, [pc, #12]	@ (8006ab0 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006aa2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006aa6:	619a      	str	r2, [r3, #24]
}
 8006aa8:	bf00      	nop
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr
 8006ab0:	58000400 	.word	0x58000400

08006ab4 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d101      	bne.n	8006ac8 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bc80      	pop	{r7}
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	58000400 	.word	0x58000400

08006ad8 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006ad8:	b480      	push	{r7}
 8006ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006adc:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d101      	bne.n	8006aec <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e000      	b.n	8006aee <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bc80      	pop	{r7}
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	58000400 	.word	0x58000400

08006afc <LL_RCC_RF_DisableReset>:
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006b00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <LL_RCC_IsRFUnderReset>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006b20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b30:	d101      	bne.n	8006b36 <LL_RCC_IsRFUnderReset+0x1a>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <LL_RCC_IsRFUnderReset+0x1c>
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr

08006b40 <LL_EXTI_EnableIT_32_63>:
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <LL_EXTI_EnableIT_32_63+0x24>)
 8006b4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006b4e:	4905      	ldr	r1, [pc, #20]	@ (8006b64 <LL_EXTI_EnableIT_32_63+0x24>)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	58000800 	.word	0x58000800

08006b68 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d103      	bne.n	8006b7e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
    return status;
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	e052      	b.n	8006c24 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	799b      	ldrb	r3, [r3, #6]
 8006b86:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006b88:	7bbb      	ldrb	r3, [r7, #14]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <HAL_SUBGHZ_Init+0x2c>
 8006b8e:	7bbb      	ldrb	r3, [r7, #14]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d109      	bne.n	8006ba8 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fa fe94 	bl	80018c8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006ba0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006ba4:	f7ff ffcc 	bl	8006b40 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ba8:	7bbb      	ldrb	r3, [r7, #14]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d126      	bne.n	8006bfc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006bb4:	f7ff ffa2 	bl	8006afc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c2c <HAL_SUBGHZ_Init+0xc4>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	1a9b      	subs	r3, r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	0cdb      	lsrs	r3, r3, #19
 8006bc6:	2264      	movs	r2, #100	@ 0x64
 8006bc8:	fb02 f303 	mul.w	r3, r2, r3
 8006bcc:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	609a      	str	r2, [r3, #8]
        break;
 8006bde:	e007      	b.n	8006bf0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006be6:	f7ff ff99 	bl	8006b1c <LL_RCC_IsRFUnderReset>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1ee      	bne.n	8006bce <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006bf0:	f7ff ff34 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006bf4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006bf8:	f7ff ff1c 	bl	8006a34 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006bfc:	f7ff ff4e 	bl	8006a9c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10a      	bne.n	8006c1c <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fab6 	bl	800717c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	719a      	strb	r2, [r3, #6]

  return status;
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	20000000 	.word	0x20000000

08006c30 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	817b      	strh	r3, [r7, #10]
 8006c40:	4613      	mov	r3, r2
 8006c42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	799b      	ldrb	r3, [r3, #6]
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d14a      	bne.n	8006ce4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	795b      	ldrb	r3, [r3, #5]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e045      	b.n	8006ce6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2202      	movs	r2, #2
 8006c64:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006c66:	68f8      	ldr	r0, [r7, #12]
 8006c68:	f000 fb56 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006c6c:	f7ff ff06 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006c70:	210d      	movs	r1, #13
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 faa2 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006c78:	897b      	ldrh	r3, [r7, #10]
 8006c7a:	0a1b      	lsrs	r3, r3, #8
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	4619      	mov	r1, r3
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fa9a 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006c88:	897b      	ldrh	r3, [r7, #10]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f000 fa94 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006c94:	2300      	movs	r3, #0
 8006c96:	82bb      	strh	r3, [r7, #20]
 8006c98:	e00a      	b.n	8006cb0 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006c9a:	8abb      	ldrh	r3, [r7, #20]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f000 fa89 	bl	80071bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006caa:	8abb      	ldrh	r3, [r7, #20]
 8006cac:	3301      	adds	r3, #1
 8006cae:	82bb      	strh	r3, [r7, #20]
 8006cb0:	8aba      	ldrh	r2, [r7, #20]
 8006cb2:	893b      	ldrh	r3, [r7, #8]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3f0      	bcc.n	8006c9a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006cb8:	f7ff fed0 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 fb4f 	bl	8007360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d002      	beq.n	8006cd0 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
 8006cce:	e001      	b.n	8006cd4 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	715a      	strb	r2, [r3, #5]

    return status;
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	e000      	b.n	8006ce6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006ce4:	2302      	movs	r3, #2
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	817b      	strh	r3, [r7, #10]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	799b      	ldrb	r3, [r3, #6]
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d14a      	bne.n	8006da6 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	795b      	ldrb	r3, [r3, #5]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d101      	bne.n	8006d1c <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006d18:	2302      	movs	r3, #2
 8006d1a:	e045      	b.n	8006da8 <HAL_SUBGHZ_ReadRegisters+0xba>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 faf8 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006d28:	f7ff fea8 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006d2c:	211d      	movs	r1, #29
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 fa44 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006d34:	897b      	ldrh	r3, [r7, #10]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 fa3c 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006d44:	897b      	ldrh	r3, [r7, #10]
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	4619      	mov	r1, r3
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fa36 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8006d50:	2100      	movs	r1, #0
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fa32 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006d58:	2300      	movs	r3, #0
 8006d5a:	82fb      	strh	r3, [r7, #22]
 8006d5c:	e009      	b.n	8006d72 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006d5e:	69b9      	ldr	r1, [r7, #24]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fa81 	bl	8007268 <SUBGHZSPI_Receive>
      pData++;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006d6c:	8afb      	ldrh	r3, [r7, #22]
 8006d6e:	3301      	adds	r3, #1
 8006d70:	82fb      	strh	r3, [r7, #22]
 8006d72:	8afa      	ldrh	r2, [r7, #22]
 8006d74:	893b      	ldrh	r3, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d3f1      	bcc.n	8006d5e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006d7a:	f7ff fe6f 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 faee 	bl	8007360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	77fb      	strb	r3, [r7, #31]
 8006d90:	e001      	b.n	8006d96 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8006d92:	2300      	movs	r3, #0
 8006d94:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	715a      	strb	r2, [r3, #5]

    return status;
 8006da2:	7ffb      	ldrb	r3, [r7, #31]
 8006da4:	e000      	b.n	8006da8 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
  }
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	607a      	str	r2, [r7, #4]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	72fb      	strb	r3, [r7, #11]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	799b      	ldrb	r3, [r3, #6]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d14a      	bne.n	8006e64 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	795b      	ldrb	r3, [r3, #5]
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d101      	bne.n	8006dda <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	e045      	b.n	8006e66 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006de0:	68f8      	ldr	r0, [r7, #12]
 8006de2:	f000 fa99 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006de6:	7afb      	ldrb	r3, [r7, #11]
 8006de8:	2b84      	cmp	r3, #132	@ 0x84
 8006dea:	d002      	beq.n	8006df2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 8006dec:	7afb      	ldrb	r3, [r7, #11]
 8006dee:	2b94      	cmp	r3, #148	@ 0x94
 8006df0:	d103      	bne.n	8006dfa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2201      	movs	r2, #1
 8006df6:	711a      	strb	r2, [r3, #4]
 8006df8:	e002      	b.n	8006e00 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006e00:	f7ff fe3c 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	4619      	mov	r1, r3
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f9d7 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006e0e:	2300      	movs	r3, #0
 8006e10:	82bb      	strh	r3, [r7, #20]
 8006e12:	e00a      	b.n	8006e2a <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006e14:	8abb      	ldrh	r3, [r7, #20]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	4413      	add	r3, r2
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 f9cc 	bl	80071bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006e24:	8abb      	ldrh	r3, [r7, #20]
 8006e26:	3301      	adds	r3, #1
 8006e28:	82bb      	strh	r3, [r7, #20]
 8006e2a:	8aba      	ldrh	r2, [r7, #20]
 8006e2c:	893b      	ldrh	r3, [r7, #8]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d3f0      	bcc.n	8006e14 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e32:	f7ff fe13 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 8006e36:	7afb      	ldrb	r3, [r7, #11]
 8006e38:	2b84      	cmp	r3, #132	@ 0x84
 8006e3a:	d002      	beq.n	8006e42 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fa8f 	bl	8007360 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d002      	beq.n	8006e50 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
 8006e4e:	e001      	b.n	8006e54 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	715a      	strb	r2, [r3, #5]

    return status;
 8006e60:	7dfb      	ldrb	r3, [r7, #23]
 8006e62:	e000      	b.n	8006e66 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006e64:	2302      	movs	r3, #2
  }
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b088      	sub	sp, #32
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	60f8      	str	r0, [r7, #12]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	72fb      	strb	r3, [r7, #11]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	799b      	ldrb	r3, [r3, #6]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d13d      	bne.n	8006f0c <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	795b      	ldrb	r3, [r3, #5]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d101      	bne.n	8006e9c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	e038      	b.n	8006f0e <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f000 fa38 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ea8:	f7ff fde8 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f000 f983 	bl	80071bc <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006eb6:	2100      	movs	r1, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 f97f 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	82fb      	strh	r3, [r7, #22]
 8006ec2:	e009      	b.n	8006ed8 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006ec4:	69b9      	ldr	r1, [r7, #24]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f9ce 	bl	8007268 <SUBGHZSPI_Receive>
      pData++;
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8006ed2:	8afb      	ldrh	r3, [r7, #22]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	82fb      	strh	r3, [r7, #22]
 8006ed8:	8afa      	ldrh	r2, [r7, #22]
 8006eda:	893b      	ldrh	r3, [r7, #8]
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d3f1      	bcc.n	8006ec4 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006ee0:	f7ff fdbc 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f000 fa3b 	bl	8007360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	77fb      	strb	r3, [r7, #31]
 8006ef6:	e001      	b.n	8006efc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2201      	movs	r2, #1
 8006f00:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2200      	movs	r2, #0
 8006f06:	715a      	strb	r2, [r3, #5]

    return status;
 8006f08:	7ffb      	ldrb	r3, [r7, #31]
 8006f0a:	e000      	b.n	8006f0e <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3720      	adds	r7, #32
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b086      	sub	sp, #24
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	607a      	str	r2, [r7, #4]
 8006f20:	461a      	mov	r2, r3
 8006f22:	460b      	mov	r3, r1
 8006f24:	72fb      	strb	r3, [r7, #11]
 8006f26:	4613      	mov	r3, r2
 8006f28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	799b      	ldrb	r3, [r3, #6]
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d13e      	bne.n	8006fb2 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	795b      	ldrb	r3, [r3, #5]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e039      	b.n	8006fb4 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f46:	68f8      	ldr	r0, [r7, #12]
 8006f48:	f000 f9e6 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f4c:	f7ff fd96 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006f50:	210e      	movs	r1, #14
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 f932 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f000 f92d 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f62:	2300      	movs	r3, #0
 8006f64:	82bb      	strh	r3, [r7, #20]
 8006f66:	e00a      	b.n	8006f7e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f68:	8abb      	ldrh	r3, [r7, #20]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	4619      	mov	r1, r3
 8006f72:	68f8      	ldr	r0, [r7, #12]
 8006f74:	f000 f922 	bl	80071bc <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f78:	8abb      	ldrh	r3, [r7, #20]
 8006f7a:	3301      	adds	r3, #1
 8006f7c:	82bb      	strh	r3, [r7, #20]
 8006f7e:	8aba      	ldrh	r2, [r7, #20]
 8006f80:	893b      	ldrh	r3, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d3f0      	bcc.n	8006f68 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f86:	f7ff fd69 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f9e8 	bl	8007360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
 8006f9c:	e001      	b.n	8006fa2 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	715a      	strb	r2, [r3, #5]

    return status;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	e000      	b.n	8006fb4 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006fb2:	2302      	movs	r3, #2
  }
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	607a      	str	r2, [r7, #4]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	72fb      	strb	r3, [r7, #11]
 8006fcc:	4613      	mov	r3, r2
 8006fce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	799b      	ldrb	r3, [r3, #6]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d141      	bne.n	8007062 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	795b      	ldrb	r3, [r3, #5]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d101      	bne.n	8006fea <HAL_SUBGHZ_ReadBuffer+0x2e>
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	e03c      	b.n	8007064 <HAL_SUBGHZ_ReadBuffer+0xa8>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006ff0:	68f8      	ldr	r0, [r7, #12]
 8006ff2:	f000 f991 	bl	8007318 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006ff6:	f7ff fd41 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006ffa:	211e      	movs	r1, #30
 8006ffc:	68f8      	ldr	r0, [r7, #12]
 8006ffe:	f000 f8dd 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	4619      	mov	r1, r3
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 f8d8 	bl	80071bc <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800700c:	2100      	movs	r1, #0
 800700e:	68f8      	ldr	r0, [r7, #12]
 8007010:	f000 f8d4 	bl	80071bc <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007014:	2300      	movs	r3, #0
 8007016:	82fb      	strh	r3, [r7, #22]
 8007018:	e009      	b.n	800702e <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800701a:	69b9      	ldr	r1, [r7, #24]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 f923 	bl	8007268 <SUBGHZSPI_Receive>
      pData++;
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	3301      	adds	r3, #1
 8007026:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007028:	8afb      	ldrh	r3, [r7, #22]
 800702a:	3301      	adds	r3, #1
 800702c:	82fb      	strh	r3, [r7, #22]
 800702e:	8afa      	ldrh	r2, [r7, #22]
 8007030:	893b      	ldrh	r3, [r7, #8]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3f1      	bcc.n	800701a <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007036:	f7ff fd11 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 f990 	bl	8007360 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e001      	b.n	8007052 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2201      	movs	r2, #1
 8007056:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	715a      	strb	r2, [r3, #5]

    return status;
 800705e:	7ffb      	ldrb	r3, [r7, #31]
 8007060:	e000      	b.n	8007064 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007062:	2302      	movs	r3, #2
  }
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007074:	2300      	movs	r3, #0
 8007076:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007078:	f107 020c 	add.w	r2, r7, #12
 800707c:	2302      	movs	r3, #2
 800707e:	2112      	movs	r1, #18
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7ff fef4 	bl	8006e6e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007086:	7b3b      	ldrb	r3, [r7, #12]
 8007088:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800708a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b21a      	sxth	r2, r3
 8007092:	7b7b      	ldrb	r3, [r7, #13]
 8007094:	b21b      	sxth	r3, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	b21b      	sxth	r3, r3
 800709a:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800709c:	f107 020c 	add.w	r2, r7, #12
 80070a0:	2302      	movs	r3, #2
 80070a2:	2102      	movs	r1, #2
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7ff fe83 	bl	8006db0 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80070aa:	89fb      	ldrh	r3, [r7, #14]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d002      	beq.n	80070ba <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f013 fc85 	bl	801a9c4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80070ba:	89fb      	ldrh	r3, [r7, #14]
 80070bc:	085b      	lsrs	r3, r3, #1
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f013 fc8a 	bl	801a9e0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80070cc:	89fb      	ldrh	r3, [r7, #14]
 80070ce:	089b      	lsrs	r3, r3, #2
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f013 fcd9 	bl	801aa90 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80070de:	89fb      	ldrh	r3, [r7, #14]
 80070e0:	08db      	lsrs	r3, r3, #3
 80070e2:	f003 0301 	and.w	r3, r3, #1
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d002      	beq.n	80070f0 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f013 fcde 	bl	801aaac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80070f0:	89fb      	ldrh	r3, [r7, #14]
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d002      	beq.n	8007102 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f013 fce3 	bl	801aac8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8007102:	89fb      	ldrh	r3, [r7, #14]
 8007104:	095b      	lsrs	r3, r3, #5
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f013 fcb0 	bl	801aa74 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8007114:	89fb      	ldrh	r3, [r7, #14]
 8007116:	099b      	lsrs	r3, r3, #6
 8007118:	f003 0301 	and.w	r3, r3, #1
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f013 fc6b 	bl	801a9fc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8007126:	89fb      	ldrh	r3, [r7, #14]
 8007128:	09db      	lsrs	r3, r3, #7
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	0a1b      	lsrs	r3, r3, #8
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800713e:	2101      	movs	r1, #1
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f013 fc69 	bl	801aa18 <HAL_SUBGHZ_CADStatusCallback>
 8007146:	e003      	b.n	8007150 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007148:	2100      	movs	r1, #0
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f013 fc64 	bl	801aa18 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007150:	89fb      	ldrh	r3, [r7, #14]
 8007152:	0a5b      	lsrs	r3, r3, #9
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f013 fc79 	bl	801aa54 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007162:	89fb      	ldrh	r3, [r7, #14]
 8007164:	0b9b      	lsrs	r3, r3, #14
 8007166:	f003 0301 	and.w	r3, r3, #1
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f013 fcb8 	bl	801aae4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007184:	4b0c      	ldr	r3, [pc, #48]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a0b      	ldr	r2, [pc, #44]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 800718a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800718e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007190:	4a09      	ldr	r2, [pc, #36]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007198:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800719a:	4b07      	ldr	r3, [pc, #28]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 800719c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80071a0:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80071a2:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a04      	ldr	r2, [pc, #16]	@ (80071b8 <SUBGHZSPI_Init+0x3c>)
 80071a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071ac:	6013      	str	r3, [r2, #0]
}
 80071ae:	bf00      	nop
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bc80      	pop	{r7}
 80071b6:	4770      	bx	lr
 80071b8:	58010000 	.word	0x58010000

080071bc <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	460b      	mov	r3, r1
 80071c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80071cc:	4b23      	ldr	r3, [pc, #140]	@ (800725c <SUBGHZSPI_Transmit+0xa0>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4613      	mov	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	1a9b      	subs	r3, r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	0cdb      	lsrs	r3, r3, #19
 80071da:	2264      	movs	r2, #100	@ 0x64
 80071dc:	fb02 f303 	mul.w	r3, r2, r3
 80071e0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d105      	bne.n	80071f4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	609a      	str	r2, [r3, #8]
      break;
 80071f2:	e008      	b.n	8007206 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80071fa:	4b19      	ldr	r3, [pc, #100]	@ (8007260 <SUBGHZSPI_Transmit+0xa4>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b02      	cmp	r3, #2
 8007204:	d1ed      	bne.n	80071e2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007206:	4b17      	ldr	r3, [pc, #92]	@ (8007264 <SUBGHZSPI_Transmit+0xa8>)
 8007208:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	78fa      	ldrb	r2, [r7, #3]
 800720e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007210:	4b12      	ldr	r3, [pc, #72]	@ (800725c <SUBGHZSPI_Transmit+0xa0>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	1a9b      	subs	r3, r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	0cdb      	lsrs	r3, r3, #19
 800721e:	2264      	movs	r2, #100	@ 0x64
 8007220:	fb02 f303 	mul.w	r3, r2, r3
 8007224:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d105      	bne.n	8007238 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	609a      	str	r2, [r3, #8]
      break;
 8007236:	e008      	b.n	800724a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3b01      	subs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800723e:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <SUBGHZSPI_Transmit+0xa4>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	2b01      	cmp	r3, #1
 8007248:	d1ed      	bne.n	8007226 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800724a:	4b05      	ldr	r3, [pc, #20]	@ (8007260 <SUBGHZSPI_Transmit+0xa4>)
 800724c:	68db      	ldr	r3, [r3, #12]

  return status;
 800724e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007250:	4618      	mov	r0, r3
 8007252:	371c      	adds	r7, #28
 8007254:	46bd      	mov	sp, r7
 8007256:	bc80      	pop	{r7}
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20000000 	.word	0x20000000
 8007260:	58010000 	.word	0x58010000
 8007264:	5801000c 	.word	0x5801000c

08007268 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
 8007270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007276:	4b25      	ldr	r3, [pc, #148]	@ (800730c <SUBGHZSPI_Receive+0xa4>)
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	1a9b      	subs	r3, r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	0cdb      	lsrs	r3, r3, #19
 8007284:	2264      	movs	r2, #100	@ 0x64
 8007286:	fb02 f303 	mul.w	r3, r2, r3
 800728a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2201      	movs	r2, #1
 800729a:	609a      	str	r2, [r3, #8]
      break;
 800729c:	e008      	b.n	80072b0 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80072a4:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <SUBGHZSPI_Receive+0xa8>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d1ed      	bne.n	800728c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80072b0:	4b18      	ldr	r3, [pc, #96]	@ (8007314 <SUBGHZSPI_Receive+0xac>)
 80072b2:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	22ff      	movs	r2, #255	@ 0xff
 80072b8:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80072ba:	4b14      	ldr	r3, [pc, #80]	@ (800730c <SUBGHZSPI_Receive+0xa4>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	4613      	mov	r3, r2
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	1a9b      	subs	r3, r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	0cdb      	lsrs	r3, r3, #19
 80072c8:	2264      	movs	r2, #100	@ 0x64
 80072ca:	fb02 f303 	mul.w	r3, r2, r3
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d105      	bne.n	80072e2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	609a      	str	r2, [r3, #8]
      break;
 80072e0:	e008      	b.n	80072f4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <SUBGHZSPI_Receive+0xa8>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 0301 	and.w	r3, r3, #1
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d1ed      	bne.n	80072d0 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80072f4:	4b06      	ldr	r3, [pc, #24]	@ (8007310 <SUBGHZSPI_Receive+0xa8>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	701a      	strb	r2, [r3, #0]

  return status;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007300:	4618      	mov	r0, r3
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	bc80      	pop	{r7}
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	20000000 	.word	0x20000000
 8007310:	58010000 	.word	0x58010000
 8007314:	5801000c 	.word	0x5801000c

08007318 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b084      	sub	sp, #16
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	791b      	ldrb	r3, [r3, #4]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d111      	bne.n	800734c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007328:	4b0c      	ldr	r3, [pc, #48]	@ (800735c <SUBGHZ_CheckDeviceReady+0x44>)
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	4613      	mov	r3, r2
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	0c1b      	lsrs	r3, r3, #16
 8007336:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007338:	f7ff fba0 	bl	8006a7c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3b01      	subs	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1f9      	bne.n	800733c <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007348:	f7ff fb88 	bl	8006a5c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f807 	bl	8007360 <SUBGHZ_WaitOnBusy>
 8007352:	4603      	mov	r3, r0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	20000000 	.word	0x20000000

08007360 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800736c:	4b12      	ldr	r3, [pc, #72]	@ (80073b8 <SUBGHZ_WaitOnBusy+0x58>)
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	0d1b      	lsrs	r3, r3, #20
 800737a:	2264      	movs	r2, #100	@ 0x64
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007382:	f7ff fba9 	bl	8006ad8 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007386:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d105      	bne.n	800739a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2202      	movs	r2, #2
 8007396:	609a      	str	r2, [r3, #8]
      break;
 8007398:	e009      	b.n	80073ae <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b01      	subs	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80073a0:	f7ff fb88 	bl	8006ab4 <LL_PWR_IsActiveFlag_RFBUSYS>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d0e9      	beq.n	8007382 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80073ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	20000000 	.word	0x20000000

080073bc <LL_RCC_GetUSARTClockSource>:
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80073c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	401a      	ands	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	041b      	lsls	r3, r3, #16
 80073d4:	4313      	orrs	r3, r2
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	bc80      	pop	{r7}
 80073de:	4770      	bx	lr

080073e0 <LL_RCC_GetLPUARTClockSource>:
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80073e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4013      	ands	r3, r2
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bc80      	pop	{r7}
 80073fc:	4770      	bx	lr

080073fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e042      	b.n	8007496 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007416:	2b00      	cmp	r3, #0
 8007418:	d106      	bne.n	8007428 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7fa ff42 	bl	80022ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2224      	movs	r2, #36	@ 0x24
 800742c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f022 0201 	bic.w	r2, r2, #1
 800743e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc3b 	bl	8007cbc <UART_SetConfig>
 8007446:	4603      	mov	r3, r0
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e022      	b.n	8007496 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f000 fea3 	bl	80081a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800746c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689a      	ldr	r2, [r3, #8]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800747c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f042 0201 	orr.w	r2, r2, #1
 800748c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 ff29 	bl	80082e6 <UART_CheckIdleState>
 8007494:	4603      	mov	r3, r0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08a      	sub	sp, #40	@ 0x28
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d137      	bne.n	8007528 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_UART_Receive_IT+0x24>
 80074be:	88fb      	ldrh	r3, [r7, #6]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e030      	b.n	800752a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a18      	ldr	r2, [pc, #96]	@ (8007534 <HAL_UART_Receive_IT+0x94>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01f      	beq.n	8007518 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	613b      	str	r3, [r7, #16]
   return(result);
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007504:	623b      	str	r3, [r7, #32]
 8007506:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	69f9      	ldr	r1, [r7, #28]
 800750a:	6a3a      	ldr	r2, [r7, #32]
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	61bb      	str	r3, [r7, #24]
   return(result);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	461a      	mov	r2, r3
 800751c:	68b9      	ldr	r1, [r7, #8]
 800751e:	68f8      	ldr	r0, [r7, #12]
 8007520:	f000 fff8 	bl	8008514 <UART_Start_Receive_IT>
 8007524:	4603      	mov	r3, r0
 8007526:	e000      	b.n	800752a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3728      	adds	r7, #40	@ 0x28
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
 8007532:	bf00      	nop
 8007534:	40008000 	.word	0x40008000

08007538 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	@ 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	4613      	mov	r3, r2
 8007544:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800754c:	2b20      	cmp	r3, #32
 800754e:	d167      	bne.n	8007620 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d002      	beq.n	800755c <HAL_UART_Transmit_DMA+0x24>
 8007556:	88fb      	ldrh	r3, [r7, #6]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d101      	bne.n	8007560 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e060      	b.n	8007622 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	68ba      	ldr	r2, [r7, #8]
 8007564:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	88fa      	ldrh	r2, [r7, #6]
 800756a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	88fa      	ldrh	r2, [r7, #6]
 8007572:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2221      	movs	r2, #33	@ 0x21
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800758a:	2b00      	cmp	r3, #0
 800758c:	d028      	beq.n	80075e0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007592:	4a26      	ldr	r2, [pc, #152]	@ (800762c <HAL_UART_Transmit_DMA+0xf4>)
 8007594:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800759a:	4a25      	ldr	r2, [pc, #148]	@ (8007630 <HAL_UART_Transmit_DMA+0xf8>)
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075a2:	4a24      	ldr	r2, [pc, #144]	@ (8007634 <HAL_UART_Transmit_DMA+0xfc>)
 80075a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075aa:	2200      	movs	r2, #0
 80075ac:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b6:	4619      	mov	r1, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3328      	adds	r3, #40	@ 0x28
 80075be:	461a      	mov	r2, r3
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	f7fc fbfd 	bl	8003dc0 <HAL_DMA_Start_IT>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d009      	beq.n	80075e0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2210      	movs	r2, #16
 80075d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	e020      	b.n	8007622 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2240      	movs	r2, #64	@ 0x40
 80075e6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3308      	adds	r3, #8
 80075ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	613b      	str	r3, [r7, #16]
   return(result);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	3308      	adds	r3, #8
 8007606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007608:	623a      	str	r2, [r7, #32]
 800760a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	6a3a      	ldr	r2, [r7, #32]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	61bb      	str	r3, [r7, #24]
   return(result);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e5      	bne.n	80075e8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	e000      	b.n	8007622 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007620:	2302      	movs	r3, #2
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	3728      	adds	r7, #40	@ 0x28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	0800889f 	.word	0x0800889f
 8007630:	08008939 	.word	0x08008939
 8007634:	08008955 	.word	0x08008955

08007638 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b0ba      	sub	sp, #232	@ 0xe8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800765e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007662:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007666:	4013      	ands	r3, r2
 8007668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800766c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11b      	bne.n	80076ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007678:	f003 0320 	and.w	r3, r3, #32
 800767c:	2b00      	cmp	r3, #0
 800767e:	d015      	beq.n	80076ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007684:	f003 0320 	and.w	r3, r3, #32
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800768c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d009      	beq.n	80076ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800769c:	2b00      	cmp	r3, #0
 800769e:	f000 82e3 	beq.w	8007c68 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
      }
      return;
 80076aa:	e2dd      	b.n	8007c68 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8123 	beq.w	80078fc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076ba:	4b8d      	ldr	r3, [pc, #564]	@ (80078f0 <HAL_UART_IRQHandler+0x2b8>)
 80076bc:	4013      	ands	r3, r2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076c6:	4b8b      	ldr	r3, [pc, #556]	@ (80078f4 <HAL_UART_IRQHandler+0x2bc>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	f000 8116 	beq.w	80078fc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d011      	beq.n	8007700 <HAL_UART_IRQHandler+0xc8>
 80076dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00b      	beq.n	8007700 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2201      	movs	r2, #1
 80076ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d011      	beq.n	8007730 <HAL_UART_IRQHandler+0xf8>
 800770c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00b      	beq.n	8007730 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2202      	movs	r2, #2
 800771e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007726:	f043 0204 	orr.w	r2, r3, #4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007734:	f003 0304 	and.w	r3, r3, #4
 8007738:	2b00      	cmp	r3, #0
 800773a:	d011      	beq.n	8007760 <HAL_UART_IRQHandler+0x128>
 800773c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007740:	f003 0301 	and.w	r3, r3, #1
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2204      	movs	r2, #4
 800774e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007756:	f043 0202 	orr.w	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b00      	cmp	r3, #0
 800776a:	d017      	beq.n	800779c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800776c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007770:	f003 0320 	and.w	r3, r3, #32
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007778:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800777c:	4b5c      	ldr	r3, [pc, #368]	@ (80078f0 <HAL_UART_IRQHandler+0x2b8>)
 800777e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2208      	movs	r2, #8
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007792:	f043 0208 	orr.w	r2, r3, #8
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d012      	beq.n	80077ce <HAL_UART_IRQHandler+0x196>
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d00c      	beq.n	80077ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c4:	f043 0220 	orr.w	r2, r3, #32
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8249 	beq.w	8007c6c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077de:	f003 0320 	and.w	r3, r3, #32
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d013      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d007      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007814:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007822:	2b40      	cmp	r3, #64	@ 0x40
 8007824:	d005      	beq.n	8007832 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800782a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800782e:	2b00      	cmp	r3, #0
 8007830:	d054      	beq.n	80078dc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 ffce 	bl	80087d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007842:	2b40      	cmp	r3, #64	@ 0x40
 8007844:	d146      	bne.n	80078d4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	3308      	adds	r3, #8
 800784c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007854:	e853 3f00 	ldrex	r3, [r3]
 8007858:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800785c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007860:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007864:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3308      	adds	r3, #8
 800786e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007872:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007876:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800787e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007882:	e841 2300 	strex	r3, r2, [r1]
 8007886:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800788a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1d9      	bne.n	8007846 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007898:	2b00      	cmp	r3, #0
 800789a:	d017      	beq.n	80078cc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a2:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <HAL_UART_IRQHandler+0x2c0>)
 80078a4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7fc fb63 	bl	8003f78 <HAL_DMA_Abort_IT>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d019      	beq.n	80078ec <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078c6:	4610      	mov	r0, r2
 80078c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ca:	e00f      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f9e0 	bl	8007c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d2:	e00b      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9dc 	bl	8007c92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078da:	e007      	b.n	80078ec <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f9d8 	bl	8007c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078ea:	e1bf      	b.n	8007c6c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ec:	bf00      	nop
    return;
 80078ee:	e1bd      	b.n	8007c6c <HAL_UART_IRQHandler+0x634>
 80078f0:	10000001 	.word	0x10000001
 80078f4:	04000120 	.word	0x04000120
 80078f8:	080089d5 	.word	0x080089d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007900:	2b01      	cmp	r3, #1
 8007902:	f040 8153 	bne.w	8007bac <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	f000 814c 	beq.w	8007bac <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007918:	f003 0310 	and.w	r3, r3, #16
 800791c:	2b00      	cmp	r3, #0
 800791e:	f000 8145 	beq.w	8007bac <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2210      	movs	r2, #16
 8007928:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007934:	2b40      	cmp	r3, #64	@ 0x40
 8007936:	f040 80bb 	bne.w	8007ab0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007948:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 818f 	beq.w	8007c70 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007958:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800795c:	429a      	cmp	r2, r3
 800795e:	f080 8187 	bcs.w	8007c70 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007968:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	f040 8087 	bne.w	8007a8e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007994:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007998:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800799c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	461a      	mov	r2, r3
 80079a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1da      	bne.n	8007980 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3308      	adds	r3, #8
 80079d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d4:	e853 3f00 	ldrex	r3, [r3]
 80079d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079dc:	f023 0301 	bic.w	r3, r3, #1
 80079e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3308      	adds	r3, #8
 80079ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079fa:	e841 2300 	strex	r3, r2, [r1]
 80079fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d1e1      	bne.n	80079ca <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	3308      	adds	r3, #8
 8007a0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a10:	e853 3f00 	ldrex	r3, [r3]
 8007a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3308      	adds	r3, #8
 8007a26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a32:	e841 2300 	strex	r3, r2, [r1]
 8007a36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1e3      	bne.n	8007a06 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2220      	movs	r2, #32
 8007a42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a5c:	f023 0310 	bic.w	r3, r3, #16
 8007a60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e4      	bne.n	8007a4c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fc fa17 	bl	8003ebc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2202      	movs	r2, #2
 8007a92:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f8fb 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007aae:	e0df      	b.n	8007c70 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80d1 	beq.w	8007c74 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80cc 	beq.w	8007c74 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b00:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e4      	bne.n	8007adc <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	623b      	str	r3, [r7, #32]
   return(result);
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b28:	f023 0301 	bic.w	r3, r3, #1
 8007b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b3a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e1      	bne.n	8007b12 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2220      	movs	r2, #32
 8007b52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	e853 3f00 	ldrex	r3, [r3]
 8007b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f023 0310 	bic.w	r3, r3, #16
 8007b76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b84:	61fb      	str	r3, [r7, #28]
 8007b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	69b9      	ldr	r1, [r7, #24]
 8007b8a:	69fa      	ldr	r2, [r7, #28]
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	617b      	str	r3, [r7, #20]
   return(result);
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e4      	bne.n	8007b62 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2202      	movs	r2, #2
 8007b9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f87d 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007baa:	e063      	b.n	8007c74 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00e      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x59e>
 8007bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fc5e 	bl	8009490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd4:	e051      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d014      	beq.n	8007c0c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d105      	bne.n	8007bfa <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d008      	beq.n	8007c0c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d03a      	beq.n	8007c78 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
    }
    return;
 8007c0a:	e035      	b.n	8007c78 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d009      	beq.n	8007c2c <HAL_UART_IRQHandler+0x5f4>
 8007c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d003      	beq.n	8007c2c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 feeb 	bl	8008a00 <UART_EndTransmit_IT>
    return;
 8007c2a:	e026      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d009      	beq.n	8007c4c <HAL_UART_IRQHandler+0x614>
 8007c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d003      	beq.n	8007c4c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 fc35 	bl	80094b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4a:	e016      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d010      	beq.n	8007c7a <HAL_UART_IRQHandler+0x642>
 8007c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da0c      	bge.n	8007c7a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 fc1e 	bl	80094a2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c66:	e008      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
      return;
 8007c68:	bf00      	nop
 8007c6a:	e006      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
    return;
 8007c6c:	bf00      	nop
 8007c6e:	e004      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
      return;
 8007c70:	bf00      	nop
 8007c72:	e002      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
      return;
 8007c74:	bf00      	nop
 8007c76:	e000      	b.n	8007c7a <HAL_UART_IRQHandler+0x642>
    return;
 8007c78:	bf00      	nop
  }
}
 8007c7a:	37e8      	adds	r7, #232	@ 0xe8
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bc80      	pop	{r7}
 8007c90:	4770      	bx	lr

08007c92 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c9a:	bf00      	nop
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
	...

08007cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc0:	b08c      	sub	sp, #48	@ 0x30
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	695b      	ldr	r3, [r3, #20]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	69db      	ldr	r3, [r3, #28]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b94      	ldr	r3, [pc, #592]	@ (8007f3c <UART_SetConfig+0x280>)
 8007cec:	4013      	ands	r3, r2
 8007cee:	697a      	ldr	r2, [r7, #20]
 8007cf0:	6812      	ldr	r2, [r2, #0]
 8007cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007cf4:	430b      	orrs	r3, r1
 8007cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a89      	ldr	r2, [pc, #548]	@ (8007f40 <UART_SetConfig+0x284>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d004      	beq.n	8007d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d24:	4313      	orrs	r3, r2
 8007d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007d32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d3c:	430b      	orrs	r3, r1
 8007d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d46:	f023 010f 	bic.w	r1, r3, #15
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a7a      	ldr	r2, [pc, #488]	@ (8007f44 <UART_SetConfig+0x288>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d127      	bne.n	8007db0 <UART_SetConfig+0xf4>
 8007d60:	2003      	movs	r0, #3
 8007d62:	f7ff fb2b 	bl	80073bc <LL_RCC_GetUSARTClockSource>
 8007d66:	4603      	mov	r3, r0
 8007d68:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8007d6c:	2b03      	cmp	r3, #3
 8007d6e:	d81b      	bhi.n	8007da8 <UART_SetConfig+0xec>
 8007d70:	a201      	add	r2, pc, #4	@ (adr r2, 8007d78 <UART_SetConfig+0xbc>)
 8007d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d76:	bf00      	nop
 8007d78:	08007d89 	.word	0x08007d89
 8007d7c:	08007d99 	.word	0x08007d99
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007da1 	.word	0x08007da1
 8007d88:	2301      	movs	r3, #1
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d8e:	e080      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007d90:	2302      	movs	r3, #2
 8007d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d96:	e07c      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007d98:	2304      	movs	r3, #4
 8007d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007d9e:	e078      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007da0:	2308      	movs	r3, #8
 8007da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007da6:	e074      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007da8:	2310      	movs	r3, #16
 8007daa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007dae:	e070      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a64      	ldr	r2, [pc, #400]	@ (8007f48 <UART_SetConfig+0x28c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d138      	bne.n	8007e2c <UART_SetConfig+0x170>
 8007dba:	200c      	movs	r0, #12
 8007dbc:	f7ff fafe 	bl	80073bc <LL_RCC_GetUSARTClockSource>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8007dc6:	2b0c      	cmp	r3, #12
 8007dc8:	d82c      	bhi.n	8007e24 <UART_SetConfig+0x168>
 8007dca:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd0 <UART_SetConfig+0x114>)
 8007dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd0:	08007e05 	.word	0x08007e05
 8007dd4:	08007e25 	.word	0x08007e25
 8007dd8:	08007e25 	.word	0x08007e25
 8007ddc:	08007e25 	.word	0x08007e25
 8007de0:	08007e15 	.word	0x08007e15
 8007de4:	08007e25 	.word	0x08007e25
 8007de8:	08007e25 	.word	0x08007e25
 8007dec:	08007e25 	.word	0x08007e25
 8007df0:	08007e0d 	.word	0x08007e0d
 8007df4:	08007e25 	.word	0x08007e25
 8007df8:	08007e25 	.word	0x08007e25
 8007dfc:	08007e25 	.word	0x08007e25
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	2300      	movs	r3, #0
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e0a:	e042      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e0c:	2302      	movs	r3, #2
 8007e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e12:	e03e      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e14:	2304      	movs	r3, #4
 8007e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e1a:	e03a      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e1c:	2308      	movs	r3, #8
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e22:	e036      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e24:	2310      	movs	r3, #16
 8007e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e2a:	e032      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a43      	ldr	r2, [pc, #268]	@ (8007f40 <UART_SetConfig+0x284>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d12a      	bne.n	8007e8c <UART_SetConfig+0x1d0>
 8007e36:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8007e3a:	f7ff fad1 	bl	80073e0 <LL_RCC_GetLPUARTClockSource>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e44:	d01a      	beq.n	8007e7c <UART_SetConfig+0x1c0>
 8007e46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007e4a:	d81b      	bhi.n	8007e84 <UART_SetConfig+0x1c8>
 8007e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e50:	d00c      	beq.n	8007e6c <UART_SetConfig+0x1b0>
 8007e52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e56:	d815      	bhi.n	8007e84 <UART_SetConfig+0x1c8>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <UART_SetConfig+0x1a8>
 8007e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e60:	d008      	beq.n	8007e74 <UART_SetConfig+0x1b8>
 8007e62:	e00f      	b.n	8007e84 <UART_SetConfig+0x1c8>
 8007e64:	2300      	movs	r3, #0
 8007e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e6a:	e012      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e6c:	2302      	movs	r3, #2
 8007e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e72:	e00e      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e74:	2304      	movs	r3, #4
 8007e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e7a:	e00a      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e7c:	2308      	movs	r3, #8
 8007e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e82:	e006      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e84:	2310      	movs	r3, #16
 8007e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007e8a:	e002      	b.n	8007e92 <UART_SetConfig+0x1d6>
 8007e8c:	2310      	movs	r3, #16
 8007e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2a      	ldr	r2, [pc, #168]	@ (8007f40 <UART_SetConfig+0x284>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	f040 80a4 	bne.w	8007fe6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ea2:	2b08      	cmp	r3, #8
 8007ea4:	d823      	bhi.n	8007eee <UART_SetConfig+0x232>
 8007ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8007eac <UART_SetConfig+0x1f0>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007eef 	.word	0x08007eef
 8007eb4:	08007ed9 	.word	0x08007ed9
 8007eb8:	08007eef 	.word	0x08007eef
 8007ebc:	08007edf 	.word	0x08007edf
 8007ec0:	08007eef 	.word	0x08007eef
 8007ec4:	08007eef 	.word	0x08007eef
 8007ec8:	08007eef 	.word	0x08007eef
 8007ecc:	08007ee7 	.word	0x08007ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ed0:	f7fd ff40 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8007ed4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ed6:	e010      	b.n	8007efa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8007f4c <UART_SetConfig+0x290>)
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007edc:	e00d      	b.n	8007efa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ede:	f7fd fe85 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 8007ee2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007ee4:	e009      	b.n	8007efa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ee6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007eec:	e005      	b.n	8007efa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ef8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8137 	beq.w	8008170 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f06:	4a12      	ldr	r2, [pc, #72]	@ (8007f50 <UART_SetConfig+0x294>)
 8007f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	4413      	add	r3, r2
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d305      	bcc.n	8007f32 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d910      	bls.n	8007f54 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f38:	e11a      	b.n	8008170 <UART_SetConfig+0x4b4>
 8007f3a:	bf00      	nop
 8007f3c:	cfff69f3 	.word	0xcfff69f3
 8007f40:	40008000 	.word	0x40008000
 8007f44:	40013800 	.word	0x40013800
 8007f48:	40004400 	.word	0x40004400
 8007f4c:	00f42400 	.word	0x00f42400
 8007f50:	0801cba4 	.word	0x0801cba4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	2200      	movs	r2, #0
 8007f58:	60bb      	str	r3, [r7, #8]
 8007f5a:	60fa      	str	r2, [r7, #12]
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f60:	4a8e      	ldr	r2, [pc, #568]	@ (800819c <UART_SetConfig+0x4e0>)
 8007f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	2200      	movs	r2, #0
 8007f6a:	603b      	str	r3, [r7, #0]
 8007f6c:	607a      	str	r2, [r7, #4]
 8007f6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f76:	f7f8 fca7 	bl	80008c8 <__aeabi_uldivmod>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	f04f 0200 	mov.w	r2, #0
 8007f86:	f04f 0300 	mov.w	r3, #0
 8007f8a:	020b      	lsls	r3, r1, #8
 8007f8c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f90:	0202      	lsls	r2, r0, #8
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	6849      	ldr	r1, [r1, #4]
 8007f96:	0849      	lsrs	r1, r1, #1
 8007f98:	2000      	movs	r0, #0
 8007f9a:	460c      	mov	r4, r1
 8007f9c:	4605      	mov	r5, r0
 8007f9e:	eb12 0804 	adds.w	r8, r2, r4
 8007fa2:	eb43 0905 	adc.w	r9, r3, r5
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	469a      	mov	sl, r3
 8007fae:	4693      	mov	fp, r2
 8007fb0:	4652      	mov	r2, sl
 8007fb2:	465b      	mov	r3, fp
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 fc86 	bl	80008c8 <__aeabi_uldivmod>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fca:	d308      	bcc.n	8007fde <UART_SetConfig+0x322>
 8007fcc:	6a3b      	ldr	r3, [r7, #32]
 8007fce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fd2:	d204      	bcs.n	8007fde <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	6a3a      	ldr	r2, [r7, #32]
 8007fda:	60da      	str	r2, [r3, #12]
 8007fdc:	e0c8      	b.n	8008170 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007fe4:	e0c4      	b.n	8008170 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	69db      	ldr	r3, [r3, #28]
 8007fea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fee:	d167      	bne.n	80080c0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007ff4:	2b08      	cmp	r3, #8
 8007ff6:	d828      	bhi.n	800804a <UART_SetConfig+0x38e>
 8007ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8008000 <UART_SetConfig+0x344>)
 8007ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffe:	bf00      	nop
 8008000:	08008025 	.word	0x08008025
 8008004:	0800802d 	.word	0x0800802d
 8008008:	08008035 	.word	0x08008035
 800800c:	0800804b 	.word	0x0800804b
 8008010:	0800803b 	.word	0x0800803b
 8008014:	0800804b 	.word	0x0800804b
 8008018:	0800804b 	.word	0x0800804b
 800801c:	0800804b 	.word	0x0800804b
 8008020:	08008043 	.word	0x08008043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008024:	f7fd fe96 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 8008028:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800802a:	e014      	b.n	8008056 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802c:	f7fd fea4 	bl	8005d78 <HAL_RCC_GetPCLK2Freq>
 8008030:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008032:	e010      	b.n	8008056 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008034:	4b5a      	ldr	r3, [pc, #360]	@ (80081a0 <UART_SetConfig+0x4e4>)
 8008036:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008038:	e00d      	b.n	8008056 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800803a:	f7fd fdd7 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 800803e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008040:	e009      	b.n	8008056 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008042:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008046:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008048:	e005      	b.n	8008056 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800804a:	2300      	movs	r3, #0
 800804c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8089 	beq.w	8008170 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008062:	4a4e      	ldr	r2, [pc, #312]	@ (800819c <UART_SetConfig+0x4e0>)
 8008064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008068:	461a      	mov	r2, r3
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008070:	005a      	lsls	r2, r3, #1
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	085b      	lsrs	r3, r3, #1
 8008078:	441a      	add	r2, r3
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008082:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	2b0f      	cmp	r3, #15
 8008088:	d916      	bls.n	80080b8 <UART_SetConfig+0x3fc>
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008090:	d212      	bcs.n	80080b8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	b29b      	uxth	r3, r3
 8008096:	f023 030f 	bic.w	r3, r3, #15
 800809a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800809c:	6a3b      	ldr	r3, [r7, #32]
 800809e:	085b      	lsrs	r3, r3, #1
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	8bfb      	ldrh	r3, [r7, #30]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	8bfa      	ldrh	r2, [r7, #30]
 80080b4:	60da      	str	r2, [r3, #12]
 80080b6:	e05b      	b.n	8008170 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80080be:	e057      	b.n	8008170 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80080c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d828      	bhi.n	800811a <UART_SetConfig+0x45e>
 80080c8:	a201      	add	r2, pc, #4	@ (adr r2, 80080d0 <UART_SetConfig+0x414>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	080080f5 	.word	0x080080f5
 80080d4:	080080fd 	.word	0x080080fd
 80080d8:	08008105 	.word	0x08008105
 80080dc:	0800811b 	.word	0x0800811b
 80080e0:	0800810b 	.word	0x0800810b
 80080e4:	0800811b 	.word	0x0800811b
 80080e8:	0800811b 	.word	0x0800811b
 80080ec:	0800811b 	.word	0x0800811b
 80080f0:	08008113 	.word	0x08008113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080f4:	f7fd fe2e 	bl	8005d54 <HAL_RCC_GetPCLK1Freq>
 80080f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80080fa:	e014      	b.n	8008126 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080fc:	f7fd fe3c 	bl	8005d78 <HAL_RCC_GetPCLK2Freq>
 8008100:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008102:	e010      	b.n	8008126 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008104:	4b26      	ldr	r3, [pc, #152]	@ (80081a0 <UART_SetConfig+0x4e4>)
 8008106:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008108:	e00d      	b.n	8008126 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800810a:	f7fd fd6f 	bl	8005bec <HAL_RCC_GetSysClockFreq>
 800810e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008110:	e009      	b.n	8008126 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008116:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008118:	e005      	b.n	8008126 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800811e:	2301      	movs	r3, #1
 8008120:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008124:	bf00      	nop
    }

    if (pclk != 0U)
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008128:	2b00      	cmp	r3, #0
 800812a:	d021      	beq.n	8008170 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008130:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <UART_SetConfig+0x4e0>)
 8008132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008136:	461a      	mov	r2, r3
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	fbb3 f2f2 	udiv	r2, r3, r2
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	085b      	lsrs	r3, r3, #1
 8008144:	441a      	add	r2, r3
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	fbb2 f3f3 	udiv	r3, r2, r3
 800814e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008150:	6a3b      	ldr	r3, [r7, #32]
 8008152:	2b0f      	cmp	r3, #15
 8008154:	d909      	bls.n	800816a <UART_SetConfig+0x4ae>
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800815c:	d205      	bcs.n	800816a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	b29a      	uxth	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	60da      	str	r2, [r3, #12]
 8008168:	e002      	b.n	8008170 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2201      	movs	r2, #1
 8008174:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	2201      	movs	r2, #1
 800817c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	2200      	movs	r2, #0
 8008184:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2200      	movs	r2, #0
 800818a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800818c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008190:	4618      	mov	r0, r3
 8008192:	3730      	adds	r7, #48	@ 0x30
 8008194:	46bd      	mov	sp, r7
 8008196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800819a:	bf00      	nop
 800819c:	0801cba4 	.word	0x0801cba4
 80081a0:	00f42400 	.word	0x00f42400

080081a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b0:	f003 0301 	and.w	r3, r3, #1
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00a      	beq.n	80081ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	430a      	orrs	r2, r1
 80081cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d2:	f003 0302 	and.w	r3, r3, #2
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00a      	beq.n	80081f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f4:	f003 0304 	and.w	r3, r3, #4
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00a      	beq.n	8008212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00a      	beq.n	8008256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00a      	beq.n	8008278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800827c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008280:	2b00      	cmp	r3, #0
 8008282:	d01a      	beq.n	80082ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082a2:	d10a      	bne.n	80082ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bc80      	pop	{r7}
 80082e4:	4770      	bx	lr

080082e6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b086      	sub	sp, #24
 80082ea:	af02      	add	r7, sp, #8
 80082ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80082f6:	f7f9 fc89 	bl	8001c0c <HAL_GetTick>
 80082fa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b08      	cmp	r3, #8
 8008308:	d10e      	bne.n	8008328 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800830a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2200      	movs	r2, #0
 8008314:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f832 	bl	8008382 <UART_WaitOnFlagUntilTimeout>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e028      	b.n	800837a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b04      	cmp	r3, #4
 8008334:	d10e      	bne.n	8008354 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008336:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800833a:	9300      	str	r3, [sp, #0]
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2200      	movs	r2, #0
 8008340:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f81c 	bl	8008382 <UART_WaitOnFlagUntilTimeout>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e012      	b.n	800837a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2220      	movs	r2, #32
 8008358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b09c      	sub	sp, #112	@ 0x70
 8008386:	af00      	add	r7, sp, #0
 8008388:	60f8      	str	r0, [r7, #12]
 800838a:	60b9      	str	r1, [r7, #8]
 800838c:	603b      	str	r3, [r7, #0]
 800838e:	4613      	mov	r3, r2
 8008390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008392:	e0a9      	b.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800839a:	f000 80a5 	beq.w	80084e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800839e:	f7f9 fc35 	bl	8001c0c <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d302      	bcc.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80083ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d140      	bne.n	8008436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80083c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083c4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80083c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083d4:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80083d8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80083e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e6      	bne.n	80083b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083f8:	f023 0301 	bic.w	r3, r3, #1
 80083fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3308      	adds	r3, #8
 8008404:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008406:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008408:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800840c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800840e:	e841 2300 	strex	r3, r2, [r1]
 8008412:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008414:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d1e5      	bne.n	80083e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2220      	movs	r2, #32
 8008426:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e069      	b.n	800850a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0304 	and.w	r3, r3, #4
 8008440:	2b00      	cmp	r3, #0
 8008442:	d051      	beq.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800844e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008452:	d149      	bne.n	80084e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800845c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008466:	e853 3f00 	ldrex	r3, [r3]
 800846a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008472:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	461a      	mov	r2, r3
 800847a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
 800847e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008480:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008482:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008484:	e841 2300 	strex	r3, r2, [r1]
 8008488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800848a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e6      	bne.n	800845e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	3308      	adds	r3, #8
 8008496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	613b      	str	r3, [r7, #16]
   return(result);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f023 0301 	bic.w	r3, r3, #1
 80084a6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	3308      	adds	r3, #8
 80084ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80084b0:	623a      	str	r2, [r7, #32]
 80084b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	69f9      	ldr	r1, [r7, #28]
 80084b6:	6a3a      	ldr	r2, [r7, #32]
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2220      	movs	r2, #32
 80084d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2220      	movs	r2, #32
 80084d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e010      	b.n	800850a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69da      	ldr	r2, [r3, #28]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	4013      	ands	r3, r2
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	bf0c      	ite	eq
 80084f8:	2301      	moveq	r3, #1
 80084fa:	2300      	movne	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	461a      	mov	r2, r3
 8008500:	79fb      	ldrb	r3, [r7, #7]
 8008502:	429a      	cmp	r2, r3
 8008504:	f43f af46 	beq.w	8008394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3770      	adds	r7, #112	@ 0x70
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
	...

08008514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008514:	b480      	push	{r7}
 8008516:	b0a3      	sub	sp, #140	@ 0x8c
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	88fa      	ldrh	r2, [r7, #6]
 800852c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	88fa      	ldrh	r2, [r7, #6]
 8008534:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	d10e      	bne.n	8008566 <UART_Start_Receive_IT+0x52>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d105      	bne.n	800855c <UART_Start_Receive_IT+0x48>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800855a:	e02d      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	22ff      	movs	r2, #255	@ 0xff
 8008560:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008564:	e028      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10d      	bne.n	800858a <UART_Start_Receive_IT+0x76>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	691b      	ldr	r3, [r3, #16]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d104      	bne.n	8008580 <UART_Start_Receive_IT+0x6c>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	22ff      	movs	r2, #255	@ 0xff
 800857a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800857e:	e01b      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	227f      	movs	r2, #127	@ 0x7f
 8008584:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008588:	e016      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008592:	d10d      	bne.n	80085b0 <UART_Start_Receive_IT+0x9c>
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d104      	bne.n	80085a6 <UART_Start_Receive_IT+0x92>
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	227f      	movs	r2, #127	@ 0x7f
 80085a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085a4:	e008      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	223f      	movs	r2, #63	@ 0x3f
 80085aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80085ae:	e003      	b.n	80085b8 <UART_Start_Receive_IT+0xa4>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2222      	movs	r2, #34	@ 0x22
 80085c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3308      	adds	r3, #8
 80085ce:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085d2:	e853 3f00 	ldrex	r3, [r3]
 80085d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80085d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80085ec:	673a      	str	r2, [r7, #112]	@ 0x70
 80085ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80085f2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80085fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e3      	bne.n	80085c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008604:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008608:	d14f      	bne.n	80086aa <UART_Start_Receive_IT+0x196>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008610:	88fa      	ldrh	r2, [r7, #6]
 8008612:	429a      	cmp	r2, r3
 8008614:	d349      	bcc.n	80086aa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800861e:	d107      	bne.n	8008630 <UART_Start_Receive_IT+0x11c>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d103      	bne.n	8008630 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	4a46      	ldr	r2, [pc, #280]	@ (8008744 <UART_Start_Receive_IT+0x230>)
 800862c:	675a      	str	r2, [r3, #116]	@ 0x74
 800862e:	e002      	b.n	8008636 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	4a45      	ldr	r2, [pc, #276]	@ (8008748 <UART_Start_Receive_IT+0x234>)
 8008634:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01a      	beq.n	8008674 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008646:	e853 3f00 	ldrex	r3, [r3]
 800864a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800864c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800864e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008652:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008662:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008666:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800866e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e4      	bne.n	800863e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3308      	adds	r3, #8
 800867a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800868a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	3308      	adds	r3, #8
 8008692:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008694:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008696:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800869a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <UART_Start_Receive_IT+0x160>
 80086a8:	e046      	b.n	8008738 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80086b2:	d107      	bne.n	80086c4 <UART_Start_Receive_IT+0x1b0>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d103      	bne.n	80086c4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a23      	ldr	r2, [pc, #140]	@ (800874c <UART_Start_Receive_IT+0x238>)
 80086c0:	675a      	str	r2, [r3, #116]	@ 0x74
 80086c2:	e002      	b.n	80086ca <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4a22      	ldr	r2, [pc, #136]	@ (8008750 <UART_Start_Receive_IT+0x23c>)
 80086c8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d019      	beq.n	8008706 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	e853 3f00 	ldrex	r3, [r3]
 80086de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80086e6:	677b      	str	r3, [r7, #116]	@ 0x74
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	461a      	mov	r2, r3
 80086ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80086f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e6      	bne.n	80086d2 <UART_Start_Receive_IT+0x1be>
 8008704:	e018      	b.n	8008738 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	613b      	str	r3, [r7, #16]
   return(result);
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	f043 0320 	orr.w	r3, r3, #32
 800871a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	461a      	mov	r2, r3
 8008722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008724:	623b      	str	r3, [r7, #32]
 8008726:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008728:	69f9      	ldr	r1, [r7, #28]
 800872a:	6a3a      	ldr	r2, [r7, #32]
 800872c:	e841 2300 	strex	r3, r2, [r1]
 8008730:	61bb      	str	r3, [r7, #24]
   return(result);
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1e6      	bne.n	8008706 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	378c      	adds	r7, #140	@ 0x8c
 800873e:	46bd      	mov	sp, r7
 8008740:	bc80      	pop	{r7}
 8008742:	4770      	bx	lr
 8008744:	08009129 	.word	0x08009129
 8008748:	08008dc9 	.word	0x08008dc9
 800874c:	08008c11 	.word	0x08008c11
 8008750:	08008a59 	.word	0x08008a59

08008754 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b08f      	sub	sp, #60	@ 0x3c
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6a3b      	ldr	r3, [r7, #32]
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	61fb      	str	r3, [r7, #28]
   return(result);
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800877c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008780:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e6      	bne.n	800875c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	60bb      	str	r3, [r7, #8]
   return(result);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80087a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ae:	61ba      	str	r2, [r7, #24]
 80087b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6979      	ldr	r1, [r7, #20]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	613b      	str	r3, [r7, #16]
   return(result);
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e5      	bne.n	800878e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80087ca:	bf00      	nop
 80087cc:	373c      	adds	r7, #60	@ 0x3c
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b095      	sub	sp, #84	@ 0x54
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80087ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80087fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008800:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e6      	bne.n	80087dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	3308      	adds	r3, #8
 8008814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	61fb      	str	r3, [r7, #28]
   return(result);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008824:	f023 0301 	bic.w	r3, r3, #1
 8008828:	64bb      	str	r3, [r7, #72]	@ 0x48
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3308      	adds	r3, #8
 8008830:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008832:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008834:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008836:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008838:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1e3      	bne.n	800880e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800884a:	2b01      	cmp	r3, #1
 800884c:	d118      	bne.n	8008880 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	e853 3f00 	ldrex	r3, [r3]
 800885a:	60bb      	str	r3, [r7, #8]
   return(result);
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	f023 0310 	bic.w	r3, r3, #16
 8008862:	647b      	str	r3, [r7, #68]	@ 0x44
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	461a      	mov	r2, r3
 800886a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800886c:	61bb      	str	r3, [r7, #24]
 800886e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008870:	6979      	ldr	r1, [r7, #20]
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	e841 2300 	strex	r3, r2, [r1]
 8008878:	613b      	str	r3, [r7, #16]
   return(result);
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1e6      	bne.n	800884e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2220      	movs	r2, #32
 8008884:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008894:	bf00      	nop
 8008896:	3754      	adds	r7, #84	@ 0x54
 8008898:	46bd      	mov	sp, r7
 800889a:	bc80      	pop	{r7}
 800889c:	4770      	bx	lr

0800889e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b090      	sub	sp, #64	@ 0x40
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d137      	bne.n	800892a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80088ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088bc:	2200      	movs	r2, #0
 80088be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	3308      	adds	r3, #8
 80088c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	623b      	str	r3, [r7, #32]
   return(result);
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80088da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3308      	adds	r3, #8
 80088e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80088e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e5      	bne.n	80088c2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	60fb      	str	r3, [r7, #12]
   return(result);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800890a:	637b      	str	r3, [r7, #52]	@ 0x34
 800890c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	461a      	mov	r2, r3
 8008912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008914:	61fb      	str	r3, [r7, #28]
 8008916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	69b9      	ldr	r1, [r7, #24]
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	617b      	str	r3, [r7, #20]
   return(result);
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e6      	bne.n	80088f6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008928:	e002      	b.n	8008930 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800892a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800892c:	f7f9 fe26 	bl	800257c <HAL_UART_TxCpltCallback>
}
 8008930:	bf00      	nop
 8008932:	3740      	adds	r7, #64	@ 0x40
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7ff f99a 	bl	8007c80 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800894c:	bf00      	nop
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b086      	sub	sp, #24
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008960:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008968:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008970:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800897c:	2b80      	cmp	r3, #128	@ 0x80
 800897e:	d109      	bne.n	8008994 <UART_DMAError+0x40>
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b21      	cmp	r3, #33	@ 0x21
 8008984:	d106      	bne.n	8008994 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	2200      	movs	r2, #0
 800898a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800898e:	6978      	ldr	r0, [r7, #20]
 8008990:	f7ff fee0 	bl	8008754 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800899e:	2b40      	cmp	r3, #64	@ 0x40
 80089a0:	d109      	bne.n	80089b6 <UART_DMAError+0x62>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2b22      	cmp	r3, #34	@ 0x22
 80089a6:	d106      	bne.n	80089b6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80089b0:	6978      	ldr	r0, [r7, #20]
 80089b2:	f7ff ff0f 	bl	80087d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089bc:	f043 0210 	orr.w	r2, r3, #16
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089c6:	6978      	ldr	r0, [r7, #20]
 80089c8:	f7ff f963 	bl	8007c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089cc:	bf00      	nop
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff f94d 	bl	8007c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f8:	bf00      	nop
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b088      	sub	sp, #32
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	61bb      	str	r3, [r7, #24]
 8008a28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	6979      	ldr	r1, [r7, #20]
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	613b      	str	r3, [r7, #16]
   return(result);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e6      	bne.n	8008a08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2220      	movs	r2, #32
 8008a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7f9 fd97 	bl	800257c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a4e:	bf00      	nop
 8008a50:	3720      	adds	r7, #32
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b09c      	sub	sp, #112	@ 0x70
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008a66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a70:	2b22      	cmp	r3, #34	@ 0x22
 8008a72:	f040 80be 	bne.w	8008bf2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008a84:	b2d9      	uxtb	r1, r3
 8008a86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a90:	400a      	ands	r2, r1
 8008a92:	b2d2      	uxtb	r2, r2
 8008a94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80a1 	bne.w	8008c02 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	461a      	mov	r2, r3
 8008adc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ade:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ae0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008ae4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008aec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e6      	bne.n	8008ac0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3308      	adds	r3, #8
 8008af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b04:	f023 0301 	bic.w	r3, r3, #1
 8008b08:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	3308      	adds	r3, #8
 8008b10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b12:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e5      	bne.n	8008af2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a33      	ldr	r2, [pc, #204]	@ (8008c0c <UART_RxISR_8BIT+0x1b4>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d01f      	beq.n	8008b84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d018      	beq.n	8008b84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	623b      	str	r3, [r7, #32]
   return(result);
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008b66:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e6      	bne.n	8008b52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d12e      	bne.n	8008bea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f023 0310 	bic.w	r3, r3, #16
 8008ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	69b9      	ldr	r1, [r7, #24]
 8008bb6:	69fa      	ldr	r2, [r7, #28]
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69db      	ldr	r3, [r3, #28]
 8008bca:	f003 0310 	and.w	r3, r3, #16
 8008bce:	2b10      	cmp	r3, #16
 8008bd0:	d103      	bne.n	8008bda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2210      	movs	r2, #16
 8008bd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff f85e 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008be8:	e00b      	b.n	8008c02 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7f9 fcdc 	bl	80025a8 <HAL_UART_RxCpltCallback>
}
 8008bf0:	e007      	b.n	8008c02 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699a      	ldr	r2, [r3, #24]
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f042 0208 	orr.w	r2, r2, #8
 8008c00:	619a      	str	r2, [r3, #24]
}
 8008c02:	bf00      	nop
 8008c04:	3770      	adds	r7, #112	@ 0x70
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40008000 	.word	0x40008000

08008c10 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b09c      	sub	sp, #112	@ 0x70
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c1e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c28:	2b22      	cmp	r3, #34	@ 0x22
 8008c2a:	f040 80be 	bne.w	8008daa <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c34:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c3c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008c3e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008c42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c46:	4013      	ands	r3, r2
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c4c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c52:	1c9a      	adds	r2, r3, #2
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	3b01      	subs	r3, #1
 8008c62:	b29a      	uxth	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f040 80a1 	bne.w	8008dba <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008c86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c98:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008c9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ca4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008cca:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008cd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a33      	ldr	r2, [pc, #204]	@ (8008dc4 <UART_RxISR_16BIT+0x1b4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d01f      	beq.n	8008d3c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d018      	beq.n	8008d3c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	461a      	mov	r2, r3
 8008d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d2a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e6      	bne.n	8008d0a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d12e      	bne.n	8008da2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	e853 3f00 	ldrex	r3, [r3]
 8008d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	f023 0310 	bic.w	r3, r3, #16
 8008d5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d68:	61bb      	str	r3, [r7, #24]
 8008d6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6c:	6979      	ldr	r1, [r7, #20]
 8008d6e:	69ba      	ldr	r2, [r7, #24]
 8008d70:	e841 2300 	strex	r3, r2, [r1]
 8008d74:	613b      	str	r3, [r7, #16]
   return(result);
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1e6      	bne.n	8008d4a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	69db      	ldr	r3, [r3, #28]
 8008d82:	f003 0310 	and.w	r3, r3, #16
 8008d86:	2b10      	cmp	r3, #16
 8008d88:	d103      	bne.n	8008d92 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2210      	movs	r2, #16
 8008d90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7fe ff82 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008da0:	e00b      	b.n	8008dba <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7f9 fc00 	bl	80025a8 <HAL_UART_RxCpltCallback>
}
 8008da8:	e007      	b.n	8008dba <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	699a      	ldr	r2, [r3, #24]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0208 	orr.w	r2, r2, #8
 8008db8:	619a      	str	r2, [r3, #24]
}
 8008dba:	bf00      	nop
 8008dbc:	3770      	adds	r7, #112	@ 0x70
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40008000 	.word	0x40008000

08008dc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b0ac      	sub	sp, #176	@ 0xb0
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008dd6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	69db      	ldr	r3, [r3, #28]
 8008de0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfe:	2b22      	cmp	r3, #34	@ 0x22
 8008e00:	f040 8182 	bne.w	8009108 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008e0a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e0e:	e125      	b.n	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e16:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e1a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008e1e:	b2d9      	uxtb	r1, r3
 8008e20:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008e24:	b2da      	uxtb	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e2a:	400a      	ands	r2, r1
 8008e2c:	b2d2      	uxtb	r2, r2
 8008e2e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	3b01      	subs	r3, #1
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e5a:	f003 0307 	and.w	r3, r3, #7
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d053      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d011      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e88:	f043 0201 	orr.w	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e96:	f003 0302 	and.w	r3, r3, #2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d011      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ea2:	f003 0301 	and.w	r3, r3, #1
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eb8:	f043 0204 	orr.w	r2, r3, #4
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ec6:	f003 0304 	and.w	r3, r3, #4
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d011      	beq.n	8008ef2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d00b      	beq.n	8008ef2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee8:	f043 0202 	orr.w	r2, r3, #2
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d006      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fe fec8 	bl	8007c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 80a2 	bne.w	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f20:	e853 3f00 	ldrex	r3, [r3]
 8008f24:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8008f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008f3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f3c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8008f40:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008f42:	e841 2300 	strex	r3, r2, [r1]
 8008f46:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8008f48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1e4      	bne.n	8008f18 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3308      	adds	r3, #8
 8008f54:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f58:	e853 3f00 	ldrex	r3, [r3]
 8008f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8008f5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f64:	f023 0301 	bic.w	r3, r3, #1
 8008f68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	3308      	adds	r3, #8
 8008f72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f76:	66ba      	str	r2, [r7, #104]	@ 0x68
 8008f78:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f7a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8008f7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008f7e:	e841 2300 	strex	r3, r2, [r1]
 8008f82:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008f84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1e1      	bne.n	8008f4e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a5f      	ldr	r2, [pc, #380]	@ (8009120 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d021      	beq.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d01a      	beq.n	8008fec <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008fca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008fd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fda:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fdc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fde:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fe0:	e841 2300 	strex	r3, r2, [r1]
 8008fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1e4      	bne.n	8008fb6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d130      	bne.n	8009056 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009002:	e853 3f00 	ldrex	r3, [r3]
 8009006:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800900a:	f023 0310 	bic.w	r3, r3, #16
 800900e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	461a      	mov	r2, r3
 8009018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800901c:	643b      	str	r3, [r7, #64]	@ 0x40
 800901e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009022:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009024:	e841 2300 	strex	r3, r2, [r1]
 8009028:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800902a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1e4      	bne.n	8008ffa <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	f003 0310 	and.w	r3, r3, #16
 800903a:	2b10      	cmp	r3, #16
 800903c:	d103      	bne.n	8009046 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2210      	movs	r2, #16
 8009044:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f7fe fe28 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
 8009054:	e002      	b.n	800905c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f7f9 faa6 	bl	80025a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800905c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009064:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f aecf 	bne.w	8008e10 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009078:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800907c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009080:	2b00      	cmp	r3, #0
 8009082:	d049      	beq.n	8009118 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800908a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800908e:	429a      	cmp	r2, r3
 8009090:	d242      	bcs.n	8009118 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6a3b      	ldr	r3, [r7, #32]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3308      	adds	r3, #8
 80090b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80090b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090be:	e841 2300 	strex	r3, r2, [r1]
 80090c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1e3      	bne.n	8009092 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80090ce:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	e853 3f00 	ldrex	r3, [r3]
 80090dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	f043 0320 	orr.w	r3, r3, #32
 80090e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80090f2:	61bb      	str	r3, [r7, #24]
 80090f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	6979      	ldr	r1, [r7, #20]
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e4      	bne.n	80090d0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009106:	e007      	b.n	8009118 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0208 	orr.w	r2, r2, #8
 8009116:	619a      	str	r2, [r3, #24]
}
 8009118:	bf00      	nop
 800911a:	37b0      	adds	r7, #176	@ 0xb0
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}
 8009120:	40008000 	.word	0x40008000
 8009124:	08008a59 	.word	0x08008a59

08009128 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b0ae      	sub	sp, #184	@ 0xb8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009136:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	689b      	ldr	r3, [r3, #8]
 8009154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800915e:	2b22      	cmp	r3, #34	@ 0x22
 8009160:	f040 8186 	bne.w	8009470 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800916a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800916e:	e129      	b.n	80093c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009176:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009182:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009186:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800918a:	4013      	ands	r3, r2
 800918c:	b29a      	uxth	r2, r3
 800918e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009192:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009198:	1c9a      	adds	r2, r3, #2
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	3b01      	subs	r3, #1
 80091a8:	b29a      	uxth	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80091ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091be:	f003 0307 	and.w	r3, r3, #7
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d053      	beq.n	800926e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d011      	beq.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80091d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d00b      	beq.n	80091f6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	2201      	movs	r2, #1
 80091e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091ec:	f043 0201 	orr.w	r2, r3, #1
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d011      	beq.n	8009226 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00b      	beq.n	8009226 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2202      	movs	r2, #2
 8009214:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921c:	f043 0204 	orr.w	r2, r3, #4
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009226:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d011      	beq.n	8009256 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009232:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00b      	beq.n	8009256 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2204      	movs	r2, #4
 8009244:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924c:	f043 0202 	orr.w	r2, r3, #2
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925c:	2b00      	cmp	r3, #0
 800925e:	d006      	beq.n	800926e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f7fe fd16 	bl	8007c92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2200      	movs	r2, #0
 800926a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009274:	b29b      	uxth	r3, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	f040 80a4 	bne.w	80093c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800928a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800928c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009290:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800929e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80092a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80092aa:	e841 2300 	strex	r3, r2, [r1]
 80092ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80092b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1e2      	bne.n	800927c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3308      	adds	r3, #8
 80092bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80092c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092cc:	f023 0301 	bic.w	r3, r3, #1
 80092d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	3308      	adds	r3, #8
 80092da:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80092de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80092e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80092e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80092ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e1      	bne.n	80092b6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2220      	movs	r2, #32
 80092f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2200      	movs	r2, #0
 8009304:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a5f      	ldr	r2, [pc, #380]	@ (8009488 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d021      	beq.n	8009354 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d01a      	beq.n	8009354 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009324:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009326:	e853 3f00 	ldrex	r3, [r3]
 800932a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800932c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800932e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009332:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009342:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009344:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009346:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009348:	e841 2300 	strex	r3, r2, [r1]
 800934c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800934e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1e4      	bne.n	800931e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009358:	2b01      	cmp	r3, #1
 800935a:	d130      	bne.n	80093be <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	e853 3f00 	ldrex	r3, [r3]
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009372:	f023 0310 	bic.w	r3, r3, #16
 8009376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	461a      	mov	r2, r3
 8009380:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009384:	647b      	str	r3, [r7, #68]	@ 0x44
 8009386:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009388:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800938a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800938c:	e841 2300 	strex	r3, r2, [r1]
 8009390:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e4      	bne.n	8009362 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	f003 0310 	and.w	r3, r3, #16
 80093a2:	2b10      	cmp	r3, #16
 80093a4:	d103      	bne.n	80093ae <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2210      	movs	r2, #16
 80093ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80093b4:	4619      	mov	r1, r3
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f7fe fc74 	bl	8007ca4 <HAL_UARTEx_RxEventCallback>
 80093bc:	e002      	b.n	80093c4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f7f9 f8f2 	bl	80025a8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093c4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d006      	beq.n	80093da <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80093cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093d0:	f003 0320 	and.w	r3, r3, #32
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f47f aecb 	bne.w	8009170 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093e0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80093e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d049      	beq.n	8009480 <UART_RxISR_16BIT_FIFOEN+0x358>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093f2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d242      	bcs.n	8009480 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	3308      	adds	r3, #8
 8009400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009404:	e853 3f00 	ldrex	r3, [r3]
 8009408:	623b      	str	r3, [r7, #32]
   return(result);
 800940a:	6a3b      	ldr	r3, [r7, #32]
 800940c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3308      	adds	r3, #8
 800941a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800941e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009426:	e841 2300 	strex	r3, r2, [r1]
 800942a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800942c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1e3      	bne.n	80093fa <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a15      	ldr	r2, [pc, #84]	@ (800948c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009436:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	e853 3f00 	ldrex	r3, [r3]
 8009444:	60fb      	str	r3, [r7, #12]
   return(result);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f043 0320 	orr.w	r3, r3, #32
 800944c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	461a      	mov	r2, r3
 8009456:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945e:	69b9      	ldr	r1, [r7, #24]
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	617b      	str	r3, [r7, #20]
   return(result);
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d1e4      	bne.n	8009438 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800946e:	e007      	b.n	8009480 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699a      	ldr	r2, [r3, #24]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f042 0208 	orr.w	r2, r2, #8
 800947e:	619a      	str	r2, [r3, #24]
}
 8009480:	bf00      	nop
 8009482:	37b8      	adds	r7, #184	@ 0xb8
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40008000 	.word	0x40008000
 800948c:	08008c11 	.word	0x08008c11

08009490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	bc80      	pop	{r7}
 80094a0:	4770      	bx	lr

080094a2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80094aa:	bf00      	nop
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bc80      	pop	{r7}
 80094b2:	4770      	bx	lr

080094b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bc80      	pop	{r7}
 80094c4:	4770      	bx	lr

080094c6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b088      	sub	sp, #32
 80094ca:	af02      	add	r7, sp, #8
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	1d3b      	adds	r3, r7, #4
 80094d0:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d101      	bne.n	80094e6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80094e2:	2302      	movs	r3, #2
 80094e4:	e046      	b.n	8009574 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2224      	movs	r2, #36	@ 0x24
 80094f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0201 	bic.w	r2, r2, #1
 8009504:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d105      	bne.n	800952c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009520:	1d3b      	adds	r3, r7, #4
 8009522:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	f000 f911 	bl	800974e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f042 0201 	orr.w	r2, r2, #1
 800953a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800953c:	f7f8 fb66 	bl	8001c0c <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009542:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	2200      	movs	r2, #0
 800954c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f7fe ff16 	bl	8008382 <UART_WaitOnFlagUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	75fb      	strb	r3, [r7, #23]
 8009560:	e003      	b.n	800956a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009572:	7dfb      	ldrb	r3, [r7, #23]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800957c:	b480      	push	{r7}
 800957e:	b089      	sub	sp, #36	@ 0x24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800958a:	2b01      	cmp	r3, #1
 800958c:	d101      	bne.n	8009592 <HAL_UARTEx_EnableStopMode+0x16>
 800958e:	2302      	movs	r3, #2
 8009590:	e021      	b.n	80095d6 <HAL_UARTEx_EnableStopMode+0x5a>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f043 0302 	orr.w	r3, r3, #2
 80095ae:	61fb      	str	r3, [r7, #28]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6979      	ldr	r1, [r7, #20]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	613b      	str	r3, [r7, #16]
   return(result);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3724      	adds	r7, #36	@ 0x24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr

080095e0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d101      	bne.n	80095f6 <HAL_UARTEx_EnableFifoMode+0x16>
 80095f2:	2302      	movs	r3, #2
 80095f4:	e02b      	b.n	800964e <HAL_UARTEx_EnableFifoMode+0x6e>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2224      	movs	r2, #36	@ 0x24
 8009602:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f022 0201 	bic.w	r2, r2, #1
 800961c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009624:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800962c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f000 f8ac 	bl	8009794 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009656:	b580      	push	{r7, lr}
 8009658:	b084      	sub	sp, #16
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009666:	2b01      	cmp	r3, #1
 8009668:	d101      	bne.n	800966e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800966a:	2302      	movs	r3, #2
 800966c:	e02d      	b.n	80096ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2224      	movs	r2, #36	@ 0x24
 800967a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f022 0201 	bic.w	r2, r2, #1
 8009694:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	430a      	orrs	r2, r1
 80096a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f872 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2220      	movs	r2, #32
 80096bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096e2:	2b01      	cmp	r3, #1
 80096e4:	d101      	bne.n	80096ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80096e6:	2302      	movs	r3, #2
 80096e8:	e02d      	b.n	8009746 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2224      	movs	r2, #36	@ 0x24
 80096f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0201 	bic.w	r2, r2, #1
 8009710:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	430a      	orrs	r2, r1
 8009724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f834 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2220      	movs	r2, #32
 8009738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800974e:	b480      	push	{r7}
 8009750:	b085      	sub	sp, #20
 8009752:	af00      	add	r7, sp, #0
 8009754:	60f8      	str	r0, [r7, #12]
 8009756:	1d3b      	adds	r3, r7, #4
 8009758:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f023 0210 	bic.w	r2, r3, #16
 8009766:	893b      	ldrh	r3, [r7, #8]
 8009768:	4619      	mov	r1, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 800977c:	7abb      	ldrb	r3, [r7, #10]
 800977e:	061a      	lsls	r2, r3, #24
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
}
 8009788:	bf00      	nop
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	bc80      	pop	{r7}
 8009790:	4770      	bx	lr
	...

08009794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097b4:	e031      	b.n	800981a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097b6:	2308      	movs	r3, #8
 80097b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097ba:	2308      	movs	r3, #8
 80097bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	0e5b      	lsrs	r3, r3, #25
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	0f5b      	lsrs	r3, r3, #29
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	7b3a      	ldrb	r2, [r7, #12]
 80097e2:	4910      	ldr	r1, [pc, #64]	@ (8009824 <UARTEx_SetNbDataToProcess+0x90>)
 80097e4:	5c8a      	ldrb	r2, [r1, r2]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ea:	7b3a      	ldrb	r2, [r7, #12]
 80097ec:	490e      	ldr	r1, [pc, #56]	@ (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 80097ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	7b7a      	ldrb	r2, [r7, #13]
 8009800:	4908      	ldr	r1, [pc, #32]	@ (8009824 <UARTEx_SetNbDataToProcess+0x90>)
 8009802:	5c8a      	ldrb	r2, [r1, r2]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009808:	7b7a      	ldrb	r2, [r7, #13]
 800980a:	4907      	ldr	r1, [pc, #28]	@ (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 800980c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800980e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009812:	b29a      	uxth	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	bc80      	pop	{r7}
 8009822:	4770      	bx	lr
 8009824:	0801cbbc 	.word	0x0801cbbc
 8009828:	0801cbc4 	.word	0x0801cbc4

0800982c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009830:	f7f8 f892 	bl	8001958 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8009834:	f000 f820 	bl	8009878 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009838:	bf00      	nop
 800983a:	bd80      	pop	{r7, pc}

0800983c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009840:	f04f 30ff 	mov.w	r0, #4294967295
 8009844:	f011 ff3e 	bl	801b6c4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009848:	bf00      	nop
 800984a:	bd80      	pop	{r7, pc}

0800984c <__NVIC_SystemReset>:
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009850:	f3bf 8f4f 	dsb	sy
}
 8009854:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009856:	4b06      	ldr	r3, [pc, #24]	@ (8009870 <__NVIC_SystemReset+0x24>)
 8009858:	68db      	ldr	r3, [r3, #12]
 800985a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800985e:	4904      	ldr	r1, [pc, #16]	@ (8009870 <__NVIC_SystemReset+0x24>)
 8009860:	4b04      	ldr	r3, [pc, #16]	@ (8009874 <__NVIC_SystemReset+0x28>)
 8009862:	4313      	orrs	r3, r2
 8009864:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009866:	f3bf 8f4f 	dsb	sy
}
 800986a:	bf00      	nop
    __NOP();
 800986c:	bf00      	nop
 800986e:	e7fd      	b.n	800986c <__NVIC_SystemReset+0x20>
 8009870:	e000ed00 	.word	0xe000ed00
 8009874:	05fa0004 	.word	0x05fa0004

08009878 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800987e:	2300      	movs	r3, #0
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	4b1f      	ldr	r3, [pc, #124]	@ (8009900 <LoRaWAN_Init+0x88>)
 8009884:	2200      	movs	r2, #0
 8009886:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800988a:	481e      	ldr	r0, [pc, #120]	@ (8009904 <LoRaWAN_Init+0x8c>)
 800988c:	f012 f8b8 	bl	801ba00 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009890:	4a1d      	ldr	r2, [pc, #116]	@ (8009908 <LoRaWAN_Init+0x90>)
 8009892:	2100      	movs	r1, #0
 8009894:	2001      	movs	r0, #1
 8009896:	f012 f811 	bl	801b8bc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800989a:	4a1c      	ldr	r2, [pc, #112]	@ (800990c <LoRaWAN_Init+0x94>)
 800989c:	2100      	movs	r1, #0
 800989e:	2002      	movs	r0, #2
 80098a0:	f012 f80c 	bl	801b8bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80098a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009910 <LoRaWAN_Init+0x98>)
 80098a6:	2100      	movs	r1, #0
 80098a8:	2004      	movs	r0, #4
 80098aa:	f012 f807 	bl	801b8bc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 80098ae:	4a19      	ldr	r2, [pc, #100]	@ (8009914 <LoRaWAN_Init+0x9c>)
 80098b0:	2100      	movs	r1, #0
 80098b2:	2008      	movs	r0, #8
 80098b4:	f012 f802 	bl	801b8bc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 80098b8:	f000 f9aa 	bl	8009c10 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 80098bc:	4916      	ldr	r1, [pc, #88]	@ (8009918 <LoRaWAN_Init+0xa0>)
 80098be:	4817      	ldr	r0, [pc, #92]	@ (800991c <LoRaWAN_Init+0xa4>)
 80098c0:	f001 feee 	bl	800b6a0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 80098c4:	4816      	ldr	r0, [pc, #88]	@ (8009920 <LoRaWAN_Init+0xa8>)
 80098c6:	f001 ff47 	bl	800b758 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 80098ca:	4b16      	ldr	r3, [pc, #88]	@ (8009924 <LoRaWAN_Init+0xac>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	4a16      	ldr	r2, [pc, #88]	@ (8009928 <LoRaWAN_Init+0xb0>)
 80098d0:	7812      	ldrb	r2, [r2, #0]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f002 f869 	bl	800b9ac <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 80098da:	4b14      	ldr	r3, [pc, #80]	@ (800992c <LoRaWAN_Init+0xb4>)
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10b      	bne.n	80098fa <LoRaWAN_Init+0x82>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 80098e2:	4b13      	ldr	r3, [pc, #76]	@ (8009930 <LoRaWAN_Init+0xb8>)
 80098e4:	6819      	ldr	r1, [r3, #0]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <LoRaWAN_Init+0xbc>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4812      	ldr	r0, [pc, #72]	@ (8009938 <LoRaWAN_Init+0xc0>)
 80098f0:	f012 f886 	bl	801ba00 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 80098f4:	4810      	ldr	r0, [pc, #64]	@ (8009938 <LoRaWAN_Init+0xc0>)
 80098f6:	f012 f8b9 	bl	801ba6c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 80098fa:	bf00      	nop
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	08009b11 	.word	0x08009b11
 8009904:	2000033c 	.word	0x2000033c
 8009908:	0800b995 	.word	0x0800b995
 800990c:	08009951 	.word	0x08009951
 8009910:	08009b35 	.word	0x08009b35
 8009914:	08009a91 	.word	0x08009a91
 8009918:	01030100 	.word	0x01030100
 800991c:	2000000c 	.word	0x2000000c
 8009920:	20000058 	.word	0x20000058
 8009924:	20000009 	.word	0x20000009
 8009928:	2000000a 	.word	0x2000000a
 800992c:	20000320 	.word	0x20000320
 8009930:	20000070 	.word	0x20000070
 8009934:	0800995d 	.word	0x0800995d
 8009938:	20000324 	.word	0x20000324

0800993c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800993c:	b480      	push	{r7}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  /* USER CODE END OnRxData_1 */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr

08009950 <SendTxData>:

static void SendTxData(void)
{
 8009950:	b480      	push	{r7}
 8009952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SendTxData_1 */

  /* USER CODE END SendTxData_1 */
}
 8009954:	bf00      	nop
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr

0800995c <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009964:	2100      	movs	r1, #0
 8009966:	2002      	movs	r0, #2
 8009968:	f011 ffca 	bl	801b900 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800996c:	4803      	ldr	r0, [pc, #12]	@ (800997c <OnTxTimerEvent+0x20>)
 800996e:	f012 f87d 	bl	801ba6c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8009972:	bf00      	nop
 8009974:	3708      	adds	r7, #8
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}
 800997a:	bf00      	nop
 800997c:	20000324 	.word	0x20000324

08009980 <OnTxData>:
/* USER CODE BEGIN PrFD_LedEvents */

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  /* USER CODE END OnTxData_1 */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	bc80      	pop	{r7}
 8009990:	4770      	bx	lr

08009992 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  /* USER CODE END OnJoinRequest_1 */
}
 800999a:	bf00      	nop
 800999c:	370c      	adds	r7, #12
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr

080099a4 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  /* USER CODE END OnBeaconStatusChange_1 */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bc80      	pop	{r7}
 80099b4:	4770      	bx	lr

080099b6 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 80099b6:	b480      	push	{r7}
 80099b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 80099ba:	bf00      	nop
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b083      	sub	sp, #12
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	4603      	mov	r3, r0
 80099ca:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  /* USER CODE END OnClassChange_1 */
}
 80099cc:	bf00      	nop
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr

080099d6 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80099da:	2100      	movs	r1, #0
 80099dc:	2001      	movs	r0, #1
 80099de:	f011 ff8f 	bl	801b900 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 80099e2:	bf00      	nop
 80099e4:	bd80      	pop	{r7, pc}
	...

080099e8 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 80099f0:	4a0d      	ldr	r2, [pc, #52]	@ (8009a28 <OnTxPeriodicityChanged+0x40>)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 80099f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009a28 <OnTxPeriodicityChanged+0x40>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 80099fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009a28 <OnTxPeriodicityChanged+0x40>)
 8009a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a04:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 8009a06:	4809      	ldr	r0, [pc, #36]	@ (8009a2c <OnTxPeriodicityChanged+0x44>)
 8009a08:	f012 f89e 	bl	801bb48 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8009a0c:	4b06      	ldr	r3, [pc, #24]	@ (8009a28 <OnTxPeriodicityChanged+0x40>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4619      	mov	r1, r3
 8009a12:	4806      	ldr	r0, [pc, #24]	@ (8009a2c <OnTxPeriodicityChanged+0x44>)
 8009a14:	f012 f908 	bl	801bc28 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8009a18:	4804      	ldr	r0, [pc, #16]	@ (8009a2c <OnTxPeriodicityChanged+0x44>)
 8009a1a:	f012 f827 	bl	801ba6c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 8009a1e:	bf00      	nop
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000070 	.word	0x20000070
 8009a2c:	20000324 	.word	0x20000324

08009a30 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8009a3a:	4a04      	ldr	r2, [pc, #16]	@ (8009a4c <OnTxFrameCtrlChanged+0x1c>)
 8009a3c:	79fb      	ldrb	r3, [r7, #7]
 8009a3e:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop
 8009a4c:	20000058 	.word	0x20000058

08009a50 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	4603      	mov	r3, r0
 8009a58:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8009a5a:	4a04      	ldr	r2, [pc, #16]	@ (8009a6c <OnPingSlotPeriodicityChanged+0x1c>)
 8009a5c:	79fb      	ldrb	r3, [r7, #7]
 8009a5e:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bc80      	pop	{r7}
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	20000058 	.word	0x20000058

08009a70 <OnSystemReset>:

static void OnSystemReset(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009a74:	f002 fd65 	bl	800c542 <LmHandlerHalt>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d106      	bne.n	8009a8c <OnSystemReset+0x1c>
 8009a7e:	f002 f839 	bl	800baf4 <LmHandlerJoinStatus>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d101      	bne.n	8009a8c <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 8009a88:	f7ff fee0 	bl	800984c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 8009a8c:	bf00      	nop
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <StopJoin>:

static void StopJoin(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN StopJoin_1 */

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 8009a94:	4817      	ldr	r0, [pc, #92]	@ (8009af4 <StopJoin+0x64>)
 8009a96:	f012 f857 	bl	801bb48 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8009a9a:	f002 fd45 	bl	800c528 <LmHandlerStop>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d006      	beq.n	8009ab2 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 8009aa4:	4b14      	ldr	r3, [pc, #80]	@ (8009af8 <StopJoin+0x68>)
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	2002      	movs	r0, #2
 8009aac:	f012 fa56 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
 8009ab0:	e01a      	b.n	8009ae8 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8009ab2:	4b12      	ldr	r3, [pc, #72]	@ (8009afc <StopJoin+0x6c>)
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	2002      	movs	r0, #2
 8009aba:	f012 fa4f 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 8009abe:	4b10      	ldr	r3, [pc, #64]	@ (8009b00 <StopJoin+0x70>)
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8009ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8009b04 <StopJoin+0x74>)
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2100      	movs	r1, #0
 8009aca:	2002      	movs	r0, #2
 8009acc:	f012 fa46 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 8009ad0:	480d      	ldr	r0, [pc, #52]	@ (8009b08 <StopJoin+0x78>)
 8009ad2:	f001 fe41 	bl	800b758 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <StopJoin+0x70>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2101      	movs	r1, #1
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 ff65 	bl	800b9ac <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8009ae2:	4804      	ldr	r0, [pc, #16]	@ (8009af4 <StopJoin+0x64>)
 8009ae4:	f011 ffc2 	bl	801ba6c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 8009ae8:	4808      	ldr	r0, [pc, #32]	@ (8009b0c <StopJoin+0x7c>)
 8009aea:	f011 ffbf 	bl	801ba6c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 8009aee:	bf00      	nop
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	bf00      	nop
 8009af4:	20000324 	.word	0x20000324
 8009af8:	0801c5e8 	.word	0x0801c5e8
 8009afc:	0801c608 	.word	0x0801c608
 8009b00:	20000009 	.word	0x20000009
 8009b04:	0801c61c 	.word	0x0801c61c
 8009b08:	20000058 	.word	0x20000058
 8009b0c:	2000033c 	.word	0x2000033c

08009b10 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 8009b18:	4b05      	ldr	r3, [pc, #20]	@ (8009b30 <OnStopJoinTimerEvent+0x20>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	d103      	bne.n	8009b28 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 8009b20:	2100      	movs	r1, #0
 8009b22:	2008      	movs	r0, #8
 8009b24:	f011 feec 	bl	801b900 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN OnStopJoinTimerEvent_Last */

  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20000009 	.word	0x20000009

08009b34 <StoreContext>:

static void StoreContext(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009b3a:	23ff      	movs	r3, #255	@ 0xff
 8009b3c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 8009b3e:	f002 fd35 	bl	800c5ac <LmHandlerNvmDataStore>
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8009b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b4a:	f113 0f08 	cmn.w	r3, #8
 8009b4e:	d106      	bne.n	8009b5e <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8009b50:	4b0a      	ldr	r3, [pc, #40]	@ (8009b7c <StoreContext+0x48>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	2100      	movs	r1, #0
 8009b56:	2002      	movs	r0, #2
 8009b58:	f012 fa00 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 8009b5c:	e00a      	b.n	8009b74 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 8009b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b66:	d105      	bne.n	8009b74 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <StoreContext+0x4c>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	2002      	movs	r0, #2
 8009b70:	f012 f9f4 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 8009b74:	bf00      	nop
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	0801c63c 	.word	0x0801c63c
 8009b80:	0801c654 	.word	0x0801c654

08009b84 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 8009b8e:	79fb      	ldrb	r3, [r7, #7]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d106      	bne.n	8009ba2 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8009b94:	4b08      	ldr	r3, [pc, #32]	@ (8009bb8 <OnNvmDataChange+0x34>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	2100      	movs	r1, #0
 8009b9a:	2002      	movs	r0, #2
 8009b9c:	f012 f9de 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 8009ba0:	e005      	b.n	8009bae <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8009ba2:	4b06      	ldr	r3, [pc, #24]	@ (8009bbc <OnNvmDataChange+0x38>)
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2002      	movs	r0, #2
 8009baa:	f012 f9d7 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	0801c66c 	.word	0x0801c66c
 8009bbc:	0801c680 	.word	0x0801c680

08009bc0 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 8009bca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009bce:	4807      	ldr	r0, [pc, #28]	@ (8009bec <OnStoreContextRequest+0x2c>)
 8009bd0:	f7f7 fa24 	bl	800101c <FLASH_IF_Erase>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d104      	bne.n	8009be4 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8009bda:	683a      	ldr	r2, [r7, #0]
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4803      	ldr	r0, [pc, #12]	@ (8009bec <OnStoreContextRequest+0x2c>)
 8009be0:	f7f7 f9cc 	bl	8000f7c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 8009be4:	bf00      	nop
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	0803f000 	.word	0x0803f000

08009bf0 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8009bfa:	683a      	ldr	r2, [r7, #0]
 8009bfc:	4903      	ldr	r1, [pc, #12]	@ (8009c0c <OnRestoreContextRequest+0x1c>)
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7f7 f9e4 	bl	8000fcc <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	0803f000 	.word	0x0803f000

08009c10 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8009c14:	4b18      	ldr	r3, [pc, #96]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8009c1a:	4b17      	ldr	r3, [pc, #92]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8009c20:	4b15      	ldr	r3, [pc, #84]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8009c26:	4b14      	ldr	r3, [pc, #80]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8009c2c:	4b12      	ldr	r3, [pc, #72]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f043 0320 	orr.w	r3, r3, #32
 8009c34:	4a10      	ldr	r2, [pc, #64]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c36:	6053      	str	r3, [r2, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8009c38:	4b0f      	ldr	r3, [pc, #60]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c3a:	685b      	ldr	r3, [r3, #4]
 8009c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c40:	4a0d      	ldr	r2, [pc, #52]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c42:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8009c44:	4b0c      	ldr	r3, [pc, #48]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d10d      	bne.n	8009c68 <LoraInfo_Init+0x58>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8009c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8009c7c <LoraInfo_Init+0x6c>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2100      	movs	r1, #0
 8009c52:	2000      	movs	r0, #0
 8009c54:	f012 f982 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8009c58:	bf00      	nop
 8009c5a:	f012 f96d 	bl	801bf38 <UTIL_ADV_TRACE_IsBufferEmpty>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d1fa      	bne.n	8009c5a <LoraInfo_Init+0x4a>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8009c64:	bf00      	nop
 8009c66:	e7fd      	b.n	8009c64 <LoraInfo_Init+0x54>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8009c68:	4b03      	ldr	r3, [pc, #12]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8009c6e:	4b02      	ldr	r3, [pc, #8]	@ (8009c78 <LoraInfo_Init+0x68>)
 8009c70:	2201      	movs	r2, #1
 8009c72:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8009c74:	bf00      	nop
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000354 	.word	0x20000354
 8009c7c:	0801c694 	.word	0x0801c694

08009c80 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8009c84:	4b02      	ldr	r3, [pc, #8]	@ (8009c90 <LoraInfo_GetPtr+0x10>)
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bc80      	pop	{r7}
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	20000354 	.word	0x20000354

08009c94 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8009c9e:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bc80      	pop	{r7}
 8009ca8:	4770      	bx	lr

08009caa <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr

08009cc4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8009cca:	2302      	movs	r3, #2
 8009ccc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8009cce:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr

08009cda <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 8009ce4:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bc80      	pop	{r7}
 8009cee:	4770      	bx	lr

08009cf0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8009cfa:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bc80      	pop	{r7}
 8009d04:	4770      	bx	lr

08009d06 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8009d1a:	230f      	movs	r3, #15
 8009d1c:	60fb      	str	r3, [r7, #12]
 8009d1e:	e001      	b.n	8009d24 <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8009d20:	2316      	movs	r3, #22
 8009d22:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 8009d24:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	33f1      	adds	r3, #241	@ 0xf1
 8009d3c:	2210      	movs	r2, #16
 8009d3e:	2100      	movs	r1, #0
 8009d40:	4618      	mov	r0, r3
 8009d42:	f00d fd9d 	bl	8017880 <memset1>
    ctx->M_n = 0;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	22f0      	movs	r2, #240	@ 0xf0
 8009d52:	2100      	movs	r1, #0
 8009d54:	4618      	mov	r0, r3
 8009d56:	f00d fd93 	bl	8017880 <memset1>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
 8009d6a:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	2110      	movs	r1, #16
 8009d72:	6838      	ldr	r0, [r7, #0]
 8009d74:	f000 fe60 	bl	800aa38 <lorawan_aes_set_key>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b08c      	sub	sp, #48	@ 0x30
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	f000 80a1 	beq.w	8009eda <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009d9e:	f1c3 0310 	rsb	r3, r3, #16
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	4293      	cmp	r3, r2
 8009da6:	bf28      	it	cs
 8009da8:	4613      	movcs	r3, r2
 8009daa:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009db8:	4413      	add	r3, r2
 8009dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dbc:	b292      	uxth	r2, r2
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f00d fd22 	bl	801780a <memcpy1>
        ctx->M_n += mlen;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8009dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dce:	441a      	add	r2, r3
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009ddc:	2b0f      	cmp	r3, #15
 8009dde:	f240 808d 	bls.w	8009efc <AES_CMAC_Update+0x17c>
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de6:	429a      	cmp	r2, r3
 8009de8:	f000 8088 	beq.w	8009efc <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 8009dec:	2300      	movs	r3, #0
 8009dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009df0:	e015      	b.n	8009e1e <AES_CMAC_Update+0x9e>
 8009df2:	68fa      	ldr	r2, [r7, #12]
 8009df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009df6:	4413      	add	r3, r2
 8009df8:	33f1      	adds	r3, #241	@ 0xf1
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	68f9      	ldr	r1, [r7, #12]
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	440b      	add	r3, r1
 8009e02:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	4053      	eors	r3, r2
 8009e0a:	b2d9      	uxtb	r1, r3
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e10:	4413      	add	r3, r2
 8009e12:	33f1      	adds	r3, #241	@ 0xf1
 8009e14:	460a      	mov	r2, r1
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e20:	2b0f      	cmp	r3, #15
 8009e22:	dde6      	ble.n	8009df2 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8009e2a:	f107 0314 	add.w	r3, r7, #20
 8009e2e:	2210      	movs	r2, #16
 8009e30:	4618      	mov	r0, r3
 8009e32:	f00d fcea 	bl	801780a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	f107 0114 	add.w	r1, r7, #20
 8009e3c:	f107 0314 	add.w	r3, r7, #20
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fed7 	bl	800abf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	33f1      	adds	r3, #241	@ 0xf1
 8009e4a:	f107 0114 	add.w	r1, r7, #20
 8009e4e:	2210      	movs	r2, #16
 8009e50:	4618      	mov	r0, r3
 8009e52:	f00d fcda 	bl	801780a <memcpy1>

        data += mlen;
 8009e56:	68ba      	ldr	r2, [r7, #8]
 8009e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5a:	4413      	add	r3, r2
 8009e5c:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 8009e66:	e038      	b.n	8009eda <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8009e68:	2300      	movs	r3, #0
 8009e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e6c:	e013      	b.n	8009e96 <AES_CMAC_Update+0x116>
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	4413      	add	r3, r2
 8009e74:	33f1      	adds	r3, #241	@ 0xf1
 8009e76:	781a      	ldrb	r2, [r3, #0]
 8009e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e7a:	68b9      	ldr	r1, [r7, #8]
 8009e7c:	440b      	add	r3, r1
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	4053      	eors	r3, r2
 8009e82:	b2d9      	uxtb	r1, r3
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e88:	4413      	add	r3, r2
 8009e8a:	33f1      	adds	r3, #241	@ 0xf1
 8009e8c:	460a      	mov	r2, r1
 8009e8e:	701a      	strb	r2, [r3, #0]
 8009e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e92:	3301      	adds	r3, #1
 8009e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e98:	2b0f      	cmp	r3, #15
 8009e9a:	dde8      	ble.n	8009e6e <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8009ea2:	f107 0314 	add.w	r3, r7, #20
 8009ea6:	2210      	movs	r2, #16
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f00d fcae 	bl	801780a <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8009eae:	68fa      	ldr	r2, [r7, #12]
 8009eb0:	f107 0114 	add.w	r1, r7, #20
 8009eb4:	f107 0314 	add.w	r3, r7, #20
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f000 fe9b 	bl	800abf4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	33f1      	adds	r3, #241	@ 0xf1
 8009ec2:	f107 0114 	add.w	r1, r7, #20
 8009ec6:	2210      	movs	r2, #16
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f00d fc9e 	bl	801780a <memcpy1>

        data += 16;
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	3310      	adds	r3, #16
 8009ed2:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3b10      	subs	r3, #16
 8009ed8:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b10      	cmp	r3, #16
 8009ede:	d8c3      	bhi.n	8009e68 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	b292      	uxth	r2, r2
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f00d fc8c 	bl	801780a <memcpy1>
    ctx->M_n = len;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8009efa:	e000      	b.n	8009efe <AES_CMAC_Update+0x17e>
            return;
 8009efc:	bf00      	nop
}
 8009efe:	3730      	adds	r7, #48	@ 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b092      	sub	sp, #72	@ 0x48
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8009f0e:	f107 031c 	add.w	r3, r7, #28
 8009f12:	2210      	movs	r2, #16
 8009f14:	2100      	movs	r1, #0
 8009f16:	4618      	mov	r0, r3
 8009f18:	f00d fcb2 	bl	8017880 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8009f1c:	683a      	ldr	r2, [r7, #0]
 8009f1e:	f107 011c 	add.w	r1, r7, #28
 8009f22:	f107 031c 	add.w	r3, r7, #28
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fe64 	bl	800abf4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8009f2c:	7f3b      	ldrb	r3, [r7, #28]
 8009f2e:	b25b      	sxtb	r3, r3
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da31      	bge.n	8009f98 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8009f34:	2300      	movs	r3, #0
 8009f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f38:	e01c      	b.n	8009f74 <AES_CMAC_Final+0x70>
 8009f3a:	f107 021c 	add.w	r2, r7, #28
 8009f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f40:	4413      	add	r3, r2
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	b25b      	sxtb	r3, r3
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	b25a      	sxtb	r2, r3
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	3348      	adds	r3, #72	@ 0x48
 8009f50:	443b      	add	r3, r7
 8009f52:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009f56:	09db      	lsrs	r3, r3, #7
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	b25b      	sxtb	r3, r3
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	b25b      	sxtb	r3, r3
 8009f60:	b2d9      	uxtb	r1, r3
 8009f62:	f107 021c 	add.w	r2, r7, #28
 8009f66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f68:	4413      	add	r3, r2
 8009f6a:	460a      	mov	r2, r1
 8009f6c:	701a      	strb	r2, [r3, #0]
 8009f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f70:	3301      	adds	r3, #1
 8009f72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f76:	2b0e      	cmp	r3, #14
 8009f78:	dddf      	ble.n	8009f3a <AES_CMAC_Final+0x36>
 8009f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f7e:	005b      	lsls	r3, r3, #1
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 8009f86:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009f8a:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8009f8e:	43db      	mvns	r3, r3
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009f96:	e028      	b.n	8009fea <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8009f98:	2300      	movs	r3, #0
 8009f9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f9c:	e01c      	b.n	8009fd8 <AES_CMAC_Final+0xd4>
 8009f9e:	f107 021c 	add.w	r2, r7, #28
 8009fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fa4:	4413      	add	r3, r2
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	b25b      	sxtb	r3, r3
 8009faa:	005b      	lsls	r3, r3, #1
 8009fac:	b25a      	sxtb	r2, r3
 8009fae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	3348      	adds	r3, #72	@ 0x48
 8009fb4:	443b      	add	r3, r7
 8009fb6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8009fba:	09db      	lsrs	r3, r3, #7
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	b25b      	sxtb	r3, r3
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	b25b      	sxtb	r3, r3
 8009fc4:	b2d9      	uxtb	r1, r3
 8009fc6:	f107 021c 	add.w	r2, r7, #28
 8009fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fcc:	4413      	add	r3, r2
 8009fce:	460a      	mov	r2, r1
 8009fd0:	701a      	strb	r2, [r3, #0]
 8009fd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009fda:	2b0e      	cmp	r3, #14
 8009fdc:	dddf      	ble.n	8009f9e <AES_CMAC_Final+0x9a>
 8009fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fe2:	005b      	lsls	r3, r3, #1
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8009ff0:	2b10      	cmp	r3, #16
 8009ff2:	d11d      	bne.n	800a030 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff8:	e016      	b.n	800a028 <AES_CMAC_Final+0x124>
 8009ffa:	683a      	ldr	r2, [r7, #0]
 8009ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ffe:	4413      	add	r3, r2
 800a000:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a004:	781a      	ldrb	r2, [r3, #0]
 800a006:	f107 011c 	add.w	r1, r7, #28
 800a00a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00c:	440b      	add	r3, r1
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	4053      	eors	r3, r2
 800a012:	b2d9      	uxtb	r1, r3
 800a014:	683a      	ldr	r2, [r7, #0]
 800a016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a018:	4413      	add	r3, r2
 800a01a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a01e:	460a      	mov	r2, r1
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a024:	3301      	adds	r3, #1
 800a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a02a:	2b0f      	cmp	r3, #15
 800a02c:	dde5      	ble.n	8009ffa <AES_CMAC_Final+0xf6>
 800a02e:	e098      	b.n	800a162 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a030:	7f3b      	ldrb	r3, [r7, #28]
 800a032:	b25b      	sxtb	r3, r3
 800a034:	2b00      	cmp	r3, #0
 800a036:	da31      	bge.n	800a09c <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 800a038:	2300      	movs	r3, #0
 800a03a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a03c:	e01c      	b.n	800a078 <AES_CMAC_Final+0x174>
 800a03e:	f107 021c 	add.w	r2, r7, #28
 800a042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a044:	4413      	add	r3, r2
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	b25b      	sxtb	r3, r3
 800a04a:	005b      	lsls	r3, r3, #1
 800a04c:	b25a      	sxtb	r2, r3
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	3301      	adds	r3, #1
 800a052:	3348      	adds	r3, #72	@ 0x48
 800a054:	443b      	add	r3, r7
 800a056:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a05a:	09db      	lsrs	r3, r3, #7
 800a05c:	b2db      	uxtb	r3, r3
 800a05e:	b25b      	sxtb	r3, r3
 800a060:	4313      	orrs	r3, r2
 800a062:	b25b      	sxtb	r3, r3
 800a064:	b2d9      	uxtb	r1, r3
 800a066:	f107 021c 	add.w	r2, r7, #28
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	4413      	add	r3, r2
 800a06e:	460a      	mov	r2, r1
 800a070:	701a      	strb	r2, [r3, #0]
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	3301      	adds	r3, #1
 800a076:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	2b0e      	cmp	r3, #14
 800a07c:	dddf      	ble.n	800a03e <AES_CMAC_Final+0x13a>
 800a07e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	b2db      	uxtb	r3, r3
 800a086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a08a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a08e:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a092:	43db      	mvns	r3, r3
 800a094:	b2db      	uxtb	r3, r3
 800a096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a09a:	e028      	b.n	800a0ee <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 800a09c:	2300      	movs	r3, #0
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a0:	e01c      	b.n	800a0dc <AES_CMAC_Final+0x1d8>
 800a0a2:	f107 021c 	add.w	r2, r7, #28
 800a0a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a8:	4413      	add	r3, r2
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	b25b      	sxtb	r3, r3
 800a0ae:	005b      	lsls	r3, r3, #1
 800a0b0:	b25a      	sxtb	r2, r3
 800a0b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	3348      	adds	r3, #72	@ 0x48
 800a0b8:	443b      	add	r3, r7
 800a0ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a0be:	09db      	lsrs	r3, r3, #7
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	b25b      	sxtb	r3, r3
 800a0c4:	4313      	orrs	r3, r2
 800a0c6:	b25b      	sxtb	r3, r3
 800a0c8:	b2d9      	uxtb	r1, r3
 800a0ca:	f107 021c 	add.w	r2, r7, #28
 800a0ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d0:	4413      	add	r3, r2
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	701a      	strb	r2, [r3, #0]
 800a0d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d8:	3301      	adds	r3, #1
 800a0da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0de:	2b0e      	cmp	r3, #14
 800a0e0:	dddf      	ble.n	800a0a2 <AES_CMAC_Final+0x19e>
 800a0e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	2280      	movs	r2, #128	@ 0x80
 800a0fa:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a0fe:	e007      	b.n	800a110 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	4413      	add	r3, r2
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a116:	1c5a      	adds	r2, r3, #1
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a124:	2b0f      	cmp	r3, #15
 800a126:	d9eb      	bls.n	800a100 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 800a128:	2300      	movs	r3, #0
 800a12a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a12c:	e016      	b.n	800a15c <AES_CMAC_Final+0x258>
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	4413      	add	r3, r2
 800a134:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a138:	781a      	ldrb	r2, [r3, #0]
 800a13a:	f107 011c 	add.w	r1, r7, #28
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	440b      	add	r3, r1
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	4053      	eors	r3, r2
 800a146:	b2d9      	uxtb	r1, r3
 800a148:	683a      	ldr	r2, [r7, #0]
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	4413      	add	r3, r2
 800a14e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a152:	460a      	mov	r2, r1
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	3301      	adds	r3, #1
 800a15a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15e:	2b0f      	cmp	r3, #15
 800a160:	dde5      	ble.n	800a12e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 800a162:	2300      	movs	r3, #0
 800a164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a166:	e015      	b.n	800a194 <AES_CMAC_Final+0x290>
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16c:	4413      	add	r3, r2
 800a16e:	33f1      	adds	r3, #241	@ 0xf1
 800a170:	781a      	ldrb	r2, [r3, #0]
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a176:	440b      	add	r3, r1
 800a178:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	4053      	eors	r3, r2
 800a180:	b2d9      	uxtb	r1, r3
 800a182:	683a      	ldr	r2, [r7, #0]
 800a184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a186:	4413      	add	r3, r2
 800a188:	33f1      	adds	r3, #241	@ 0xf1
 800a18a:	460a      	mov	r2, r1
 800a18c:	701a      	strb	r2, [r3, #0]
 800a18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a190:	3301      	adds	r3, #1
 800a192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a196:	2b0f      	cmp	r3, #15
 800a198:	dde6      	ble.n	800a168 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a1a0:	f107 030c 	add.w	r3, r7, #12
 800a1a4:	2210      	movs	r2, #16
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f00d fb2f 	bl	801780a <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800a1ac:	683a      	ldr	r2, [r7, #0]
 800a1ae:	f107 030c 	add.w	r3, r7, #12
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f000 fd1d 	bl	800abf4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800a1ba:	f107 031c 	add.w	r3, r7, #28
 800a1be:	2210      	movs	r2, #16
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f00d fb5c 	bl	8017880 <memset1>
}
 800a1c8:	bf00      	nop
 800a1ca:	3748      	adds	r7, #72	@ 0x48
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	781a      	ldrb	r2, [r3, #0]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	7852      	ldrb	r2, [r2, #1]
 800a1ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3302      	adds	r3, #2
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	7892      	ldrb	r2, [r2, #2]
 800a1f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3303      	adds	r3, #3
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	78d2      	ldrb	r2, [r2, #3]
 800a1fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3304      	adds	r3, #4
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	7912      	ldrb	r2, [r2, #4]
 800a208:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3305      	adds	r3, #5
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	7952      	ldrb	r2, [r2, #5]
 800a212:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	3306      	adds	r3, #6
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	7992      	ldrb	r2, [r2, #6]
 800a21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	3307      	adds	r3, #7
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	79d2      	ldrb	r2, [r2, #7]
 800a226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	3308      	adds	r3, #8
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	7a12      	ldrb	r2, [r2, #8]
 800a230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3309      	adds	r3, #9
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	7a52      	ldrb	r2, [r2, #9]
 800a23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	330a      	adds	r3, #10
 800a240:	683a      	ldr	r2, [r7, #0]
 800a242:	7a92      	ldrb	r2, [r2, #10]
 800a244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	330b      	adds	r3, #11
 800a24a:	683a      	ldr	r2, [r7, #0]
 800a24c:	7ad2      	ldrb	r2, [r2, #11]
 800a24e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	330c      	adds	r3, #12
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	7b12      	ldrb	r2, [r2, #12]
 800a258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	330d      	adds	r3, #13
 800a25e:	683a      	ldr	r2, [r7, #0]
 800a260:	7b52      	ldrb	r2, [r2, #13]
 800a262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	330e      	adds	r3, #14
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	7b92      	ldrb	r2, [r2, #14]
 800a26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	330f      	adds	r3, #15
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	7bd2      	ldrb	r2, [r2, #15]
 800a276:	701a      	strb	r2, [r3, #0]
#endif
}
 800a278:	bf00      	nop
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bc80      	pop	{r7}
 800a280:	4770      	bx	lr

0800a282 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800a282:	b480      	push	{r7}
 800a284:	b085      	sub	sp, #20
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	4613      	mov	r3, r2
 800a28e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800a290:	e007      	b.n	800a2a2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	1c53      	adds	r3, r2, #1
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	1c59      	adds	r1, r3, #1
 800a29c:	60f9      	str	r1, [r7, #12]
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800a2a2:	79fb      	ldrb	r3, [r7, #7]
 800a2a4:	1e5a      	subs	r2, r3, #1
 800a2a6:	71fa      	strb	r2, [r7, #7]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f2      	bne.n	800a292 <copy_block_nn+0x10>
}
 800a2ac:	bf00      	nop
 800a2ae:	bf00      	nop
 800a2b0:	3714      	adds	r7, #20
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bc80      	pop	{r7}
 800a2b6:	4770      	bx	lr

0800a2b8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	781a      	ldrb	r2, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	4053      	eors	r3, r2
 800a2cc:	b2da      	uxtb	r2, r3
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	7819      	ldrb	r1, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	781a      	ldrb	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	404a      	eors	r2, r1
 800a2e4:	b2d2      	uxtb	r2, r2
 800a2e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	3302      	adds	r3, #2
 800a2ec:	7819      	ldrb	r1, [r3, #0]
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	3302      	adds	r3, #2
 800a2f2:	781a      	ldrb	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	3302      	adds	r3, #2
 800a2f8:	404a      	eors	r2, r1
 800a2fa:	b2d2      	uxtb	r2, r2
 800a2fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	3303      	adds	r3, #3
 800a302:	7819      	ldrb	r1, [r3, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	3303      	adds	r3, #3
 800a308:	781a      	ldrb	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3303      	adds	r3, #3
 800a30e:	404a      	eors	r2, r1
 800a310:	b2d2      	uxtb	r2, r2
 800a312:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	7819      	ldrb	r1, [r3, #0]
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	3304      	adds	r3, #4
 800a31e:	781a      	ldrb	r2, [r3, #0]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	3304      	adds	r3, #4
 800a324:	404a      	eors	r2, r1
 800a326:	b2d2      	uxtb	r2, r2
 800a328:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	3305      	adds	r3, #5
 800a32e:	7819      	ldrb	r1, [r3, #0]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	3305      	adds	r3, #5
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3305      	adds	r3, #5
 800a33a:	404a      	eors	r2, r1
 800a33c:	b2d2      	uxtb	r2, r2
 800a33e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	3306      	adds	r3, #6
 800a344:	7819      	ldrb	r1, [r3, #0]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	3306      	adds	r3, #6
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3306      	adds	r3, #6
 800a350:	404a      	eors	r2, r1
 800a352:	b2d2      	uxtb	r2, r2
 800a354:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	3307      	adds	r3, #7
 800a35a:	7819      	ldrb	r1, [r3, #0]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	3307      	adds	r3, #7
 800a360:	781a      	ldrb	r2, [r3, #0]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3307      	adds	r3, #7
 800a366:	404a      	eors	r2, r1
 800a368:	b2d2      	uxtb	r2, r2
 800a36a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3308      	adds	r3, #8
 800a370:	7819      	ldrb	r1, [r3, #0]
 800a372:	683b      	ldr	r3, [r7, #0]
 800a374:	3308      	adds	r3, #8
 800a376:	781a      	ldrb	r2, [r3, #0]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3308      	adds	r3, #8
 800a37c:	404a      	eors	r2, r1
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3309      	adds	r3, #9
 800a386:	7819      	ldrb	r1, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	3309      	adds	r3, #9
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3309      	adds	r3, #9
 800a392:	404a      	eors	r2, r1
 800a394:	b2d2      	uxtb	r2, r2
 800a396:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	330a      	adds	r3, #10
 800a39c:	7819      	ldrb	r1, [r3, #0]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	330a      	adds	r3, #10
 800a3a2:	781a      	ldrb	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	330a      	adds	r3, #10
 800a3a8:	404a      	eors	r2, r1
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	330b      	adds	r3, #11
 800a3b2:	7819      	ldrb	r1, [r3, #0]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	330b      	adds	r3, #11
 800a3b8:	781a      	ldrb	r2, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	330b      	adds	r3, #11
 800a3be:	404a      	eors	r2, r1
 800a3c0:	b2d2      	uxtb	r2, r2
 800a3c2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	330c      	adds	r3, #12
 800a3c8:	7819      	ldrb	r1, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	330c      	adds	r3, #12
 800a3ce:	781a      	ldrb	r2, [r3, #0]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	330c      	adds	r3, #12
 800a3d4:	404a      	eors	r2, r1
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	330d      	adds	r3, #13
 800a3de:	7819      	ldrb	r1, [r3, #0]
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	330d      	adds	r3, #13
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	330d      	adds	r3, #13
 800a3ea:	404a      	eors	r2, r1
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	330e      	adds	r3, #14
 800a3f4:	7819      	ldrb	r1, [r3, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	330e      	adds	r3, #14
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	330e      	adds	r3, #14
 800a400:	404a      	eors	r2, r1
 800a402:	b2d2      	uxtb	r2, r2
 800a404:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	330f      	adds	r3, #15
 800a40a:	7819      	ldrb	r1, [r3, #0]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	330f      	adds	r3, #15
 800a410:	781a      	ldrb	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	330f      	adds	r3, #15
 800a416:	404a      	eors	r2, r1
 800a418:	b2d2      	uxtb	r2, r2
 800a41a:	701a      	strb	r2, [r3, #0]
#endif
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	bc80      	pop	{r7}
 800a424:	4770      	bx	lr

0800a426 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	60f8      	str	r0, [r7, #12]
 800a42e:	60b9      	str	r1, [r7, #8]
 800a430:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	781a      	ldrb	r2, [r3, #0]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	4053      	eors	r3, r2
 800a43c:	b2da      	uxtb	r2, r3
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	3301      	adds	r3, #1
 800a446:	7819      	ldrb	r1, [r3, #0]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3301      	adds	r3, #1
 800a44c:	781a      	ldrb	r2, [r3, #0]
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3301      	adds	r3, #1
 800a452:	404a      	eors	r2, r1
 800a454:	b2d2      	uxtb	r2, r2
 800a456:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	3302      	adds	r3, #2
 800a45c:	7819      	ldrb	r1, [r3, #0]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3302      	adds	r3, #2
 800a462:	781a      	ldrb	r2, [r3, #0]
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	3302      	adds	r3, #2
 800a468:	404a      	eors	r2, r1
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	3303      	adds	r3, #3
 800a472:	7819      	ldrb	r1, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	3303      	adds	r3, #3
 800a478:	781a      	ldrb	r2, [r3, #0]
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3303      	adds	r3, #3
 800a47e:	404a      	eors	r2, r1
 800a480:	b2d2      	uxtb	r2, r2
 800a482:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	3304      	adds	r3, #4
 800a488:	7819      	ldrb	r1, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	3304      	adds	r3, #4
 800a48e:	781a      	ldrb	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	3304      	adds	r3, #4
 800a494:	404a      	eors	r2, r1
 800a496:	b2d2      	uxtb	r2, r2
 800a498:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	3305      	adds	r3, #5
 800a49e:	7819      	ldrb	r1, [r3, #0]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	3305      	adds	r3, #5
 800a4a4:	781a      	ldrb	r2, [r3, #0]
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3305      	adds	r3, #5
 800a4aa:	404a      	eors	r2, r1
 800a4ac:	b2d2      	uxtb	r2, r2
 800a4ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	3306      	adds	r3, #6
 800a4b4:	7819      	ldrb	r1, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	3306      	adds	r3, #6
 800a4ba:	781a      	ldrb	r2, [r3, #0]
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	3306      	adds	r3, #6
 800a4c0:	404a      	eors	r2, r1
 800a4c2:	b2d2      	uxtb	r2, r2
 800a4c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	7819      	ldrb	r1, [r3, #0]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3307      	adds	r3, #7
 800a4d0:	781a      	ldrb	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3307      	adds	r3, #7
 800a4d6:	404a      	eors	r2, r1
 800a4d8:	b2d2      	uxtb	r2, r2
 800a4da:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	3308      	adds	r3, #8
 800a4e0:	7819      	ldrb	r1, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	3308      	adds	r3, #8
 800a4e6:	781a      	ldrb	r2, [r3, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	3308      	adds	r3, #8
 800a4ec:	404a      	eors	r2, r1
 800a4ee:	b2d2      	uxtb	r2, r2
 800a4f0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	3309      	adds	r3, #9
 800a4f6:	7819      	ldrb	r1, [r3, #0]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	3309      	adds	r3, #9
 800a4fc:	781a      	ldrb	r2, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3309      	adds	r3, #9
 800a502:	404a      	eors	r2, r1
 800a504:	b2d2      	uxtb	r2, r2
 800a506:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	330a      	adds	r3, #10
 800a50c:	7819      	ldrb	r1, [r3, #0]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	330a      	adds	r3, #10
 800a512:	781a      	ldrb	r2, [r3, #0]
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	330a      	adds	r3, #10
 800a518:	404a      	eors	r2, r1
 800a51a:	b2d2      	uxtb	r2, r2
 800a51c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	330b      	adds	r3, #11
 800a522:	7819      	ldrb	r1, [r3, #0]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	330b      	adds	r3, #11
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	330b      	adds	r3, #11
 800a52e:	404a      	eors	r2, r1
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	330c      	adds	r3, #12
 800a538:	7819      	ldrb	r1, [r3, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	330c      	adds	r3, #12
 800a53e:	781a      	ldrb	r2, [r3, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	330c      	adds	r3, #12
 800a544:	404a      	eors	r2, r1
 800a546:	b2d2      	uxtb	r2, r2
 800a548:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	330d      	adds	r3, #13
 800a54e:	7819      	ldrb	r1, [r3, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	330d      	adds	r3, #13
 800a554:	781a      	ldrb	r2, [r3, #0]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	330d      	adds	r3, #13
 800a55a:	404a      	eors	r2, r1
 800a55c:	b2d2      	uxtb	r2, r2
 800a55e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	330e      	adds	r3, #14
 800a564:	7819      	ldrb	r1, [r3, #0]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	330e      	adds	r3, #14
 800a56a:	781a      	ldrb	r2, [r3, #0]
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	330e      	adds	r3, #14
 800a570:	404a      	eors	r2, r1
 800a572:	b2d2      	uxtb	r2, r2
 800a574:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	330f      	adds	r3, #15
 800a57a:	7819      	ldrb	r1, [r3, #0]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	330f      	adds	r3, #15
 800a580:	781a      	ldrb	r2, [r3, #0]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	330f      	adds	r3, #15
 800a586:	404a      	eors	r2, r1
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800a58c:	bf00      	nop
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	bc80      	pop	{r7}
 800a594:	4770      	bx	lr

0800a596 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b082      	sub	sp, #8
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fe88 	bl	800a2b8 <xor_block>
}
 800a5a8:	bf00      	nop
 800a5aa:	3708      	adds	r7, #8
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800a5b0:	b480      	push	{r7}
 800a5b2:	b085      	sub	sp, #20
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4b48      	ldr	r3, [pc, #288]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a5c0:	5c9a      	ldrb	r2, [r3, r2]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	701a      	strb	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4a43      	ldr	r2, [pc, #268]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a5d4:	5c52      	ldrb	r2, [r2, r1]
 800a5d6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	4619      	mov	r1, r3
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	3308      	adds	r3, #8
 800a5e4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a5e6:	5c52      	ldrb	r2, [r2, r1]
 800a5e8:	701a      	strb	r2, [r3, #0]
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	330c      	adds	r3, #12
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	330c      	adds	r3, #12
 800a5f6:	4a3a      	ldr	r2, [pc, #232]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a5f8:	5c52      	ldrb	r2, [r2, r1]
 800a5fa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	785b      	ldrb	r3, [r3, #1]
 800a600:	73fb      	strb	r3, [r7, #15]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3305      	adds	r3, #5
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	4619      	mov	r1, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	3301      	adds	r3, #1
 800a60e:	4a34      	ldr	r2, [pc, #208]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a610:	5c52      	ldrb	r2, [r2, r1]
 800a612:	701a      	strb	r2, [r3, #0]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	3309      	adds	r3, #9
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	4619      	mov	r1, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3305      	adds	r3, #5
 800a620:	4a2f      	ldr	r2, [pc, #188]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a622:	5c52      	ldrb	r2, [r2, r1]
 800a624:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	330d      	adds	r3, #13
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	4619      	mov	r1, r3
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	3309      	adds	r3, #9
 800a632:	4a2b      	ldr	r2, [pc, #172]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a634:	5c52      	ldrb	r2, [r2, r1]
 800a636:	701a      	strb	r2, [r3, #0]
 800a638:	7bfa      	ldrb	r2, [r7, #15]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	330d      	adds	r3, #13
 800a63e:	4928      	ldr	r1, [pc, #160]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a640:	5c8a      	ldrb	r2, [r1, r2]
 800a642:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	789b      	ldrb	r3, [r3, #2]
 800a648:	73fb      	strb	r3, [r7, #15]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	330a      	adds	r3, #10
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	4619      	mov	r1, r3
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3302      	adds	r3, #2
 800a656:	4a22      	ldr	r2, [pc, #136]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a658:	5c52      	ldrb	r2, [r2, r1]
 800a65a:	701a      	strb	r2, [r3, #0]
 800a65c:	7bfa      	ldrb	r2, [r7, #15]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	330a      	adds	r3, #10
 800a662:	491f      	ldr	r1, [pc, #124]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a664:	5c8a      	ldrb	r2, [r1, r2]
 800a666:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	799b      	ldrb	r3, [r3, #6]
 800a66c:	73fb      	strb	r3, [r7, #15]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	330e      	adds	r3, #14
 800a672:	781b      	ldrb	r3, [r3, #0]
 800a674:	4619      	mov	r1, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3306      	adds	r3, #6
 800a67a:	4a19      	ldr	r2, [pc, #100]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a67c:	5c52      	ldrb	r2, [r2, r1]
 800a67e:	701a      	strb	r2, [r3, #0]
 800a680:	7bfa      	ldrb	r2, [r7, #15]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	330e      	adds	r3, #14
 800a686:	4916      	ldr	r1, [pc, #88]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a688:	5c8a      	ldrb	r2, [r1, r2]
 800a68a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	7bdb      	ldrb	r3, [r3, #15]
 800a690:	73fb      	strb	r3, [r7, #15]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	330b      	adds	r3, #11
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	4619      	mov	r1, r3
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	330f      	adds	r3, #15
 800a69e:	4a10      	ldr	r2, [pc, #64]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a6a0:	5c52      	ldrb	r2, [r2, r1]
 800a6a2:	701a      	strb	r2, [r3, #0]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3307      	adds	r3, #7
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	330b      	adds	r3, #11
 800a6b0:	4a0b      	ldr	r2, [pc, #44]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a6b2:	5c52      	ldrb	r2, [r2, r1]
 800a6b4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	3303      	adds	r3, #3
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	3307      	adds	r3, #7
 800a6c2:	4a07      	ldr	r2, [pc, #28]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a6c4:	5c52      	ldrb	r2, [r2, r1]
 800a6c6:	701a      	strb	r2, [r3, #0]
 800a6c8:	7bfa      	ldrb	r2, [r7, #15]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3303      	adds	r3, #3
 800a6ce:	4904      	ldr	r1, [pc, #16]	@ (800a6e0 <shift_sub_rows+0x130>)
 800a6d0:	5c8a      	ldrb	r2, [r1, r2]
 800a6d2:	701a      	strb	r2, [r3, #0]
}
 800a6d4:	bf00      	nop
 800a6d6:	3714      	adds	r7, #20
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop
 800a6e0:	0801cbcc 	.word	0x0801cbcc

0800a6e4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800a6ec:	f107 0308 	add.w	r3, r7, #8
 800a6f0:	6879      	ldr	r1, [r7, #4]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7ff fd6c 	bl	800a1d0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800a6f8:	7a3b      	ldrb	r3, [r7, #8]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	4b9a      	ldr	r3, [pc, #616]	@ (800a968 <mix_sub_columns+0x284>)
 800a6fe:	5c9a      	ldrb	r2, [r3, r2]
 800a700:	7b7b      	ldrb	r3, [r7, #13]
 800a702:	4619      	mov	r1, r3
 800a704:	4b99      	ldr	r3, [pc, #612]	@ (800a96c <mix_sub_columns+0x288>)
 800a706:	5c5b      	ldrb	r3, [r3, r1]
 800a708:	4053      	eors	r3, r2
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	7cbb      	ldrb	r3, [r7, #18]
 800a70e:	4619      	mov	r1, r3
 800a710:	4b97      	ldr	r3, [pc, #604]	@ (800a970 <mix_sub_columns+0x28c>)
 800a712:	5c5b      	ldrb	r3, [r3, r1]
 800a714:	4053      	eors	r3, r2
 800a716:	b2da      	uxtb	r2, r3
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	4619      	mov	r1, r3
 800a71c:	4b94      	ldr	r3, [pc, #592]	@ (800a970 <mix_sub_columns+0x28c>)
 800a71e:	5c5b      	ldrb	r3, [r3, r1]
 800a720:	4053      	eors	r3, r2
 800a722:	b2da      	uxtb	r2, r3
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800a728:	7a3b      	ldrb	r3, [r7, #8]
 800a72a:	461a      	mov	r2, r3
 800a72c:	4b90      	ldr	r3, [pc, #576]	@ (800a970 <mix_sub_columns+0x28c>)
 800a72e:	5c9a      	ldrb	r2, [r3, r2]
 800a730:	7b7b      	ldrb	r3, [r7, #13]
 800a732:	4619      	mov	r1, r3
 800a734:	4b8c      	ldr	r3, [pc, #560]	@ (800a968 <mix_sub_columns+0x284>)
 800a736:	5c5b      	ldrb	r3, [r3, r1]
 800a738:	4053      	eors	r3, r2
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	7cbb      	ldrb	r3, [r7, #18]
 800a73e:	4619      	mov	r1, r3
 800a740:	4b8a      	ldr	r3, [pc, #552]	@ (800a96c <mix_sub_columns+0x288>)
 800a742:	5c5b      	ldrb	r3, [r3, r1]
 800a744:	4053      	eors	r3, r2
 800a746:	b2d9      	uxtb	r1, r3
 800a748:	7dfb      	ldrb	r3, [r7, #23]
 800a74a:	461a      	mov	r2, r3
 800a74c:	4b88      	ldr	r3, [pc, #544]	@ (800a970 <mix_sub_columns+0x28c>)
 800a74e:	5c9a      	ldrb	r2, [r3, r2]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3301      	adds	r3, #1
 800a754:	404a      	eors	r2, r1
 800a756:	b2d2      	uxtb	r2, r2
 800a758:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800a75a:	7a3b      	ldrb	r3, [r7, #8]
 800a75c:	461a      	mov	r2, r3
 800a75e:	4b84      	ldr	r3, [pc, #528]	@ (800a970 <mix_sub_columns+0x28c>)
 800a760:	5c9a      	ldrb	r2, [r3, r2]
 800a762:	7b7b      	ldrb	r3, [r7, #13]
 800a764:	4619      	mov	r1, r3
 800a766:	4b82      	ldr	r3, [pc, #520]	@ (800a970 <mix_sub_columns+0x28c>)
 800a768:	5c5b      	ldrb	r3, [r3, r1]
 800a76a:	4053      	eors	r3, r2
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	7cbb      	ldrb	r3, [r7, #18]
 800a770:	4619      	mov	r1, r3
 800a772:	4b7d      	ldr	r3, [pc, #500]	@ (800a968 <mix_sub_columns+0x284>)
 800a774:	5c5b      	ldrb	r3, [r3, r1]
 800a776:	4053      	eors	r3, r2
 800a778:	b2d9      	uxtb	r1, r3
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
 800a77c:	461a      	mov	r2, r3
 800a77e:	4b7b      	ldr	r3, [pc, #492]	@ (800a96c <mix_sub_columns+0x288>)
 800a780:	5c9a      	ldrb	r2, [r3, r2]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	3302      	adds	r3, #2
 800a786:	404a      	eors	r2, r1
 800a788:	b2d2      	uxtb	r2, r2
 800a78a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800a78c:	7a3b      	ldrb	r3, [r7, #8]
 800a78e:	461a      	mov	r2, r3
 800a790:	4b76      	ldr	r3, [pc, #472]	@ (800a96c <mix_sub_columns+0x288>)
 800a792:	5c9a      	ldrb	r2, [r3, r2]
 800a794:	7b7b      	ldrb	r3, [r7, #13]
 800a796:	4619      	mov	r1, r3
 800a798:	4b75      	ldr	r3, [pc, #468]	@ (800a970 <mix_sub_columns+0x28c>)
 800a79a:	5c5b      	ldrb	r3, [r3, r1]
 800a79c:	4053      	eors	r3, r2
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	7cbb      	ldrb	r3, [r7, #18]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	4b72      	ldr	r3, [pc, #456]	@ (800a970 <mix_sub_columns+0x28c>)
 800a7a6:	5c5b      	ldrb	r3, [r3, r1]
 800a7a8:	4053      	eors	r3, r2
 800a7aa:	b2d9      	uxtb	r1, r3
 800a7ac:	7dfb      	ldrb	r3, [r7, #23]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4b6d      	ldr	r3, [pc, #436]	@ (800a968 <mix_sub_columns+0x284>)
 800a7b2:	5c9a      	ldrb	r2, [r3, r2]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	3303      	adds	r3, #3
 800a7b8:	404a      	eors	r2, r1
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800a7be:	7b3b      	ldrb	r3, [r7, #12]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	4b69      	ldr	r3, [pc, #420]	@ (800a968 <mix_sub_columns+0x284>)
 800a7c4:	5c9a      	ldrb	r2, [r3, r2]
 800a7c6:	7c7b      	ldrb	r3, [r7, #17]
 800a7c8:	4619      	mov	r1, r3
 800a7ca:	4b68      	ldr	r3, [pc, #416]	@ (800a96c <mix_sub_columns+0x288>)
 800a7cc:	5c5b      	ldrb	r3, [r3, r1]
 800a7ce:	4053      	eors	r3, r2
 800a7d0:	b2da      	uxtb	r2, r3
 800a7d2:	7dbb      	ldrb	r3, [r7, #22]
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	4b66      	ldr	r3, [pc, #408]	@ (800a970 <mix_sub_columns+0x28c>)
 800a7d8:	5c5b      	ldrb	r3, [r3, r1]
 800a7da:	4053      	eors	r3, r2
 800a7dc:	b2d9      	uxtb	r1, r3
 800a7de:	7afb      	ldrb	r3, [r7, #11]
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	4b63      	ldr	r3, [pc, #396]	@ (800a970 <mix_sub_columns+0x28c>)
 800a7e4:	5c9a      	ldrb	r2, [r3, r2]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	3304      	adds	r3, #4
 800a7ea:	404a      	eors	r2, r1
 800a7ec:	b2d2      	uxtb	r2, r2
 800a7ee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800a7f0:	7b3b      	ldrb	r3, [r7, #12]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	4b5e      	ldr	r3, [pc, #376]	@ (800a970 <mix_sub_columns+0x28c>)
 800a7f6:	5c9a      	ldrb	r2, [r3, r2]
 800a7f8:	7c7b      	ldrb	r3, [r7, #17]
 800a7fa:	4619      	mov	r1, r3
 800a7fc:	4b5a      	ldr	r3, [pc, #360]	@ (800a968 <mix_sub_columns+0x284>)
 800a7fe:	5c5b      	ldrb	r3, [r3, r1]
 800a800:	4053      	eors	r3, r2
 800a802:	b2da      	uxtb	r2, r3
 800a804:	7dbb      	ldrb	r3, [r7, #22]
 800a806:	4619      	mov	r1, r3
 800a808:	4b58      	ldr	r3, [pc, #352]	@ (800a96c <mix_sub_columns+0x288>)
 800a80a:	5c5b      	ldrb	r3, [r3, r1]
 800a80c:	4053      	eors	r3, r2
 800a80e:	b2d9      	uxtb	r1, r3
 800a810:	7afb      	ldrb	r3, [r7, #11]
 800a812:	461a      	mov	r2, r3
 800a814:	4b56      	ldr	r3, [pc, #344]	@ (800a970 <mix_sub_columns+0x28c>)
 800a816:	5c9a      	ldrb	r2, [r3, r2]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3305      	adds	r3, #5
 800a81c:	404a      	eors	r2, r1
 800a81e:	b2d2      	uxtb	r2, r2
 800a820:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800a822:	7b3b      	ldrb	r3, [r7, #12]
 800a824:	461a      	mov	r2, r3
 800a826:	4b52      	ldr	r3, [pc, #328]	@ (800a970 <mix_sub_columns+0x28c>)
 800a828:	5c9a      	ldrb	r2, [r3, r2]
 800a82a:	7c7b      	ldrb	r3, [r7, #17]
 800a82c:	4619      	mov	r1, r3
 800a82e:	4b50      	ldr	r3, [pc, #320]	@ (800a970 <mix_sub_columns+0x28c>)
 800a830:	5c5b      	ldrb	r3, [r3, r1]
 800a832:	4053      	eors	r3, r2
 800a834:	b2da      	uxtb	r2, r3
 800a836:	7dbb      	ldrb	r3, [r7, #22]
 800a838:	4619      	mov	r1, r3
 800a83a:	4b4b      	ldr	r3, [pc, #300]	@ (800a968 <mix_sub_columns+0x284>)
 800a83c:	5c5b      	ldrb	r3, [r3, r1]
 800a83e:	4053      	eors	r3, r2
 800a840:	b2d9      	uxtb	r1, r3
 800a842:	7afb      	ldrb	r3, [r7, #11]
 800a844:	461a      	mov	r2, r3
 800a846:	4b49      	ldr	r3, [pc, #292]	@ (800a96c <mix_sub_columns+0x288>)
 800a848:	5c9a      	ldrb	r2, [r3, r2]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	3306      	adds	r3, #6
 800a84e:	404a      	eors	r2, r1
 800a850:	b2d2      	uxtb	r2, r2
 800a852:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800a854:	7b3b      	ldrb	r3, [r7, #12]
 800a856:	461a      	mov	r2, r3
 800a858:	4b44      	ldr	r3, [pc, #272]	@ (800a96c <mix_sub_columns+0x288>)
 800a85a:	5c9a      	ldrb	r2, [r3, r2]
 800a85c:	7c7b      	ldrb	r3, [r7, #17]
 800a85e:	4619      	mov	r1, r3
 800a860:	4b43      	ldr	r3, [pc, #268]	@ (800a970 <mix_sub_columns+0x28c>)
 800a862:	5c5b      	ldrb	r3, [r3, r1]
 800a864:	4053      	eors	r3, r2
 800a866:	b2da      	uxtb	r2, r3
 800a868:	7dbb      	ldrb	r3, [r7, #22]
 800a86a:	4619      	mov	r1, r3
 800a86c:	4b40      	ldr	r3, [pc, #256]	@ (800a970 <mix_sub_columns+0x28c>)
 800a86e:	5c5b      	ldrb	r3, [r3, r1]
 800a870:	4053      	eors	r3, r2
 800a872:	b2d9      	uxtb	r1, r3
 800a874:	7afb      	ldrb	r3, [r7, #11]
 800a876:	461a      	mov	r2, r3
 800a878:	4b3b      	ldr	r3, [pc, #236]	@ (800a968 <mix_sub_columns+0x284>)
 800a87a:	5c9a      	ldrb	r2, [r3, r2]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	3307      	adds	r3, #7
 800a880:	404a      	eors	r2, r1
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800a886:	7c3b      	ldrb	r3, [r7, #16]
 800a888:	461a      	mov	r2, r3
 800a88a:	4b37      	ldr	r3, [pc, #220]	@ (800a968 <mix_sub_columns+0x284>)
 800a88c:	5c9a      	ldrb	r2, [r3, r2]
 800a88e:	7d7b      	ldrb	r3, [r7, #21]
 800a890:	4619      	mov	r1, r3
 800a892:	4b36      	ldr	r3, [pc, #216]	@ (800a96c <mix_sub_columns+0x288>)
 800a894:	5c5b      	ldrb	r3, [r3, r1]
 800a896:	4053      	eors	r3, r2
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	7abb      	ldrb	r3, [r7, #10]
 800a89c:	4619      	mov	r1, r3
 800a89e:	4b34      	ldr	r3, [pc, #208]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8a0:	5c5b      	ldrb	r3, [r3, r1]
 800a8a2:	4053      	eors	r3, r2
 800a8a4:	b2d9      	uxtb	r1, r3
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	4b31      	ldr	r3, [pc, #196]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8ac:	5c9a      	ldrb	r2, [r3, r2]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	3308      	adds	r3, #8
 800a8b2:	404a      	eors	r2, r1
 800a8b4:	b2d2      	uxtb	r2, r2
 800a8b6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800a8b8:	7c3b      	ldrb	r3, [r7, #16]
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	4b2c      	ldr	r3, [pc, #176]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8be:	5c9a      	ldrb	r2, [r3, r2]
 800a8c0:	7d7b      	ldrb	r3, [r7, #21]
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4b28      	ldr	r3, [pc, #160]	@ (800a968 <mix_sub_columns+0x284>)
 800a8c6:	5c5b      	ldrb	r3, [r3, r1]
 800a8c8:	4053      	eors	r3, r2
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	7abb      	ldrb	r3, [r7, #10]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	4b26      	ldr	r3, [pc, #152]	@ (800a96c <mix_sub_columns+0x288>)
 800a8d2:	5c5b      	ldrb	r3, [r3, r1]
 800a8d4:	4053      	eors	r3, r2
 800a8d6:	b2d9      	uxtb	r1, r3
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	4b24      	ldr	r3, [pc, #144]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8de:	5c9a      	ldrb	r2, [r3, r2]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3309      	adds	r3, #9
 800a8e4:	404a      	eors	r2, r1
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800a8ea:	7c3b      	ldrb	r3, [r7, #16]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	4b20      	ldr	r3, [pc, #128]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8f0:	5c9a      	ldrb	r2, [r3, r2]
 800a8f2:	7d7b      	ldrb	r3, [r7, #21]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a970 <mix_sub_columns+0x28c>)
 800a8f8:	5c5b      	ldrb	r3, [r3, r1]
 800a8fa:	4053      	eors	r3, r2
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	7abb      	ldrb	r3, [r7, #10]
 800a900:	4619      	mov	r1, r3
 800a902:	4b19      	ldr	r3, [pc, #100]	@ (800a968 <mix_sub_columns+0x284>)
 800a904:	5c5b      	ldrb	r3, [r3, r1]
 800a906:	4053      	eors	r3, r2
 800a908:	b2d9      	uxtb	r1, r3
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	461a      	mov	r2, r3
 800a90e:	4b17      	ldr	r3, [pc, #92]	@ (800a96c <mix_sub_columns+0x288>)
 800a910:	5c9a      	ldrb	r2, [r3, r2]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	330a      	adds	r3, #10
 800a916:	404a      	eors	r2, r1
 800a918:	b2d2      	uxtb	r2, r2
 800a91a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800a91c:	7c3b      	ldrb	r3, [r7, #16]
 800a91e:	461a      	mov	r2, r3
 800a920:	4b12      	ldr	r3, [pc, #72]	@ (800a96c <mix_sub_columns+0x288>)
 800a922:	5c9a      	ldrb	r2, [r3, r2]
 800a924:	7d7b      	ldrb	r3, [r7, #21]
 800a926:	4619      	mov	r1, r3
 800a928:	4b11      	ldr	r3, [pc, #68]	@ (800a970 <mix_sub_columns+0x28c>)
 800a92a:	5c5b      	ldrb	r3, [r3, r1]
 800a92c:	4053      	eors	r3, r2
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	7abb      	ldrb	r3, [r7, #10]
 800a932:	4619      	mov	r1, r3
 800a934:	4b0e      	ldr	r3, [pc, #56]	@ (800a970 <mix_sub_columns+0x28c>)
 800a936:	5c5b      	ldrb	r3, [r3, r1]
 800a938:	4053      	eors	r3, r2
 800a93a:	b2d9      	uxtb	r1, r3
 800a93c:	7bfb      	ldrb	r3, [r7, #15]
 800a93e:	461a      	mov	r2, r3
 800a940:	4b09      	ldr	r3, [pc, #36]	@ (800a968 <mix_sub_columns+0x284>)
 800a942:	5c9a      	ldrb	r2, [r3, r2]
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	330b      	adds	r3, #11
 800a948:	404a      	eors	r2, r1
 800a94a:	b2d2      	uxtb	r2, r2
 800a94c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800a94e:	7d3b      	ldrb	r3, [r7, #20]
 800a950:	461a      	mov	r2, r3
 800a952:	4b05      	ldr	r3, [pc, #20]	@ (800a968 <mix_sub_columns+0x284>)
 800a954:	5c9a      	ldrb	r2, [r3, r2]
 800a956:	7a7b      	ldrb	r3, [r7, #9]
 800a958:	4619      	mov	r1, r3
 800a95a:	4b04      	ldr	r3, [pc, #16]	@ (800a96c <mix_sub_columns+0x288>)
 800a95c:	5c5b      	ldrb	r3, [r3, r1]
 800a95e:	4053      	eors	r3, r2
 800a960:	b2da      	uxtb	r2, r3
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	4619      	mov	r1, r3
 800a966:	e005      	b.n	800a974 <mix_sub_columns+0x290>
 800a968:	0801cccc 	.word	0x0801cccc
 800a96c:	0801cdcc 	.word	0x0801cdcc
 800a970:	0801cbcc 	.word	0x0801cbcc
 800a974:	4b2d      	ldr	r3, [pc, #180]	@ (800aa2c <mix_sub_columns+0x348>)
 800a976:	5c5b      	ldrb	r3, [r3, r1]
 800a978:	4053      	eors	r3, r2
 800a97a:	b2d9      	uxtb	r1, r3
 800a97c:	7cfb      	ldrb	r3, [r7, #19]
 800a97e:	461a      	mov	r2, r3
 800a980:	4b2a      	ldr	r3, [pc, #168]	@ (800aa2c <mix_sub_columns+0x348>)
 800a982:	5c9a      	ldrb	r2, [r3, r2]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	330c      	adds	r3, #12
 800a988:	404a      	eors	r2, r1
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800a98e:	7d3b      	ldrb	r3, [r7, #20]
 800a990:	461a      	mov	r2, r3
 800a992:	4b26      	ldr	r3, [pc, #152]	@ (800aa2c <mix_sub_columns+0x348>)
 800a994:	5c9a      	ldrb	r2, [r3, r2]
 800a996:	7a7b      	ldrb	r3, [r7, #9]
 800a998:	4619      	mov	r1, r3
 800a99a:	4b25      	ldr	r3, [pc, #148]	@ (800aa30 <mix_sub_columns+0x34c>)
 800a99c:	5c5b      	ldrb	r3, [r3, r1]
 800a99e:	4053      	eors	r3, r2
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	4b23      	ldr	r3, [pc, #140]	@ (800aa34 <mix_sub_columns+0x350>)
 800a9a8:	5c5b      	ldrb	r3, [r3, r1]
 800a9aa:	4053      	eors	r3, r2
 800a9ac:	b2d9      	uxtb	r1, r3
 800a9ae:	7cfb      	ldrb	r3, [r7, #19]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa2c <mix_sub_columns+0x348>)
 800a9b4:	5c9a      	ldrb	r2, [r3, r2]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	330d      	adds	r3, #13
 800a9ba:	404a      	eors	r2, r1
 800a9bc:	b2d2      	uxtb	r2, r2
 800a9be:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800a9c0:	7d3b      	ldrb	r3, [r7, #20]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	4b19      	ldr	r3, [pc, #100]	@ (800aa2c <mix_sub_columns+0x348>)
 800a9c6:	5c9a      	ldrb	r2, [r3, r2]
 800a9c8:	7a7b      	ldrb	r3, [r7, #9]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4b17      	ldr	r3, [pc, #92]	@ (800aa2c <mix_sub_columns+0x348>)
 800a9ce:	5c5b      	ldrb	r3, [r3, r1]
 800a9d0:	4053      	eors	r3, r2
 800a9d2:	b2da      	uxtb	r2, r3
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4b15      	ldr	r3, [pc, #84]	@ (800aa30 <mix_sub_columns+0x34c>)
 800a9da:	5c5b      	ldrb	r3, [r3, r1]
 800a9dc:	4053      	eors	r3, r2
 800a9de:	b2d9      	uxtb	r1, r3
 800a9e0:	7cfb      	ldrb	r3, [r7, #19]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4b13      	ldr	r3, [pc, #76]	@ (800aa34 <mix_sub_columns+0x350>)
 800a9e6:	5c9a      	ldrb	r2, [r3, r2]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	330e      	adds	r3, #14
 800a9ec:	404a      	eors	r2, r1
 800a9ee:	b2d2      	uxtb	r2, r2
 800a9f0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800a9f2:	7d3b      	ldrb	r3, [r7, #20]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa34 <mix_sub_columns+0x350>)
 800a9f8:	5c9a      	ldrb	r2, [r3, r2]
 800a9fa:	7a7b      	ldrb	r3, [r7, #9]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4b0b      	ldr	r3, [pc, #44]	@ (800aa2c <mix_sub_columns+0x348>)
 800aa00:	5c5b      	ldrb	r3, [r3, r1]
 800aa02:	4053      	eors	r3, r2
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4b08      	ldr	r3, [pc, #32]	@ (800aa2c <mix_sub_columns+0x348>)
 800aa0c:	5c5b      	ldrb	r3, [r3, r1]
 800aa0e:	4053      	eors	r3, r2
 800aa10:	b2d9      	uxtb	r1, r3
 800aa12:	7cfb      	ldrb	r3, [r7, #19]
 800aa14:	461a      	mov	r2, r3
 800aa16:	4b06      	ldr	r3, [pc, #24]	@ (800aa30 <mix_sub_columns+0x34c>)
 800aa18:	5c9a      	ldrb	r2, [r3, r2]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	330f      	adds	r3, #15
 800aa1e:	404a      	eors	r2, r1
 800aa20:	b2d2      	uxtb	r2, r2
 800aa22:	701a      	strb	r2, [r3, #0]
  }
 800aa24:	bf00      	nop
 800aa26:	3718      	adds	r7, #24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	0801cbcc 	.word	0x0801cbcc
 800aa30:	0801cccc 	.word	0x0801cccc
 800aa34:	0801cdcc 	.word	0x0801cdcc

0800aa38 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b086      	sub	sp, #24
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	460b      	mov	r3, r1
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800aa46:	7afb      	ldrb	r3, [r7, #11]
 800aa48:	3b10      	subs	r3, #16
 800aa4a:	2b10      	cmp	r3, #16
 800aa4c:	bf8c      	ite	hi
 800aa4e:	2201      	movhi	r2, #1
 800aa50:	2200      	movls	r2, #0
 800aa52:	b2d2      	uxtb	r2, r2
 800aa54:	2a00      	cmp	r2, #0
 800aa56:	d10b      	bne.n	800aa70 <lorawan_aes_set_key+0x38>
 800aa58:	4a64      	ldr	r2, [pc, #400]	@ (800abec <lorawan_aes_set_key+0x1b4>)
 800aa5a:	fa22 f303 	lsr.w	r3, r2, r3
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	bf14      	ite	ne
 800aa66:	2301      	movne	r3, #1
 800aa68:	2300      	moveq	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800aa78:	23ff      	movs	r3, #255	@ 0xff
 800aa7a:	e0b3      	b.n	800abe4 <lorawan_aes_set_key+0x1ac>
        break;
 800aa7c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	7afa      	ldrb	r2, [r7, #11]
 800aa82:	68f9      	ldr	r1, [r7, #12]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7ff fbfc 	bl	800a282 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800aa8a:	7afb      	ldrb	r3, [r7, #11]
 800aa8c:	331c      	adds	r3, #28
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800aa94:	7c7b      	ldrb	r3, [r7, #17]
 800aa96:	091b      	lsrs	r3, r3, #4
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	b2da      	uxtb	r2, r3
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800aaa4:	7afb      	ldrb	r3, [r7, #11]
 800aaa6:	75fb      	strb	r3, [r7, #23]
 800aaa8:	2301      	movs	r3, #1
 800aaaa:	75bb      	strb	r3, [r7, #22]
 800aaac:	e094      	b.n	800abd8 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800aaae:	7dfb      	ldrb	r3, [r7, #23]
 800aab0:	3b04      	subs	r3, #4
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	5cd3      	ldrb	r3, [r2, r3]
 800aab6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	3b03      	subs	r3, #3
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	5cd3      	ldrb	r3, [r2, r3]
 800aac0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800aac2:	7dfb      	ldrb	r3, [r7, #23]
 800aac4:	3b02      	subs	r3, #2
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	5cd3      	ldrb	r3, [r2, r3]
 800aaca:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	3b01      	subs	r3, #1
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	5cd3      	ldrb	r3, [r2, r3]
 800aad4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
 800aad8:	7afa      	ldrb	r2, [r7, #11]
 800aada:	fbb3 f1f2 	udiv	r1, r3, r2
 800aade:	fb01 f202 	mul.w	r2, r1, r2
 800aae2:	1a9b      	subs	r3, r3, r2
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d128      	bne.n	800ab3c <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 800aaea:	7d7b      	ldrb	r3, [r7, #21]
 800aaec:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800aaee:	7d3b      	ldrb	r3, [r7, #20]
 800aaf0:	4a3f      	ldr	r2, [pc, #252]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800aaf2:	5cd2      	ldrb	r2, [r2, r3]
 800aaf4:	7dbb      	ldrb	r3, [r7, #22]
 800aaf6:	4053      	eors	r3, r2
 800aaf8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800aafa:	7cfb      	ldrb	r3, [r7, #19]
 800aafc:	4a3c      	ldr	r2, [pc, #240]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800aafe:	5cd3      	ldrb	r3, [r2, r3]
 800ab00:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800ab02:	7cbb      	ldrb	r3, [r7, #18]
 800ab04:	4a3a      	ldr	r2, [pc, #232]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab06:	5cd3      	ldrb	r3, [r2, r3]
 800ab08:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800ab0a:	7c3b      	ldrb	r3, [r7, #16]
 800ab0c:	4a38      	ldr	r2, [pc, #224]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab0e:	5cd3      	ldrb	r3, [r2, r3]
 800ab10:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800ab12:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800ab16:	005b      	lsls	r3, r3, #1
 800ab18:	b25a      	sxtb	r2, r3
 800ab1a:	7dbb      	ldrb	r3, [r7, #22]
 800ab1c:	09db      	lsrs	r3, r3, #7
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	4619      	mov	r1, r3
 800ab24:	0049      	lsls	r1, r1, #1
 800ab26:	440b      	add	r3, r1
 800ab28:	4619      	mov	r1, r3
 800ab2a:	00c8      	lsls	r0, r1, #3
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	4603      	mov	r3, r0
 800ab30:	440b      	add	r3, r1
 800ab32:	b25b      	sxtb	r3, r3
 800ab34:	4053      	eors	r3, r2
 800ab36:	b25b      	sxtb	r3, r3
 800ab38:	75bb      	strb	r3, [r7, #22]
 800ab3a:	e01c      	b.n	800ab76 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800ab3c:	7afb      	ldrb	r3, [r7, #11]
 800ab3e:	2b18      	cmp	r3, #24
 800ab40:	d919      	bls.n	800ab76 <lorawan_aes_set_key+0x13e>
 800ab42:	7dfb      	ldrb	r3, [r7, #23]
 800ab44:	7afa      	ldrb	r2, [r7, #11]
 800ab46:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab4a:	fb01 f202 	mul.w	r2, r1, r2
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b10      	cmp	r3, #16
 800ab54:	d10f      	bne.n	800ab76 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 800ab56:	7d7b      	ldrb	r3, [r7, #21]
 800ab58:	4a25      	ldr	r2, [pc, #148]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab5a:	5cd3      	ldrb	r3, [r2, r3]
 800ab5c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ab5e:	7d3b      	ldrb	r3, [r7, #20]
 800ab60:	4a23      	ldr	r2, [pc, #140]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab62:	5cd3      	ldrb	r3, [r2, r3]
 800ab64:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ab66:	7cfb      	ldrb	r3, [r7, #19]
 800ab68:	4a21      	ldr	r2, [pc, #132]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab6a:	5cd3      	ldrb	r3, [r2, r3]
 800ab6c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ab6e:	7cbb      	ldrb	r3, [r7, #18]
 800ab70:	4a1f      	ldr	r2, [pc, #124]	@ (800abf0 <lorawan_aes_set_key+0x1b8>)
 800ab72:	5cd3      	ldrb	r3, [r2, r3]
 800ab74:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ab76:	7dfa      	ldrb	r2, [r7, #23]
 800ab78:	7afb      	ldrb	r3, [r7, #11]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ab7e:	7c3b      	ldrb	r3, [r7, #16]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	5cd1      	ldrb	r1, [r2, r3]
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	7d7a      	ldrb	r2, [r7, #21]
 800ab88:	404a      	eors	r2, r1
 800ab8a:	b2d1      	uxtb	r1, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ab90:	7c3b      	ldrb	r3, [r7, #16]
 800ab92:	3301      	adds	r3, #1
 800ab94:	687a      	ldr	r2, [r7, #4]
 800ab96:	5cd1      	ldrb	r1, [r2, r3]
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	7d3a      	ldrb	r2, [r7, #20]
 800ab9e:	404a      	eors	r2, r1
 800aba0:	b2d1      	uxtb	r1, r2
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800aba6:	7c3b      	ldrb	r3, [r7, #16]
 800aba8:	3302      	adds	r3, #2
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	5cd1      	ldrb	r1, [r2, r3]
 800abae:	7dfb      	ldrb	r3, [r7, #23]
 800abb0:	3302      	adds	r3, #2
 800abb2:	7cfa      	ldrb	r2, [r7, #19]
 800abb4:	404a      	eors	r2, r1
 800abb6:	b2d1      	uxtb	r1, r2
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800abbc:	7c3b      	ldrb	r3, [r7, #16]
 800abbe:	3303      	adds	r3, #3
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	5cd1      	ldrb	r1, [r2, r3]
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
 800abc6:	3303      	adds	r3, #3
 800abc8:	7cba      	ldrb	r2, [r7, #18]
 800abca:	404a      	eors	r2, r1
 800abcc:	b2d1      	uxtb	r1, r2
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800abd2:	7dfb      	ldrb	r3, [r7, #23]
 800abd4:	3304      	adds	r3, #4
 800abd6:	75fb      	strb	r3, [r7, #23]
 800abd8:	7dfa      	ldrb	r2, [r7, #23]
 800abda:	7c7b      	ldrb	r3, [r7, #17]
 800abdc:	429a      	cmp	r2, r3
 800abde:	f4ff af66 	bcc.w	800aaae <lorawan_aes_set_key+0x76>
    }
    return 0;
 800abe2:	2300      	movs	r3, #0
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	00010101 	.word	0x00010101
 800abf0:	0801cbcc 	.word	0x0801cbcc

0800abf4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08a      	sub	sp, #40	@ 0x28
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d038      	beq.n	800ac7c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	f107 0314 	add.w	r3, r7, #20
 800ac10:	68f9      	ldr	r1, [r7, #12]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fc07 	bl	800a426 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ac18:	2301      	movs	r3, #1
 800ac1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac1e:	e014      	b.n	800ac4a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ac20:	f107 0314 	add.w	r3, r7, #20
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7ff fd5d 	bl	800a6e4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac30:	0112      	lsls	r2, r2, #4
 800ac32:	441a      	add	r2, r3
 800ac34:	f107 0314 	add.w	r3, r7, #20
 800ac38:	4611      	mov	r1, r2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff fcab 	bl	800a596 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ac40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac44:	3301      	adds	r3, #1
 800ac46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac50:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d3e3      	bcc.n	800ac20 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ac58:	f107 0314 	add.w	r3, r7, #20
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7ff fca7 	bl	800a5b0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac68:	0112      	lsls	r2, r2, #4
 800ac6a:	441a      	add	r2, r3
 800ac6c:	f107 0314 	add.w	r3, r7, #20
 800ac70:	4619      	mov	r1, r3
 800ac72:	68b8      	ldr	r0, [r7, #8]
 800ac74:	f7ff fbd7 	bl	800a426 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e000      	b.n	800ac7e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ac7c:	23ff      	movs	r3, #255	@ 0xff
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3728      	adds	r7, #40	@ 0x28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ac88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac8a:	b0a1      	sub	sp, #132	@ 0x84
 800ac8c:	af12      	add	r7, sp, #72	@ 0x48
 800ac8e:	4603      	mov	r3, r0
 800ac90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ac94:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ac98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f000 fa12 	bl	800b0c8 <SecureElementGetKeyByID>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d174      	bne.n	800ad94 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800acaa:	2300      	movs	r3, #0
 800acac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800acb0:	e06c      	b.n	800ad8c <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800acb2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800acb6:	4939      	ldr	r1, [pc, #228]	@ (800ad9c <PrintKey+0x114>)
 800acb8:	4613      	mov	r3, r2
 800acba:	005b      	lsls	r3, r3, #1
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800acc8:	429a      	cmp	r2, r3
 800acca:	d15a      	bne.n	800ad82 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800accc:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800acd0:	4932      	ldr	r1, [pc, #200]	@ (800ad9c <PrintKey+0x114>)
 800acd2:	4613      	mov	r3, r2
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	4413      	add	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	440b      	add	r3, r1
 800acdc:	3308      	adds	r3, #8
 800acde:	6819      	ldr	r1, [r3, #0]
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	785b      	ldrb	r3, [r3, #1]
 800ace4:	461d      	mov	r5, r3
 800ace6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace8:	789b      	ldrb	r3, [r3, #2]
 800acea:	461e      	mov	r6, r3
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	78db      	ldrb	r3, [r3, #3]
 800acf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	791b      	ldrb	r3, [r3, #4]
 800acf6:	627b      	str	r3, [r7, #36]	@ 0x24
 800acf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfa:	795b      	ldrb	r3, [r3, #5]
 800acfc:	623b      	str	r3, [r7, #32]
 800acfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad00:	799b      	ldrb	r3, [r3, #6]
 800ad02:	61fb      	str	r3, [r7, #28]
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	79db      	ldrb	r3, [r3, #7]
 800ad08:	61bb      	str	r3, [r7, #24]
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	7a1b      	ldrb	r3, [r3, #8]
 800ad0e:	617b      	str	r3, [r7, #20]
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	7a5b      	ldrb	r3, [r3, #9]
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	7a9b      	ldrb	r3, [r3, #10]
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	7adb      	ldrb	r3, [r3, #11]
 800ad20:	60bb      	str	r3, [r7, #8]
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	7b1b      	ldrb	r3, [r3, #12]
 800ad26:	607b      	str	r3, [r7, #4]
 800ad28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2a:	7b5b      	ldrb	r3, [r3, #13]
 800ad2c:	461c      	mov	r4, r3
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	7b9b      	ldrb	r3, [r3, #14]
 800ad32:	4618      	mov	r0, r3
 800ad34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad36:	7bdb      	ldrb	r3, [r3, #15]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3c:	7c1b      	ldrb	r3, [r3, #16]
 800ad3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ad40:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ad42:	900e      	str	r0, [sp, #56]	@ 0x38
 800ad44:	940d      	str	r4, [sp, #52]	@ 0x34
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	920a      	str	r2, [sp, #40]	@ 0x28
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	9208      	str	r2, [sp, #32]
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	9207      	str	r2, [sp, #28]
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	9206      	str	r2, [sp, #24]
 800ad62:	6a3a      	ldr	r2, [r7, #32]
 800ad64:	9205      	str	r2, [sp, #20]
 800ad66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad68:	9204      	str	r2, [sp, #16]
 800ad6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6c:	9303      	str	r3, [sp, #12]
 800ad6e:	9602      	str	r6, [sp, #8]
 800ad70:	9501      	str	r5, [sp, #4]
 800ad72:	9100      	str	r1, [sp, #0]
 800ad74:	4b0a      	ldr	r3, [pc, #40]	@ (800ada0 <PrintKey+0x118>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	2100      	movs	r1, #0
 800ad7a:	2002      	movs	r0, #2
 800ad7c:	f011 f8ee 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
 800ad80:	e008      	b.n	800ad94 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ad82:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad86:	3301      	adds	r3, #1
 800ad88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ad8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ad90:	2b0a      	cmp	r3, #10
 800ad92:	d98e      	bls.n	800acb2 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ad94:	373c      	adds	r7, #60	@ 0x3c
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0801cecc 	.word	0x0801cecc
 800ada0:	0801c778 	.word	0x0801c778

0800ada4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ada4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ada6:	b091      	sub	sp, #68	@ 0x44
 800ada8:	af08      	add	r7, sp, #32
 800adaa:	4603      	mov	r3, r0
 800adac:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800adb2:	f107 0310 	add.w	r3, r7, #16
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fbee 	bl	800b598 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800adbc:	7c3b      	ldrb	r3, [r7, #16]
 800adbe:	7c7a      	ldrb	r2, [r7, #17]
 800adc0:	7cb9      	ldrb	r1, [r7, #18]
 800adc2:	7cf8      	ldrb	r0, [r7, #19]
 800adc4:	7d3c      	ldrb	r4, [r7, #20]
 800adc6:	7d7d      	ldrb	r5, [r7, #21]
 800adc8:	7dbe      	ldrb	r6, [r7, #22]
 800adca:	f897 c017 	ldrb.w	ip, [r7, #23]
 800adce:	f8cd c01c 	str.w	ip, [sp, #28]
 800add2:	9606      	str	r6, [sp, #24]
 800add4:	9505      	str	r5, [sp, #20]
 800add6:	9404      	str	r4, [sp, #16]
 800add8:	9003      	str	r0, [sp, #12]
 800adda:	9102      	str	r1, [sp, #8]
 800addc:	9201      	str	r2, [sp, #4]
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	4b24      	ldr	r3, [pc, #144]	@ (800ae74 <PrintIds+0xd0>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	2100      	movs	r1, #0
 800ade6:	2002      	movs	r0, #2
 800ade8:	f011 f8b8 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800adec:	f107 0318 	add.w	r3, r7, #24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fc01 	bl	800b5f8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800adf6:	7e3b      	ldrb	r3, [r7, #24]
 800adf8:	7e7a      	ldrb	r2, [r7, #25]
 800adfa:	7eb9      	ldrb	r1, [r7, #26]
 800adfc:	7ef8      	ldrb	r0, [r7, #27]
 800adfe:	7f3c      	ldrb	r4, [r7, #28]
 800ae00:	7f7d      	ldrb	r5, [r7, #29]
 800ae02:	7fbe      	ldrb	r6, [r7, #30]
 800ae04:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ae08:	f8cd c01c 	str.w	ip, [sp, #28]
 800ae0c:	9606      	str	r6, [sp, #24]
 800ae0e:	9505      	str	r5, [sp, #20]
 800ae10:	9404      	str	r4, [sp, #16]
 800ae12:	9003      	str	r0, [sp, #12]
 800ae14:	9102      	str	r1, [sp, #8]
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	9300      	str	r3, [sp, #0]
 800ae1a:	4b17      	ldr	r3, [pc, #92]	@ (800ae78 <PrintIds+0xd4>)
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	2100      	movs	r1, #0
 800ae20:	2002      	movs	r0, #2
 800ae22:	f011 f89b 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ae26:	f107 020c 	add.w	r2, r7, #12
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	4611      	mov	r1, r2
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fc14 	bl	800b65c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ae34:	f107 030c 	add.w	r3, r7, #12
 800ae38:	3303      	adds	r3, #3
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	f107 030c 	add.w	r3, r7, #12
 800ae42:	3302      	adds	r3, #2
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	4619      	mov	r1, r3
 800ae48:	f107 030c 	add.w	r3, r7, #12
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	4618      	mov	r0, r3
 800ae52:	f107 030c 	add.w	r3, r7, #12
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	9303      	str	r3, [sp, #12]
 800ae5a:	9002      	str	r0, [sp, #8]
 800ae5c:	9101      	str	r1, [sp, #4]
 800ae5e:	9200      	str	r2, [sp, #0]
 800ae60:	4b06      	ldr	r3, [pc, #24]	@ (800ae7c <PrintIds+0xd8>)
 800ae62:	2200      	movs	r2, #0
 800ae64:	2100      	movs	r1, #0
 800ae66:	2002      	movs	r0, #2
 800ae68:	f011 f878 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800ae6c:	bf00      	nop
 800ae6e:	3724      	adds	r7, #36	@ 0x24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae74:	0801c7d4 	.word	0x0801c7d4
 800ae78:	0801c814 	.word	0x0801c814
 800ae7c:	0801c854 	.word	0x0801c854

0800ae80 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	4603      	mov	r3, r0
 800ae88:	6039      	str	r1, [r7, #0]
 800ae8a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
 800ae90:	e01a      	b.n	800aec8 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800ae92:	4b12      	ldr	r3, [pc, #72]	@ (800aedc <GetKeyByID+0x5c>)
 800ae94:	6819      	ldr	r1, [r3, #0]
 800ae96:	7bfa      	ldrb	r2, [r7, #15]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	011b      	lsls	r3, r3, #4
 800ae9c:	4413      	add	r3, r2
 800ae9e:	440b      	add	r3, r1
 800aea0:	3318      	adds	r3, #24
 800aea2:	781b      	ldrb	r3, [r3, #0]
 800aea4:	79fa      	ldrb	r2, [r7, #7]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d10b      	bne.n	800aec2 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800aeaa:	4b0c      	ldr	r3, [pc, #48]	@ (800aedc <GetKeyByID+0x5c>)
 800aeac:	6819      	ldr	r1, [r3, #0]
 800aeae:	7bfa      	ldrb	r2, [r7, #15]
 800aeb0:	4613      	mov	r3, r2
 800aeb2:	011b      	lsls	r3, r3, #4
 800aeb4:	4413      	add	r3, r2
 800aeb6:	3318      	adds	r3, #24
 800aeb8:	18ca      	adds	r2, r1, r3
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e006      	b.n	800aed0 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800aec2:	7bfb      	ldrb	r3, [r7, #15]
 800aec4:	3301      	adds	r3, #1
 800aec6:	73fb      	strb	r3, [r7, #15]
 800aec8:	7bfb      	ldrb	r3, [r7, #15]
 800aeca:	2b0a      	cmp	r3, #10
 800aecc:	d9e1      	bls.n	800ae92 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800aece:	2303      	movs	r3, #3
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bc80      	pop	{r7}
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop
 800aedc:	20000364 	.word	0x20000364

0800aee0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800aee0:	b590      	push	{r4, r7, lr}
 800aee2:	b0d1      	sub	sp, #324	@ 0x144
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800aeea:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800aeee:	6020      	str	r0, [r4, #0]
 800aef0:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800aef4:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800aef8:	6001      	str	r1, [r0, #0]
 800aefa:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800aefe:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 800af02:	600a      	str	r2, [r1, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af0a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800af0e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800af10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af14:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <ComputeCmac+0x46>
 800af1e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800af22:	2b00      	cmp	r3, #0
 800af24:	d101      	bne.n	800af2a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800af26:	2302      	movs	r3, #2
 800af28:	e05d      	b.n	800afe6 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800af2a:	f107 0314 	add.w	r3, r7, #20
 800af2e:	4618      	mov	r0, r3
 800af30:	f7fe fefe 	bl	8009d30 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800af34:	f107 0210 	add.w	r2, r7, #16
 800af38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af3c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	4611      	mov	r1, r2
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff ff9b 	bl	800ae80 <GetKeyByID>
 800af4a:	4603      	mov	r3, r0
 800af4c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800af50:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800af54:	2b00      	cmp	r3, #0
 800af56:	d144      	bne.n	800afe2 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800af58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af5c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	1c5a      	adds	r2, r3, #1
 800af64:	f107 0314 	add.w	r3, r7, #20
 800af68:	4611      	mov	r1, r2
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7fe fef9 	bl	8009d62 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800af70:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af74:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800af7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af82:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800af86:	f107 0014 	add.w	r0, r7, #20
 800af8a:	2210      	movs	r2, #16
 800af8c:	6819      	ldr	r1, [r3, #0]
 800af8e:	f7fe fef7 	bl	8009d80 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800af92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af96:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 800af9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800af9e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800afa2:	f107 0014 	add.w	r0, r7, #20
 800afa6:	6812      	ldr	r2, [r2, #0]
 800afa8:	6819      	ldr	r1, [r3, #0]
 800afaa:	f7fe fee9 	bl	8009d80 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800afae:	f107 0214 	add.w	r2, r7, #20
 800afb2:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800afb6:	4611      	mov	r1, r2
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe ffa3 	bl	8009f04 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800afbe:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 800afc2:	461a      	mov	r2, r3
 800afc4:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	431a      	orrs	r2, r3
 800afcc:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800afd0:	041b      	lsls	r3, r3, #16
 800afd2:	431a      	orrs	r2, r3
 800afd4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800afd8:	061b      	lsls	r3, r3, #24
 800afda:	431a      	orrs	r2, r3
 800afdc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800afe0:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800afe2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800afec:	46bd      	mov	sp, r7
 800afee:	bd90      	pop	{r4, r7, pc}

0800aff0 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d101      	bne.n	800b002 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800affe:	2302      	movs	r3, #2
 800b000:	e00a      	b.n	800b018 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800b002:	4a07      	ldr	r2, [pc, #28]	@ (800b020 <SecureElementInit+0x30>)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800b008:	4b05      	ldr	r3, [pc, #20]	@ (800b020 <SecureElementInit+0x30>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	22d8      	movs	r2, #216	@ 0xd8
 800b00e:	4905      	ldr	r1, [pc, #20]	@ (800b024 <SecureElementInit+0x34>)
 800b010:	4618      	mov	r0, r3
 800b012:	f00c fbfa 	bl	801780a <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}
 800b020:	20000364 	.word	0x20000364
 800b024:	0801d16c 	.word	0x0801d16c

0800b028 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b086      	sub	sp, #24
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800b036:	f107 030c 	add.w	r3, r7, #12
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 faac 	bl	800b598 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800b040:	f107 0308 	add.w	r3, r7, #8
 800b044:	4619      	mov	r1, r3
 800b046:	2001      	movs	r0, #1
 800b048:	f000 fb08 	bl	800b65c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d024      	beq.n	800b09c <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800b052:	2300      	movs	r3, #0
 800b054:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b056:	2300      	movs	r3, #0
 800b058:	75bb      	strb	r3, [r7, #22]
 800b05a:	e00c      	b.n	800b076 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800b05c:	7dbb      	ldrb	r3, [r7, #22]
 800b05e:	3318      	adds	r3, #24
 800b060:	443b      	add	r3, r7
 800b062:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800b06a:	2301      	movs	r3, #1
 800b06c:	75fb      	strb	r3, [r7, #23]
                break;
 800b06e:	e005      	b.n	800b07c <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800b070:	7dbb      	ldrb	r3, [r7, #22]
 800b072:	3301      	adds	r3, #1
 800b074:	75bb      	strb	r3, [r7, #22]
 800b076:	7dbb      	ldrb	r3, [r7, #22]
 800b078:	2b07      	cmp	r3, #7
 800b07a:	d9ef      	bls.n	800b05c <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	f083 0301 	eor.w	r3, r3, #1
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800b088:	f107 020c 	add.w	r2, r7, #12
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	4610      	mov	r0, r2
 800b090:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800b092:	f107 030c 	add.w	r3, r7, #12
 800b096:	4618      	mov	r0, r3
 800b098:	f000 fa66 	bl	800b568 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00c      	beq.n	800b0bc <SecureElementInitMcuID+0x94>
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800b0a8:	f107 0208 	add.w	r2, r7, #8
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	4610      	mov	r0, r2
 800b0b0:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	f000 fab6 	bl	800b628 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}
	...

0800b0c8 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b085      	sub	sp, #20
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	6039      	str	r1, [r7, #0]
 800b0d2:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	73fb      	strb	r3, [r7, #15]
 800b0d8:	e01a      	b.n	800b110 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b0da:	4b12      	ldr	r3, [pc, #72]	@ (800b124 <SecureElementGetKeyByID+0x5c>)
 800b0dc:	6819      	ldr	r1, [r3, #0]
 800b0de:	7bfa      	ldrb	r2, [r7, #15]
 800b0e0:	4613      	mov	r3, r2
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	4413      	add	r3, r2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	3318      	adds	r3, #24
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	79fa      	ldrb	r2, [r7, #7]
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d10b      	bne.n	800b10a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b0f2:	4b0c      	ldr	r3, [pc, #48]	@ (800b124 <SecureElementGetKeyByID+0x5c>)
 800b0f4:	6819      	ldr	r1, [r3, #0]
 800b0f6:	7bfa      	ldrb	r2, [r7, #15]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	011b      	lsls	r3, r3, #4
 800b0fc:	4413      	add	r3, r2
 800b0fe:	3318      	adds	r3, #24
 800b100:	18ca      	adds	r2, r1, r3
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b106:	2300      	movs	r3, #0
 800b108:	e006      	b.n	800b118 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	3301      	adds	r3, #1
 800b10e:	73fb      	strb	r3, [r7, #15]
 800b110:	7bfb      	ldrb	r3, [r7, #15]
 800b112:	2b0a      	cmp	r3, #10
 800b114:	d9e1      	bls.n	800b0da <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b116:	2303      	movs	r3, #3
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3714      	adds	r7, #20
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bc80      	pop	{r7}
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop
 800b124:	20000364 	.word	0x20000364

0800b128 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800b12c:	2000      	movs	r0, #0
 800b12e:	f7ff fdab 	bl	800ac88 <PrintKey>
    PrintKey( NWK_KEY );
 800b132:	2001      	movs	r0, #1
 800b134:	f7ff fda8 	bl	800ac88 <PrintKey>
    PrintKey( APP_S_KEY );
 800b138:	2009      	movs	r0, #9
 800b13a:	f7ff fda5 	bl	800ac88 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b13e:	2008      	movs	r0, #8
 800b140:	f7ff fda2 	bl	800ac88 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800b144:	2000      	movs	r0, #0
 800b146:	f7ff fe2d 	bl	800ada4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b14a:	2300      	movs	r3, #0
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800b15a:	200b      	movs	r0, #11
 800b15c:	f7ff fd94 	bl	800ac88 <PrintKey>
    PrintKey( MC_KE_KEY );
 800b160:	200c      	movs	r0, #12
 800b162:	f7ff fd91 	bl	800ac88 <PrintKey>
    PrintKey( APP_S_KEY );
 800b166:	2009      	movs	r0, #9
 800b168:	f7ff fd8e 	bl	800ac88 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800b16c:	2008      	movs	r0, #8
 800b16e:	f7ff fd8b 	bl	800ac88 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800b172:	200a      	movs	r0, #10
 800b174:	f7ff fd88 	bl	800ac88 <PrintKey>
    PrintIds( mode );
 800b178:	79fb      	ldrb	r3, [r7, #7]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f7ff fe12 	bl	800ada4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800b180:	2300      	movs	r3, #0
}
 800b182:	4618      	mov	r0, r3
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
	...

0800b18c <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b088      	sub	sp, #32
 800b190:	af00      	add	r7, sp, #0
 800b192:	4603      	mov	r3, r0
 800b194:	6039      	str	r1, [r7, #0]
 800b196:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b19e:	2302      	movs	r3, #2
 800b1a0:	e04b      	b.n	800b23a <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	77fb      	strb	r3, [r7, #31]
 800b1a6:	e044      	b.n	800b232 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b1a8:	4b26      	ldr	r3, [pc, #152]	@ (800b244 <SecureElementSetKey+0xb8>)
 800b1aa:	6819      	ldr	r1, [r3, #0]
 800b1ac:	7ffa      	ldrb	r2, [r7, #31]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	011b      	lsls	r3, r3, #4
 800b1b2:	4413      	add	r3, r2
 800b1b4:	440b      	add	r3, r1
 800b1b6:	3318      	adds	r3, #24
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	79fa      	ldrb	r2, [r7, #7]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d135      	bne.n	800b22c <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	2b0d      	cmp	r3, #13
 800b1c4:	d122      	bne.n	800b20c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b1c6:	2306      	movs	r3, #6
 800b1c8:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800b1ca:	f107 030c 	add.w	r3, r7, #12
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	601a      	str	r2, [r3, #0]
 800b1d2:	605a      	str	r2, [r3, #4]
 800b1d4:	609a      	str	r2, [r3, #8]
 800b1d6:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800b1d8:	f107 030c 	add.w	r3, r7, #12
 800b1dc:	220c      	movs	r2, #12
 800b1de:	2110      	movs	r1, #16
 800b1e0:	6838      	ldr	r0, [r7, #0]
 800b1e2:	f000 f877 	bl	800b2d4 <SecureElementAesEncrypt>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800b1ea:	4b16      	ldr	r3, [pc, #88]	@ (800b244 <SecureElementSetKey+0xb8>)
 800b1ec:	6819      	ldr	r1, [r3, #0]
 800b1ee:	7ffa      	ldrb	r2, [r7, #31]
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	011b      	lsls	r3, r3, #4
 800b1f4:	4413      	add	r3, r2
 800b1f6:	3318      	adds	r3, #24
 800b1f8:	440b      	add	r3, r1
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	f107 010c 	add.w	r1, r7, #12
 800b200:	2210      	movs	r2, #16
 800b202:	4618      	mov	r0, r3
 800b204:	f00c fb01 	bl	801780a <memcpy1>
                return retval;
 800b208:	7fbb      	ldrb	r3, [r7, #30]
 800b20a:	e016      	b.n	800b23a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800b20c:	4b0d      	ldr	r3, [pc, #52]	@ (800b244 <SecureElementSetKey+0xb8>)
 800b20e:	6819      	ldr	r1, [r3, #0]
 800b210:	7ffa      	ldrb	r2, [r7, #31]
 800b212:	4613      	mov	r3, r2
 800b214:	011b      	lsls	r3, r3, #4
 800b216:	4413      	add	r3, r2
 800b218:	3318      	adds	r3, #24
 800b21a:	440b      	add	r3, r1
 800b21c:	3301      	adds	r3, #1
 800b21e:	2210      	movs	r2, #16
 800b220:	6839      	ldr	r1, [r7, #0]
 800b222:	4618      	mov	r0, r3
 800b224:	f00c faf1 	bl	801780a <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800b228:	2300      	movs	r3, #0
 800b22a:	e006      	b.n	800b23a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b22c:	7ffb      	ldrb	r3, [r7, #31]
 800b22e:	3301      	adds	r3, #1
 800b230:	77fb      	strb	r3, [r7, #31]
 800b232:	7ffb      	ldrb	r3, [r7, #31]
 800b234:	2b0a      	cmp	r3, #10
 800b236:	d9b7      	bls.n	800b1a8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b238:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3720      	adds	r7, #32
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000364 	.word	0x20000364

0800b248 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af02      	add	r7, sp, #8
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800b256:	78fb      	ldrb	r3, [r7, #3]
 800b258:	2b0b      	cmp	r3, #11
 800b25a:	d901      	bls.n	800b260 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e009      	b.n	800b274 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800b260:	78fa      	ldrb	r2, [r7, #3]
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	9300      	str	r3, [sp, #0]
 800b266:	4613      	mov	r3, r2
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	68b9      	ldr	r1, [r7, #8]
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fe37 	bl	800aee0 <ComputeCmac>
 800b272:	4603      	mov	r3, r0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b088      	sub	sp, #32
 800b280:	af02      	add	r7, sp, #8
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d101      	bne.n	800b294 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b290:	2302      	movs	r3, #2
 800b292:	e01b      	b.n	800b2cc <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800b294:	2306      	movs	r3, #6
 800b296:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800b29c:	78fa      	ldrb	r2, [r7, #3]
 800b29e:	f107 0310 	add.w	r3, r7, #16
 800b2a2:	9300      	str	r3, [sp, #0]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	68ba      	ldr	r2, [r7, #8]
 800b2a8:	68f9      	ldr	r1, [r7, #12]
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7ff fe18 	bl	800aee0 <ComputeCmac>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b2b4:	7dfb      	ldrb	r3, [r7, #23]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d001      	beq.n	800b2be <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800b2ba:	7dfb      	ldrb	r3, [r7, #23]
 800b2bc:	e006      	b.n	800b2cc <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d001      	beq.n	800b2ca <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b0c2      	sub	sp, #264	@ 0x108
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b2e0:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 800b2e4:	6001      	str	r1, [r0, #0]
 800b2e6:	4611      	mov	r1, r2
 800b2e8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b2ec:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2f6:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b2fa:	460a      	mov	r2, r1
 800b2fc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <SecureElementAesEncrypt+0x3e>
 800b304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b312:	2302      	movs	r3, #2
 800b314:	e059      	b.n	800b3ca <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800b316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 030f 	and.w	r3, r3, #15
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b328:	2305      	movs	r3, #5
 800b32a:	e04e      	b.n	800b3ca <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800b32c:	f107 0314 	add.w	r3, r7, #20
 800b330:	22f0      	movs	r2, #240	@ 0xf0
 800b332:	2100      	movs	r1, #0
 800b334:	4618      	mov	r0, r3
 800b336:	f00c faa3 	bl	8017880 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800b33a:	f107 0210 	add.w	r2, r7, #16
 800b33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b342:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	4611      	mov	r1, r2
 800b34a:	4618      	mov	r0, r3
 800b34c:	f7ff fd98 	bl	800ae80 <GetKeyByID>
 800b350:	4603      	mov	r3, r0
 800b352:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b356:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d133      	bne.n	800b3c6 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	3301      	adds	r3, #1
 800b362:	f107 0214 	add.w	r2, r7, #20
 800b366:	2110      	movs	r1, #16
 800b368:	4618      	mov	r0, r3
 800b36a:	f7ff fb65 	bl	800aa38 <lorawan_aes_set_key>

        uint8_t block = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800b374:	e020      	b.n	800b3b8 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800b376:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	18d0      	adds	r0, r2, r3
 800b37e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b382:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b386:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800b38a:	6812      	ldr	r2, [r2, #0]
 800b38c:	4413      	add	r3, r2
 800b38e:	f107 0214 	add.w	r2, r7, #20
 800b392:	4619      	mov	r1, r3
 800b394:	f7ff fc2e 	bl	800abf4 <lorawan_aes_encrypt>
            block = block + 16;
 800b398:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800b39c:	3310      	adds	r3, #16
 800b39e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800b3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b3aa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800b3ae:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 800b3b2:	6812      	ldr	r2, [r2, #0]
 800b3b4:	3a10      	subs	r2, #16
 800b3b6:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800b3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1d7      	bne.n	800b376 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800b3c6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b088      	sub	sp, #32
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	70fb      	strb	r3, [r7, #3]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b3ea:	2302      	movs	r3, #2
 800b3ec:	e02d      	b.n	800b44a <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800b3ee:	2306      	movs	r3, #6
 800b3f0:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800b3f2:	78bb      	ldrb	r3, [r7, #2]
 800b3f4:	2b0c      	cmp	r3, #12
 800b3f6:	d104      	bne.n	800b402 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800b3f8:	78fb      	ldrb	r3, [r7, #3]
 800b3fa:	2b0b      	cmp	r3, #11
 800b3fc:	d001      	beq.n	800b402 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b3fe:	2303      	movs	r3, #3
 800b400:	e023      	b.n	800b44a <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800b402:	f107 030c 	add.w	r3, r7, #12
 800b406:	2200      	movs	r2, #0
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	605a      	str	r2, [r3, #4]
 800b40c:	609a      	str	r2, [r3, #8]
 800b40e:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800b410:	f107 030c 	add.w	r3, r7, #12
 800b414:	78fa      	ldrb	r2, [r7, #3]
 800b416:	2110      	movs	r1, #16
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff ff5b 	bl	800b2d4 <SecureElementAesEncrypt>
 800b41e:	4603      	mov	r3, r0
 800b420:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b422:	7ffb      	ldrb	r3, [r7, #31]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d001      	beq.n	800b42c <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 800b428:	7ffb      	ldrb	r3, [r7, #31]
 800b42a:	e00e      	b.n	800b44a <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800b42c:	f107 020c 	add.w	r2, r7, #12
 800b430:	78bb      	ldrb	r3, [r7, #2]
 800b432:	4611      	mov	r1, r2
 800b434:	4618      	mov	r0, r3
 800b436:	f7ff fea9 	bl	800b18c <SecureElementSetKey>
 800b43a:	4603      	mov	r3, r0
 800b43c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800b43e:	7ffb      	ldrb	r3, [r7, #31]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d001      	beq.n	800b448 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 800b444:	7ffb      	ldrb	r3, [r7, #31]
 800b446:	e000      	b.n	800b44a <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b448:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3720      	adds	r7, #32
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b086      	sub	sp, #24
 800b456:	af00      	add	r7, sp, #0
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	4603      	mov	r3, r0
 800b45e:	73fb      	strb	r3, [r7, #15]
 800b460:	4613      	mov	r3, r2
 800b462:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <SecureElementProcessJoinAccept+0x24>
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d002      	beq.n	800b476 <SecureElementProcessJoinAccept+0x24>
 800b470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b472:	2b00      	cmp	r3, #0
 800b474:	d101      	bne.n	800b47a <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b476:	2302      	movs	r3, #2
 800b478:	e05c      	b.n	800b534 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800b47a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b47e:	2b21      	cmp	r3, #33	@ 0x21
 800b480:	d901      	bls.n	800b486 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800b482:	2305      	movs	r3, #5
 800b484:	e056      	b.n	800b534 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800b486:	2301      	movs	r3, #1
 800b488:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800b48a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	461a      	mov	r2, r3
 800b492:	6879      	ldr	r1, [r7, #4]
 800b494:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b496:	f00c f9b8 	bl	801780a <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	1c58      	adds	r0, r3, #1
 800b49e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	7dfa      	ldrb	r2, [r7, #23]
 800b4ac:	f7ff ff12 	bl	800b2d4 <SecureElementAesEncrypt>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d001      	beq.n	800b4ba <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800b4b6:	2307      	movs	r3, #7
 800b4b8:	e03c      	b.n	800b534 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4bc:	330b      	adds	r3, #11
 800b4be:	781b      	ldrb	r3, [r3, #0]
 800b4c0:	09db      	lsrs	r3, r3, #7
 800b4c2:	b2da      	uxtb	r2, r3
 800b4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c6:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800b4c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4cc:	3b04      	subs	r3, #4
 800b4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4da:	3b03      	subs	r3, #3
 800b4dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4de:	4413      	add	r3, r2
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	021b      	lsls	r3, r3, #8
 800b4e4:	ea41 0203 	orr.w	r2, r1, r3
 800b4e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4ec:	3b02      	subs	r3, #2
 800b4ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b4f0:	440b      	add	r3, r1
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	041b      	lsls	r3, r3, #16
 800b4f6:	431a      	orrs	r2, r3
 800b4f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b500:	440b      	add	r3, r1
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	061b      	lsls	r3, r3, #24
 800b506:	4313      	orrs	r3, r2
 800b508:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800b50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10d      	bne.n	800b52e <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800b512:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b516:	3b04      	subs	r3, #4
 800b518:	4619      	mov	r1, r3
 800b51a:	2301      	movs	r3, #1
 800b51c:	693a      	ldr	r2, [r7, #16]
 800b51e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b520:	f7ff feac 	bl	800b27c <SecureElementVerifyAesCmac>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d003      	beq.n	800b532 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800b52a:	2301      	movs	r3, #1
 800b52c:	e002      	b.n	800b534 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800b52e:	2304      	movs	r3, #4
 800b530:	e000      	b.n	800b534 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d101      	bne.n	800b54e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b54a:	2302      	movs	r3, #2
 800b54c:	e006      	b.n	800b55c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800b54e:	4b05      	ldr	r3, [pc, #20]	@ (800b564 <SecureElementRandomNumber+0x28>)
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	4798      	blx	r3
 800b554:	4602      	mov	r2, r0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	0801d01c 	.word	0x0801d01c

0800b568 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b576:	2302      	movs	r3, #2
 800b578:	e007      	b.n	800b58a <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800b57a:	4b06      	ldr	r3, [pc, #24]	@ (800b594 <SecureElementSetDevEui+0x2c>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	2208      	movs	r2, #8
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	4618      	mov	r0, r3
 800b584:	f00c f941 	bl	801780a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b588:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20000364 	.word	0x20000364

0800b598 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	e007      	b.n	800b5ba <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800b5aa:	4b06      	ldr	r3, [pc, #24]	@ (800b5c4 <SecureElementGetDevEui+0x2c>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2208      	movs	r2, #8
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f00c f929 	bl	801780a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b5b8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20000364 	.word	0x20000364

0800b5c8 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d101      	bne.n	800b5da <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b5d6:	2302      	movs	r3, #2
 800b5d8:	e008      	b.n	800b5ec <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800b5da:	4b06      	ldr	r3, [pc, #24]	@ (800b5f4 <SecureElementSetJoinEui+0x2c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3308      	adds	r3, #8
 800b5e0:	2208      	movs	r2, #8
 800b5e2:	6879      	ldr	r1, [r7, #4]
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f00c f910 	bl	801780a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b5ea:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}
 800b5f4:	20000364 	.word	0x20000364

0800b5f8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b606:	2302      	movs	r3, #2
 800b608:	e008      	b.n	800b61c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800b60a:	4b06      	ldr	r3, [pc, #24]	@ (800b624 <SecureElementGetJoinEui+0x2c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	3308      	adds	r3, #8
 800b610:	2208      	movs	r2, #8
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f00c f8f8 	bl	801780a <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800b61a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	20000364 	.word	0x20000364

0800b628 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	4603      	mov	r3, r0
 800b630:	6039      	str	r1, [r7, #0]
 800b632:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800b634:	79fb      	ldrb	r3, [r7, #7]
 800b636:	2b02      	cmp	r3, #2
 800b638:	d104      	bne.n	800b644 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800b63a:	4b07      	ldr	r3, [pc, #28]	@ (800b658 <SecureElementSetDevAddr+0x30>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	611a      	str	r2, [r3, #16]
 800b642:	e003      	b.n	800b64c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800b644:	4b04      	ldr	r3, [pc, #16]	@ (800b658 <SecureElementSetDevAddr+0x30>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	683a      	ldr	r2, [r7, #0]
 800b64a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800b64c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	bc80      	pop	{r7}
 800b656:	4770      	bx	lr
 800b658:	20000364 	.word	0x20000364

0800b65c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	4603      	mov	r3, r0
 800b664:	6039      	str	r1, [r7, #0]
 800b666:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800b668:	683b      	ldr	r3, [r7, #0]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b66e:	2302      	movs	r3, #2
 800b670:	e00e      	b.n	800b690 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	2b02      	cmp	r3, #2
 800b676:	d105      	bne.n	800b684 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800b678:	4b08      	ldr	r3, [pc, #32]	@ (800b69c <SecureElementGetDevAddr+0x40>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	691a      	ldr	r2, [r3, #16]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	e004      	b.n	800b68e <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800b684:	4b05      	ldr	r3, [pc, #20]	@ (800b69c <SecureElementGetDevAddr+0x40>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	695a      	ldr	r2, [r3, #20]
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800b68e:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800b690:	4618      	mov	r0, r3
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	bc80      	pop	{r7}
 800b698:	4770      	bx	lr
 800b69a:	bf00      	nop
 800b69c:	20000364 	.word	0x20000364

0800b6a0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800b6aa:	4a22      	ldr	r2, [pc, #136]	@ (800b734 <LmHandlerInit+0x94>)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800b6b0:	4b21      	ldr	r3, [pc, #132]	@ (800b738 <LmHandlerInit+0x98>)
 800b6b2:	4a22      	ldr	r2, [pc, #136]	@ (800b73c <LmHandlerInit+0x9c>)
 800b6b4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800b6b6:	4b20      	ldr	r3, [pc, #128]	@ (800b738 <LmHandlerInit+0x98>)
 800b6b8:	4a21      	ldr	r2, [pc, #132]	@ (800b740 <LmHandlerInit+0xa0>)
 800b6ba:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800b6bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b738 <LmHandlerInit+0x98>)
 800b6be:	4a21      	ldr	r2, [pc, #132]	@ (800b744 <LmHandlerInit+0xa4>)
 800b6c0:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800b6c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b738 <LmHandlerInit+0x98>)
 800b6c4:	4a20      	ldr	r2, [pc, #128]	@ (800b748 <LmHandlerInit+0xa8>)
 800b6c6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800b6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b734 <LmHandlerInit+0x94>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a1f      	ldr	r2, [pc, #124]	@ (800b74c <LmHandlerInit+0xac>)
 800b6d0:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800b6d2:	4b18      	ldr	r3, [pc, #96]	@ (800b734 <LmHandlerInit+0x94>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	4a1c      	ldr	r2, [pc, #112]	@ (800b74c <LmHandlerInit+0xac>)
 800b6da:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800b6dc:	4b15      	ldr	r3, [pc, #84]	@ (800b734 <LmHandlerInit+0x94>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	689b      	ldr	r3, [r3, #8]
 800b6e2:	4a1a      	ldr	r2, [pc, #104]	@ (800b74c <LmHandlerInit+0xac>)
 800b6e4:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800b6e6:	4b13      	ldr	r3, [pc, #76]	@ (800b734 <LmHandlerInit+0x94>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	4a17      	ldr	r2, [pc, #92]	@ (800b74c <LmHandlerInit+0xac>)
 800b6ee:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800b6f0:	4b16      	ldr	r3, [pc, #88]	@ (800b74c <LmHandlerInit+0xac>)
 800b6f2:	4a17      	ldr	r2, [pc, #92]	@ (800b750 <LmHandlerInit+0xb0>)
 800b6f4:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800b6f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b734 <LmHandlerInit+0x94>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	4a13      	ldr	r2, [pc, #76]	@ (800b74c <LmHandlerInit+0xac>)
 800b6fe:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800b700:	4914      	ldr	r1, [pc, #80]	@ (800b754 <LmHandlerInit+0xb4>)
 800b702:	2000      	movs	r0, #0
 800b704:	f000 fd9e 	bl	800c244 <LmHandlerPackageRegister>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d002      	beq.n	800b714 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800b70e:	f04f 33ff 	mov.w	r3, #4294967295
 800b712:	e00a      	b.n	800b72a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800b714:	463b      	mov	r3, r7
 800b716:	4618      	mov	r0, r3
 800b718:	f001 fae4 	bl	800cce4 <LmhpPackagesRegistrationInit>
 800b71c:	4603      	mov	r3, r0
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d002      	beq.n	800b728 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800b722:	f04f 33ff 	mov.w	r3, #4294967295
 800b726:	e000      	b.n	800b72a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800b728:	2300      	movs	r3, #0
}
 800b72a:	4618      	mov	r0, r3
 800b72c:	3708      	adds	r7, #8
 800b72e:	46bd      	mov	sp, r7
 800b730:	bd80      	pop	{r7, pc}
 800b732:	bf00      	nop
 800b734:	200003ac 	.word	0x200003ac
 800b738:	200003b0 	.word	0x200003b0
 800b73c:	0800bf09 	.word	0x0800bf09
 800b740:	0800bf7d 	.word	0x0800bf7d
 800b744:	0800c05d 	.word	0x0800c05d
 800b748:	0800c1b1 	.word	0x0800c1b1
 800b74c:	200003c0 	.word	0x200003c0
 800b750:	0800c65d 	.word	0x0800c65d
 800b754:	20000074 	.word	0x20000074

0800b758 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b092      	sub	sp, #72	@ 0x48
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800b760:	2218      	movs	r2, #24
 800b762:	6879      	ldr	r1, [r7, #4]
 800b764:	4883      	ldr	r0, [pc, #524]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b766:	f00c f850 	bl	801780a <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800b76a:	f7fe fa89 	bl	8009c80 <LoraInfo_GetPtr>
 800b76e:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800b770:	4b80      	ldr	r3, [pc, #512]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	461a      	mov	r2, r3
 800b776:	2301      	movs	r3, #1
 800b778:	4093      	lsls	r3, r2
 800b77a:	461a      	mov	r2, r3
 800b77c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	4013      	ands	r3, r2
 800b782:	2b00      	cmp	r3, #0
 800b784:	d107      	bne.n	800b796 <LmHandlerConfigure+0x3e>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800b786:	4b7c      	ldr	r3, [pc, #496]	@ (800b978 <LmHandlerConfigure+0x220>)
 800b788:	2201      	movs	r2, #1
 800b78a:	2100      	movs	r1, #0
 800b78c:	2000      	movs	r0, #0
 800b78e:	f010 fbe5 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800b792:	bf00      	nop
 800b794:	e7fd      	b.n	800b792 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800b796:	4b77      	ldr	r3, [pc, #476]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b798:	781b      	ldrb	r3, [r3, #0]
 800b79a:	461a      	mov	r2, r3
 800b79c:	4977      	ldr	r1, [pc, #476]	@ (800b97c <LmHandlerConfigure+0x224>)
 800b79e:	4878      	ldr	r0, [pc, #480]	@ (800b980 <LmHandlerConfigure+0x228>)
 800b7a0:	f004 fd28 	bl	80101f4 <LoRaMacInitialization>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d002      	beq.n	800b7b0 <LmHandlerConfigure+0x58>
    {
        return LORAMAC_HANDLER_ERROR;
 800b7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ae:	e0dc      	b.n	800b96a <LmHandlerConfigure+0x212>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 800b7b0:	2326      	movs	r3, #38	@ 0x26
 800b7b2:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b7b4:	f107 0318 	add.w	r3, r7, #24
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f005 fa79 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
 800b7be:	4603      	mov	r3, r0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d103      	bne.n	800b7cc <LmHandlerConfigure+0x74>
    {
        CtxRestoreDone = true;
 800b7c4:	4b6f      	ldr	r3, [pc, #444]	@ (800b984 <LmHandlerConfigure+0x22c>)
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	701a      	strb	r2, [r3, #0]
 800b7ca:	e02a      	b.n	800b822 <LmHandlerConfigure+0xca>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800b7cc:	2327      	movs	r3, #39	@ 0x27
 800b7ce:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800b7d0:	4b6d      	ldr	r3, [pc, #436]	@ (800b988 <LmHandlerConfigure+0x230>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00c      	beq.n	800b7f4 <LmHandlerConfigure+0x9c>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b7da:	f107 0318 	add.w	r3, r7, #24
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f005 f8ae 	bl	8010940 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800b7e4:	4b68      	ldr	r3, [pc, #416]	@ (800b988 <LmHandlerConfigure+0x230>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	69fa      	ldr	r2, [r7, #28]
 800b7ec:	f44f 61ef 	mov.w	r1, #1912	@ 0x778
 800b7f0:	4610      	mov	r0, r2
 800b7f2:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 800b7f4:	2326      	movs	r3, #38	@ 0x26
 800b7f6:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f005 fa57 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d10c      	bne.n	800b822 <LmHandlerConfigure+0xca>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800b808:	2301      	movs	r3, #1
 800b80a:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800b80c:	f107 0318 	add.w	r3, r7, #24
 800b810:	4618      	mov	r0, r3
 800b812:	f005 f895 	bl	8010940 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800b816:	7f3b      	ldrb	r3, [r7, #28]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <LmHandlerConfigure+0xca>
            {
                CtxRestoreDone = true;
 800b81c:	4b59      	ldr	r3, [pc, #356]	@ (800b984 <LmHandlerConfigure+0x22c>)
 800b81e:	2201      	movs	r2, #1
 800b820:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800b822:	4b58      	ldr	r3, [pc, #352]	@ (800b984 <LmHandlerConfigure+0x22c>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d022      	beq.n	800b870 <LmHandlerConfigure+0x118>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800b82a:	4b57      	ldr	r3, [pc, #348]	@ (800b988 <LmHandlerConfigure+0x230>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d004      	beq.n	800b83e <LmHandlerConfigure+0xe6>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800b834:	4b54      	ldr	r3, [pc, #336]	@ (800b988 <LmHandlerConfigure+0x230>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	69db      	ldr	r3, [r3, #28]
 800b83a:	2000      	movs	r0, #0
 800b83c:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800b83e:	2326      	movs	r3, #38	@ 0x26
 800b840:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800b842:	f107 0318 	add.w	r3, r7, #24
 800b846:	4618      	mov	r0, r3
 800b848:	f005 f87a 	bl	8010940 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800b850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b852:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800b856:	4b47      	ldr	r3, [pc, #284]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b858:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800b85a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b85c:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800b860:	4b44      	ldr	r3, [pc, #272]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b862:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800b864:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b866:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800b86a:	4b42      	ldr	r3, [pc, #264]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b86c:	709a      	strb	r2, [r3, #2]
 800b86e:	e008      	b.n	800b882 <LmHandlerConfigure+0x12a>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800b870:	2305      	movs	r3, #5
 800b872:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800b874:	2300      	movs	r3, #0
 800b876:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800b878:	f107 0318 	add.w	r3, r7, #24
 800b87c:	4618      	mov	r0, r3
 800b87e:	f005 fa17 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800b882:	4b3e      	ldr	r3, [pc, #248]	@ (800b97c <LmHandlerConfigure+0x224>)
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	4a3d      	ldr	r2, [pc, #244]	@ (800b97c <LmHandlerConfigure+0x224>)
 800b888:	68d2      	ldr	r2, [r2, #12]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7ff fbcb 	bl	800b028 <SecureElementInitMcuID>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d002      	beq.n	800b89e <LmHandlerConfigure+0x146>
    {
        return LORAMAC_HANDLER_ERROR;
 800b898:	f04f 33ff 	mov.w	r3, #4294967295
 800b89c:	e065      	b.n	800b96a <LmHandlerConfigure+0x212>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800b89e:	2306      	movs	r3, #6
 800b8a0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b8a2:	f107 0318 	add.w	r3, r7, #24
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f005 f84a 	bl	8010940 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
 800b8ae:	4a37      	ldr	r2, [pc, #220]	@ (800b98c <LmHandlerConfigure+0x234>)
 800b8b0:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8b2:	f107 0318 	add.w	r3, r7, #24
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f005 f9fa 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800b8bc:	2302      	movs	r3, #2
 800b8be:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800b8c0:	4b32      	ldr	r3, [pc, #200]	@ (800b98c <LmHandlerConfigure+0x234>)
 800b8c2:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b8c4:	f107 0318 	add.w	r3, r7, #24
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f005 f839 	bl	8010940 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800b8ce:	2303      	movs	r3, #3
 800b8d0:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800b8d2:	4b2f      	ldr	r3, [pc, #188]	@ (800b990 <LmHandlerConfigure+0x238>)
 800b8d4:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800b8d6:	f107 0318 	add.w	r3, r7, #24
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f005 f830 	bl	8010940 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800b8e0:	f7ff fc22 	bl	800b128 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800b8e4:	230f      	movs	r3, #15
 800b8e6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8ec:	f107 0318 	add.w	r3, r7, #24
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f005 f9dd 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800b8f6:	2310      	movs	r3, #16
 800b8f8:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b8fe:	f107 0318 	add.w	r3, r7, #24
 800b902:	4618      	mov	r0, r3
 800b904:	f005 f9d4 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800b908:	2304      	movs	r3, #4
 800b90a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800b90c:	4b19      	ldr	r3, [pc, #100]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b90e:	789b      	ldrb	r3, [r3, #2]
 800b910:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b912:	f107 0318 	add.w	r3, r7, #24
 800b916:	4618      	mov	r0, r3
 800b918:	f005 f9ca 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800b91c:	2339      	movs	r3, #57	@ 0x39
 800b91e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800b920:	4b14      	ldr	r3, [pc, #80]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800b926:	f107 0318 	add.w	r3, r7, #24
 800b92a:	4618      	mov	r0, r3
 800b92c:	f005 f9c0 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b930:	230f      	movs	r3, #15
 800b932:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800b934:	4b0f      	ldr	r3, [pc, #60]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	f107 0210 	add.w	r2, r7, #16
 800b93c:	4611      	mov	r1, r2
 800b93e:	4618      	mov	r0, r3
 800b940:	f008 f891 	bl	8013a66 <RegionGetPhyParam>
 800b944:	4603      	mov	r3, r0
 800b946:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bf14      	ite	ne
 800b94e:	2301      	movne	r3, #1
 800b950:	2300      	moveq	r3, #0
 800b952:	b2da      	uxtb	r2, r3
 800b954:	4b07      	ldr	r3, [pc, #28]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b956:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800b958:	2014      	movs	r0, #20
 800b95a:	f000 fabd 	bl	800bed8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800b95e:	4b05      	ldr	r3, [pc, #20]	@ (800b974 <LmHandlerConfigure+0x21c>)
 800b960:	79db      	ldrb	r3, [r3, #7]
 800b962:	4618      	mov	r0, r3
 800b964:	f005 ff80 	bl	8011868 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3748      	adds	r7, #72	@ 0x48
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}
 800b972:	bf00      	nop
 800b974:	20000394 	.word	0x20000394
 800b978:	0801c880 	.word	0x0801c880
 800b97c:	200003c0 	.word	0x200003c0
 800b980:	200003b0 	.word	0x200003b0
 800b984:	200004ce 	.word	0x200004ce
 800b988:	200003ac 	.word	0x200003ac
 800b98c:	20000368 	.word	0x20000368
 800b990:	20000370 	.word	0x20000370

0800b994 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800b998:	f002 fb84 	bl	800e0a4 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800b99c:	f000 fd90 	bl	800c4c0 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800b9a0:	f000 fd60 	bl	800c464 <LmHandlerPackageIsTxPending>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800b9a8:	bd80      	pop	{r7, pc}
	...

0800b9ac <LmHandlerJoin>:
{
    return DutyCycleWaitTime;
}

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b092      	sub	sp, #72	@ 0x48
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	460a      	mov	r2, r1
 800b9b6:	71fb      	strb	r3, [r7, #7]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800b9c2:	4b47      	ldr	r3, [pc, #284]	@ (800bae0 <LmHandlerJoin+0x134>)
 800b9c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800b9ce:	4b44      	ldr	r3, [pc, #272]	@ (800bae0 <LmHandlerJoin+0x134>)
 800b9d0:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800b9d4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800b9d8:	79fb      	ldrb	r3, [r7, #7]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d110      	bne.n	800ba00 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800b9e4:	4b3f      	ldr	r3, [pc, #252]	@ (800bae4 <LmHandlerJoin+0x138>)
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800b9ea:	4a3e      	ldr	r2, [pc, #248]	@ (800bae4 <LmHandlerJoin+0x138>)
 800b9ec:	79bb      	ldrb	r3, [r7, #6]
 800b9ee:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800b9f0:	f004 feb2 	bl	8010758 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800b9f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f005 fced 	bl	80113d8 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800b9fe:	e06b      	b.n	800bad8 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800ba00:	2301      	movs	r3, #1
 800ba02:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800ba06:	4b37      	ldr	r3, [pc, #220]	@ (800bae4 <LmHandlerJoin+0x138>)
 800ba08:	2201      	movs	r2, #1
 800ba0a:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800ba0c:	4b34      	ldr	r3, [pc, #208]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba0e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800ba12:	4b34      	ldr	r3, [pc, #208]	@ (800bae4 <LmHandlerJoin+0x138>)
 800ba14:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800ba16:	4b32      	ldr	r3, [pc, #200]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba18:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800ba1c:	4b31      	ldr	r3, [pc, #196]	@ (800bae4 <LmHandlerJoin+0x138>)
 800ba1e:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800ba20:	4b30      	ldr	r3, [pc, #192]	@ (800bae4 <LmHandlerJoin+0x138>)
 800ba22:	2200      	movs	r2, #0
 800ba24:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800ba26:	4a2f      	ldr	r2, [pc, #188]	@ (800bae4 <LmHandlerJoin+0x138>)
 800ba28:	79bb      	ldrb	r3, [r7, #6]
 800ba2a:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800ba2c:	4b2e      	ldr	r3, [pc, #184]	@ (800bae8 <LmHandlerJoin+0x13c>)
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	f083 0301 	eor.w	r3, r3, #1
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d034      	beq.n	800baa4 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800ba3a:	231e      	movs	r3, #30
 800ba3c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800ba3e:	4b28      	ldr	r3, [pc, #160]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba40:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ba44:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ba46:	f107 030c 	add.w	r3, r7, #12
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f005 f930 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800ba50:	231f      	movs	r3, #31
 800ba52:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800ba54:	4b22      	ldr	r3, [pc, #136]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba56:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ba5a:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ba5c:	f107 030c 	add.w	r3, r7, #12
 800ba60:	4618      	mov	r0, r3
 800ba62:	f005 f925 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800ba66:	2321      	movs	r3, #33	@ 0x21
 800ba68:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800ba6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba6c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ba70:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ba72:	f107 030c 	add.w	r3, r7, #12
 800ba76:	4618      	mov	r0, r3
 800ba78:	f005 f91a 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800ba7c:	2320      	movs	r3, #32
 800ba7e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800ba80:	4b17      	ldr	r3, [pc, #92]	@ (800bae0 <LmHandlerJoin+0x134>)
 800ba82:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800ba86:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ba88:	f107 030c 	add.w	r3, r7, #12
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f005 f90f 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800ba92:	2328      	movs	r3, #40	@ 0x28
 800ba94:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800ba96:	4b15      	ldr	r3, [pc, #84]	@ (800baec <LmHandlerJoin+0x140>)
 800ba98:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800ba9a:	f107 030c 	add.w	r3, r7, #12
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f005 f906 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800baa4:	f004 fe58 	bl	8010758 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800baa8:	2301      	movs	r3, #1
 800baaa:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800baac:	2301      	movs	r3, #1
 800baae:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800bab0:	f107 030c 	add.w	r3, r7, #12
 800bab4:	4618      	mov	r0, r3
 800bab6:	f005 f8fb 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800baba:	4b0d      	ldr	r3, [pc, #52]	@ (800baf0 <LmHandlerJoin+0x144>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800bac4:	4b0a      	ldr	r3, [pc, #40]	@ (800baf0 <LmHandlerJoin+0x144>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baca:	4806      	ldr	r0, [pc, #24]	@ (800bae4 <LmHandlerJoin+0x138>)
 800bacc:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800bace:	4b04      	ldr	r3, [pc, #16]	@ (800bae0 <LmHandlerJoin+0x134>)
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f930 	bl	800bd38 <LmHandlerRequestClass>
}
 800bad8:	bf00      	nop
 800bada:	3748      	adds	r7, #72	@ 0x48
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	20000394 	.word	0x20000394
 800bae4:	20000080 	.word	0x20000080
 800bae8:	200004ce 	.word	0x200004ce
 800baec:	01000300 	.word	0x01000300
 800baf0:	200003ac 	.word	0x200003ac

0800baf4 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b08c      	sub	sp, #48	@ 0x30
 800baf8:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800bafa:	2301      	movs	r3, #1
 800bafc:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800bafe:	1d3b      	adds	r3, r7, #4
 800bb00:	4618      	mov	r0, r3
 800bb02:	f004 ff1d 	bl	8010940 <LoRaMacMibGetRequestConfirm>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800bb0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d106      	bne.n	800bb22 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800bb14:	7a3b      	ldrb	r3, [r7, #8]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d101      	bne.n	800bb1e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	e002      	b.n	800bb24 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e000      	b.n	800bb24 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800bb22:	2300      	movs	r3, #0
    }
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	3730      	adds	r7, #48	@ 0x30
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd80      	pop	{r7, pc}

0800bb2c <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b08a      	sub	sp, #40	@ 0x28
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
 800bb34:	460b      	mov	r3, r1
 800bb36:	70fb      	strb	r3, [r7, #3]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800bb3c:	23ff      	movs	r3, #255	@ 0xff
 800bb3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800bb42:	f002 f83b 	bl	800dbbc <LoRaMacIsBusy>
 800bb46:	4603      	mov	r3, r0
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bb4c:	f06f 0301 	mvn.w	r3, #1
 800bb50:	e0bc      	b.n	800bccc <LmHandlerSend+0x1a0>
    }

    if( LoRaMacIsStopped() == true )
 800bb52:	f002 f84f 	bl	800dbf4 <LoRaMacIsStopped>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bb5c:	f06f 0302 	mvn.w	r3, #2
 800bb60:	e0b4      	b.n	800bccc <LmHandlerSend+0x1a0>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800bb62:	f7ff ffc7 	bl	800baf4 <LmHandlerJoinStatus>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d00a      	beq.n	800bb82 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800bb6c:	4b59      	ldr	r3, [pc, #356]	@ (800bcd4 <LmHandlerSend+0x1a8>)
 800bb6e:	79db      	ldrb	r3, [r3, #7]
 800bb70:	4a58      	ldr	r2, [pc, #352]	@ (800bcd4 <LmHandlerSend+0x1a8>)
 800bb72:	7a12      	ldrb	r2, [r2, #8]
 800bb74:	4611      	mov	r1, r2
 800bb76:	4618      	mov	r0, r3
 800bb78:	f7ff ff18 	bl	800b9ac <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bb7c:	f06f 0302 	mvn.w	r3, #2
 800bb80:	e0a4      	b.n	800bccc <LmHandlerSend+0x1a0>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800bb82:	4b55      	ldr	r3, [pc, #340]	@ (800bcd8 <LmHandlerSend+0x1ac>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	4798      	blx	r3
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00d      	beq.n	800bbac <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	781a      	ldrb	r2, [r3, #0]
 800bb94:	4b50      	ldr	r3, [pc, #320]	@ (800bcd8 <LmHandlerSend+0x1ac>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d006      	beq.n	800bbac <LmHandlerSend+0x80>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800bba6:	f06f 0303 	mvn.w	r3, #3
 800bbaa:	e08f      	b.n	800bccc <LmHandlerSend+0x1a0>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800bbac:	4a4b      	ldr	r2, [pc, #300]	@ (800bcdc <LmHandlerSend+0x1b0>)
 800bbae:	78fb      	ldrb	r3, [r7, #3]
 800bbb0:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800bbb2:	78fb      	ldrb	r3, [r7, #3]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	bf14      	ite	ne
 800bbb8:	2301      	movne	r3, #1
 800bbba:	2300      	moveq	r3, #0
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800bbc0:	4b47      	ldr	r3, [pc, #284]	@ (800bce0 <LmHandlerSend+0x1b4>)
 800bbc2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800bbc6:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	785b      	ldrb	r3, [r3, #1]
 800bbcc:	f107 020c 	add.w	r2, r7, #12
 800bbd0:	4611      	mov	r1, r2
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f004 fe2e 	bl	8010834 <LoRaMacQueryTxPossible>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d009      	beq.n	800bbf2 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800bbea:	23f9      	movs	r3, #249	@ 0xf9
 800bbec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bbf0:	e008      	b.n	800bc04 <LmHandlerSend+0xd8>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	785b      	ldrb	r3, [r3, #1]
 800bbfc:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800bc04:	4b35      	ldr	r3, [pc, #212]	@ (800bcdc <LmHandlerSend+0x1b0>)
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	3310      	adds	r3, #16
 800bc0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bc0e:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800bc12:	4b33      	ldr	r3, [pc, #204]	@ (800bce0 <LmHandlerSend+0x1b4>)
 800bc14:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800bc18:	4b30      	ldr	r3, [pc, #192]	@ (800bcdc <LmHandlerSend+0x1b0>)
 800bc1a:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800bc1c:	78ba      	ldrb	r2, [r7, #2]
 800bc1e:	f107 0310 	add.w	r3, r7, #16
 800bc22:	4611      	mov	r1, r2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f005 fd29 	bl	801167c <LoRaMacMcpsRequest>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	4a2c      	ldr	r2, [pc, #176]	@ (800bce4 <LmHandlerSend+0x1b8>)
 800bc34:	6013      	str	r3, [r2, #0]

    switch( status )
 800bc36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bc3a:	2b11      	cmp	r3, #17
 800bc3c:	d83f      	bhi.n	800bcbe <LmHandlerSend+0x192>
 800bc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800bc44 <LmHandlerSend+0x118>)
 800bc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc44:	0800bc8d 	.word	0x0800bc8d
 800bc48:	0800bc9f 	.word	0x0800bc9f
 800bc4c:	0800bcbf 	.word	0x0800bcbf
 800bc50:	0800bcbf 	.word	0x0800bcbf
 800bc54:	0800bcbf 	.word	0x0800bcbf
 800bc58:	0800bcbf 	.word	0x0800bcbf
 800bc5c:	0800bcbf 	.word	0x0800bcbf
 800bc60:	0800bca7 	.word	0x0800bca7
 800bc64:	0800bcbf 	.word	0x0800bcbf
 800bc68:	0800bcbf 	.word	0x0800bcbf
 800bc6c:	0800bcbf 	.word	0x0800bcbf
 800bc70:	0800bcb7 	.word	0x0800bcb7
 800bc74:	0800bcbf 	.word	0x0800bcbf
 800bc78:	0800bcbf 	.word	0x0800bcbf
 800bc7c:	0800bc9f 	.word	0x0800bc9f
 800bc80:	0800bc9f 	.word	0x0800bc9f
 800bc84:	0800bc9f 	.word	0x0800bc9f
 800bc88:	0800bcaf 	.word	0x0800bcaf
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800bc8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bc90:	f113 0f07 	cmn.w	r3, #7
 800bc94:	d017      	beq.n	800bcc6 <LmHandlerSend+0x19a>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800bc96:	2300      	movs	r3, #0
 800bc98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800bc9c:	e013      	b.n	800bcc6 <LmHandlerSend+0x19a>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800bc9e:	23fe      	movs	r3, #254	@ 0xfe
 800bca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bca4:	e010      	b.n	800bcc8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bca6:	23fd      	movs	r3, #253	@ 0xfd
 800bca8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bcac:	e00c      	b.n	800bcc8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800bcae:	23fb      	movs	r3, #251	@ 0xfb
 800bcb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bcb4:	e008      	b.n	800bcc8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800bcb6:	23fa      	movs	r3, #250	@ 0xfa
 800bcb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bcbc:	e004      	b.n	800bcc8 <LmHandlerSend+0x19c>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800bcbe:	23ff      	movs	r3, #255	@ 0xff
 800bcc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800bcc4:	e000      	b.n	800bcc8 <LmHandlerSend+0x19c>
            break;
 800bcc6:	bf00      	nop
    }

    return lmhStatus;
 800bcc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	3728      	adds	r7, #40	@ 0x28
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	20000080 	.word	0x20000080
 800bcd8:	20000380 	.word	0x20000380
 800bcdc:	2000008c 	.word	0x2000008c
 800bce0:	20000394 	.word	0x20000394
 800bce4:	200003d8 	.word	0x200003d8

0800bce8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800bcee:	230a      	movs	r3, #10
 800bcf0:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f005 fb6f 	bl	80113d8 <LoRaMacMlmeRequest>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	4a06      	ldr	r2, [pc, #24]	@ (800bd1c <LmHandlerDeviceTimeReq+0x34>)
 800bd02:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d101      	bne.n	800bd0e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e001      	b.n	800bd12 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800bd0e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200003d8 	.word	0x200003d8

0800bd20 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800bd20:	b480      	push	{r7}
 800bd22:	b083      	sub	sp, #12
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800bd2a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bc80      	pop	{r7}
 800bd36:	4770      	bx	lr

0800bd38 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b08e      	sub	sp, #56	@ 0x38
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	4603      	mov	r3, r0
 800bd40:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800bd42:	2300      	movs	r3, #0
 800bd44:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800bd48:	f001 ff38 	bl	800dbbc <LoRaMacIsBusy>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d002      	beq.n	800bd58 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800bd52:	f06f 0301 	mvn.w	r3, #1
 800bd56:	e071      	b.n	800be3c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800bd58:	f7ff fecc 	bl	800baf4 <LmHandlerJoinStatus>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d002      	beq.n	800bd68 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800bd62:	f06f 0302 	mvn.w	r3, #2
 800bd66:	e069      	b.n	800be3c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bd6c:	f107 030c 	add.w	r3, r7, #12
 800bd70:	4618      	mov	r0, r3
 800bd72:	f004 fde5 	bl	8010940 <LoRaMacMibGetRequestConfirm>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d002      	beq.n	800bd82 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800bd7c:	f04f 33ff 	mov.w	r3, #4294967295
 800bd80:	e05c      	b.n	800be3c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800bd82:	7c3b      	ldrb	r3, [r7, #16]
 800bd84:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800bd88:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d052      	beq.n	800be38 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d028      	beq.n	800bdea <LmHandlerRequestClass+0xb2>
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	dc48      	bgt.n	800be2e <LmHandlerRequestClass+0xf6>
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d002      	beq.n	800bda6 <LmHandlerRequestClass+0x6e>
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d01e      	beq.n	800bde2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800bda4:	e043      	b.n	800be2e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800bda6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d041      	beq.n	800be32 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bdb2:	f107 030c 	add.w	r3, r7, #12
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f004 ff7a 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10b      	bne.n	800bdda <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800bdc2:	4b20      	ldr	r3, [pc, #128]	@ (800be44 <LmHandlerRequestClass+0x10c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d032      	beq.n	800be32 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800bdcc:	4b1d      	ldr	r3, [pc, #116]	@ (800be44 <LmHandlerRequestClass+0x10c>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdd2:	79fa      	ldrb	r2, [r7, #7]
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	4798      	blx	r3
                break;
 800bdd8:	e02b      	b.n	800be32 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800bdda:	23ff      	movs	r3, #255	@ 0xff
 800bddc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bde0:	e027      	b.n	800be32 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800bde2:	23ff      	movs	r3, #255	@ 0xff
 800bde4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bde8:	e026      	b.n	800be38 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800bdea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800bdf2:	23ff      	movs	r3, #255	@ 0xff
 800bdf4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800bdf8:	e01d      	b.n	800be36 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800bdfa:	79fb      	ldrb	r3, [r7, #7]
 800bdfc:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800bdfe:	f107 030c 	add.w	r3, r7, #12
 800be02:	4618      	mov	r0, r3
 800be04:	f004 ff54 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10b      	bne.n	800be26 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800be0e:	4b0d      	ldr	r3, [pc, #52]	@ (800be44 <LmHandlerRequestClass+0x10c>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00e      	beq.n	800be36 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800be18:	4b0a      	ldr	r3, [pc, #40]	@ (800be44 <LmHandlerRequestClass+0x10c>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be1e:	79fa      	ldrb	r2, [r7, #7]
 800be20:	4610      	mov	r0, r2
 800be22:	4798      	blx	r3
                break;
 800be24:	e007      	b.n	800be36 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800be26:	23ff      	movs	r3, #255	@ 0xff
 800be28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800be2c:	e003      	b.n	800be36 <LmHandlerRequestClass+0xfe>
                break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <LmHandlerRequestClass+0x100>
                break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <LmHandlerRequestClass+0x100>
                break;
 800be36:	bf00      	nop
        }
    }
    return errorStatus;
 800be38:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3738      	adds	r7, #56	@ 0x38
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	200003ac 	.word	0x200003ac

0800be48 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08c      	sub	sp, #48	@ 0x30
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d102      	bne.n	800be5c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800be56:	f04f 33ff 	mov.w	r3, #4294967295
 800be5a:	e010      	b.n	800be7e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800be5c:	2300      	movs	r3, #0
 800be5e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800be60:	f107 0308 	add.w	r3, r7, #8
 800be64:	4618      	mov	r0, r3
 800be66:	f004 fd6b 	bl	8010940 <LoRaMacMibGetRequestConfirm>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800be70:	f04f 33ff 	mov.w	r3, #4294967295
 800be74:	e003      	b.n	800be7e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800be76:	7b3a      	ldrb	r2, [r7, #12]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800be7c:	2300      	movs	r3, #0
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3730      	adds	r7, #48	@ 0x30
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
	...

0800be88 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b08c      	sub	sp, #48	@ 0x30
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d102      	bne.n	800be9c <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	e016      	b.n	800beca <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800be9c:	231f      	movs	r3, #31
 800be9e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800bea0:	f107 0308 	add.w	r3, r7, #8
 800bea4:	4618      	mov	r0, r3
 800bea6:	f004 fd4b 	bl	8010940 <LoRaMacMibGetRequestConfirm>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800beb0:	f04f 33ff 	mov.w	r3, #4294967295
 800beb4:	e009      	b.n	800beca <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800beb6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f993 2000 	ldrsb.w	r2, [r3]
 800bec4:	4b03      	ldr	r3, [pc, #12]	@ (800bed4 <LmHandlerGetTxDatarate+0x4c>)
 800bec6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3730      	adds	r7, #48	@ 0x30
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	20000394 	.word	0x20000394

0800bed8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b08c      	sub	sp, #48	@ 0x30
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800bee0:	2322      	movs	r3, #34	@ 0x22
 800bee2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800bee8:	f107 0308 	add.w	r3, r7, #8
 800beec:	4618      	mov	r0, r3
 800beee:	f004 fedf 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d002      	beq.n	800befe <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800bef8:	f04f 33ff 	mov.w	r3, #4294967295
 800befc:	e000      	b.n	800bf00 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3730      	adds	r7, #48	@ 0x30
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800bf10:	4b18      	ldr	r3, [pc, #96]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	785a      	ldrb	r2, [r3, #1]
 800bf1a:	4b16      	ldr	r3, [pc, #88]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf1c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	789b      	ldrb	r3, [r3, #2]
 800bf22:	b25a      	sxtb	r2, r3
 800bf24:	4b13      	ldr	r3, [pc, #76]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf26:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	68db      	ldr	r3, [r3, #12]
 800bf2c:	4a11      	ldr	r2, [pc, #68]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf2e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800bf36:	4b0f      	ldr	r3, [pc, #60]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf38:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	691b      	ldr	r3, [r3, #16]
 800bf3e:	b2da      	uxtb	r2, r3
 800bf40:	4b0c      	ldr	r3, [pc, #48]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf42:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	791b      	ldrb	r3, [r3, #4]
 800bf48:	461a      	mov	r2, r3
 800bf4a:	4b0a      	ldr	r3, [pc, #40]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf4c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800bf4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <McpsConfirm+0x70>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d004      	beq.n	800bf62 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800bf58:	4b07      	ldr	r3, [pc, #28]	@ (800bf78 <McpsConfirm+0x70>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf5e:	4805      	ldr	r0, [pc, #20]	@ (800bf74 <McpsConfirm+0x6c>)
 800bf60:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800bf62:	6879      	ldr	r1, [r7, #4]
 800bf64:	2000      	movs	r0, #0
 800bf66:	f000 f9eb 	bl	800c340 <LmHandlerPackagesNotify>
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	2000008c 	.word	0x2000008c
 800bf78:	200003ac 	.word	0x200003ac

0800bf7c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b088      	sub	sp, #32
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800bf86:	2300      	movs	r3, #0
 800bf88:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800bf8a:	4b32      	ldr	r3, [pc, #200]	@ (800c054 <McpsIndication+0xd8>)
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	785a      	ldrb	r2, [r3, #1]
 800bf94:	4b2f      	ldr	r3, [pc, #188]	@ (800c054 <McpsIndication+0xd8>)
 800bf96:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800bf98:	4b2e      	ldr	r3, [pc, #184]	@ (800c054 <McpsIndication+0xd8>)
 800bf9a:	785b      	ldrb	r3, [r3, #1]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d155      	bne.n	800c04c <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	791b      	ldrb	r3, [r3, #4]
 800bfa4:	b25a      	sxtb	r2, r3
 800bfa6:	4b2b      	ldr	r3, [pc, #172]	@ (800c054 <McpsIndication+0xd8>)
 800bfa8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bfb0:	b25a      	sxtb	r2, r3
 800bfb2:	4b28      	ldr	r3, [pc, #160]	@ (800c054 <McpsIndication+0xd8>)
 800bfb4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800bfbc:	4b25      	ldr	r3, [pc, #148]	@ (800c054 <McpsIndication+0xd8>)
 800bfbe:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	78da      	ldrb	r2, [r3, #3]
 800bfc4:	4b23      	ldr	r3, [pc, #140]	@ (800c054 <McpsIndication+0xd8>)
 800bfc6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	4a21      	ldr	r2, [pc, #132]	@ (800c054 <McpsIndication+0xd8>)
 800bfce:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	78db      	ldrb	r3, [r3, #3]
 800bfd4:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	7b1b      	ldrb	r3, [r3, #12]
 800bfda:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800bfe2:	4b1d      	ldr	r3, [pc, #116]	@ (800c058 <McpsIndication+0xdc>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d007      	beq.n	800bffc <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800bfec:	4b1a      	ldr	r3, [pc, #104]	@ (800c058 <McpsIndication+0xdc>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff2:	f107 0218 	add.w	r2, r7, #24
 800bff6:	4917      	ldr	r1, [pc, #92]	@ (800c054 <McpsIndication+0xd8>)
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800bffc:	4b16      	ldr	r3, [pc, #88]	@ (800c058 <McpsIndication+0xdc>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <McpsIndication+0x9a>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7e1b      	ldrb	r3, [r3, #24]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c00e:	4b12      	ldr	r3, [pc, #72]	@ (800c058 <McpsIndication+0xdc>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c014:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	2001      	movs	r0, #1
 800c01a:	f000 f991 	bl	800c340 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c01e:	f107 0317 	add.w	r3, r7, #23
 800c022:	4618      	mov	r0, r3
 800c024:	f7ff ff10 	bl	800be48 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	795b      	ldrb	r3, [r3, #5]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00e      	beq.n	800c04e <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800c030:	2300      	movs	r3, #0
 800c032:	733b      	strb	r3, [r7, #12]
 800c034:	2300      	movs	r3, #0
 800c036:	737b      	strb	r3, [r7, #13]
 800c038:	2300      	movs	r3, #0
 800c03a:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800c03c:	f107 030c 	add.w	r3, r7, #12
 800c040:	2201      	movs	r2, #1
 800c042:	2100      	movs	r1, #0
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fd71 	bl	800bb2c <LmHandlerSend>
 800c04a:	e000      	b.n	800c04e <McpsIndication+0xd2>
        return;
 800c04c:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800c04e:	3720      	adds	r7, #32
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	200000a8 	.word	0x200000a8
 800c058:	200003ac 	.word	0x200003ac

0800c05c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b08c      	sub	sp, #48	@ 0x30
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c064:	4b4a      	ldr	r3, [pc, #296]	@ (800c190 <MlmeConfirm+0x134>)
 800c066:	2200      	movs	r2, #0
 800c068:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	785a      	ldrb	r2, [r3, #1]
 800c06e:	4b48      	ldr	r3, [pc, #288]	@ (800c190 <MlmeConfirm+0x134>)
 800c070:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800c072:	4b48      	ldr	r3, [pc, #288]	@ (800c194 <MlmeConfirm+0x138>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d004      	beq.n	800c086 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800c07c:	4b45      	ldr	r3, [pc, #276]	@ (800c194 <MlmeConfirm+0x138>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c082:	4843      	ldr	r0, [pc, #268]	@ (800c190 <MlmeConfirm+0x134>)
 800c084:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	2002      	movs	r0, #2
 800c08a:	f000 f959 	bl	800c340 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	3b01      	subs	r3, #1
 800c094:	2b0c      	cmp	r3, #12
 800c096:	d874      	bhi.n	800c182 <MlmeConfirm+0x126>
 800c098:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a0 <MlmeConfirm+0x44>)
 800c09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09e:	bf00      	nop
 800c0a0:	0800c0d5 	.word	0x0800c0d5
 800c0a4:	0800c183 	.word	0x0800c183
 800c0a8:	0800c183 	.word	0x0800c183
 800c0ac:	0800c183 	.word	0x0800c183
 800c0b0:	0800c151 	.word	0x0800c151
 800c0b4:	0800c183 	.word	0x0800c183
 800c0b8:	0800c183 	.word	0x0800c183
 800c0bc:	0800c183 	.word	0x0800c183
 800c0c0:	0800c183 	.word	0x0800c183
 800c0c4:	0800c183 	.word	0x0800c183
 800c0c8:	0800c183 	.word	0x0800c183
 800c0cc:	0800c169 	.word	0x0800c169
 800c0d0:	0800c183 	.word	0x0800c183
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800c0d4:	2306      	movs	r3, #6
 800c0d6:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800c0d8:	f107 0308 	add.w	r3, r7, #8
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f004 fc2f 	bl	8010940 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800c0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800c198 <MlmeConfirm+0x13c>)
 800c0e4:	79db      	ldrb	r3, [r3, #7]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	4611      	mov	r1, r2
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f7ff fa9c 	bl	800b628 <SecureElementSetDevAddr>
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	4a28      	ldr	r2, [pc, #160]	@ (800c19c <MlmeConfirm+0x140>)
 800c0fa:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c0fc:	4828      	ldr	r0, [pc, #160]	@ (800c1a0 <MlmeConfirm+0x144>)
 800c0fe:	f7ff fec3 	bl	800be88 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800c102:	4828      	ldr	r0, [pc, #160]	@ (800c1a4 <MlmeConfirm+0x148>)
 800c104:	f000 fa2a 	bl	800c55c <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c108:	4b21      	ldr	r3, [pc, #132]	@ (800c190 <MlmeConfirm+0x134>)
 800c10a:	785b      	ldrb	r3, [r3, #1]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d108      	bne.n	800c122 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c110:	4b21      	ldr	r3, [pc, #132]	@ (800c198 <MlmeConfirm+0x13c>)
 800c112:	2200      	movs	r2, #0
 800c114:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800c116:	4b24      	ldr	r3, [pc, #144]	@ (800c1a8 <MlmeConfirm+0x14c>)
 800c118:	785b      	ldrb	r3, [r3, #1]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7ff fe0c 	bl	800bd38 <LmHandlerRequestClass>
 800c120:	e002      	b.n	800c128 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c122:	4b1d      	ldr	r3, [pc, #116]	@ (800c198 <MlmeConfirm+0x13c>)
 800c124:	22ff      	movs	r2, #255	@ 0xff
 800c126:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800c128:	4b1a      	ldr	r3, [pc, #104]	@ (800c194 <MlmeConfirm+0x138>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c132:	4b18      	ldr	r3, [pc, #96]	@ (800c194 <MlmeConfirm+0x138>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c138:	4817      	ldr	r0, [pc, #92]	@ (800c198 <MlmeConfirm+0x13c>)
 800c13a:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c13c:	4b14      	ldr	r3, [pc, #80]	@ (800c190 <MlmeConfirm+0x134>)
 800c13e:	785b      	ldrb	r3, [r3, #1]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d120      	bne.n	800c186 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800c144:	4b14      	ldr	r3, [pc, #80]	@ (800c198 <MlmeConfirm+0x13c>)
 800c146:	79db      	ldrb	r3, [r3, #7]
 800c148:	4618      	mov	r0, r3
 800c14a:	f7ff f801 	bl	800b150 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800c14e:	e01a      	b.n	800c186 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800c150:	4b16      	ldr	r3, [pc, #88]	@ (800c1ac <MlmeConfirm+0x150>)
 800c152:	2201      	movs	r2, #1
 800c154:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	7a1a      	ldrb	r2, [r3, #8]
 800c15a:	4b14      	ldr	r3, [pc, #80]	@ (800c1ac <MlmeConfirm+0x150>)
 800c15c:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	7a5a      	ldrb	r2, [r3, #9]
 800c162:	4b12      	ldr	r3, [pc, #72]	@ (800c1ac <MlmeConfirm+0x150>)
 800c164:	74da      	strb	r2, [r3, #19]
            }
            break;
 800c166:	e00f      	b.n	800c188 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d105      	bne.n	800c17c <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c170:	4b0d      	ldr	r3, [pc, #52]	@ (800c1a8 <MlmeConfirm+0x14c>)
 800c172:	7c1b      	ldrb	r3, [r3, #16]
 800c174:	4618      	mov	r0, r3
 800c176:	f7ff fdd3 	bl	800bd20 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800c17a:	e005      	b.n	800c188 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 800c17c:	f7ff fdb4 	bl	800bce8 <LmHandlerDeviceTimeReq>
            break;
 800c180:	e002      	b.n	800c188 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c182:	bf00      	nop
 800c184:	e000      	b.n	800c188 <MlmeConfirm+0x12c>
            break;
 800c186:	bf00      	nop
    }
}
 800c188:	bf00      	nop
 800c18a:	3730      	adds	r7, #48	@ 0x30
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}
 800c190:	2000008c 	.word	0x2000008c
 800c194:	200003ac 	.word	0x200003ac
 800c198:	20000080 	.word	0x20000080
 800c19c:	20000368 	.word	0x20000368
 800c1a0:	20000084 	.word	0x20000084
 800c1a4:	20000085 	.word	0x20000085
 800c1a8:	20000394 	.word	0x20000394
 800c1ac:	200000a8 	.word	0x200000a8

0800c1b0 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c1ba:	4b20      	ldr	r3, [pc, #128]	@ (800c23c <MlmeIndication+0x8c>)
 800c1bc:	2200      	movs	r2, #0
 800c1be:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	785a      	ldrb	r2, [r3, #1]
 800c1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800c23c <MlmeIndication+0x8c>)
 800c1c6:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	789b      	ldrb	r3, [r3, #2]
 800c1cc:	b25a      	sxtb	r2, r3
 800c1ce:	4b1b      	ldr	r3, [pc, #108]	@ (800c23c <MlmeIndication+0x8c>)
 800c1d0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1d8:	b25a      	sxtb	r2, r3
 800c1da:	4b18      	ldr	r3, [pc, #96]	@ (800c23c <MlmeIndication+0x8c>)
 800c1dc:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c1e4:	4b15      	ldr	r3, [pc, #84]	@ (800c23c <MlmeIndication+0x8c>)
 800c1e6:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	78da      	ldrb	r2, [r3, #3]
 800c1ec:	4b13      	ldr	r3, [pc, #76]	@ (800c23c <MlmeIndication+0x8c>)
 800c1ee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4a11      	ldr	r2, [pc, #68]	@ (800c23c <MlmeIndication+0x8c>)
 800c1f6:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c1f8:	4b11      	ldr	r3, [pc, #68]	@ (800c240 <MlmeIndication+0x90>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00d      	beq.n	800c21e <MlmeIndication+0x6e>
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	2b0b      	cmp	r3, #11
 800c208:	d009      	beq.n	800c21e <MlmeIndication+0x6e>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	2b0f      	cmp	r3, #15
 800c210:	d005      	beq.n	800c21e <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c212:	4b0b      	ldr	r3, [pc, #44]	@ (800c240 <MlmeIndication+0x90>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c218:	4908      	ldr	r1, [pc, #32]	@ (800c23c <MlmeIndication+0x8c>)
 800c21a:	2000      	movs	r0, #0
 800c21c:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	2003      	movs	r0, #3
 800c222:	f000 f88d 	bl	800c340 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	2b0b      	cmp	r3, #11
 800c22c:	d001      	beq.n	800c232 <MlmeIndication+0x82>
 800c22e:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800c230:	e000      	b.n	800c234 <MlmeIndication+0x84>
            break;
 800c232:	bf00      	nop
    }
}
 800c234:	bf00      	nop
 800c236:	3708      	adds	r7, #8
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	200000a8 	.word	0x200000a8
 800c240:	200003ac 	.word	0x200003ac

0800c244 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	6039      	str	r1, [r7, #0]
 800c24e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800c250:	2300      	movs	r3, #0
 800c252:	60fb      	str	r3, [r7, #12]
    switch( id )
 800c254:	79fb      	ldrb	r3, [r7, #7]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d104      	bne.n	800c264 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 800c25a:	f000 fa35 	bl	800c6c8 <LmhpCompliancePackageFactory>
 800c25e:	4603      	mov	r3, r0
 800c260:	60fb      	str	r3, [r7, #12]
                break;
 800c262:	e00d      	b.n	800c280 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800c264:	f107 020c 	add.w	r2, r7, #12
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	4611      	mov	r1, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f000 fd43 	bl	800ccf8 <LmhpPackagesRegister>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 800c278:	f04f 33ff 	mov.w	r3, #4294967295
 800c27c:	e031      	b.n	800c2e2 <LmHandlerPackageRegister+0x9e>
                }
                break;
 800c27e:	bf00      	nop
            }
    }
    if( package != NULL )
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d02b      	beq.n	800c2de <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4918      	ldr	r1, [pc, #96]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c28c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800c290:	79fb      	ldrb	r3, [r7, #7]
 800c292:	4a16      	ldr	r2, [pc, #88]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c298:	4a15      	ldr	r2, [pc, #84]	@ (800c2f0 <LmHandlerPackageRegister+0xac>)
 800c29a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 800c29c:	79fb      	ldrb	r3, [r7, #7]
 800c29e:	4a13      	ldr	r2, [pc, #76]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c2a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2a4:	4a13      	ldr	r2, [pc, #76]	@ (800c2f4 <LmHandlerPackageRegister+0xb0>)
 800c2a6:	631a      	str	r2, [r3, #48]	@ 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800c2a8:	79fb      	ldrb	r3, [r7, #7]
 800c2aa:	4a10      	ldr	r2, [pc, #64]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c2ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b0:	4a11      	ldr	r2, [pc, #68]	@ (800c2f8 <LmHandlerPackageRegister+0xb4>)
 800c2b2:	635a      	str	r2, [r3, #52]	@ 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800c2b4:	4b11      	ldr	r3, [pc, #68]	@ (800c2fc <LmHandlerPackageRegister+0xb8>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	79fb      	ldrb	r3, [r7, #7]
 800c2ba:	490c      	ldr	r1, [pc, #48]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c2bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c2c0:	6992      	ldr	r2, [r2, #24]
 800c2c2:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800c2c4:	79fb      	ldrb	r3, [r7, #7]
 800c2c6:	4a09      	ldr	r2, [pc, #36]	@ (800c2ec <LmHandlerPackageRegister+0xa8>)
 800c2c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	4a0c      	ldr	r2, [pc, #48]	@ (800c300 <LmHandlerPackageRegister+0xbc>)
 800c2d0:	6851      	ldr	r1, [r2, #4]
 800c2d2:	4a0b      	ldr	r2, [pc, #44]	@ (800c300 <LmHandlerPackageRegister+0xbc>)
 800c2d4:	7852      	ldrb	r2, [r2, #1]
 800c2d6:	6838      	ldr	r0, [r7, #0]
 800c2d8:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e001      	b.n	800c2e2 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c2de:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3710      	adds	r7, #16
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	20000380 	.word	0x20000380
 800c2f0:	0800b9ad 	.word	0x0800b9ad
 800c2f4:	0800bb2d 	.word	0x0800bb2d
 800c2f8:	0800bce9 	.word	0x0800bce9
 800c2fc:	200003ac 	.word	0x200003ac
 800c300:	200000bc 	.word	0x200000bc

0800c304 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	4603      	mov	r3, r0
 800c30c:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c30e:	79fb      	ldrb	r3, [r7, #7]
 800c310:	2b04      	cmp	r3, #4
 800c312:	d80e      	bhi.n	800c332 <LmHandlerPackageIsInitialized+0x2e>
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	4a09      	ldr	r2, [pc, #36]	@ (800c33c <LmHandlerPackageIsInitialized+0x38>)
 800c318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d007      	beq.n	800c332 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	4a05      	ldr	r2, [pc, #20]	@ (800c33c <LmHandlerPackageIsInitialized+0x38>)
 800c326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	4798      	blx	r3
 800c32e:	4603      	mov	r3, r0
 800c330:	e000      	b.n	800c334 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800c332:	2300      	movs	r3, #0
    }
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000380 	.word	0x20000380

0800c340 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	6039      	str	r1, [r7, #0]
 800c34a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c34c:	2300      	movs	r3, #0
 800c34e:	73fb      	strb	r3, [r7, #15]
 800c350:	e07c      	b.n	800c44c <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 800c352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c356:	4a42      	ldr	r2, [pc, #264]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d06f      	beq.n	800c440 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	2b03      	cmp	r3, #3
 800c364:	d863      	bhi.n	800c42e <LmHandlerPackagesNotify+0xee>
 800c366:	a201      	add	r2, pc, #4	@ (adr r2, 800c36c <LmHandlerPackagesNotify+0x2c>)
 800c368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36c:	0800c37d 	.word	0x0800c37d
 800c370:	0800c39f 	.word	0x0800c39f
 800c374:	0800c3eb 	.word	0x0800c3eb
 800c378:	0800c40d 	.word	0x0800c40d
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c37c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c380:	4a37      	ldr	r2, [pc, #220]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c386:	69db      	ldr	r3, [r3, #28]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d052      	beq.n	800c432 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800c38c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c390:	4a33      	ldr	r2, [pc, #204]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c396:	69db      	ldr	r3, [r3, #28]
 800c398:	6838      	ldr	r0, [r7, #0]
 800c39a:	4798      	blx	r3
                        }
                        break;
 800c39c:	e049      	b.n	800c432 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c39e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3a2:	4a2f      	ldr	r2, [pc, #188]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d043      	beq.n	800c436 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c3ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3b2:	4a2b      	ldr	r2, [pc, #172]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3b8:	781a      	ldrb	r2, [r3, #0]
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800c3be:	429a      	cmp	r2, r3
 800c3c0:	d00a      	beq.n	800c3d8 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 800c3c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d135      	bne.n	800c436 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 800c3ca:	4b25      	ldr	r3, [pc, #148]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	4798      	blx	r3
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d02e      	beq.n	800c436 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800c3d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3dc:	4a20      	ldr	r2, [pc, #128]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c3de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3e2:	6a1b      	ldr	r3, [r3, #32]
 800c3e4:	6838      	ldr	r0, [r7, #0]
 800c3e6:	4798      	blx	r3
                        }
                        break;
 800c3e8:	e025      	b.n	800c436 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c3ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ee:	4a1c      	ldr	r2, [pc, #112]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01f      	beq.n	800c43a <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800c3fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3fe:	4a18      	ldr	r2, [pc, #96]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c406:	6838      	ldr	r0, [r7, #0]
 800c408:	4798      	blx	r3
                        }
                        break;
 800c40a:	e016      	b.n	800c43a <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c410:	4a13      	ldr	r2, [pc, #76]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d010      	beq.n	800c43e <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c41c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c420:	4a0f      	ldr	r2, [pc, #60]	@ (800c460 <LmHandlerPackagesNotify+0x120>)
 800c422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c428:	6838      	ldr	r0, [r7, #0]
 800c42a:	4798      	blx	r3
                        }
                        break;
 800c42c:	e007      	b.n	800c43e <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 800c42e:	bf00      	nop
 800c430:	e006      	b.n	800c440 <LmHandlerPackagesNotify+0x100>
                        break;
 800c432:	bf00      	nop
 800c434:	e004      	b.n	800c440 <LmHandlerPackagesNotify+0x100>
                        break;
 800c436:	bf00      	nop
 800c438:	e002      	b.n	800c440 <LmHandlerPackagesNotify+0x100>
                        break;
 800c43a:	bf00      	nop
 800c43c:	e000      	b.n	800c440 <LmHandlerPackagesNotify+0x100>
                        break;
 800c43e:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c444:	b2db      	uxtb	r3, r3
 800c446:	3301      	adds	r3, #1
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	73fb      	strb	r3, [r7, #15]
 800c44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c450:	2b04      	cmp	r3, #4
 800c452:	f77f af7e 	ble.w	800c352 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800c456:	bf00      	nop
 800c458:	bf00      	nop
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	20000380 	.word	0x20000380

0800c464 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c46a:	2300      	movs	r3, #0
 800c46c:	71fb      	strb	r3, [r7, #7]
 800c46e:	e01c      	b.n	800c4aa <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 800c470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c474:	4a11      	ldr	r2, [pc, #68]	@ (800c4bc <LmHandlerPackageIsTxPending+0x58>)
 800c476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00f      	beq.n	800c49e <LmHandlerPackageIsTxPending+0x3a>
 800c47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d00b      	beq.n	800c49e <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800c486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c48a:	4a0c      	ldr	r2, [pc, #48]	@ (800c4bc <LmHandlerPackageIsTxPending+0x58>)
 800c48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d001      	beq.n	800c49e <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e00a      	b.n	800c4b4 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c49e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	71fb      	strb	r3, [r7, #7]
 800c4aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	ddde      	ble.n	800c470 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800c4b2:	2300      	movs	r3, #0
}
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	3708      	adds	r7, #8
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bd80      	pop	{r7, pc}
 800c4bc:	20000380 	.word	0x20000380

0800c4c0 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b082      	sub	sp, #8
 800c4c4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	71fb      	strb	r3, [r7, #7]
 800c4ca:	e022      	b.n	800c512 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c4cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4d0:	4a14      	ldr	r2, [pc, #80]	@ (800c524 <LmHandlerPackagesProcess+0x64>)
 800c4d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d015      	beq.n	800c506 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c4da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4de:	4a11      	ldr	r2, [pc, #68]	@ (800c524 <LmHandlerPackagesProcess+0x64>)
 800c4e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4e4:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00d      	beq.n	800c506 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800c4ea:	79fb      	ldrb	r3, [r7, #7]
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	f7ff ff09 	bl	800c304 <LmHandlerPackageIsInitialized>
 800c4f2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800c4f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4fc:	4a09      	ldr	r2, [pc, #36]	@ (800c524 <LmHandlerPackagesProcess+0x64>)
 800c4fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c502:	695b      	ldr	r3, [r3, #20]
 800c504:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c50a:	b2db      	uxtb	r3, r3
 800c50c:	3301      	adds	r3, #1
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	71fb      	strb	r3, [r7, #7]
 800c512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c516:	2b04      	cmp	r3, #4
 800c518:	ddd8      	ble.n	800c4cc <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800c51a:	bf00      	nop
 800c51c:	bf00      	nop
 800c51e:	3708      	adds	r7, #8
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	20000380 	.word	0x20000380

0800c528 <LmHandlerStop>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800c52c:	f005 f9c2 	bl	80118b4 <LoRaMacDeInitialization>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c536:	2300      	movs	r3, #0
 800c538:	e001      	b.n	800c53e <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c53a:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c53e:	4618      	mov	r0, r3
 800c540:	bd80      	pop	{r7, pc}

0800c542 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800c542:	b580      	push	{r7, lr}
 800c544:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800c546:	f004 f93d 	bl	80107c4 <LoRaMacHalt>
 800c54a:	4603      	mov	r3, r0
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c550:	2300      	movs	r3, #0
 800c552:	e001      	b.n	800c558 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c554:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c558:	4618      	mov	r0, r3
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b08c      	sub	sp, #48	@ 0x30
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d102      	bne.n	800c570 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c56a:	f04f 33ff 	mov.w	r3, #4294967295
 800c56e:	e016      	b.n	800c59e <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800c570:	2320      	movs	r3, #32
 800c572:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c574:	f107 0308 	add.w	r3, r7, #8
 800c578:	4618      	mov	r0, r3
 800c57a:	f004 f9e1 	bl	8010940 <LoRaMacMibGetRequestConfirm>
 800c57e:	4603      	mov	r3, r0
 800c580:	2b00      	cmp	r3, #0
 800c582:	d002      	beq.n	800c58a <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c584:	f04f 33ff 	mov.w	r3, #4294967295
 800c588:	e009      	b.n	800c59e <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800c58a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f993 2000 	ldrsb.w	r2, [r3]
 800c598:	4b03      	ldr	r3, [pc, #12]	@ (800c5a8 <LmHandlerGetTxPower+0x4c>)
 800c59a:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800c59c:	2300      	movs	r3, #0
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3730      	adds	r7, #48	@ 0x30
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	20000394 	.word	0x20000394

0800c5ac <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08e      	sub	sp, #56	@ 0x38
 800c5b0:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800c5bc:	f7ff ffc1 	bl	800c542 <LmHandlerHalt>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800c5c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d12f      	bne.n	800c62e <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800c5ce:	f000 f859 	bl	800c684 <NvmDataMgmtStoreBegin>
 800c5d2:	6338      	str	r0, [r7, #48]	@ 0x30

        if( status == NVM_DATA_NO_UPDATED_DATA )
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5d6:	f113 0f02 	cmn.w	r3, #2
 800c5da:	d103      	bne.n	800c5e4 <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800c5dc:	23f8      	movs	r3, #248	@ 0xf8
 800c5de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5e2:	e01c      	b.n	800c61e <LmHandlerNvmDataStore+0x72>
        }
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800c5e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d104      	bne.n	800c5f4 <LmHandlerNvmDataStore+0x48>
 800c5ea:	4b1b      	ldr	r3, [pc, #108]	@ (800c658 <LmHandlerNvmDataStore+0xac>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d103      	bne.n	800c5fc <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c5f4:	23ff      	movs	r3, #255	@ 0xff
 800c5f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800c5fa:	e010      	b.n	800c61e <LmHandlerNvmDataStore+0x72>
        }
        else
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_NVM_CTXS;
 800c5fc:	2326      	movs	r3, #38	@ 0x26
 800c5fe:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c600:	463b      	mov	r3, r7
 800c602:	4618      	mov	r0, r3
 800c604:	f004 f99c 	bl	8010940 <LoRaMacMibGetRequestConfirm>
            nvm = ( LoRaMacNvmData_t * )mibReq.Param.Contexts;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            nvm_size = ( ( sizeof( LoRaMacNvmData_t ) + 7 ) & ~0x07 );
 800c60c:	f44f 63ef 	mov.w	r3, #1912	@ 0x778
 800c610:	62bb      	str	r3, [r7, #40]	@ 0x28
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800c612:	4b11      	ldr	r3, [pc, #68]	@ (800c658 <LmHandlerNvmDataStore+0xac>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	695b      	ldr	r3, [r3, #20]
 800c618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c61a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c61c:	4798      	blx	r3
        }

        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800c61e:	f000 f847 	bl	800c6b0 <NvmDataMgmtStoreEnd>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d002      	beq.n	800c62e <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c628:	23ff      	movs	r3, #255	@ 0xff
 800c62a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800c62e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c632:	2b00      	cmp	r3, #0
 800c634:	d109      	bne.n	800c64a <LmHandlerNvmDataStore+0x9e>
 800c636:	4b08      	ldr	r3, [pc, #32]	@ (800c658 <LmHandlerNvmDataStore+0xac>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	69db      	ldr	r3, [r3, #28]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d004      	beq.n	800c64a <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800c640:	4b05      	ldr	r3, [pc, #20]	@ (800c658 <LmHandlerNvmDataStore+0xac>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	69db      	ldr	r3, [r3, #28]
 800c646:	2001      	movs	r0, #1
 800c648:	4798      	blx	r3
    }

    return lmhStatus;
 800c64a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3738      	adds	r7, #56	@ 0x38
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	200003ac 	.word	0x200003ac

0800c65c <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	4603      	mov	r3, r0
 800c664:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800c666:	4b06      	ldr	r3, [pc, #24]	@ (800c680 <NvmDataMgmtEvent+0x24>)
 800c668:	881a      	ldrh	r2, [r3, #0]
 800c66a:	88fb      	ldrh	r3, [r7, #6]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	b29a      	uxth	r2, r3
 800c670:	4b03      	ldr	r3, [pc, #12]	@ (800c680 <NvmDataMgmtEvent+0x24>)
 800c672:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800c674:	bf00      	nop
 800c676:	370c      	adds	r7, #12
 800c678:	46bd      	mov	sp, r7
 800c67a:	bc80      	pop	{r7}
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	200004d0 	.word	0x200004d0

0800c684 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800c684:	b580      	push	{r7, lr}
 800c686:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800c688:	4b08      	ldr	r3, [pc, #32]	@ (800c6ac <NvmDataMgmtStoreBegin+0x28>)
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d102      	bne.n	800c696 <NvmDataMgmtStoreBegin+0x12>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
 800c690:	f06f 0301 	mvn.w	r3, #1
 800c694:	e008      	b.n	800c6a8 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800c696:	f004 f86d 	bl	8010774 <LoRaMacStop>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800c6a0:	f06f 0302 	mvn.w	r3, #2
 800c6a4:	e000      	b.n	800c6a8 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800c6a6:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	200004d0 	.word	0x200004d0

0800c6b0 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800c6b4:	4b03      	ldr	r3, [pc, #12]	@ (800c6c4 <NvmDataMgmtStoreEnd+0x14>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	801a      	strh	r2, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800c6ba:	f004 f84d 	bl	8010758 <LoRaMacStart>
    return NVM_DATA_OK;
 800c6be:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	200004d0 	.word	0x200004d0

0800c6c8 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <LmhpCompliancePackageFactory+0x10>)
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bc80      	pop	{r7}
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	200000c4 	.word	0x200000c4

0800c6dc <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b085      	sub	sp, #20
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	60f8      	str	r0, [r7, #12]
 800c6e4:	60b9      	str	r1, [r7, #8]
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d00f      	beq.n	800c710 <LmhpComplianceInit+0x34>
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d00c      	beq.n	800c710 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 800c6f6:	4a0c      	ldr	r2, [pc, #48]	@ (800c728 <LmhpComplianceInit+0x4c>)
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 800c6fc:	4a0b      	ldr	r2, [pc, #44]	@ (800c72c <LmhpComplianceInit+0x50>)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800c702:	4a0a      	ldr	r2, [pc, #40]	@ (800c72c <LmhpComplianceInit+0x50>)
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 800c708:	4b08      	ldr	r3, [pc, #32]	@ (800c72c <LmhpComplianceInit+0x50>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	701a      	strb	r2, [r3, #0]
 800c70e:	e006      	b.n	800c71e <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 800c710:	4b05      	ldr	r3, [pc, #20]	@ (800c728 <LmhpComplianceInit+0x4c>)
 800c712:	2200      	movs	r2, #0
 800c714:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800c716:	4b05      	ldr	r3, [pc, #20]	@ (800c72c <LmhpComplianceInit+0x50>)
 800c718:	2200      	movs	r2, #0
 800c71a:	701a      	strb	r2, [r3, #0]
    }
}
 800c71c:	bf00      	nop
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	bc80      	pop	{r7}
 800c726:	4770      	bx	lr
 800c728:	20000500 	.word	0x20000500
 800c72c:	200004ec 	.word	0x200004ec

0800c730 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800c730:	b480      	push	{r7}
 800c732:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800c734:	4b02      	ldr	r3, [pc, #8]	@ (800c740 <LmhpComplianceIsInitialized+0x10>)
 800c736:	781b      	ldrb	r3, [r3, #0]
}
 800c738:	4618      	mov	r0, r3
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bc80      	pop	{r7}
 800c73e:	4770      	bx	lr
 800c740:	200004ec 	.word	0x200004ec

0800c744 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c748:	4b07      	ldr	r3, [pc, #28]	@ (800c768 <LmhpComplianceIsRunning+0x24>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	f083 0301 	eor.w	r3, r3, #1
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <LmhpComplianceIsRunning+0x16>
    {
        return false;
 800c756:	2300      	movs	r3, #0
 800c758:	e001      	b.n	800c75e <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 800c75a:	4b03      	ldr	r3, [pc, #12]	@ (800c768 <LmhpComplianceIsRunning+0x24>)
 800c75c:	785b      	ldrb	r3, [r3, #1]
}
 800c75e:	4618      	mov	r0, r3
 800c760:	46bd      	mov	sp, r7
 800c762:	bc80      	pop	{r7}
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	200004ec 	.word	0x200004ec

0800c76c <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c774:	4b0f      	ldr	r3, [pc, #60]	@ (800c7b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f083 0301 	eor.w	r3, r3, #1
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d112      	bne.n	800c7a8 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800c782:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c784:	785b      	ldrb	r3, [r3, #1]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d00f      	beq.n	800c7aa <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 800c78e:	2b01      	cmp	r3, #1
 800c790:	d10b      	bne.n	800c7aa <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 800c796:	2b00      	cmp	r3, #0
 800c798:	d007      	beq.n	800c7aa <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c79a:	4b06      	ldr	r3, [pc, #24]	@ (800c7b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c79c:	899b      	ldrh	r3, [r3, #12]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	b29a      	uxth	r2, r3
 800c7a2:	4b04      	ldr	r3, [pc, #16]	@ (800c7b4 <LmhpComplianceOnMcpsConfirm+0x48>)
 800c7a4:	819a      	strh	r2, [r3, #12]
 800c7a6:	e000      	b.n	800c7aa <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 800c7a8:	bf00      	nop
    }
}
 800c7aa:	370c      	adds	r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop
 800c7b4:	200004ec 	.word	0x200004ec

0800c7b8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c7c0:	4b12      	ldr	r3, [pc, #72]	@ (800c80c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	f083 0301 	eor.w	r3, r3, #1
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d116      	bne.n	800c7fc <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c7ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c80c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7d0:	785b      	ldrb	r3, [r3, #1]
 800c7d2:	f083 0301 	eor.w	r3, r3, #1
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d111      	bne.n	800c800 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	781b      	ldrb	r3, [r3, #0]
 800c7e0:	2b05      	cmp	r3, #5
 800c7e2:	d10e      	bne.n	800c802 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 800c7e4:	4b09      	ldr	r3, [pc, #36]	@ (800c80c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	7a1a      	ldrb	r2, [r3, #8]
 800c7ee:	4b07      	ldr	r3, [pc, #28]	@ (800c80c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7f0:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	7a5a      	ldrb	r2, [r3, #9]
 800c7f6:	4b05      	ldr	r3, [pc, #20]	@ (800c80c <LmhpComplianceOnMlmeConfirm+0x54>)
 800c7f8:	741a      	strb	r2, [r3, #16]
 800c7fa:	e002      	b.n	800c802 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c7fc:	bf00      	nop
 800c7fe:	e000      	b.n	800c802 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 800c800:	bf00      	nop
    }
}
 800c802:	370c      	adds	r7, #12
 800c804:	46bd      	mov	sp, r7
 800c806:	bc80      	pop	{r7}
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	200004ec 	.word	0x200004ec

0800c810 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 800c816:	4b36      	ldr	r3, [pc, #216]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	f083 0301 	eor.w	r3, r3, #1
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c824:	f04f 33ff 	mov.w	r3, #4294967295
 800c828:	e05e      	b.n	800c8e8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 800c82a:	4b31      	ldr	r3, [pc, #196]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c82c:	785b      	ldrb	r3, [r3, #1]
 800c82e:	f083 0301 	eor.w	r3, r3, #1
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c838:	2300      	movs	r3, #0
 800c83a:	e055      	b.n	800c8e8 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 800c83c:	4b2c      	ldr	r3, [pc, #176]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c83e:	7b9b      	ldrb	r3, [r3, #14]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d019      	beq.n	800c878 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 800c844:	4b2a      	ldr	r3, [pc, #168]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c846:	2200      	movs	r2, #0
 800c848:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 800c84a:	4b29      	ldr	r3, [pc, #164]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c84c:	2203      	movs	r2, #3
 800c84e:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 800c850:	4b27      	ldr	r3, [pc, #156]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	2205      	movs	r2, #5
 800c856:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800c858:	4b25      	ldr	r3, [pc, #148]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	3301      	adds	r3, #1
 800c85e:	4a24      	ldr	r2, [pc, #144]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c860:	7bd2      	ldrb	r2, [r2, #15]
 800c862:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 800c864:	4b22      	ldr	r3, [pc, #136]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	3302      	adds	r3, #2
 800c86a:	4a21      	ldr	r2, [pc, #132]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c86c:	7c12      	ldrb	r2, [r2, #16]
 800c86e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 800c870:	4b1f      	ldr	r3, [pc, #124]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c872:	2201      	movs	r2, #1
 800c874:	709a      	strb	r2, [r3, #2]
 800c876:	e01c      	b.n	800c8b2 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 800c878:	4b1d      	ldr	r3, [pc, #116]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c87a:	789b      	ldrb	r3, [r3, #2]
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	d005      	beq.n	800c88c <LmhpComplianceTxProcess+0x7c>
 800c880:	2b04      	cmp	r3, #4
 800c882:	d116      	bne.n	800c8b2 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 800c884:	4b1a      	ldr	r3, [pc, #104]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c886:	2201      	movs	r2, #1
 800c888:	709a      	strb	r2, [r3, #2]
                break;
 800c88a:	e012      	b.n	800c8b2 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 800c88c:	4b18      	ldr	r3, [pc, #96]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c88e:	2202      	movs	r2, #2
 800c890:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 800c892:	4b17      	ldr	r3, [pc, #92]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c894:	899b      	ldrh	r3, [r3, #12]
 800c896:	0a1b      	lsrs	r3, r3, #8
 800c898:	b29a      	uxth	r2, r3
 800c89a:	4b15      	ldr	r3, [pc, #84]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800c8a2:	4b13      	ldr	r3, [pc, #76]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c8a4:	899a      	ldrh	r2, [r3, #12]
 800c8a6:	4b12      	ldr	r3, [pc, #72]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	b2d2      	uxtb	r2, r2
 800c8ae:	701a      	strb	r2, [r3, #0]
                break;
 800c8b0:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 800c8b2:	23e0      	movs	r3, #224	@ 0xe0
 800c8b4:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 800c8b6:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c8b8:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 800c8ba:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c8be:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 800c8c0:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 800c8c2:	480c      	ldr	r0, [pc, #48]	@ (800c8f4 <LmhpComplianceTxProcess+0xe4>)
 800c8c4:	f00f f8d2 	bl	801ba6c <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 800c8c8:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f8 <LmhpComplianceTxProcess+0xe8>)
 800c8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 800c8d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c8d4:	e008      	b.n	800c8e8 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 800c8d6:	4b08      	ldr	r3, [pc, #32]	@ (800c8f8 <LmhpComplianceTxProcess+0xe8>)
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8da:	4a05      	ldr	r2, [pc, #20]	@ (800c8f0 <LmhpComplianceTxProcess+0xe0>)
 800c8dc:	78d2      	ldrb	r2, [r2, #3]
 800c8de:	4611      	mov	r1, r2
 800c8e0:	4638      	mov	r0, r7
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	4798      	blx	r3
 800c8e6:	4603      	mov	r3, r0
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3708      	adds	r7, #8
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	200004ec 	.word	0x200004ec
 800c8f4:	200004d4 	.word	0x200004d4
 800c8f8:	200000c4 	.word	0x200000c4

0800c8fc <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b0a4      	sub	sp, #144	@ 0x90
 800c900:	af02      	add	r7, sp, #8
 800c902:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800c904:	4ba5      	ldr	r3, [pc, #660]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	f083 0301 	eor.w	r3, r3, #1
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	f040 81c8 	bne.w	800cca4 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	7b5b      	ldrb	r3, [r3, #13]
 800c918:	f083 0301 	eor.w	r3, r3, #1
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f040 81c2 	bne.w	800cca8 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 800c924:	4b9d      	ldr	r3, [pc, #628]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00c      	beq.n	800c946 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	7b9b      	ldrb	r3, [r3, #14]
 800c930:	f083 0301 	eor.w	r3, r3, #1
 800c934:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 800c936:	2b00      	cmp	r3, #0
 800c938:	d005      	beq.n	800c946 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 800c93a:	4b98      	ldr	r3, [pc, #608]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c93c:	899b      	ldrh	r3, [r3, #12]
 800c93e:	3301      	adds	r3, #1
 800c940:	b29a      	uxth	r2, r3
 800c942:	4b96      	ldr	r3, [pc, #600]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c944:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	78db      	ldrb	r3, [r3, #3]
 800c94a:	2be0      	cmp	r3, #224	@ 0xe0
 800c94c:	f040 81ae 	bne.w	800ccac <LmhpComplianceOnMcpsIndication+0x3b0>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 800c950:	4b92      	ldr	r3, [pc, #584]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c952:	785b      	ldrb	r3, [r3, #1]
 800c954:	f083 0301 	eor.w	r3, r3, #1
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d060      	beq.n	800ca20 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	7b1b      	ldrb	r3, [r3, #12]
 800c962:	2b04      	cmp	r3, #4
 800c964:	f040 81a9 	bne.w	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	689b      	ldr	r3, [r3, #8]
 800c96c:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 800c96e:	2b01      	cmp	r3, #1
 800c970:	f040 81a3 	bne.w	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	3301      	adds	r3, #1
 800c97a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	f040 819c 	bne.w	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	3302      	adds	r3, #2
 800c988:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 800c98a:	2b01      	cmp	r3, #1
 800c98c:	f040 8195 	bne.w	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	3303      	adds	r3, #3
 800c996:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 800c998:	2b01      	cmp	r3, #1
 800c99a:	f040 818e 	bne.w	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 800c99e:	4b7f      	ldr	r3, [pc, #508]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 800c9a4:	4b7d      	ldr	r3, [pc, #500]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9a6:	22e0      	movs	r2, #224	@ 0xe0
 800c9a8:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 800c9aa:	4b7c      	ldr	r3, [pc, #496]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9ac:	2202      	movs	r2, #2
 800c9ae:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 800c9b0:	4b7a      	ldr	r3, [pc, #488]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 800c9b6:	4b79      	ldr	r3, [pc, #484]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 800c9bc:	4b77      	ldr	r3, [pc, #476]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 800c9c2:	4b76      	ldr	r3, [pc, #472]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 800c9c8:	4b74      	ldr	r3, [pc, #464]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9ca:	2201      	movs	r2, #1
 800c9cc:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 800c9ce:	4b73      	ldr	r3, [pc, #460]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c9dc:	f107 030c 	add.w	r3, r7, #12
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	f004 f965 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 800c9e6:	2000      	movs	r0, #0
 800c9e8:	f004 ff3e 	bl	8011868 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 800c9ec:	4b6c      	ldr	r3, [pc, #432]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d003      	beq.n	800c9fe <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 800c9f6:	4b6a      	ldr	r3, [pc, #424]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800c9fe:	2300      	movs	r3, #0
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	4b68      	ldr	r3, [pc, #416]	@ (800cba4 <LmhpComplianceOnMcpsIndication+0x2a8>)
 800ca04:	2200      	movs	r2, #0
 800ca06:	f04f 31ff 	mov.w	r1, #4294967295
 800ca0a:	4867      	ldr	r0, [pc, #412]	@ (800cba8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca0c:	f00e fff8 	bl	801ba00 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800ca10:	f241 3188 	movw	r1, #5000	@ 0x1388
 800ca14:	4864      	ldr	r0, [pc, #400]	@ (800cba8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca16:	f00f f907 	bl	801bc28 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 800ca1a:	f7ff fef9 	bl	800c810 <LmhpComplianceTxProcess>
 800ca1e:	e14c      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	689b      	ldr	r3, [r3, #8]
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	4b5d      	ldr	r3, [pc, #372]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca28:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 800ca2a:	4b5c      	ldr	r3, [pc, #368]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca2c:	789b      	ldrb	r3, [r3, #2]
 800ca2e:	2b0a      	cmp	r3, #10
 800ca30:	f200 813e 	bhi.w	800ccb0 <LmhpComplianceOnMcpsIndication+0x3b4>
 800ca34:	a201      	add	r2, pc, #4	@ (adr r2, 800ca3c <LmhpComplianceOnMcpsIndication+0x140>)
 800ca36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca3a:	bf00      	nop
 800ca3c:	0800ca69 	.word	0x0800ca69
 800ca40:	0800cab3 	.word	0x0800cab3
 800ca44:	0800cabb 	.word	0x0800cabb
 800ca48:	0800cac9 	.word	0x0800cac9
 800ca4c:	0800cad7 	.word	0x0800cad7
 800ca50:	0800cb2f 	.word	0x0800cb2f
 800ca54:	0800cb41 	.word	0x0800cb41
 800ca58:	0800cbb1 	.word	0x0800cbb1
 800ca5c:	0800cc5d 	.word	0x0800cc5d
 800ca60:	0800cc6f 	.word	0x0800cc6f
 800ca64:	0800cc89 	.word	0x0800cc89
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800ca68:	484f      	ldr	r0, [pc, #316]	@ (800cba8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800ca6a:	f00f f86d 	bl	801bb48 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800ca6e:	4b4b      	ldr	r3, [pc, #300]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800ca74:	4b49      	ldr	r3, [pc, #292]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800ca7a:	2304      	movs	r3, #4
 800ca7c:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800ca7e:	4b48      	ldr	r3, [pc, #288]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800ca86:	f107 030c 	add.w	r3, r7, #12
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f004 f910 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800ca90:	4b43      	ldr	r3, [pc, #268]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f004 fee6 	bl	8011868 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800ca9c:	4b40      	ldr	r3, [pc, #256]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	689b      	ldr	r3, [r3, #8]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	f000 8106 	beq.w	800ccb4 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800caa8:	4b3d      	ldr	r3, [pc, #244]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	689b      	ldr	r3, [r3, #8]
 800caae:	4798      	blx	r3
                    }
                }
                break;
 800cab0:	e100      	b.n	800ccb4 <LmhpComplianceOnMcpsIndication+0x3b8>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 800cab2:	4b3a      	ldr	r3, [pc, #232]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cab4:	2202      	movs	r2, #2
 800cab6:	719a      	strb	r2, [r3, #6]
                break;
 800cab8:	e0ff      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 800caba:	4b38      	ldr	r3, [pc, #224]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cabc:	2201      	movs	r2, #1
 800cabe:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800cac0:	4b36      	ldr	r3, [pc, #216]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	709a      	strb	r2, [r3, #2]
                break;
 800cac6:	e0f8      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 800cac8:	4b34      	ldr	r3, [pc, #208]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800caca:	2200      	movs	r2, #0
 800cacc:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 800cace:	4b33      	ldr	r3, [pc, #204]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cad0:	2201      	movs	r2, #1
 800cad2:	709a      	strb	r2, [r3, #2]
                break;
 800cad4:	e0f1      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	7b1a      	ldrb	r2, [r3, #12]
 800cada:	4b30      	ldr	r3, [pc, #192]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cadc:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 800cade:	4b2f      	ldr	r3, [pc, #188]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	2204      	movs	r2, #4
 800cae4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cae6:	2301      	movs	r3, #1
 800cae8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800caec:	e012      	b.n	800cb14 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	689a      	ldr	r2, [r3, #8]
 800caf2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800caf6:	4413      	add	r3, r2
 800caf8:	781a      	ldrb	r2, [r3, #0]
 800cafa:	4b28      	ldr	r3, [pc, #160]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cafc:	6899      	ldr	r1, [r3, #8]
 800cafe:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cb02:	440b      	add	r3, r1
 800cb04:	3201      	adds	r2, #1
 800cb06:	b2d2      	uxtb	r2, r2
 800cb08:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 800cb0a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cb0e:	3301      	adds	r3, #1
 800cb10:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800cb14:	4b21      	ldr	r3, [pc, #132]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb16:	795a      	ldrb	r2, [r3, #5]
 800cb18:	4b20      	ldr	r3, [pc, #128]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb1a:	799b      	ldrb	r3, [r3, #6]
 800cb1c:	4293      	cmp	r3, r2
 800cb1e:	bf28      	it	cs
 800cb20:	4613      	movcs	r3, r2
 800cb22:	b2db      	uxtb	r3, r3
 800cb24:	f897 2087 	ldrb.w	r2, [r7, #135]	@ 0x87
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d3e0      	bcc.n	800caee <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 800cb2c:	e0c5      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 800cb2e:	2305      	movs	r3, #5
 800cb30:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 800cb34:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800cb38:	4618      	mov	r0, r3
 800cb3a:	f004 fc4d 	bl	80113d8 <LoRaMacMlmeRequest>
                }
                break;
 800cb3e:	e0bc      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 800cb40:	4819      	ldr	r0, [pc, #100]	@ (800cba8 <LmhpComplianceOnMcpsIndication+0x2ac>)
 800cb42:	f00f f801 	bl	801bb48 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 800cb46:	4b15      	ldr	r3, [pc, #84]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb48:	2200      	movs	r2, #0
 800cb4a:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 800cb4c:	4b13      	ldr	r3, [pc, #76]	@ (800cb9c <LmhpComplianceOnMcpsIndication+0x2a0>)
 800cb4e:	2200      	movs	r2, #0
 800cb50:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 800cb52:	2304      	movs	r3, #4
 800cb54:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800cb56:	4b12      	ldr	r3, [pc, #72]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cb5e:	f107 030c 	add.w	r3, r7, #12
 800cb62:	4618      	mov	r0, r3
 800cb64:	f004 f8a4 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 800cb68:	4b0d      	ldr	r3, [pc, #52]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	785b      	ldrb	r3, [r3, #1]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f004 fe7a 	bl	8011868 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 800cb74:	4b0a      	ldr	r3, [pc, #40]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 800cb7e:	4b08      	ldr	r3, [pc, #32]	@ (800cba0 <LmhpComplianceOnMcpsIndication+0x2a4>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	689b      	ldr	r3, [r3, #8]
 800cb84:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 800cb86:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cb88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 8094 	beq.w	800ccb8 <LmhpComplianceOnMcpsIndication+0x3bc>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800cb90:	4b06      	ldr	r3, [pc, #24]	@ (800cbac <LmhpComplianceOnMcpsIndication+0x2b0>)
 800cb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb94:	2101      	movs	r1, #1
 800cb96:	2002      	movs	r0, #2
 800cb98:	4798      	blx	r3
                    }
                }
                break;
 800cb9a:	e08d      	b.n	800ccb8 <LmhpComplianceOnMcpsIndication+0x3bc>
 800cb9c:	200004ec 	.word	0x200004ec
 800cba0:	20000500 	.word	0x20000500
 800cba4:	0800ccd1 	.word	0x0800ccd1
 800cba8:	200004d4 	.word	0x200004d4
 800cbac:	200000c4 	.word	0x200000c4
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	7b1b      	ldrb	r3, [r3, #12]
 800cbb4:	2b03      	cmp	r3, #3
 800cbb6:	d114      	bne.n	800cbe2 <LmhpComplianceOnMcpsIndication+0x2e6>
                    {
                        mlmeReq.Type = MLME_TXCW;
 800cbb8:	2306      	movs	r3, #6
 800cbba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	b21b      	sxth	r3, r3
 800cbc8:	021b      	lsls	r3, r3, #8
 800cbca:	b21a      	sxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	3302      	adds	r3, #2
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	b21b      	sxth	r3, r3
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	b21b      	sxth	r3, r3
 800cbda:	b29b      	uxth	r3, r3
 800cbdc:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800cbe0:	e033      	b.n	800cc4a <LmhpComplianceOnMcpsIndication+0x34e>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	7b1b      	ldrb	r3, [r3, #12]
 800cbe6:	2b07      	cmp	r3, #7
 800cbe8:	d12f      	bne.n	800cc4a <LmhpComplianceOnMcpsIndication+0x34e>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 800cbea:	2307      	movs	r3, #7
 800cbec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	b21b      	sxth	r3, r3
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	b21a      	sxth	r2, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	689b      	ldr	r3, [r3, #8]
 800cc02:	3302      	adds	r3, #2
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	b21b      	sxth	r3, r3
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	b21b      	sxth	r3, r3
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	689b      	ldr	r3, [r3, #8]
 800cc16:	3303      	adds	r3, #3
 800cc18:	781b      	ldrb	r3, [r3, #0]
 800cc1a:	041a      	lsls	r2, r3, #16
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	3304      	adds	r3, #4
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	021b      	lsls	r3, r3, #8
 800cc26:	4313      	orrs	r3, r2
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	6892      	ldr	r2, [r2, #8]
 800cc2c:	3205      	adds	r2, #5
 800cc2e:	7812      	ldrb	r2, [r2, #0]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	461a      	mov	r2, r3
 800cc34:	2364      	movs	r3, #100	@ 0x64
 800cc36:	fb02 f303 	mul.w	r3, r2, r3
 800cc3a:	667b      	str	r3, [r7, #100]	@ 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	689b      	ldr	r3, [r3, #8]
 800cc40:	3306      	adds	r3, #6
 800cc42:	781b      	ldrb	r3, [r3, #0]
 800cc44:	b25b      	sxtb	r3, r3
 800cc46:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 800cc4a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f004 fbc2 	bl	80113d8 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 800cc54:	4b1a      	ldr	r3, [pc, #104]	@ (800ccc0 <LmhpComplianceOnMcpsIndication+0x3c4>)
 800cc56:	2201      	movs	r2, #1
 800cc58:	709a      	strb	r2, [r3, #2]
                }
                break;
 800cc5a:	e02e      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 800cc5c:	230a      	movs	r3, #10
 800cc5e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 800cc62:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800cc66:	4618      	mov	r0, r3
 800cc68:	f004 fbb6 	bl	80113d8 <LoRaMacMlmeRequest>
                }
                break;
 800cc6c:	e025      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	3301      	adds	r3, #1
 800cc78:	781b      	ldrb	r3, [r3, #0]
 800cc7a:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 800cc7c:	f107 030c 	add.w	r3, r7, #12
 800cc80:	4618      	mov	r0, r3
 800cc82:	f004 f815 	bl	8010cb0 <LoRaMacMibSetRequestConfirm>
                }
                break;
 800cc86:	e018      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 800cc88:	230d      	movs	r3, #13
 800cc8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	785b      	ldrb	r3, [r3, #1]
 800cc94:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 800cc98:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f004 fb9b 	bl	80113d8 <LoRaMacMlmeRequest>
                }
                break;
 800cca2:	e00a      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
        return;
 800cca4:	bf00      	nop
 800cca6:	e008      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
        return;
 800cca8:	bf00      	nop
 800ccaa:	e006      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
        return;
 800ccac:	bf00      	nop
 800ccae:	e004      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
            default:
                break;
 800ccb0:	bf00      	nop
 800ccb2:	e002      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
                break;
 800ccb4:	bf00      	nop
 800ccb6:	e000      	b.n	800ccba <LmhpComplianceOnMcpsIndication+0x3be>
                break;
 800ccb8:	bf00      	nop
        }
    }
}
 800ccba:	3788      	adds	r7, #136	@ 0x88
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}
 800ccc0:	200004ec 	.word	0x200004ec

0800ccc4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 800ccc8:	bf00      	nop
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bc80      	pop	{r7}
 800ccce:	4770      	bx	lr

0800ccd0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 800ccd8:	f7ff fd9a 	bl	800c810 <LmhpComplianceTxProcess>
}
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 800ccec:	2300      	movs	r3, #0
}
 800ccee:	4618      	mov	r0, r3
 800ccf0:	370c      	adds	r7, #12
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bc80      	pop	{r7}
 800ccf6:	4770      	bx	lr

0800ccf8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	4603      	mov	r3, r0
 800cd00:	6039      	str	r1, [r7, #0]
 800cd02:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 800cd04:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bc80      	pop	{r7}
 800cd10:	4770      	bx	lr
	...

0800cd14 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800cd14:	b590      	push	{r4, r7, lr}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800cd1a:	f00f f82f 	bl	801bd7c <UTIL_TIMER_GetCurrentTime>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4a0f      	ldr	r2, [pc, #60]	@ (800cd60 <OnRadioTxDone+0x4c>)
 800cd22:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800cd24:	4c0f      	ldr	r4, [pc, #60]	@ (800cd64 <OnRadioTxDone+0x50>)
 800cd26:	463b      	mov	r3, r7
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f00e f9a7 	bl	801b07c <SysTimeGet>
 800cd2e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800cd32:	463a      	mov	r2, r7
 800cd34:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cd38:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800cd3c:	4a0a      	ldr	r2, [pc, #40]	@ (800cd68 <OnRadioTxDone+0x54>)
 800cd3e:	7813      	ldrb	r3, [r2, #0]
 800cd40:	f043 0310 	orr.w	r3, r3, #16
 800cd44:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800cd46:	f003 f993 	bl	8010070 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800cd4a:	4b08      	ldr	r3, [pc, #32]	@ (800cd6c <OnRadioTxDone+0x58>)
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	2100      	movs	r1, #0
 800cd50:	2002      	movs	r0, #2
 800cd52:	f00f f903 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 800cd56:	bf00      	nop
 800cd58:	370c      	adds	r7, #12
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd90      	pop	{r4, r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20001900 	.word	0x20001900
 800cd64:	20000504 	.word	0x20000504
 800cd68:	200018fc 	.word	0x200018fc
 800cd6c:	0801c8cc 	.word	0x0801c8cc

0800cd70 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	4608      	mov	r0, r1
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	4603      	mov	r3, r0
 800cd80:	817b      	strh	r3, [r7, #10]
 800cd82:	460b      	mov	r3, r1
 800cd84:	813b      	strh	r3, [r7, #8]
 800cd86:	4613      	mov	r3, r2
 800cd88:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800cd8a:	f00e fff7 	bl	801bd7c <UTIL_TIMER_GetCurrentTime>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	4a0f      	ldr	r2, [pc, #60]	@ (800cdd0 <OnRadioRxDone+0x60>)
 800cd92:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800cd94:	4a0e      	ldr	r2, [pc, #56]	@ (800cdd0 <OnRadioRxDone+0x60>)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800cd9a:	4a0d      	ldr	r2, [pc, #52]	@ (800cdd0 <OnRadioRxDone+0x60>)
 800cd9c:	897b      	ldrh	r3, [r7, #10]
 800cd9e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800cda0:	4a0b      	ldr	r2, [pc, #44]	@ (800cdd0 <OnRadioRxDone+0x60>)
 800cda2:	893b      	ldrh	r3, [r7, #8]
 800cda4:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800cda6:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd0 <OnRadioRxDone+0x60>)
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800cdac:	4a09      	ldr	r2, [pc, #36]	@ (800cdd4 <OnRadioRxDone+0x64>)
 800cdae:	7813      	ldrb	r3, [r2, #0]
 800cdb0:	f043 0308 	orr.w	r3, r3, #8
 800cdb4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800cdb6:	f003 f95b 	bl	8010070 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800cdba:	4b07      	ldr	r3, [pc, #28]	@ (800cdd8 <OnRadioRxDone+0x68>)
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	2002      	movs	r0, #2
 800cdc2:	f00f f8cb 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 800cdc6:	bf00      	nop
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	20001904 	.word	0x20001904
 800cdd4:	200018fc 	.word	0x200018fc
 800cdd8:	0801c8dc 	.word	0x0801c8dc

0800cddc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800cde0:	4a07      	ldr	r2, [pc, #28]	@ (800ce00 <OnRadioTxTimeout+0x24>)
 800cde2:	7813      	ldrb	r3, [r2, #0]
 800cde4:	f043 0304 	orr.w	r3, r3, #4
 800cde8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800cdea:	f003 f941 	bl	8010070 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800cdee:	4b05      	ldr	r3, [pc, #20]	@ (800ce04 <OnRadioTxTimeout+0x28>)
 800cdf0:	2201      	movs	r2, #1
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	2002      	movs	r0, #2
 800cdf6:	f00f f8b1 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 800cdfa:	bf00      	nop
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	200018fc 	.word	0x200018fc
 800ce04:	0801c8ec 	.word	0x0801c8ec

0800ce08 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ce0c:	4a04      	ldr	r2, [pc, #16]	@ (800ce20 <OnRadioRxError+0x18>)
 800ce0e:	7813      	ldrb	r3, [r2, #0]
 800ce10:	f043 0302 	orr.w	r3, r3, #2
 800ce14:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce16:	f003 f92b 	bl	8010070 <OnMacProcessNotify>
}
 800ce1a:	bf00      	nop
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	200018fc 	.word	0x200018fc

0800ce24 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ce28:	4a07      	ldr	r2, [pc, #28]	@ (800ce48 <OnRadioRxTimeout+0x24>)
 800ce2a:	7813      	ldrb	r3, [r2, #0]
 800ce2c:	f043 0301 	orr.w	r3, r3, #1
 800ce30:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ce32:	f003 f91d 	bl	8010070 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ce36:	4b05      	ldr	r3, [pc, #20]	@ (800ce4c <OnRadioRxTimeout+0x28>)
 800ce38:	2201      	movs	r2, #1
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	2002      	movs	r0, #2
 800ce3e:	f00f f88d 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 800ce42:	bf00      	nop
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	200018fc 	.word	0x200018fc
 800ce4c:	0801c8fc 	.word	0x0801c8fc

0800ce50 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ce50:	b480      	push	{r7}
 800ce52:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ce54:	4b08      	ldr	r3, [pc, #32]	@ (800ce78 <UpdateRxSlotIdleState+0x28>)
 800ce56:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ce5a:	2b02      	cmp	r3, #2
 800ce5c:	d004      	beq.n	800ce68 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ce5e:	4b07      	ldr	r3, [pc, #28]	@ (800ce7c <UpdateRxSlotIdleState+0x2c>)
 800ce60:	2206      	movs	r2, #6
 800ce62:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ce66:	e003      	b.n	800ce70 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ce68:	4b04      	ldr	r3, [pc, #16]	@ (800ce7c <UpdateRxSlotIdleState+0x2c>)
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
}
 800ce70:	bf00      	nop
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bc80      	pop	{r7}
 800ce76:	4770      	bx	lr
 800ce78:	20000a0c 	.word	0x20000a0c
 800ce7c:	20000504 	.word	0x20000504

0800ce80 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b092      	sub	sp, #72	@ 0x48
 800ce84:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ce86:	4b50      	ldr	r3, [pc, #320]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800ce88:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ce8c:	2b02      	cmp	r3, #2
 800ce8e:	d002      	beq.n	800ce96 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800ce90:	4b4e      	ldr	r3, [pc, #312]	@ (800cfcc <ProcessRadioTxDone+0x14c>)
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce96:	f3ef 8310 	mrs	r3, PRIMASK
 800ce9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 800ce9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800cea0:	b672      	cpsid	i
}
 800cea2:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800cea4:	f00e ff6a 	bl	801bd7c <UTIL_TIMER_GetCurrentTime>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	4b49      	ldr	r3, [pc, #292]	@ (800cfd0 <ProcessRadioTxDone+0x150>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	1ad3      	subs	r3, r2, r3
 800ceb0:	63bb      	str	r3, [r7, #56]	@ 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800ceb2:	4b48      	ldr	r3, [pc, #288]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800ceb4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800ceb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	4619      	mov	r1, r3
 800cebe:	4846      	ldr	r0, [pc, #280]	@ (800cfd8 <ProcessRadioTxDone+0x158>)
 800cec0:	f00e feb2 	bl	801bc28 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800cec4:	4844      	ldr	r0, [pc, #272]	@ (800cfd8 <ProcessRadioTxDone+0x158>)
 800cec6:	f00e fdd1 	bl	801ba6c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800ceca:	4b42      	ldr	r3, [pc, #264]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cecc:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800ced0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	4619      	mov	r1, r3
 800ced6:	4841      	ldr	r0, [pc, #260]	@ (800cfdc <ProcessRadioTxDone+0x15c>)
 800ced8:	f00e fea6 	bl	801bc28 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800cedc:	483f      	ldr	r0, [pc, #252]	@ (800cfdc <ProcessRadioTxDone+0x15c>)
 800cede:	f00e fdc5 	bl	801ba6c <UTIL_TIMER_Start>
 800cee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cee4:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cee8:	f383 8810 	msr	PRIMASK, r3
}
 800ceec:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800ceee:	4b36      	ldr	r3, [pc, #216]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cef0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800cef4:	2b02      	cmp	r3, #2
 800cef6:	d004      	beq.n	800cf02 <ProcessRadioTxDone+0x82>
 800cef8:	4b36      	ldr	r3, [pc, #216]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cefa:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d019      	beq.n	800cf36 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800cf02:	2316      	movs	r3, #22
 800cf04:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800cf08:	4b2f      	ldr	r3, [pc, #188]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cf0a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cf0e:	f107 0220 	add.w	r2, r7, #32
 800cf12:	4611      	mov	r1, r2
 800cf14:	4618      	mov	r0, r3
 800cf16:	f006 fda6 	bl	8013a66 <RegionGetPhyParam>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800cf1e:	4b2d      	ldr	r3, [pc, #180]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cf20:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	4413      	add	r3, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	482d      	ldr	r0, [pc, #180]	@ (800cfe0 <ProcessRadioTxDone+0x160>)
 800cf2c:	f00e fe7c 	bl	801bc28 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800cf30:	482b      	ldr	r0, [pc, #172]	@ (800cfe0 <ProcessRadioTxDone+0x160>)
 800cf32:	f00e fd9b 	bl	801ba6c <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800cf36:	4b26      	ldr	r3, [pc, #152]	@ (800cfd0 <ProcessRadioTxDone+0x150>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	4a23      	ldr	r2, [pc, #140]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cf3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800cf3e:	4b25      	ldr	r3, [pc, #148]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cf40:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800cf44:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800cf46:	4b22      	ldr	r3, [pc, #136]	@ (800cfd0 <ProcessRadioTxDone+0x150>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cf4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cf50:	4618      	mov	r0, r3
 800cf52:	f00e f8cb 	bl	801b0ec <SysTimeGetMcuTime>
 800cf56:	4638      	mov	r0, r7
 800cf58:	4b1b      	ldr	r3, [pc, #108]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cf5a:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800cf5e:	9200      	str	r2, [sp, #0]
 800cf60:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cf64:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800cf68:	ca06      	ldmia	r2, {r1, r2}
 800cf6a:	f00e f820 	bl	801afae <SysTimeSub>
 800cf6e:	f107 0314 	add.w	r3, r7, #20
 800cf72:	463a      	mov	r2, r7
 800cf74:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf78:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800cf7c:	4b15      	ldr	r3, [pc, #84]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cf7e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800cf82:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800cf84:	2301      	movs	r3, #1
 800cf86:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cf88:	4b0f      	ldr	r3, [pc, #60]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cf8a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d101      	bne.n	800cf96 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 800cf92:	2300      	movs	r3, #0
 800cf94:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800cf96:	4b0c      	ldr	r3, [pc, #48]	@ (800cfc8 <ProcessRadioTxDone+0x148>)
 800cf98:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cf9c:	f107 0208 	add.w	r2, r7, #8
 800cfa0:	4611      	mov	r1, r2
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f006 fd80 	bl	8013aa8 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800cfa8:	4b0a      	ldr	r3, [pc, #40]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cfaa:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cfae:	f083 0301 	eor.w	r3, r3, #1
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d003      	beq.n	800cfc0 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800cfb8:	4b06      	ldr	r3, [pc, #24]	@ (800cfd4 <ProcessRadioTxDone+0x154>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    }
#endif /* LORAMAC_VERSION */
}
 800cfc0:	bf00      	nop
 800cfc2:	3740      	adds	r7, #64	@ 0x40
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}
 800cfc8:	20000a0c 	.word	0x20000a0c
 800cfcc:	0801d01c 	.word	0x0801d01c
 800cfd0:	20001900 	.word	0x20001900
 800cfd4:	20000504 	.word	0x20000504
 800cfd8:	20000884 	.word	0x20000884
 800cfdc:	2000089c 	.word	0x2000089c
 800cfe0:	200008f8 	.word	0x200008f8

0800cfe4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800cfe8:	4b10      	ldr	r3, [pc, #64]	@ (800d02c <PrepareRxDoneAbort+0x48>)
 800cfea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800cfee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff2:	4a0e      	ldr	r2, [pc, #56]	@ (800d02c <PrepareRxDoneAbort+0x48>)
 800cff4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800cff8:	4b0c      	ldr	r3, [pc, #48]	@ (800d02c <PrepareRxDoneAbort+0x48>)
 800cffa:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 800d002:	2000      	movs	r0, #0
 800d004:	f001 f950 	bl	800e2a8 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800d008:	4a08      	ldr	r2, [pc, #32]	@ (800d02c <PrepareRxDoneAbort+0x48>)
 800d00a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d00e:	f043 0302 	orr.w	r3, r3, #2
 800d012:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d016:	4a05      	ldr	r2, [pc, #20]	@ (800d02c <PrepareRxDoneAbort+0x48>)
 800d018:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d01c:	f043 0310 	orr.w	r3, r3, #16
 800d020:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

    UpdateRxSlotIdleState( );
 800d024:	f7ff ff14 	bl	800ce50 <UpdateRxSlotIdleState>
}
 800d028:	bf00      	nop
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	20000504 	.word	0x20000504

0800d030 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800d030:	b5b0      	push	{r4, r5, r7, lr}
 800d032:	b0aa      	sub	sp, #168	@ 0xa8
 800d034:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d036:	2313      	movs	r3, #19
 800d038:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800d03c:	4b78      	ldr	r3, [pc, #480]	@ (800d220 <ProcessRadioRxDone+0x1f0>)
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint16_t size = RxDoneParams.Size;
 800d044:	4b76      	ldr	r3, [pc, #472]	@ (800d220 <ProcessRadioRxDone+0x1f0>)
 800d046:	891b      	ldrh	r3, [r3, #8]
 800d048:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 800d04c:	4b74      	ldr	r3, [pc, #464]	@ (800d220 <ProcessRadioRxDone+0x1f0>)
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
    int8_t snr = RxDoneParams.Snr;
 800d054:	4b72      	ldr	r3, [pc, #456]	@ (800d220 <ProcessRadioRxDone+0x1f0>)
 800d056:	7b1b      	ldrb	r3, [r3, #12]
 800d058:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

    uint8_t pktHeaderLen = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86

    uint32_t downLinkCounter = 0;
 800d062:	2300      	movs	r3, #0
 800d064:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800d066:	4b6f      	ldr	r3, [pc, #444]	@ (800d224 <ProcessRadioRxDone+0x1f4>)
 800d068:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d06c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint8_t multicast = 0;
 800d070:	2300      	movs	r3, #0
 800d072:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800d076:	2301      	movs	r3, #1
 800d078:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800d07c:	2301      	movs	r3, #1
 800d07e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800d082:	4b69      	ldr	r3, [pc, #420]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    MacCtx.RxStatus.Rssi = rssi;
 800d08a:	4a67      	ldr	r2, [pc, #412]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d08c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d090:	f8a2 347c 	strh.w	r3, [r2, #1148]	@ 0x47c
    MacCtx.RxStatus.Snr = snr;
 800d094:	4a64      	ldr	r2, [pc, #400]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d096:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d09a:	f882 347e 	strb.w	r3, [r2, #1150]	@ 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800d09e:	4b62      	ldr	r3, [pc, #392]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0a0:	f893 2480 	ldrb.w	r2, [r3, #1152]	@ 0x480
 800d0a4:	4b60      	ldr	r3, [pc, #384]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0a6:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
    MacCtx.McpsIndication.Port = 0;
 800d0aa:	4b5f      	ldr	r3, [pc, #380]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 800d0b2:	4b5d      	ldr	r3, [pc, #372]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800d0ba:	4b5b      	ldr	r3, [pc, #364]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 800d0c2:	4b59      	ldr	r3, [pc, #356]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 800d0ca:	4b57      	ldr	r3, [pc, #348]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.RxData = false;
 800d0d2:	4b55      	ldr	r3, [pc, #340]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.AckReceived = false;
 800d0da:	4b53      	ldr	r3, [pc, #332]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800d0e2:	4b51      	ldr	r3, [pc, #324]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d0ea:	4b4f      	ldr	r3, [pc, #316]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 800d0f2:	4b4d      	ldr	r3, [pc, #308]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800d0fa:	4b4b      	ldr	r3, [pc, #300]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800d102:	4b4a      	ldr	r3, [pc, #296]	@ (800d22c <ProcessRadioRxDone+0x1fc>)
 800d104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d106:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 800d108:	4849      	ldr	r0, [pc, #292]	@ (800d230 <ProcessRadioRxDone+0x200>)
 800d10a:	f00e fd1d 	bl	801bb48 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800d10e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d112:	4619      	mov	r1, r3
 800d114:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800d118:	f004 fd0d 	bl	8011b36 <LoRaMacClassBRxBeacon>
 800d11c:	4603      	mov	r3, r0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d00b      	beq.n	800d13a <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800d122:	4a41      	ldr	r2, [pc, #260]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d124:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800d128:	f8a2 3472 	strh.w	r3, [r2, #1138]	@ 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800d12c:	4a3e      	ldr	r2, [pc, #248]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d12e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d132:	f882 3474 	strb.w	r3, [r2, #1140]	@ 0x474
        return;
 800d136:	f000 bc1f 	b.w	800d978 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d13a:	4b3a      	ldr	r3, [pc, #232]	@ (800d224 <ProcessRadioRxDone+0x1f4>)
 800d13c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d140:	2b01      	cmp	r3, #1
 800d142:	d11e      	bne.n	800d182 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d144:	f004 fd0a 	bl	8011b5c <LoRaMacClassBIsPingExpected>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00a      	beq.n	800d164 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d14e:	2000      	movs	r0, #0
 800d150:	f004 fcbb 	bl	8011aca <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800d154:	2000      	movs	r0, #0
 800d156:	f004 fcdc 	bl	8011b12 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800d15a:	4b33      	ldr	r3, [pc, #204]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d15c:	2204      	movs	r2, #4
 800d15e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
 800d162:	e00e      	b.n	800d182 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d164:	f004 fd01 	bl	8011b6a <LoRaMacClassBIsMulticastExpected>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d009      	beq.n	800d182 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800d16e:	2000      	movs	r0, #0
 800d170:	f004 fcb5 	bl	8011ade <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800d174:	2000      	movs	r0, #0
 800d176:	f004 fcd5 	bl	8011b24 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800d17a:	4b2b      	ldr	r3, [pc, #172]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d17c:	2205      	movs	r2, #5
 800d17e:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800d182:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d186:	2b00      	cmp	r3, #0
 800d188:	d106      	bne.n	800d198 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d18a:	4b27      	ldr	r3, [pc, #156]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d18c:	2201      	movs	r2, #1
 800d18e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
        PrepareRxDoneAbort( );
 800d192:	f7ff ff27 	bl	800cfe4 <PrepareRxDoneAbort>
        return;
 800d196:	e3ef      	b.n	800d978 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800d198:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	f887 2086 	strb.w	r2, [r7, #134]	@ 0x86
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1a8:	4413      	add	r3, r2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800d1b0:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d1b4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	2b06      	cmp	r3, #6
 800d1be:	f200 83b4 	bhi.w	800d92a <ProcessRadioRxDone+0x8fa>
 800d1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1c8 <ProcessRadioRxDone+0x198>)
 800d1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1c8:	0800d1e5 	.word	0x0800d1e5
 800d1cc:	0800d92b 	.word	0x0800d92b
 800d1d0:	0800d3c5 	.word	0x0800d3c5
 800d1d4:	0800d92b 	.word	0x0800d92b
 800d1d8:	0800d3bd 	.word	0x0800d3bd
 800d1dc:	0800d92b 	.word	0x0800d92b
 800d1e0:	0800d8cf 	.word	0x0800d8cf
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800d1e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d1e8:	2b10      	cmp	r3, #16
 800d1ea:	d806      	bhi.n	800d1fa <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d1ec:	4b0e      	ldr	r3, [pc, #56]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d1ee:	2201      	movs	r2, #1
 800d1f0:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d1f4:	f7ff fef6 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d1f8:	e3be      	b.n	800d978 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 800d1fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d1fe:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 800d200:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d204:	b2db      	uxtb	r3, r3
 800d206:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d208:	4b06      	ldr	r3, [pc, #24]	@ (800d224 <ProcessRadioRxDone+0x1f4>)
 800d20a:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d010      	beq.n	800d234 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d212:	4b05      	ldr	r3, [pc, #20]	@ (800d228 <ProcessRadioRxDone+0x1f8>)
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d21a:	f7ff fee3 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d21e:	e3ab      	b.n	800d978 <ProcessRadioRxDone+0x948>
 800d220:	20001904 	.word	0x20001904
 800d224:	20000a0c 	.word	0x20000a0c
 800d228:	20000504 	.word	0x20000504
 800d22c:	0801d01c 	.word	0x0801d01c
 800d230:	2000089c 	.word	0x2000089c
            }

            SecureElementGetJoinEui( joinEui );
 800d234:	1d3b      	adds	r3, r7, #4
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe f9de 	bl	800b5f8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800d23c:	f107 0214 	add.w	r2, r7, #20
 800d240:	1d3b      	adds	r3, r7, #4
 800d242:	4619      	mov	r1, r3
 800d244:	20ff      	movs	r0, #255	@ 0xff
 800d246:	f005 fe93 	bl	8012f70 <LoRaMacCryptoHandleJoinAccept>
 800d24a:	4603      	mov	r3, r0
 800d24c:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800d250:	2300      	movs	r3, #0
 800d252:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d256:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d25a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d25e:	b2db      	uxtb	r3, r3
 800d260:	b25b      	sxtb	r3, r3
 800d262:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d264:	4bbb      	ldr	r3, [pc, #748]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d266:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d26a:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800d26c:	4bb9      	ldr	r3, [pc, #740]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d26e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d272:	4639      	mov	r1, r7
 800d274:	2207      	movs	r2, #7
 800d276:	4618      	mov	r0, r3
 800d278:	f006 fc43 	bl	8013b02 <RegionVerify>
 800d27c:	4603      	mov	r3, r0
 800d27e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800d282:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d286:	2b00      	cmp	r3, #0
 800d288:	f040 808c 	bne.w	800d3a4 <ProcessRadioRxDone+0x374>
 800d28c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 8087 	beq.w	800d3a4 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800d296:	7f7b      	ldrb	r3, [r7, #29]
 800d298:	461a      	mov	r2, r3
 800d29a:	4bae      	ldr	r3, [pc, #696]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d29c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800d2a0:	4bac      	ldr	r3, [pc, #688]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d2a6:	7fbb      	ldrb	r3, [r7, #30]
 800d2a8:	021b      	lsls	r3, r3, #8
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	4aa9      	ldr	r2, [pc, #676]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800d2b2:	4ba8      	ldr	r3, [pc, #672]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800d2b8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ba:	041b      	lsls	r3, r3, #16
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	4aa5      	ldr	r2, [pc, #660]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800d2c4:	6a3b      	ldr	r3, [r7, #32]
 800d2c6:	4aa3      	ldr	r2, [pc, #652]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2c8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800d2cc:	4ba1      	ldr	r3, [pc, #644]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	2002      	movs	r0, #2
 800d2d6:	f7fe f9a7 	bl	800b628 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800d2da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2de:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800d2e2:	b2db      	uxtb	r3, r3
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	4b9b      	ldr	r3, [pc, #620]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2e8:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d2ec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d2f0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	461a      	mov	r2, r3
 800d2f8:	4b96      	ldr	r3, [pc, #600]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d2fa:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800d2fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d302:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d306:	b2db      	uxtb	r3, r3
 800d308:	461a      	mov	r2, r3
 800d30a:	4b92      	ldr	r3, [pc, #584]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d30c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800d310:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d314:	461a      	mov	r2, r3
 800d316:	4b8f      	ldr	r3, [pc, #572]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d318:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800d31a:	4b8e      	ldr	r3, [pc, #568]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d31c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d102      	bne.n	800d328 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800d322:	4b8c      	ldr	r3, [pc, #560]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d324:	2201      	movs	r2, #1
 800d326:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800d328:	4b8a      	ldr	r3, [pc, #552]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d32a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d32c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d330:	fb02 f303 	mul.w	r3, r2, r3
 800d334:	4a87      	ldr	r2, [pc, #540]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d336:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800d338:	4b86      	ldr	r3, [pc, #536]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d33a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d33c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800d340:	4a84      	ldr	r2, [pc, #528]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d342:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800d344:	4b83      	ldr	r3, [pc, #524]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800d34c:	4b81      	ldr	r3, [pc, #516]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800d354:	f107 0314 	add.w	r3, r7, #20
 800d358:	3312      	adds	r3, #18
 800d35a:	67bb      	str	r3, [r7, #120]	@ 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800d35c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d360:	b2db      	uxtb	r3, r3
 800d362:	3b11      	subs	r3, #17
 800d364:	b2db      	uxtb	r3, r3
 800d366:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800d36a:	4b7a      	ldr	r3, [pc, #488]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d36c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d370:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800d374:	4611      	mov	r1, r2
 800d376:	4618      	mov	r0, r3
 800d378:	f006 fbe4 	bl	8013b44 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800d37c:	4b75      	ldr	r3, [pc, #468]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d37e:	2202      	movs	r2, #2
 800d380:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d384:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d388:	4618      	mov	r0, r3
 800d38a:	f005 f8cf 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 82d2 	beq.w	800d93a <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800d396:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800d39a:	4619      	mov	r1, r3
 800d39c:	2000      	movs	r0, #0
 800d39e:	f005 f839 	bl	8012414 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800d3a2:	e2ca      	b.n	800d93a <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800d3a4:	2001      	movs	r0, #1
 800d3a6:	f005 f8c1 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 82c3 	beq.w	800d938 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800d3b2:	2101      	movs	r1, #1
 800d3b4:	2007      	movs	r0, #7
 800d3b6:	f005 f82d 	bl	8012414 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800d3ba:	e2bd      	b.n	800d938 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d3bc:	4b66      	ldr	r3, [pc, #408]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d3c4:	4b63      	ldr	r3, [pc, #396]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d3c6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800d3ca:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800d3ce:	4b62      	ldr	r3, [pc, #392]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d3d0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 800d3d4:	b25b      	sxtb	r3, r3
 800d3d6:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800d3da:	230d      	movs	r3, #13
 800d3dc:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800d3e0:	4b5c      	ldr	r3, [pc, #368]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d3e2:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d002      	beq.n	800d3f0 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800d3ea:	230e      	movs	r3, #14
 800d3ec:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d3f0:	4b58      	ldr	r3, [pc, #352]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d3f2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d3f6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f006 fb32 	bl	8013a66 <RegionGetPhyParam>
 800d402:	4603      	mov	r3, r0
 800d404:	66fb      	str	r3, [r7, #108]	@ 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800d406:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d40a:	3b0d      	subs	r3, #13
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	b21b      	sxth	r3, r3
 800d410:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d414:	b21a      	sxth	r2, r3
 800d416:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d418:	b21b      	sxth	r3, r3
 800d41a:	429a      	cmp	r2, r3
 800d41c:	dc03      	bgt.n	800d426 <ProcessRadioRxDone+0x3f6>
 800d41e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d422:	2b0b      	cmp	r3, #11
 800d424:	d806      	bhi.n	800d434 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d426:	4b4c      	ldr	r3, [pc, #304]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d428:	2201      	movs	r2, #1
 800d42a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d42e:	f7ff fdd9 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d432:	e2a1      	b.n	800d978 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 800d434:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d438:	63fb      	str	r3, [r7, #60]	@ 0x3c
            macMsgData.BufSize = size;
 800d43a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800d444:	4b45      	ldr	r3, [pc, #276]	@ (800d55c <ProcessRadioRxDone+0x52c>)
 800d446:	663b      	str	r3, [r7, #96]	@ 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800d448:	23ff      	movs	r3, #255	@ 0xff
 800d44a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800d44e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d452:	4618      	mov	r0, r3
 800d454:	f006 f889 	bl	801356a <LoRaMacParserData>
 800d458:	4603      	mov	r3, r0
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d006      	beq.n	800d46c <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d45e:	4b3e      	ldr	r3, [pc, #248]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d460:	2201      	movs	r2, #1
 800d462:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d466:	f7ff fdbd 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d46a:	e285      	b.n	800d978 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800d46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d46e:	4a3a      	ldr	r2, [pc, #232]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d470:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800d474:	f107 020e 	add.w	r2, r7, #14
 800d478:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d47c:	4611      	mov	r1, r2
 800d47e:	4618      	mov	r0, r3
 800d480:	f002 fd1e 	bl	800fec0 <DetermineFrameType>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d48a:	4b33      	ldr	r3, [pc, #204]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d48c:	2201      	movs	r2, #1
 800d48e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d492:	f7ff fda7 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d496:	e26f      	b.n	800d978 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 800d498:	2300      	movs	r3, #0
 800d49a:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
            downLinkCounter = 0;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d4a8:	e04f      	b.n	800d54a <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d4aa:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4ae:	4929      	ldr	r1, [pc, #164]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	4413      	add	r3, r2
 800d4b6:	011b      	lsls	r3, r3, #4
 800d4b8:	440b      	add	r3, r1
 800d4ba:	33ec      	adds	r3, #236	@ 0xec
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d13d      	bne.n	800d540 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800d4c4:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4c8:	4922      	ldr	r1, [pc, #136]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	440b      	add	r3, r1
 800d4d4:	33e9      	adds	r3, #233	@ 0xe9
 800d4d6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d031      	beq.n	800d540 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800d4e2:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4e6:	491b      	ldr	r1, [pc, #108]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d4e8:	4613      	mov	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	4413      	add	r3, r2
 800d4ee:	011b      	lsls	r3, r3, #4
 800d4f0:	440b      	add	r3, r1
 800d4f2:	33ea      	adds	r3, #234	@ 0xea
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800d4fa:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d4fe:	4915      	ldr	r1, [pc, #84]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d500:	4613      	mov	r3, r2
 800d502:	005b      	lsls	r3, r3, #1
 800d504:	4413      	add	r3, r2
 800d506:	011b      	lsls	r3, r3, #4
 800d508:	440b      	add	r3, r1
 800d50a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800d514:	f897 2091 	ldrb.w	r2, [r7, #145]	@ 0x91
 800d518:	490e      	ldr	r1, [pc, #56]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d51a:	4613      	mov	r3, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	4413      	add	r3, r2
 800d520:	011b      	lsls	r3, r3, #4
 800d522:	440b      	add	r3, r1
 800d524:	33ec      	adds	r3, #236	@ 0xec
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d52c:	4b09      	ldr	r3, [pc, #36]	@ (800d554 <ProcessRadioRxDone+0x524>)
 800d52e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d532:	2b02      	cmp	r3, #2
 800d534:	d114      	bne.n	800d560 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800d536:	4b08      	ldr	r3, [pc, #32]	@ (800d558 <ProcessRadioRxDone+0x528>)
 800d538:	2203      	movs	r2, #3
 800d53a:	f883 247f 	strb.w	r2, [r3, #1151]	@ 0x47f
                    }
                    break;
 800d53e:	e00f      	b.n	800d560 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d540:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d544:	3301      	adds	r3, #1
 800d546:	f887 3091 	strb.w	r3, [r7, #145]	@ 0x91
 800d54a:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d0ab      	beq.n	800d4aa <ProcessRadioRxDone+0x47a>
 800d552:	e006      	b.n	800d562 <ProcessRadioRxDone+0x532>
 800d554:	20000a0c 	.word	0x20000a0c
 800d558:	20000504 	.word	0x20000504
 800d55c:	2000073c 	.word	0x2000073c
                    break;
 800d560:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d562:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d566:	2b01      	cmp	r3, #1
 800d568:	d117      	bne.n	800d59a <ProcessRadioRxDone+0x56a>
 800d56a:	7bbb      	ldrb	r3, [r7, #14]
 800d56c:	2b03      	cmp	r3, #3
 800d56e:	d10d      	bne.n	800d58c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d570:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d574:	f003 0320 	and.w	r3, r3, #32
 800d578:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d106      	bne.n	800d58c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800d57e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d586:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d006      	beq.n	800d59a <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d58c:	4bb3      	ldr	r3, [pc, #716]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d58e:	2201      	movs	r2, #1
 800d590:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                PrepareRxDoneAbort( );
 800d594:	f7ff fd26 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d598:	e1ee      	b.n	800d978 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800d59a:	2315      	movs	r3, #21
 800d59c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800d5a0:	4baf      	ldr	r3, [pc, #700]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d5a2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d5a6:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f006 fa5a 	bl	8013a66 <RegionGetPhyParam>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	66fb      	str	r3, [r7, #108]	@ 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 800d5b6:	7bb9      	ldrb	r1, [r7, #14]
 800d5b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	4da8      	ldr	r5, [pc, #672]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d5be:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800d5c2:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d5c6:	f107 0210 	add.w	r2, r7, #16
 800d5ca:	9202      	str	r2, [sp, #8]
 800d5cc:	f107 020f 	add.w	r2, r7, #15
 800d5d0:	9201      	str	r2, [sp, #4]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	f8d5 3128 	ldr.w	r3, [r5, #296]	@ 0x128
 800d5d8:	4622      	mov	r2, r4
 800d5da:	f000 fe8d 	bl	800e2f8 <GetFCntDown>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d5e4:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d035      	beq.n	800d658 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800d5ec:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d5f0:	2b07      	cmp	r3, #7
 800d5f2:	d119      	bne.n	800d628 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800d5f4:	4b99      	ldr	r3, [pc, #612]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d5f6:	2208      	movs	r2, #8
 800d5f8:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 800d5fc:	4b98      	ldr	r3, [pc, #608]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d5fe:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d602:	2b00      	cmp	r3, #0
 800d604:	d11d      	bne.n	800d642 <ProcessRadioRxDone+0x612>
 800d606:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d60a:	f023 031f 	bic.w	r3, r3, #31
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2ba0      	cmp	r3, #160	@ 0xa0
 800d612:	d116      	bne.n	800d642 <ProcessRadioRxDone+0x612>
 800d614:	4b92      	ldr	r3, [pc, #584]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d616:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d618:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d111      	bne.n	800d642 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 800d61e:	4b90      	ldr	r3, [pc, #576]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d620:	2201      	movs	r2, #1
 800d622:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800d626:	e00c      	b.n	800d642 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800d628:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d62c:	2b08      	cmp	r3, #8
 800d62e:	d104      	bne.n	800d63a <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800d630:	4b8a      	ldr	r3, [pc, #552]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d632:	220a      	movs	r2, #10
 800d634:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d638:	e003      	b.n	800d642 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d63a:	4b88      	ldr	r3, [pc, #544]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	4a85      	ldr	r2, [pc, #532]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d646:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	4a83      	ldr	r2, [pc, #524]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d64e:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
                PrepareRxDoneAbort( );
 800d652:	f7ff fcc7 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d656:	e18f      	b.n	800d978 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800d658:	7bfa      	ldrb	r2, [r7, #15]
 800d65a:	6939      	ldr	r1, [r7, #16]
 800d65c:	f897 0092 	ldrb.w	r0, [r7, #146]	@ 0x92
 800d660:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800d664:	9300      	str	r3, [sp, #0]
 800d666:	460b      	mov	r3, r1
 800d668:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 800d66c:	f005 fde0 	bl	8013230 <LoRaMacCryptoUnsecureMessage>
 800d670:	4603      	mov	r3, r0
 800d672:	f887 3090 	strb.w	r3, [r7, #144]	@ 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d676:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00f      	beq.n	800d69e <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800d67e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 800d682:	2b02      	cmp	r3, #2
 800d684:	d104      	bne.n	800d690 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800d686:	4b75      	ldr	r3, [pc, #468]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d688:	220b      	movs	r2, #11
 800d68a:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
 800d68e:	e003      	b.n	800d698 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800d690:	4b72      	ldr	r3, [pc, #456]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d692:	220c      	movs	r2, #12
 800d694:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                }
                PrepareRxDoneAbort( );
 800d698:	f7ff fca4 	bl	800cfe4 <PrepareRxDoneAbort>
                return;
 800d69c:	e16c      	b.n	800d978 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d69e:	4b6f      	ldr	r3, [pc, #444]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 800d6a6:	4a6d      	ldr	r2, [pc, #436]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6a8:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d6ac:	f882 341a 	strb.w	r3, [r2, #1050]	@ 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 800d6b0:	4b6a      	ldr	r3, [pc, #424]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 800d6b8:	4b68      	ldr	r3, [pc, #416]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	4a66      	ldr	r2, [pc, #408]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6c4:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	4a64      	ldr	r2, [pc, #400]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6cc:	f8c2 3460 	str.w	r3, [r2, #1120]	@ 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d6d0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d6d4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d6d8:	b2db      	uxtb	r3, r3
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	bf14      	ite	ne
 800d6de:	2301      	movne	r3, #1
 800d6e0:	2300      	moveq	r3, #0
 800d6e2:	b2da      	uxtb	r2, r3
 800d6e4:	4b5d      	ldr	r3, [pc, #372]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6e6:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d6ea:	4b5c      	ldr	r3, [pc, #368]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800d6f2:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d6f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800d6fa:	b2db      	uxtb	r3, r3
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	bf14      	ite	ne
 800d700:	2301      	movne	r3, #1
 800d702:	2300      	moveq	r3, #0
 800d704:	b2da      	uxtb	r2, r3
 800d706:	4b55      	ldr	r3, [pc, #340]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d708:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d70c:	4b53      	ldr	r3, [pc, #332]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d70e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d712:	2b00      	cmp	r3, #0
 800d714:	d004      	beq.n	800d720 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800d716:	4b51      	ldr	r3, [pc, #324]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d718:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d102      	bne.n	800d726 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800d720:	4b4f      	ldr	r3, [pc, #316]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d722:	2200      	movs	r2, #0
 800d724:	629a      	str	r2, [r3, #40]	@ 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800d726:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d104      	bne.n	800d738 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800d72e:	4b4b      	ldr	r3, [pc, #300]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d730:	2202      	movs	r2, #2
 800d732:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d736:	e01f      	b.n	800d778 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800d738:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 800d73c:	f023 031f 	bic.w	r3, r3, #31
 800d740:	b2db      	uxtb	r3, r3
 800d742:	2ba0      	cmp	r3, #160	@ 0xa0
 800d744:	d110      	bne.n	800d768 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800d746:	4b46      	ldr	r3, [pc, #280]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800d74e:	4b44      	ldr	r3, [pc, #272]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d750:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800d758:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d75a:	4a41      	ldr	r2, [pc, #260]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d75c:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800d75e:	4b3f      	ldr	r3, [pc, #252]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
 800d766:	e007      	b.n	800d778 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800d768:	4b3d      	ldr	r3, [pc, #244]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800d770:	4b3a      	ldr	r3, [pc, #232]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d772:	2200      	movs	r2, #0
 800d774:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800d778:	4b39      	ldr	r3, [pc, #228]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d77a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d106      	bne.n	800d790 <ProcessRadioRxDone+0x760>
 800d782:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d786:	f003 0310 	and.w	r3, r3, #16
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d008      	beq.n	800d7a2 <ProcessRadioRxDone+0x772>
 800d790:	4b33      	ldr	r3, [pc, #204]	@ (800d860 <ProcessRadioRxDone+0x830>)
 800d792:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d796:	2b00      	cmp	r3, #0
 800d798:	d103      	bne.n	800d7a2 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800d79a:	4b30      	ldr	r3, [pc, #192]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800d7a2:	4b2e      	ldr	r3, [pc, #184]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d7a4:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d7a8:	4a2c      	ldr	r2, [pc, #176]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d7aa:	f892 2434 	ldrb.w	r2, [r2, #1076]	@ 0x434
 800d7ae:	f897 1048 	ldrb.w	r1, [r7, #72]	@ 0x48
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f001 ff02 	bl	800f5bc <RemoveMacCommands>

            switch( fType )
 800d7b8:	7bbb      	ldrb	r3, [r7, #14]
 800d7ba:	2b03      	cmp	r3, #3
 800d7bc:	d878      	bhi.n	800d8b0 <ProcessRadioRxDone+0x880>
 800d7be:	a201      	add	r2, pc, #4	@ (adr r2, 800d7c4 <ProcessRadioRxDone+0x794>)
 800d7c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c4:	0800d7d5 	.word	0x0800d7d5
 800d7c8:	0800d825 	.word	0x0800d825
 800d7cc:	0800d865 	.word	0x0800d865
 800d7d0:	0800d88b 	.word	0x0800d88b
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d7d4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d7d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	461c      	mov	r4, r3
 800d7e0:	4b1e      	ldr	r3, [pc, #120]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d7e2:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d7e6:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d7ea:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d7ee:	f102 0010 	add.w	r0, r2, #16
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	2100      	movs	r1, #0
 800d7fa:	f000 fef7 	bl	800e5ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d7fe:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d802:	4b16      	ldr	r3, [pc, #88]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d804:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d808:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d80a:	4a14      	ldr	r2, [pc, #80]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d80c:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d810:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d814:	4b11      	ldr	r3, [pc, #68]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d816:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d81a:	4b10      	ldr	r3, [pc, #64]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d81c:	2201      	movs	r2, #1
 800d81e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d822:	e04c      	b.n	800d8be <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800d824:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800d828:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	461c      	mov	r4, r3
 800d830:	4b0a      	ldr	r3, [pc, #40]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d832:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d836:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d83a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800d83e:	f102 0010 	add.w	r0, r2, #16
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	460b      	mov	r3, r1
 800d846:	4622      	mov	r2, r4
 800d848:	2100      	movs	r1, #0
 800d84a:	f000 fecf 	bl	800e5ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d84e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d852:	4b02      	ldr	r3, [pc, #8]	@ (800d85c <ProcessRadioRxDone+0x82c>)
 800d854:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d858:	e031      	b.n	800d8be <ProcessRadioRxDone+0x88e>
 800d85a:	bf00      	nop
 800d85c:	20000504 	.word	0x20000504
 800d860:	20000a0c 	.word	0x20000a0c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800d864:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800d866:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d86a:	4b45      	ldr	r3, [pc, #276]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d86c:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800d870:	f997 1087 	ldrsb.w	r1, [r7, #135]	@ 0x87
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	460b      	mov	r3, r1
 800d878:	2100      	movs	r1, #0
 800d87a:	f000 feb7 	bl	800e5ec <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d87e:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d882:	4b3f      	ldr	r3, [pc, #252]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d884:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    break;
 800d888:	e019      	b.n	800d8be <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800d88a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800d88e:	4b3c      	ldr	r3, [pc, #240]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d890:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800d894:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d896:	4a3a      	ldr	r2, [pc, #232]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d898:	f8c2 3420 	str.w	r3, [r2, #1056]	@ 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800d89c:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800d8a0:	4b37      	ldr	r3, [pc, #220]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8a2:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                    MacCtx.McpsIndication.RxData = true;
 800d8a6:	4b36      	ldr	r3, [pc, #216]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    break;
 800d8ae:	e006      	b.n	800d8be <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d8b0:	4b33      	ldr	r3, [pc, #204]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
                    PrepareRxDoneAbort( );
 800d8b8:	f7ff fb94 	bl	800cfe4 <PrepareRxDoneAbort>
                    break;
 800d8bc:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d8be:	4a30      	ldr	r2, [pc, #192]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8c0:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d8c4:	f043 0302 	orr.w	r3, r3, #2
 800d8c8:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481

            break;
 800d8cc:	e035      	b.n	800d93a <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800d8ce:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d8d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d8d6:	18d1      	adds	r1, r2, r3
 800d8d8:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	4826      	ldr	r0, [pc, #152]	@ (800d984 <ProcessRadioRxDone+0x954>)
 800d8ea:	f009 ff8e 	bl	801780a <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800d8ee:	4b24      	ldr	r3, [pc, #144]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8f0:	2203      	movs	r2, #3
 800d8f2:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800d8f6:	4b22      	ldr	r3, [pc, #136]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800d8fe:	4b20      	ldr	r3, [pc, #128]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d900:	4a20      	ldr	r2, [pc, #128]	@ (800d984 <ProcessRadioRxDone+0x954>)
 800d902:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800d906:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	b2da      	uxtb	r2, r3
 800d914:	4b1a      	ldr	r3, [pc, #104]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d916:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800d91a:	4a19      	ldr	r2, [pc, #100]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d91c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d920:	f043 0302 	orr.w	r3, r3, #2
 800d924:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            break;
 800d928:	e007      	b.n	800d93a <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d92a:	4b15      	ldr	r3, [pc, #84]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d92c:	2201      	movs	r2, #1
 800d92e:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            PrepareRxDoneAbort( );
 800d932:	f7ff fb57 	bl	800cfe4 <PrepareRxDoneAbort>
            break;
 800d936:	e000      	b.n	800d93a <ProcessRadioRxDone+0x90a>
            break;
 800d938:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 800d93a:	4b11      	ldr	r3, [pc, #68]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d93c:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d940:	2b00      	cmp	r3, #0
 800d942:	d008      	beq.n	800d956 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800d944:	4b0e      	ldr	r3, [pc, #56]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d946:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d00b      	beq.n	800d966 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d94e:	2000      	movs	r0, #0
 800d950:	f000 fcaa 	bl	800e2a8 <OnAckTimeoutTimerEvent>
 800d954:	e007      	b.n	800d966 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800d956:	4b0c      	ldr	r3, [pc, #48]	@ (800d988 <ProcessRadioRxDone+0x958>)
 800d958:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d95c:	2b02      	cmp	r3, #2
 800d95e:	d102      	bne.n	800d966 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 800d960:	2000      	movs	r0, #0
 800d962:	f000 fca1 	bl	800e2a8 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d966:	4a06      	ldr	r2, [pc, #24]	@ (800d980 <ProcessRadioRxDone+0x950>)
 800d968:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d96c:	f043 0310 	orr.w	r3, r3, #16
 800d970:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800d974:	f7ff fa6c 	bl	800ce50 <UpdateRxSlotIdleState>
}
 800d978:	3798      	adds	r7, #152	@ 0x98
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bdb0      	pop	{r4, r5, r7, pc}
 800d97e:	bf00      	nop
 800d980:	20000504 	.word	0x20000504
 800d984:	2000073c 	.word	0x2000073c
 800d988:	20000a0c 	.word	0x20000a0c

0800d98c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d990:	4b11      	ldr	r3, [pc, #68]	@ (800d9d8 <ProcessRadioTxTimeout+0x4c>)
 800d992:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d996:	2b02      	cmp	r3, #2
 800d998:	d002      	beq.n	800d9a0 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800d99a:	4b10      	ldr	r3, [pc, #64]	@ (800d9dc <ProcessRadioTxTimeout+0x50>)
 800d99c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800d9a0:	f7ff fa56 	bl	800ce50 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800d9a4:	4b0e      	ldr	r3, [pc, #56]	@ (800d9e0 <ProcessRadioTxTimeout+0x54>)
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800d9ac:	2002      	movs	r0, #2
 800d9ae:	f004 fd89 	bl	80124c4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800d9b2:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e0 <ProcessRadioTxTimeout+0x54>)
 800d9b4:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d003      	beq.n	800d9c4 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 800d9bc:	4b08      	ldr	r3, [pc, #32]	@ (800d9e0 <ProcessRadioTxTimeout+0x54>)
 800d9be:	2201      	movs	r2, #1
 800d9c0:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800d9c4:	4a06      	ldr	r2, [pc, #24]	@ (800d9e0 <ProcessRadioTxTimeout+0x54>)
 800d9c6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800d9ca:	f043 0310 	orr.w	r3, r3, #16
 800d9ce:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
}
 800d9d2:	bf00      	nop
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	20000a0c 	.word	0x20000a0c
 800d9dc:	0801d01c 	.word	0x0801d01c
 800d9e0:	20000504 	.word	0x20000504

0800d9e4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	460a      	mov	r2, r1
 800d9ee:	71fb      	strb	r3, [r7, #7]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9f8:	4b40      	ldr	r3, [pc, #256]	@ (800dafc <HandleRadioRxErrorTimeout+0x118>)
 800d9fa:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d002      	beq.n	800da08 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800da02:	4b3f      	ldr	r3, [pc, #252]	@ (800db00 <HandleRadioRxErrorTimeout+0x11c>)
 800da04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da06:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800da08:	f004 f8a1 	bl	8011b4e <LoRaMacClassBIsBeaconExpected>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d007      	beq.n	800da22 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800da12:	2002      	movs	r0, #2
 800da14:	f004 f84f 	bl	8011ab6 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800da18:	2000      	movs	r0, #0
 800da1a:	f004 f871 	bl	8011b00 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800da1e:	2301      	movs	r3, #1
 800da20:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800da22:	4b36      	ldr	r3, [pc, #216]	@ (800dafc <HandleRadioRxErrorTimeout+0x118>)
 800da24:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800da28:	2b01      	cmp	r3, #1
 800da2a:	d119      	bne.n	800da60 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800da2c:	f004 f896 	bl	8011b5c <LoRaMacClassBIsPingExpected>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d007      	beq.n	800da46 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da36:	2000      	movs	r0, #0
 800da38:	f004 f847 	bl	8011aca <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800da3c:	2000      	movs	r0, #0
 800da3e:	f004 f868 	bl	8011b12 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800da42:	2301      	movs	r3, #1
 800da44:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800da46:	f004 f890 	bl	8011b6a <LoRaMacClassBIsMulticastExpected>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d007      	beq.n	800da60 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800da50:	2000      	movs	r0, #0
 800da52:	f004 f844 	bl	8011ade <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800da56:	2000      	movs	r0, #0
 800da58:	f004 f864 	bl	8011b24 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800da5c:	2301      	movs	r3, #1
 800da5e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800da60:	7bfb      	ldrb	r3, [r7, #15]
 800da62:	f083 0301 	eor.w	r3, r3, #1
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d040      	beq.n	800daee <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800da6c:	4b25      	ldr	r3, [pc, #148]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800da6e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800da72:	2b00      	cmp	r3, #0
 800da74:	d122      	bne.n	800dabc <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800da76:	4b23      	ldr	r3, [pc, #140]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800da78:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d003      	beq.n	800da88 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800da80:	4a20      	ldr	r2, [pc, #128]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800da82:	79fb      	ldrb	r3, [r7, #7]
 800da84:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800da88:	79fb      	ldrb	r3, [r7, #7]
 800da8a:	4618      	mov	r0, r3
 800da8c:	f004 fd1a 	bl	80124c4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800da90:	4b1a      	ldr	r3, [pc, #104]	@ (800dafc <HandleRadioRxErrorTimeout+0x118>)
 800da92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da94:	4618      	mov	r0, r3
 800da96:	f00e f983 	bl	801bda0 <UTIL_TIMER_GetElapsedTime>
 800da9a:	4602      	mov	r2, r0
 800da9c:	4b19      	ldr	r3, [pc, #100]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800da9e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d323      	bcc.n	800daee <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800daa6:	4818      	ldr	r0, [pc, #96]	@ (800db08 <HandleRadioRxErrorTimeout+0x124>)
 800daa8:	f00e f84e 	bl	801bb48 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800daac:	4a15      	ldr	r2, [pc, #84]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800daae:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dab2:	f043 0310 	orr.w	r3, r3, #16
 800dab6:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 800daba:	e018      	b.n	800daee <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800dabc:	4b11      	ldr	r3, [pc, #68]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800dabe:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d003      	beq.n	800dace <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800dac6:	4a0f      	ldr	r2, [pc, #60]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800dac8:	79bb      	ldrb	r3, [r7, #6]
 800daca:	f882 3435 	strb.w	r3, [r2, #1077]	@ 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800dace:	79bb      	ldrb	r3, [r7, #6]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f004 fcf7 	bl	80124c4 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dad6:	4b09      	ldr	r3, [pc, #36]	@ (800dafc <HandleRadioRxErrorTimeout+0x118>)
 800dad8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800dadc:	2b02      	cmp	r3, #2
 800dade:	d006      	beq.n	800daee <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 800dae0:	4a08      	ldr	r2, [pc, #32]	@ (800db04 <HandleRadioRxErrorTimeout+0x120>)
 800dae2:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dae6:	f043 0310 	orr.w	r3, r3, #16
 800daea:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800daee:	f7ff f9af 	bl	800ce50 <UpdateRxSlotIdleState>
}
 800daf2:	bf00      	nop
 800daf4:	3710      	adds	r7, #16
 800daf6:	46bd      	mov	sp, r7
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	bf00      	nop
 800dafc:	20000a0c 	.word	0x20000a0c
 800db00:	0801d01c 	.word	0x0801d01c
 800db04:	20000504 	.word	0x20000504
 800db08:	2000089c 	.word	0x2000089c

0800db0c <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800db10:	2106      	movs	r1, #6
 800db12:	2005      	movs	r0, #5
 800db14:	f7ff ff66 	bl	800d9e4 <HandleRadioRxErrorTimeout>
}
 800db18:	bf00      	nop
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800db20:	2104      	movs	r1, #4
 800db22:	2003      	movs	r0, #3
 800db24:	f7ff ff5e 	bl	800d9e4 <HandleRadioRxErrorTimeout>
}
 800db28:	bf00      	nop
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db32:	f3ef 8310 	mrs	r3, PRIMASK
 800db36:	607b      	str	r3, [r7, #4]
  return(result);
 800db38:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800db3a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800db3c:	b672      	cpsid	i
}
 800db3e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800db40:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb8 <LoRaMacHandleIrqEvents+0x8c>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800db46:	4b1c      	ldr	r3, [pc, #112]	@ (800dbb8 <LoRaMacHandleIrqEvents+0x8c>)
 800db48:	2200      	movs	r2, #0
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db50:	68bb      	ldr	r3, [r7, #8]
 800db52:	f383 8810 	msr	PRIMASK, r3
}
 800db56:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d027      	beq.n	800dbae <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800db5e:	783b      	ldrb	r3, [r7, #0]
 800db60:	f003 0310 	and.w	r3, r3, #16
 800db64:	b2db      	uxtb	r3, r3
 800db66:	2b00      	cmp	r3, #0
 800db68:	d001      	beq.n	800db6e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800db6a:	f7ff f989 	bl	800ce80 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800db6e:	783b      	ldrb	r3, [r7, #0]
 800db70:	f003 0308 	and.w	r3, r3, #8
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800db7a:	f7ff fa59 	bl	800d030 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800db7e:	783b      	ldrb	r3, [r7, #0]
 800db80:	f003 0304 	and.w	r3, r3, #4
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b00      	cmp	r3, #0
 800db88:	d001      	beq.n	800db8e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800db8a:	f7ff feff 	bl	800d98c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800db8e:	783b      	ldrb	r3, [r7, #0]
 800db90:	f003 0302 	and.w	r3, r3, #2
 800db94:	b2db      	uxtb	r3, r3
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800db9a:	f7ff ffb7 	bl	800db0c <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800db9e:	783b      	ldrb	r3, [r7, #0]
 800dba0:	f003 0301 	and.w	r3, r3, #1
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800dbaa:	f7ff ffb7 	bl	800db1c <ProcessRadioRxTimeout>
        }
    }
}
 800dbae:	bf00      	nop
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	200018fc 	.word	0x200018fc

0800dbbc <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dbc0:	4b0b      	ldr	r3, [pc, #44]	@ (800dbf0 <LoRaMacIsBusy+0x34>)
 800dbc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d101      	bne.n	800dbce <LoRaMacIsBusy+0x12>
    {
        return false;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	e00c      	b.n	800dbe8 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dbce:	4b08      	ldr	r3, [pc, #32]	@ (800dbf0 <LoRaMacIsBusy+0x34>)
 800dbd0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800dbd8:	4b05      	ldr	r3, [pc, #20]	@ (800dbf0 <LoRaMacIsBusy+0x34>)
 800dbda:	f893 3482 	ldrb.w	r3, [r3, #1154]	@ 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d101      	bne.n	800dbe6 <LoRaMacIsBusy+0x2a>
    {
        return false;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e000      	b.n	800dbe8 <LoRaMacIsBusy+0x2c>
    }
    return true;
 800dbe6:	2301      	movs	r3, #1
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bc80      	pop	{r7}
 800dbee:	4770      	bx	lr
 800dbf0:	20000504 	.word	0x20000504

0800dbf4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800dbf8:	4b05      	ldr	r3, [pc, #20]	@ (800dc10 <LoRaMacIsStopped+0x1c>)
 800dbfa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d101      	bne.n	800dc06 <LoRaMacIsStopped+0x12>
    {
        return true;
 800dc02:	2301      	movs	r3, #1
 800dc04:	e000      	b.n	800dc08 <LoRaMacIsStopped+0x14>
    }
    return false;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bc80      	pop	{r7}
 800dc0e:	4770      	bx	lr
 800dc10:	20000504 	.word	0x20000504

0800dc14 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800dc14:	b480      	push	{r7}
 800dc16:	b083      	sub	sp, #12
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800dc1e:	4a04      	ldr	r2, [pc, #16]	@ (800dc30 <LoRaMacEnableRequests+0x1c>)
 800dc20:	79fb      	ldrb	r3, [r7, #7]
 800dc22:	f882 3482 	strb.w	r3, [r2, #1154]	@ 0x482
}
 800dc26:	bf00      	nop
 800dc28:	370c      	adds	r7, #12
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bc80      	pop	{r7}
 800dc2e:	4770      	bx	lr
 800dc30:	20000504 	.word	0x20000504

0800dc34 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800dc3a:	4b2c      	ldr	r3, [pc, #176]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc3c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc40:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800dc42:	4b2a      	ldr	r3, [pc, #168]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc44:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d14a      	bne.n	800dce2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dc4c:	4b27      	ldr	r3, [pc, #156]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d006      	beq.n	800dc6a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800dc5c:	4a23      	ldr	r2, [pc, #140]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc5e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dc62:	f023 0301 	bic.w	r3, r3, #1
 800dc66:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dc6a:	4b20      	ldr	r3, [pc, #128]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc6c:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dc70:	f003 0304 	and.w	r3, r3, #4
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d006      	beq.n	800dc88 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800dc7a:	4a1c      	ldr	r2, [pc, #112]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc7c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dc80:	f023 0304 	bic.w	r3, r3, #4
 800dc84:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800dc88:	2001      	movs	r0, #1
 800dc8a:	f7ff ffc3 	bl	800dc14 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800dc8e:	793b      	ldrb	r3, [r7, #4]
 800dc90:	f003 0301 	and.w	r3, r3, #1
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d005      	beq.n	800dca6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800dc9a:	4b14      	ldr	r3, [pc, #80]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dc9c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4813      	ldr	r0, [pc, #76]	@ (800dcf0 <LoRaMacHandleRequestEvents+0xbc>)
 800dca4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800dca6:	793b      	ldrb	r3, [r7, #4]
 800dca8:	f003 0304 	and.w	r3, r3, #4
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00e      	beq.n	800dcd0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800dcb2:	4810      	ldr	r0, [pc, #64]	@ (800dcf4 <LoRaMacHandleRequestEvents+0xc0>)
 800dcb4:	f004 fc54 	bl	8012560 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800dcb8:	f004 fca4 	bl	8012604 <LoRaMacConfirmQueueGetCnt>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d006      	beq.n	800dcd0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800dcc2:	4a0a      	ldr	r2, [pc, #40]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dcc4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dcc8:	f043 0304 	orr.w	r3, r3, #4
 800dccc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800dcd0:	f003 ff69 	bl	8011ba6 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800dcd4:	4a05      	ldr	r2, [pc, #20]	@ (800dcec <LoRaMacHandleRequestEvents+0xb8>)
 800dcd6:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dcda:	f023 0310 	bic.w	r3, r3, #16
 800dcde:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20000504 	.word	0x20000504
 800dcf0:	20000938 	.word	0x20000938
 800dcf4:	2000094c 	.word	0x2000094c

0800dcf8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800dcfc:	4b16      	ldr	r3, [pc, #88]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dcfe:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd02:	f003 0308 	and.w	r3, r3, #8
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00d      	beq.n	800dd28 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800dd0c:	4a12      	ldr	r2, [pc, #72]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dd0e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd12:	f023 0308 	bic.w	r3, r3, #8
 800dd16:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800dd1a:	4b0f      	ldr	r3, [pc, #60]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dd1c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	490e      	ldr	r1, [pc, #56]	@ (800dd5c <LoRaMacHandleIndicationEvents+0x64>)
 800dd24:	480e      	ldr	r0, [pc, #56]	@ (800dd60 <LoRaMacHandleIndicationEvents+0x68>)
 800dd26:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800dd28:	4b0b      	ldr	r3, [pc, #44]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dd2a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd2e:	f003 0302 	and.w	r3, r3, #2
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00d      	beq.n	800dd54 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800dd38:	4a07      	ldr	r2, [pc, #28]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dd3a:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800dd3e:	f023 0302 	bic.w	r3, r3, #2
 800dd42:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800dd46:	4b04      	ldr	r3, [pc, #16]	@ (800dd58 <LoRaMacHandleIndicationEvents+0x60>)
 800dd48:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	4903      	ldr	r1, [pc, #12]	@ (800dd5c <LoRaMacHandleIndicationEvents+0x64>)
 800dd50:	4804      	ldr	r0, [pc, #16]	@ (800dd64 <LoRaMacHandleIndicationEvents+0x6c>)
 800dd52:	4798      	blx	r3
    }
}
 800dd54:	bf00      	nop
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	20000504 	.word	0x20000504
 800dd5c:	20000980 	.word	0x20000980
 800dd60:	20000960 	.word	0x20000960
 800dd64:	2000091c 	.word	0x2000091c

0800dd68 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800dd6e:	4b32      	ldr	r3, [pc, #200]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800dd70:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d058      	beq.n	800de30 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800dd82:	2300      	movs	r3, #0
 800dd84:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800dd86:	4b2c      	ldr	r3, [pc, #176]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800dd88:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d004      	beq.n	800dd9a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800dd90:	4b29      	ldr	r3, [pc, #164]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800dd92:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d104      	bne.n	800dda4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800dd9a:	f002 f8df 	bl	800ff5c <CheckRetransUnconfirmedUplink>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	71fb      	strb	r3, [r7, #7]
 800dda2:	e020      	b.n	800dde6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800dda4:	4b24      	ldr	r3, [pc, #144]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800dda6:	f893 3434 	ldrb.w	r3, [r3, #1076]	@ 0x434
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d11b      	bne.n	800dde6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 800ddae:	4b22      	ldr	r3, [pc, #136]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddb0:	f893 340f 	ldrb.w	r3, [r3, #1039]	@ 0x40f
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d014      	beq.n	800dde2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800ddb8:	f002 f8fc 	bl	800ffb4 <CheckRetransConfirmedUplink>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800ddc0:	4b1e      	ldr	r3, [pc, #120]	@ (800de3c <LoRaMacHandleMcpsRequest+0xd4>)
 800ddc2:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10d      	bne.n	800dde6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 800ddca:	79fb      	ldrb	r3, [r7, #7]
 800ddcc:	f083 0301 	eor.w	r3, r3, #1
 800ddd0:	b2db      	uxtb	r3, r3
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d002      	beq.n	800dddc <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 800ddd6:	f002 f97f 	bl	80100d8 <AckTimeoutRetriesProcess>
 800ddda:	e004      	b.n	800dde6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 800dddc:	f002 f9ba 	bl	8010154 <AckTimeoutRetriesFinalize>
 800dde0:	e001      	b.n	800dde6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 800dde2:	2301      	movs	r3, #1
 800dde4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800dde6:	79fb      	ldrb	r3, [r7, #7]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00d      	beq.n	800de08 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800ddec:	4814      	ldr	r0, [pc, #80]	@ (800de40 <LoRaMacHandleMcpsRequest+0xd8>)
 800ddee:	f00d feab 	bl	801bb48 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ddf2:	4b11      	ldr	r3, [pc, #68]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddf4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ddf8:	f023 0320 	bic.w	r3, r3, #32
 800ddfc:	4a0e      	ldr	r2, [pc, #56]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800ddfe:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800de02:	f002 f8f9 	bl	800fff8 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800de06:	e013      	b.n	800de30 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 800de08:	79bb      	ldrb	r3, [r7, #6]
 800de0a:	f083 0301 	eor.w	r3, r3, #1
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00d      	beq.n	800de30 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800de14:	4a08      	ldr	r2, [pc, #32]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800de16:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800de1a:	f023 0310 	bic.w	r3, r3, #16
 800de1e:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
            MacCtx.AckTimeoutRetry = false;
 800de22:	4b05      	ldr	r3, [pc, #20]	@ (800de38 <LoRaMacHandleMcpsRequest+0xd0>)
 800de24:	2200      	movs	r2, #0
 800de26:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
            OnTxDelayedTimerEvent( NULL );
 800de2a:	2000      	movs	r0, #0
 800de2c:	f000 f992 	bl	800e154 <OnTxDelayedTimerEvent>
}
 800de30:	bf00      	nop
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20000504 	.word	0x20000504
 800de3c:	20000a0c 	.word	0x20000a0c
 800de40:	2000086c 	.word	0x2000086c

0800de44 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800de48:	4b1b      	ldr	r3, [pc, #108]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800de4a:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800de4e:	f003 0304 	and.w	r3, r3, #4
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b00      	cmp	r3, #0
 800de56:	d02c      	beq.n	800deb2 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800de58:	2001      	movs	r0, #1
 800de5a:	f004 fb67 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d012      	beq.n	800de8a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800de64:	2001      	movs	r0, #1
 800de66:	f004 fb03 	bl	8012470 <LoRaMacConfirmQueueGetStatus>
 800de6a:	4603      	mov	r3, r0
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d103      	bne.n	800de78 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800de70:	4b11      	ldr	r3, [pc, #68]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800de72:	2200      	movs	r2, #0
 800de74:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800de78:	4b0f      	ldr	r3, [pc, #60]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800de7a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800de7e:	f023 0302 	bic.w	r3, r3, #2
 800de82:	4a0d      	ldr	r2, [pc, #52]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800de84:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800de88:	e013      	b.n	800deb2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800de8a:	2006      	movs	r0, #6
 800de8c:	f004 fb4e 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800de90:	4603      	mov	r3, r0
 800de92:	2b00      	cmp	r3, #0
 800de94:	d105      	bne.n	800dea2 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800de96:	2007      	movs	r0, #7
 800de98:	f004 fb48 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800de9c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d007      	beq.n	800deb2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dea2:	4b05      	ldr	r3, [pc, #20]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800dea4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dea8:	f023 0302 	bic.w	r3, r3, #2
 800deac:	4a02      	ldr	r2, [pc, #8]	@ (800deb8 <LoRaMacHandleMlmeRequest+0x74>)
 800deae:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800deb2:	bf00      	nop
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	20000504 	.word	0x20000504

0800debc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800debc:	b580      	push	{r7, lr}
 800debe:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800dec0:	200c      	movs	r0, #12
 800dec2:	f004 fb33 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800dec6:	4603      	mov	r3, r0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d019      	beq.n	800df00 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800decc:	4b0e      	ldr	r3, [pc, #56]	@ (800df08 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dece:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ded2:	f003 0301 	and.w	r3, r3, #1
 800ded6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d111      	bne.n	800df00 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800dedc:	4b0a      	ldr	r3, [pc, #40]	@ (800df08 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800dede:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800dee2:	f003 0304 	and.w	r3, r3, #4
 800dee6:	b2db      	uxtb	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d009      	beq.n	800df00 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800deec:	4b06      	ldr	r3, [pc, #24]	@ (800df08 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800deee:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800def2:	f023 0302 	bic.w	r3, r3, #2
 800def6:	4a04      	ldr	r2, [pc, #16]	@ (800df08 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800def8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800defc:	2301      	movs	r3, #1
 800defe:	e000      	b.n	800df02 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	bd80      	pop	{r7, pc}
 800df06:	bf00      	nop
 800df08:	20000504 	.word	0x20000504

0800df0c <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800df0c:	b480      	push	{r7}
 800df0e:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800df10:	4b0d      	ldr	r3, [pc, #52]	@ (800df48 <LoRaMacCheckForRxAbort+0x3c>)
 800df12:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d00f      	beq.n	800df3e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800df1e:	4b0a      	ldr	r3, [pc, #40]	@ (800df48 <LoRaMacCheckForRxAbort+0x3c>)
 800df20:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df28:	4a07      	ldr	r2, [pc, #28]	@ (800df48 <LoRaMacCheckForRxAbort+0x3c>)
 800df2a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df2e:	4b06      	ldr	r3, [pc, #24]	@ (800df48 <LoRaMacCheckForRxAbort+0x3c>)
 800df30:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df34:	f023 0302 	bic.w	r3, r3, #2
 800df38:	4a03      	ldr	r2, [pc, #12]	@ (800df48 <LoRaMacCheckForRxAbort+0x3c>)
 800df3a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800df3e:	bf00      	nop
 800df40:	46bd      	mov	sp, r7
 800df42:	bc80      	pop	{r7}
 800df44:	4770      	bx	lr
 800df46:	bf00      	nop
 800df48:	20000504 	.word	0x20000504

0800df4c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800df58:	2300      	movs	r3, #0
 800df5a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800df5c:	4b50      	ldr	r3, [pc, #320]	@ (800e0a0 <LoRaMacHandleNvm+0x154>)
 800df5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df62:	2b00      	cmp	r3, #0
 800df64:	f040 8098 	bne.w	800e098 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	2124      	movs	r1, #36	@ 0x24
 800df6c:	4618      	mov	r0, r3
 800df6e:	f009 fca1 	bl	80178b4 <Crc32>
 800df72:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df78:	68ba      	ldr	r2, [r7, #8]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d006      	beq.n	800df8c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800df84:	89fb      	ldrh	r3, [r7, #14]
 800df86:	f043 0301 	orr.w	r3, r3, #1
 800df8a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3328      	adds	r3, #40	@ 0x28
 800df90:	211c      	movs	r1, #28
 800df92:	4618      	mov	r0, r3
 800df94:	f009 fc8e 	bl	80178b4 <Crc32>
 800df98:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df9e:	68ba      	ldr	r2, [r7, #8]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d006      	beq.n	800dfb2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800dfaa:	89fb      	ldrh	r3, [r7, #14]
 800dfac:	f043 0302 	orr.w	r3, r3, #2
 800dfb0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	3348      	adds	r3, #72	@ 0x48
 800dfb6:	21fc      	movs	r1, #252	@ 0xfc
 800dfb8:	4618      	mov	r0, r3
 800dfba:	f009 fc7b 	bl	80178b4 <Crc32>
 800dfbe:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d007      	beq.n	800dfdc <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68ba      	ldr	r2, [r7, #8]
 800dfd0:	f8c3 2144 	str.w	r2, [r3, #324]	@ 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800dfd4:	89fb      	ldrh	r3, [r7, #14]
 800dfd6:	f043 0304 	orr.w	r3, r3, #4
 800dfda:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800dfe2:	21d4      	movs	r1, #212	@ 0xd4
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f009 fc65 	bl	80178b4 <Crc32>
 800dfea:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d007      	beq.n	800e008 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800e000:	89fb      	ldrh	r3, [r7, #14]
 800e002:	f043 0308 	orr.w	r3, r3, #8
 800e006:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800e00e:	21a0      	movs	r1, #160	@ 0xa0
 800e010:	4618      	mov	r0, r3
 800e012:	f009 fc4f 	bl	80178b4 <Crc32>
 800e016:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	429a      	cmp	r2, r3
 800e022:	d007      	beq.n	800e034 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	68ba      	ldr	r2, [r7, #8]
 800e028:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800e02c:	89fb      	ldrh	r3, [r7, #14]
 800e02e:	f043 0310 	orr.w	r3, r3, #16
 800e032:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 800e03a:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800e03e:	4618      	mov	r0, r3
 800e040:	f009 fc38 	bl	80178b4 <Crc32>
 800e044:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d007      	beq.n	800e062 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	f8c3 275c 	str.w	r2, [r3, #1884]	@ 0x75c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	f043 0320 	orr.w	r3, r3, #32
 800e060:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f503 63ec 	add.w	r3, r3, #1888	@ 0x760
 800e068:	2114      	movs	r1, #20
 800e06a:	4618      	mov	r0, r3
 800e06c:	f009 fc22 	bl	80178b4 <Crc32>
 800e070:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800e078:	68ba      	ldr	r2, [r7, #8]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d007      	beq.n	800e08e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	f8c3 2774 	str.w	r2, [r3, #1908]	@ 0x774
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800e086:	89fb      	ldrh	r3, [r7, #14]
 800e088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e08c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	4618      	mov	r0, r3
 800e092:	f002 f803 	bl	801009c <CallNvmDataChangeCallback>
 800e096:	e000      	b.n	800e09a <LoRaMacHandleNvm+0x14e>
        return;
 800e098:	bf00      	nop
}
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	20000504 	.word	0x20000504

0800e0a4 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800e0ae:	f7ff fd3d 	bl	800db2c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800e0b2:	f003 fddc 	bl	8011c6e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800e0b6:	4b25      	ldr	r3, [pc, #148]	@ (800e14c <LoRaMacProcess+0xa8>)
 800e0b8:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e0bc:	f003 0310 	and.w	r3, r3, #16
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d023      	beq.n	800e10e <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	f7ff fda4 	bl	800dc14 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800e0cc:	f7ff ff1e 	bl	800df0c <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800e0d0:	f002 f874 	bl	80101bc <IsRequestPending>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d006      	beq.n	800e0e8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800e0da:	f7ff feef 	bl	800debc <LoRaMacCheckForBeaconAcquisition>
 800e0de:	4603      	mov	r3, r0
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	79fb      	ldrb	r3, [r7, #7]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800e0e8:	79fb      	ldrb	r3, [r7, #7]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d103      	bne.n	800e0f6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800e0ee:	f7ff fea9 	bl	800de44 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800e0f2:	f7ff fe39 	bl	800dd68 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800e0f6:	f7ff fd9d 	bl	800dc34 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e0fa:	2001      	movs	r0, #1
 800e0fc:	f7ff fd8a 	bl	800dc14 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800e100:	4a12      	ldr	r2, [pc, #72]	@ (800e14c <LoRaMacProcess+0xa8>)
 800e102:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e106:	f043 0320 	orr.w	r3, r3, #32
 800e10a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    LoRaMacHandleIndicationEvents( );
 800e10e:	f7ff fdf3 	bl	800dcf8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800e112:	4b0e      	ldr	r3, [pc, #56]	@ (800e14c <LoRaMacProcess+0xa8>)
 800e114:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d101      	bne.n	800e120 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800e11c:	f001 fbc8 	bl	800f8b0 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800e120:	4b0a      	ldr	r3, [pc, #40]	@ (800e14c <LoRaMacProcess+0xa8>)
 800e122:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800e126:	f003 0320 	and.w	r3, r3, #32
 800e12a:	b2db      	uxtb	r3, r3
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800e130:	4a06      	ldr	r2, [pc, #24]	@ (800e14c <LoRaMacProcess+0xa8>)
 800e132:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e136:	f023 0320 	bic.w	r3, r3, #32
 800e13a:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
        LoRaMacHandleNvm( &Nvm );
 800e13e:	4804      	ldr	r0, [pc, #16]	@ (800e150 <LoRaMacProcess+0xac>)
 800e140:	f7ff ff04 	bl	800df4c <LoRaMacHandleNvm>
    }
}
 800e144:	bf00      	nop
 800e146:	3708      	adds	r7, #8
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	20000504 	.word	0x20000504
 800e150:	20000a0c 	.word	0x20000a0c

0800e154 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b082      	sub	sp, #8
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800e15c:	4817      	ldr	r0, [pc, #92]	@ (800e1bc <OnTxDelayedTimerEvent+0x68>)
 800e15e:	f00d fcf3 	bl	801bb48 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e162:	4b17      	ldr	r3, [pc, #92]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e164:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e168:	f023 0320 	bic.w	r3, r3, #32
 800e16c:	4a14      	ldr	r2, [pc, #80]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e16e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800e172:	2001      	movs	r0, #1
 800e174:	f001 f8f4 	bl	800f360 <ScheduleTx>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d018      	beq.n	800e1b0 <OnTxDelayedTimerEvent+0x5c>
 800e17e:	2b0b      	cmp	r3, #11
 800e180:	d016      	beq.n	800e1b0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e182:	4b10      	ldr	r3, [pc, #64]	@ (800e1c4 <OnTxDelayedTimerEvent+0x70>)
 800e184:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	4b0d      	ldr	r3, [pc, #52]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e18c:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800e190:	4b0b      	ldr	r3, [pc, #44]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e192:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 800e196:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e198:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800e19c:	4b08      	ldr	r3, [pc, #32]	@ (800e1c0 <OnTxDelayedTimerEvent+0x6c>)
 800e19e:	2209      	movs	r2, #9
 800e1a0:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800e1a4:	2009      	movs	r0, #9
 800e1a6:	f004 f98d 	bl	80124c4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800e1aa:	f001 ff25 	bl	800fff8 <StopRetransmission>
            break;
 800e1ae:	e000      	b.n	800e1b2 <OnTxDelayedTimerEvent+0x5e>
            break;
 800e1b0:	bf00      	nop
        }
    }
}
 800e1b2:	bf00      	nop
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	2000086c 	.word	0x2000086c
 800e1c0:	20000504 	.word	0x20000504
 800e1c4:	20000a0c 	.word	0x20000a0c

0800e1c8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800e1d0:	4b14      	ldr	r3, [pc, #80]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e1d2:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e1d6:	4b13      	ldr	r3, [pc, #76]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e1d8:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800e1dc:	4b12      	ldr	r3, [pc, #72]	@ (800e228 <OnRxWindow1TimerEvent+0x60>)
 800e1de:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800e1e2:	b25a      	sxtb	r2, r3
 800e1e4:	4b0f      	ldr	r3, [pc, #60]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e1e6:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e1ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e228 <OnRxWindow1TimerEvent+0x60>)
 800e1ec:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e1f0:	4b0c      	ldr	r3, [pc, #48]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e1f2:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	@ (800e228 <OnRxWindow1TimerEvent+0x60>)
 800e1f8:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e1fc:	4b09      	ldr	r3, [pc, #36]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e1fe:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800e202:	4b08      	ldr	r3, [pc, #32]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e204:	2200      	movs	r2, #0
 800e206:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800e20a:	4b06      	ldr	r3, [pc, #24]	@ (800e224 <OnRxWindow1TimerEvent+0x5c>)
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800e212:	4906      	ldr	r1, [pc, #24]	@ (800e22c <OnRxWindow1TimerEvent+0x64>)
 800e214:	4806      	ldr	r0, [pc, #24]	@ (800e230 <OnRxWindow1TimerEvent+0x68>)
 800e216:	f001 fb17 	bl	800f848 <RxWindowSetup>
}
 800e21a:	bf00      	nop
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20000504 	.word	0x20000504
 800e228:	20000a0c 	.word	0x20000a0c
 800e22c:	200008bc 	.word	0x200008bc
 800e230:	20000884 	.word	0x20000884

0800e234 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e23c:	4b16      	ldr	r3, [pc, #88]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e23e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800e242:	2b00      	cmp	r3, #0
 800e244:	d023      	beq.n	800e28e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800e246:	4b14      	ldr	r3, [pc, #80]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e248:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e24c:	4b12      	ldr	r3, [pc, #72]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e24e:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800e252:	4b12      	ldr	r3, [pc, #72]	@ (800e29c <OnRxWindow2TimerEvent+0x68>)
 800e254:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e256:	4a10      	ldr	r2, [pc, #64]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e258:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e25c:	4b0f      	ldr	r3, [pc, #60]	@ (800e29c <OnRxWindow2TimerEvent+0x68>)
 800e25e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e262:	4b0d      	ldr	r3, [pc, #52]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e264:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e268:	4b0c      	ldr	r3, [pc, #48]	@ (800e29c <OnRxWindow2TimerEvent+0x68>)
 800e26a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e26e:	4b0a      	ldr	r3, [pc, #40]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e270:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800e274:	4b08      	ldr	r3, [pc, #32]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e276:	2200      	movs	r2, #0
 800e278:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800e27c:	4b06      	ldr	r3, [pc, #24]	@ (800e298 <OnRxWindow2TimerEvent+0x64>)
 800e27e:	2201      	movs	r2, #1
 800e280:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800e284:	4906      	ldr	r1, [pc, #24]	@ (800e2a0 <OnRxWindow2TimerEvent+0x6c>)
 800e286:	4807      	ldr	r0, [pc, #28]	@ (800e2a4 <OnRxWindow2TimerEvent+0x70>)
 800e288:	f001 fade 	bl	800f848 <RxWindowSetup>
 800e28c:	e000      	b.n	800e290 <OnRxWindow2TimerEvent+0x5c>
        return;
 800e28e:	bf00      	nop
}
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20000504 	.word	0x20000504
 800e29c:	20000a0c 	.word	0x20000a0c
 800e2a0:	200008d0 	.word	0x200008d0
 800e2a4:	2000089c 	.word	0x2000089c

0800e2a8 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 800e2b0:	480e      	ldr	r0, [pc, #56]	@ (800e2ec <OnAckTimeoutTimerEvent+0x44>)
 800e2b2:	f00d fc49 	bl	801bb48 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800e2b6:	4b0e      	ldr	r3, [pc, #56]	@ (800e2f0 <OnAckTimeoutTimerEvent+0x48>)
 800e2b8:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d003      	beq.n	800e2c8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 800e2c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e2f0 <OnAckTimeoutTimerEvent+0x48>)
 800e2c2:	2201      	movs	r2, #1
 800e2c4:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800e2f4 <OnAckTimeoutTimerEvent+0x4c>)
 800e2ca:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e2ce:	2b02      	cmp	r3, #2
 800e2d0:	d106      	bne.n	800e2e0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e2d2:	4a07      	ldr	r2, [pc, #28]	@ (800e2f0 <OnAckTimeoutTimerEvent+0x48>)
 800e2d4:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 800e2d8:	f043 0310 	orr.w	r3, r3, #16
 800e2dc:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
    OnMacProcessNotify( );
 800e2e0:	f001 fec6 	bl	8010070 <OnMacProcessNotify>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	200008f8 	.word	0x200008f8
 800e2f0:	20000504 	.word	0x20000504
 800e2f4:	20000a0c 	.word	0x20000a0c

0800e2f8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	60ba      	str	r2, [r7, #8]
 800e300:	607b      	str	r3, [r7, #4]
 800e302:	4603      	mov	r3, r0
 800e304:	73fb      	strb	r3, [r7, #15]
 800e306:	460b      	mov	r3, r1
 800e308:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d005      	beq.n	800e31c <GetFCntDown+0x24>
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <GetFCntDown+0x24>
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800e31c:	230a      	movs	r3, #10
 800e31e:	e029      	b.n	800e374 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800e320:	7bfb      	ldrb	r3, [r7, #15]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d016      	beq.n	800e354 <GetFCntDown+0x5c>
 800e326:	2b01      	cmp	r3, #1
 800e328:	d118      	bne.n	800e35c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800e32a:	79bb      	ldrb	r3, [r7, #6]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d10d      	bne.n	800e34c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800e330:	7bbb      	ldrb	r3, [r7, #14]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d002      	beq.n	800e33c <GetFCntDown+0x44>
 800e336:	7bbb      	ldrb	r3, [r7, #14]
 800e338:	2b03      	cmp	r3, #3
 800e33a:	d103      	bne.n	800e344 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2202      	movs	r2, #2
 800e340:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800e342:	e00d      	b.n	800e360 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	2201      	movs	r2, #1
 800e348:	701a      	strb	r2, [r3, #0]
            break;
 800e34a:	e009      	b.n	800e360 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	2203      	movs	r2, #3
 800e350:	701a      	strb	r2, [r3, #0]
            break;
 800e352:	e005      	b.n	800e360 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800e354:	69fb      	ldr	r3, [r7, #28]
 800e356:	2204      	movs	r2, #4
 800e358:	701a      	strb	r2, [r3, #0]
            break;
 800e35a:	e001      	b.n	800e360 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800e35c:	2305      	movs	r3, #5
 800e35e:	e009      	b.n	800e374 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800e360:	69fb      	ldr	r3, [r7, #28]
 800e362:	7818      	ldrb	r0, [r3, #0]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	89db      	ldrh	r3, [r3, #14]
 800e368:	461a      	mov	r2, r3
 800e36a:	8b39      	ldrh	r1, [r7, #24]
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	f004 fce3 	bl	8012d38 <LoRaMacCryptoGetFCntDown>
 800e372:	4603      	mov	r3, r0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3710      	adds	r7, #16
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800e37c:	b5b0      	push	{r4, r5, r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	4603      	mov	r3, r0
 800e384:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e386:	2303      	movs	r3, #3
 800e388:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800e38a:	4b6d      	ldr	r3, [pc, #436]	@ (800e540 <SwitchClass+0x1c4>)
 800e38c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800e390:	2b02      	cmp	r3, #2
 800e392:	f000 80b9 	beq.w	800e508 <SwitchClass+0x18c>
 800e396:	2b02      	cmp	r3, #2
 800e398:	f300 80cc 	bgt.w	800e534 <SwitchClass+0x1b8>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <SwitchClass+0x2c>
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	f000 80a3 	beq.w	800e4ec <SwitchClass+0x170>
 800e3a6:	e0c5      	b.n	800e534 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800e3a8:	79fb      	ldrb	r3, [r7, #7]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d109      	bne.n	800e3c2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e3ae:	4b64      	ldr	r3, [pc, #400]	@ (800e540 <SwitchClass+0x1c4>)
 800e3b0:	4a63      	ldr	r2, [pc, #396]	@ (800e540 <SwitchClass+0x1c4>)
 800e3b2:	3374      	adds	r3, #116	@ 0x74
 800e3b4:	326c      	adds	r2, #108	@ 0x6c
 800e3b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3ba:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	2b01      	cmp	r3, #1
 800e3c6:	d10c      	bne.n	800e3e2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800e3c8:	79fb      	ldrb	r3, [r7, #7]
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	f003 fbf1 	bl	8011bb2 <LoRaMacClassBSwitchClass>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800e3d4:	7bfb      	ldrb	r3, [r7, #15]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d103      	bne.n	800e3e2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800e3da:	4a59      	ldr	r2, [pc, #356]	@ (800e540 <SwitchClass+0x1c4>)
 800e3dc:	79fb      	ldrb	r3, [r7, #7]
 800e3de:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800e3e2:	79fb      	ldrb	r3, [r7, #7]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	f040 80a0 	bne.w	800e52a <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e3ea:	4a55      	ldr	r2, [pc, #340]	@ (800e540 <SwitchClass+0x1c4>)
 800e3ec:	79fb      	ldrb	r3, [r7, #7]
 800e3ee:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800e3f2:	4a54      	ldr	r2, [pc, #336]	@ (800e544 <SwitchClass+0x1c8>)
 800e3f4:	4b53      	ldr	r3, [pc, #332]	@ (800e544 <SwitchClass+0x1c8>)
 800e3f6:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800e3fa:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800e3fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e402:	682b      	ldr	r3, [r5, #0]
 800e404:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800e406:	4b4f      	ldr	r3, [pc, #316]	@ (800e544 <SwitchClass+0x1c8>)
 800e408:	2202      	movs	r2, #2
 800e40a:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e40e:	2300      	movs	r3, #0
 800e410:	73bb      	strb	r3, [r7, #14]
 800e412:	e05b      	b.n	800e4cc <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e414:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e418:	4949      	ldr	r1, [pc, #292]	@ (800e540 <SwitchClass+0x1c4>)
 800e41a:	4613      	mov	r3, r2
 800e41c:	005b      	lsls	r3, r3, #1
 800e41e:	4413      	add	r3, r2
 800e420:	011b      	lsls	r3, r3, #4
 800e422:	440b      	add	r3, r1
 800e424:	33e9      	adds	r3, #233	@ 0xe9
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d049      	beq.n	800e4c0 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800e42c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e430:	4943      	ldr	r1, [pc, #268]	@ (800e540 <SwitchClass+0x1c4>)
 800e432:	4613      	mov	r3, r2
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	4413      	add	r3, r2
 800e438:	011b      	lsls	r3, r3, #4
 800e43a:	440b      	add	r3, r1
 800e43c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800e440:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800e442:	2b02      	cmp	r3, #2
 800e444:	d13c      	bne.n	800e4c0 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800e446:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e44a:	493d      	ldr	r1, [pc, #244]	@ (800e540 <SwitchClass+0x1c4>)
 800e44c:	4613      	mov	r3, r2
 800e44e:	005b      	lsls	r3, r3, #1
 800e450:	4413      	add	r3, r2
 800e452:	011b      	lsls	r3, r3, #4
 800e454:	440b      	add	r3, r1
 800e456:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4a38      	ldr	r2, [pc, #224]	@ (800e540 <SwitchClass+0x1c4>)
 800e45e:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800e460:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800e464:	4936      	ldr	r1, [pc, #216]	@ (800e540 <SwitchClass+0x1c4>)
 800e466:	4613      	mov	r3, r2
 800e468:	005b      	lsls	r3, r3, #1
 800e46a:	4413      	add	r3, r2
 800e46c:	011b      	lsls	r3, r3, #4
 800e46e:	440b      	add	r3, r1
 800e470:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800e474:	f993 3000 	ldrsb.w	r3, [r3]
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	4b31      	ldr	r3, [pc, #196]	@ (800e540 <SwitchClass+0x1c4>)
 800e47c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800e480:	4b30      	ldr	r3, [pc, #192]	@ (800e544 <SwitchClass+0x1c8>)
 800e482:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800e486:	4b2f      	ldr	r3, [pc, #188]	@ (800e544 <SwitchClass+0x1c8>)
 800e488:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800e48c:	4b2c      	ldr	r3, [pc, #176]	@ (800e540 <SwitchClass+0x1c4>)
 800e48e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e490:	4a2c      	ldr	r2, [pc, #176]	@ (800e544 <SwitchClass+0x1c8>)
 800e492:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e496:	4b2a      	ldr	r3, [pc, #168]	@ (800e540 <SwitchClass+0x1c4>)
 800e498:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800e49c:	4b29      	ldr	r3, [pc, #164]	@ (800e544 <SwitchClass+0x1c8>)
 800e49e:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e4a2:	4b27      	ldr	r3, [pc, #156]	@ (800e540 <SwitchClass+0x1c4>)
 800e4a4:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e4a8:	4b26      	ldr	r3, [pc, #152]	@ (800e544 <SwitchClass+0x1c8>)
 800e4aa:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e4ae:	4b25      	ldr	r3, [pc, #148]	@ (800e544 <SwitchClass+0x1c8>)
 800e4b0:	2203      	movs	r2, #3
 800e4b2:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800e4b6:	4b23      	ldr	r3, [pc, #140]	@ (800e544 <SwitchClass+0x1c8>)
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
                        break;
 800e4be:	e009      	b.n	800e4d4 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e4c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	73bb      	strb	r3, [r7, #14]
 800e4cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	dd9f      	ble.n	800e414 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800e4d4:	4b1b      	ldr	r3, [pc, #108]	@ (800e544 <SwitchClass+0x1c8>)
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800e4dc:	4b1a      	ldr	r3, [pc, #104]	@ (800e548 <SwitchClass+0x1cc>)
 800e4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800e4e2:	f001 f9e5 	bl	800f8b0 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800e4ea:	e01e      	b.n	800e52a <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f003 fb5f 	bl	8011bb2 <LoRaMacClassBSwitchClass>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d117      	bne.n	800e52e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e4fe:	4a10      	ldr	r2, [pc, #64]	@ (800e540 <SwitchClass+0x1c4>)
 800e500:	79fb      	ldrb	r3, [r7, #7]
 800e502:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800e506:	e012      	b.n	800e52e <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800e508:	79fb      	ldrb	r3, [r7, #7]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d111      	bne.n	800e532 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800e50e:	4b0d      	ldr	r3, [pc, #52]	@ (800e544 <SwitchClass+0x1c8>)
 800e510:	2206      	movs	r2, #6
 800e512:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800e516:	4a0a      	ldr	r2, [pc, #40]	@ (800e540 <SwitchClass+0x1c4>)
 800e518:	79fb      	ldrb	r3, [r7, #7]
 800e51a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800e51e:	4b0a      	ldr	r3, [pc, #40]	@ (800e548 <SwitchClass+0x1cc>)
 800e520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e522:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800e528:	e003      	b.n	800e532 <SwitchClass+0x1b6>
            break;
 800e52a:	bf00      	nop
 800e52c:	e002      	b.n	800e534 <SwitchClass+0x1b8>
            break;
 800e52e:	bf00      	nop
 800e530:	e000      	b.n	800e534 <SwitchClass+0x1b8>
            break;
 800e532:	bf00      	nop
        }
    }

    return status;
 800e534:	7bfb      	ldrb	r3, [r7, #15]
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bdb0      	pop	{r4, r5, r7, pc}
 800e53e:	bf00      	nop
 800e540:	20000a0c 	.word	0x20000a0c
 800e544:	20000504 	.word	0x20000504
 800e548:	0801d01c 	.word	0x0801d01c

0800e54c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b086      	sub	sp, #24
 800e550:	af00      	add	r7, sp, #0
 800e552:	4603      	mov	r3, r0
 800e554:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e556:	4b10      	ldr	r3, [pc, #64]	@ (800e598 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e558:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e55c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800e55e:	79fb      	ldrb	r3, [r7, #7]
 800e560:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e562:	230d      	movs	r3, #13
 800e564:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e566:	4b0c      	ldr	r3, [pc, #48]	@ (800e598 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e568:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d001      	beq.n	800e574 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e570:	230e      	movs	r3, #14
 800e572:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e574:	4b08      	ldr	r3, [pc, #32]	@ (800e598 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800e576:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e57a:	f107 0210 	add.w	r2, r7, #16
 800e57e:	4611      	mov	r1, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f005 fa70 	bl	8013a66 <RegionGetPhyParam>
 800e586:	4603      	mov	r3, r0
 800e588:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	b2db      	uxtb	r3, r3
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3718      	adds	r7, #24
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	20000a0c 	.word	0x20000a0c

0800e59c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b084      	sub	sp, #16
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	71fb      	strb	r3, [r7, #7]
 800e5a6:	460b      	mov	r3, r1
 800e5a8:	71bb      	strb	r3, [r7, #6]
 800e5aa:	4613      	mov	r3, r2
 800e5ac:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e5b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f7ff ffc6 	bl	800e54c <GetMaxAppPayloadWithoutFOptsLength>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800e5c4:	79fb      	ldrb	r3, [r7, #7]
 800e5c6:	b29a      	uxth	r2, r3
 800e5c8:	797b      	ldrb	r3, [r7, #5]
 800e5ca:	b29b      	uxth	r3, r3
 800e5cc:	4413      	add	r3, r2
 800e5ce:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800e5d0:	89ba      	ldrh	r2, [r7, #12]
 800e5d2:	89fb      	ldrh	r3, [r7, #14]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d804      	bhi.n	800e5e2 <ValidatePayloadLength+0x46>
 800e5d8:	89bb      	ldrh	r3, [r7, #12]
 800e5da:	2bff      	cmp	r3, #255	@ 0xff
 800e5dc:	d801      	bhi.n	800e5e2 <ValidatePayloadLength+0x46>
    {
        return true;
 800e5de:	2301      	movs	r3, #1
 800e5e0:	e000      	b.n	800e5e4 <ValidatePayloadLength+0x48>
    }
    return false;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3710      	adds	r7, #16
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800e5ec:	b590      	push	{r4, r7, lr}
 800e5ee:	b0a5      	sub	sp, #148	@ 0x94
 800e5f0:	af02      	add	r7, sp, #8
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	4608      	mov	r0, r1
 800e5f6:	4611      	mov	r1, r2
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	70fb      	strb	r3, [r7, #3]
 800e5fe:	460b      	mov	r3, r1
 800e600:	70bb      	strb	r3, [r7, #2]
 800e602:	4613      	mov	r3, r2
 800e604:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800e60c:	2300      	movs	r3, #0
 800e60e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800e612:	2300      	movs	r3, #0
 800e614:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800e618:	f000 bc7d 	b.w	800ef16 <ProcessMacCommands+0x92a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800e61c:	78fb      	ldrb	r3, [r7, #3]
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	4413      	add	r3, r2
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	4618      	mov	r0, r3
 800e626:	f003 fda9 	bl	801217c <LoRaMacCommandsGetCmdSize>
 800e62a:	4603      	mov	r3, r0
 800e62c:	461a      	mov	r2, r3
 800e62e:	78fb      	ldrb	r3, [r7, #3]
 800e630:	441a      	add	r2, r3
 800e632:	78bb      	ldrb	r3, [r7, #2]
 800e634:	429a      	cmp	r2, r3
 800e636:	f300 8474 	bgt.w	800ef22 <ProcessMacCommands+0x936>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800e63a:	78fb      	ldrb	r3, [r7, #3]
 800e63c:	1c5a      	adds	r2, r3, #1
 800e63e:	70fa      	strb	r2, [r7, #3]
 800e640:	461a      	mov	r2, r3
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4413      	add	r3, r2
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	3b02      	subs	r3, #2
 800e64a:	2b11      	cmp	r3, #17
 800e64c:	f200 846b 	bhi.w	800ef26 <ProcessMacCommands+0x93a>
 800e650:	a201      	add	r2, pc, #4	@ (adr r2, 800e658 <ProcessMacCommands+0x6c>)
 800e652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e656:	bf00      	nop
 800e658:	0800e6a1 	.word	0x0800e6a1
 800e65c:	0800e6e3 	.word	0x0800e6e3
 800e660:	0800e7ff 	.word	0x0800e7ff
 800e664:	0800e83d 	.word	0x0800e83d
 800e668:	0800e927 	.word	0x0800e927
 800e66c:	0800e985 	.word	0x0800e985
 800e670:	0800ea41 	.word	0x0800ea41
 800e674:	0800ea97 	.word	0x0800ea97
 800e678:	0800eb7d 	.word	0x0800eb7d
 800e67c:	0800ef27 	.word	0x0800ef27
 800e680:	0800ef27 	.word	0x0800ef27
 800e684:	0800ec21 	.word	0x0800ec21
 800e688:	0800ef27 	.word	0x0800ef27
 800e68c:	0800ef27 	.word	0x0800ef27
 800e690:	0800ed37 	.word	0x0800ed37
 800e694:	0800ed6b 	.word	0x0800ed6b
 800e698:	0800edfb 	.word	0x0800edfb
 800e69c:	0800ee73 	.word	0x0800ee73
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800e6a0:	2005      	movs	r0, #5
 800e6a2:	f003 ff43 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	f000 8425 	beq.w	800eef8 <ProcessMacCommands+0x90c>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800e6ae:	2105      	movs	r1, #5
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f003 feaf 	bl	8012414 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800e6b6:	78fb      	ldrb	r3, [r7, #3]
 800e6b8:	1c5a      	adds	r2, r3, #1
 800e6ba:	70fa      	strb	r2, [r7, #3]
 800e6bc:	461a      	mov	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	781a      	ldrb	r2, [r3, #0]
 800e6c4:	4bac      	ldr	r3, [pc, #688]	@ (800e978 <ProcessMacCommands+0x38c>)
 800e6c6:	f883 2450 	strb.w	r2, [r3, #1104]	@ 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800e6ca:	78fb      	ldrb	r3, [r7, #3]
 800e6cc:	1c5a      	adds	r2, r3, #1
 800e6ce:	70fa      	strb	r2, [r7, #3]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	781a      	ldrb	r2, [r3, #0]
 800e6d8:	4ba7      	ldr	r3, [pc, #668]	@ (800e978 <ProcessMacCommands+0x38c>)
 800e6da:	f883 2451 	strb.w	r2, [r3, #1105]	@ 0x451
                }
                break;
 800e6de:	f000 bc0b 	b.w	800eef8 <ProcessMacCommands+0x90c>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800e6e2:	2300      	movs	r3, #0
 800e6e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 800e6fa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800e6fe:	f083 0301 	eor.w	r3, r3, #1
 800e702:	b2db      	uxtb	r3, r3
 800e704:	2b00      	cmp	r3, #0
 800e706:	f000 83f9 	beq.w	800eefc <ProcessMacCommands+0x910>
                {
                    adrBlockFound = true;
 800e70a:	2301      	movs	r3, #1
 800e70c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800e710:	78fb      	ldrb	r3, [r7, #3]
 800e712:	3b01      	subs	r3, #1
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	4413      	add	r3, r2
 800e718:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e71a:	78ba      	ldrb	r2, [r7, #2]
 800e71c:	78fb      	ldrb	r3, [r7, #3]
 800e71e:	1ad3      	subs	r3, r2, r3
 800e720:	b2db      	uxtb	r3, r3
 800e722:	3301      	adds	r3, #1
 800e724:	b2db      	uxtb	r3, r3
 800e726:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e72a:	4b94      	ldr	r3, [pc, #592]	@ (800e97c <ProcessMacCommands+0x390>)
 800e72c:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e730:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e734:	4b91      	ldr	r3, [pc, #580]	@ (800e97c <ProcessMacCommands+0x390>)
 800e736:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e73a:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e73e:	4b8f      	ldr	r3, [pc, #572]	@ (800e97c <ProcessMacCommands+0x390>)
 800e740:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e744:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e748:	4b8c      	ldr	r3, [pc, #560]	@ (800e97c <ProcessMacCommands+0x390>)
 800e74a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e74e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e752:	4b8a      	ldr	r3, [pc, #552]	@ (800e97c <ProcessMacCommands+0x390>)
 800e754:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e758:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e75c:	4b87      	ldr	r3, [pc, #540]	@ (800e97c <ProcessMacCommands+0x390>)
 800e75e:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800e762:	65bb      	str	r3, [r7, #88]	@ 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e764:	4b85      	ldr	r3, [pc, #532]	@ (800e97c <ProcessMacCommands+0x390>)
 800e766:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800e76a:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800e76e:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800e772:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800e776:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800e77a:	9301      	str	r3, [sp, #4]
 800e77c:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800e780:	9300      	str	r3, [sp, #0]
 800e782:	4623      	mov	r3, r4
 800e784:	f005 fa72 	bl	8013c6c <RegionLinkAdrReq>
 800e788:	4603      	mov	r3, r0
 800e78a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 800e78e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e792:	f003 0307 	and.w	r3, r3, #7
 800e796:	2b07      	cmp	r3, #7
 800e798:	d10e      	bne.n	800e7b8 <ProcessMacCommands+0x1cc>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800e79a:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800e79e:	4b77      	ldr	r3, [pc, #476]	@ (800e97c <ProcessMacCommands+0x390>)
 800e7a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800e7a4:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800e7a8:	4b74      	ldr	r3, [pc, #464]	@ (800e97c <ProcessMacCommands+0x390>)
 800e7aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800e7ae:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800e7b2:	4b72      	ldr	r3, [pc, #456]	@ (800e97c <ProcessMacCommands+0x390>)
 800e7b4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e7be:	e00b      	b.n	800e7d8 <ProcessMacCommands+0x1ec>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800e7c0:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800e7c4:	2201      	movs	r2, #1
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	2003      	movs	r0, #3
 800e7ca:	f003 fb77 	bl	8011ebc <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800e7ce:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800e7d8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e7dc:	4a68      	ldr	r2, [pc, #416]	@ (800e980 <ProcessMacCommands+0x394>)
 800e7de:	fba2 2303 	umull	r2, r3, r2, r3
 800e7e2:	089b      	lsrs	r3, r3, #2
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800e7ea:	429a      	cmp	r2, r3
 800e7ec:	d3e8      	bcc.n	800e7c0 <ProcessMacCommands+0x1d4>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 800e7ee:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e7f2:	78fb      	ldrb	r3, [r7, #3]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	3b01      	subs	r3, #1
 800e7fa:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800e7fc:	e37e      	b.n	800eefc <ProcessMacCommands+0x910>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e7fe:	78fb      	ldrb	r3, [r7, #3]
 800e800:	1c5a      	adds	r2, r3, #1
 800e802:	70fa      	strb	r2, [r7, #3]
 800e804:	461a      	mov	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	f003 030f 	and.w	r3, r3, #15
 800e810:	b2da      	uxtb	r2, r3
 800e812:	4b5a      	ldr	r3, [pc, #360]	@ (800e97c <ProcessMacCommands+0x390>)
 800e814:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e818:	4b58      	ldr	r3, [pc, #352]	@ (800e97c <ProcessMacCommands+0x390>)
 800e81a:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800e81e:	461a      	mov	r2, r3
 800e820:	2301      	movs	r3, #1
 800e822:	4093      	lsls	r3, r2
 800e824:	b29a      	uxth	r2, r3
 800e826:	4b55      	ldr	r3, [pc, #340]	@ (800e97c <ProcessMacCommands+0x390>)
 800e828:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e82c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e830:	2200      	movs	r2, #0
 800e832:	4619      	mov	r1, r3
 800e834:	2004      	movs	r0, #4
 800e836:	f003 fb41 	bl	8011ebc <LoRaMacCommandsAddCmd>
                break;
 800e83a:	e36c      	b.n	800ef16 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800e83c:	2307      	movs	r3, #7
 800e83e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e842:	78fb      	ldrb	r3, [r7, #3]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	4413      	add	r3, r2
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	091b      	lsrs	r3, r3, #4
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	b25b      	sxtb	r3, r3
 800e850:	f003 0307 	and.w	r3, r3, #7
 800e854:	b25b      	sxtb	r3, r3
 800e856:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e85a:	78fb      	ldrb	r3, [r7, #3]
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	4413      	add	r3, r2
 800e860:	781b      	ldrb	r3, [r3, #0]
 800e862:	b25b      	sxtb	r3, r3
 800e864:	f003 030f 	and.w	r3, r3, #15
 800e868:	b25b      	sxtb	r3, r3
 800e86a:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800e86e:	78fb      	ldrb	r3, [r7, #3]
 800e870:	3301      	adds	r3, #1
 800e872:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e874:	78fb      	ldrb	r3, [r7, #3]
 800e876:	1c5a      	adds	r2, r3, #1
 800e878:	70fa      	strb	r2, [r7, #3]
 800e87a:	461a      	mov	r2, r3
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4413      	add	r3, r2
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e884:	78fb      	ldrb	r3, [r7, #3]
 800e886:	1c5a      	adds	r2, r3, #1
 800e888:	70fa      	strb	r2, [r7, #3]
 800e88a:	461a      	mov	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4413      	add	r3, r2
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	021a      	lsls	r2, r3, #8
 800e894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e896:	4313      	orrs	r3, r2
 800e898:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e89a:	78fb      	ldrb	r3, [r7, #3]
 800e89c:	1c5a      	adds	r2, r3, #1
 800e89e:	70fa      	strb	r2, [r7, #3]
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	4413      	add	r3, r2
 800e8a6:	781b      	ldrb	r3, [r3, #0]
 800e8a8:	041a      	lsls	r2, r3, #16
 800e8aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800e8b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8b2:	2264      	movs	r2, #100	@ 0x64
 800e8b4:	fb02 f303 	mul.w	r3, r2, r3
 800e8b8:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e8ba:	4b30      	ldr	r3, [pc, #192]	@ (800e97c <ProcessMacCommands+0x390>)
 800e8bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e8c0:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800e8c4:	4611      	mov	r1, r2
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f005 f9f7 	bl	8013cba <RegionRxParamSetupReq>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800e8d2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e8d6:	f003 0307 	and.w	r3, r3, #7
 800e8da:	2b07      	cmp	r3, #7
 800e8dc:	d117      	bne.n	800e90e <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e8de:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	4b25      	ldr	r3, [pc, #148]	@ (800e97c <ProcessMacCommands+0x390>)
 800e8e6:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e8ea:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	4b22      	ldr	r3, [pc, #136]	@ (800e97c <ProcessMacCommands+0x390>)
 800e8f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e8f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8f8:	4a20      	ldr	r2, [pc, #128]	@ (800e97c <ProcessMacCommands+0x390>)
 800e8fa:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e8fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800e97c <ProcessMacCommands+0x390>)
 800e900:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e902:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800e906:	b2da      	uxtb	r2, r3
 800e908:	4b1c      	ldr	r3, [pc, #112]	@ (800e97c <ProcessMacCommands+0x390>)
 800e90a:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800e90e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800e912:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e916:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e91a:	2201      	movs	r2, #1
 800e91c:	4619      	mov	r1, r3
 800e91e:	2005      	movs	r0, #5
 800e920:	f003 facc 	bl	8011ebc <LoRaMacCommandsAddCmd>
                break;
 800e924:	e2f7      	b.n	800ef16 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e926:	23ff      	movs	r3, #255	@ 0xff
 800e928:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e92c:	4b12      	ldr	r3, [pc, #72]	@ (800e978 <ProcessMacCommands+0x38c>)
 800e92e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e932:	2b00      	cmp	r3, #0
 800e934:	d00d      	beq.n	800e952 <ProcessMacCommands+0x366>
 800e936:	4b10      	ldr	r3, [pc, #64]	@ (800e978 <ProcessMacCommands+0x38c>)
 800e938:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d007      	beq.n	800e952 <ProcessMacCommands+0x366>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e942:	4b0d      	ldr	r3, [pc, #52]	@ (800e978 <ProcessMacCommands+0x38c>)
 800e944:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4798      	blx	r3
 800e94c:	4603      	mov	r3, r0
 800e94e:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800e952:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800e956:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e95a:	787b      	ldrb	r3, [r7, #1]
 800e95c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e966:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800e96a:	2202      	movs	r2, #2
 800e96c:	4619      	mov	r1, r3
 800e96e:	2006      	movs	r0, #6
 800e970:	f003 faa4 	bl	8011ebc <LoRaMacCommandsAddCmd>
                break;
 800e974:	e2cf      	b.n	800ef16 <ProcessMacCommands+0x92a>
 800e976:	bf00      	nop
 800e978:	20000504 	.word	0x20000504
 800e97c:	20000a0c 	.word	0x20000a0c
 800e980:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800e984:	2303      	movs	r3, #3
 800e986:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800e98a:	78fb      	ldrb	r3, [r7, #3]
 800e98c:	1c5a      	adds	r2, r3, #1
 800e98e:	70fa      	strb	r2, [r7, #3]
 800e990:	461a      	mov	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4413      	add	r3, r2
 800e996:	781b      	ldrb	r3, [r3, #0]
 800e998:	b25b      	sxtb	r3, r3
 800e99a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800e99e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800e9a2:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e9a4:	78fb      	ldrb	r3, [r7, #3]
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	70fa      	strb	r2, [r7, #3]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	4413      	add	r3, r2
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e9b4:	78fb      	ldrb	r3, [r7, #3]
 800e9b6:	1c5a      	adds	r2, r3, #1
 800e9b8:	70fa      	strb	r2, [r7, #3]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	4413      	add	r3, r2
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	021a      	lsls	r2, r3, #8
 800e9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9c6:	4313      	orrs	r3, r2
 800e9c8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e9ca:	78fb      	ldrb	r3, [r7, #3]
 800e9cc:	1c5a      	adds	r2, r3, #1
 800e9ce:	70fa      	strb	r2, [r7, #3]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	4413      	add	r3, r2
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	041a      	lsls	r2, r3, #16
 800e9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800e9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9e2:	2264      	movs	r2, #100	@ 0x64
 800e9e4:	fb02 f303 	mul.w	r3, r2, r3
 800e9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800e9ee:	78fb      	ldrb	r3, [r7, #3]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	70fa      	strb	r2, [r7, #3]
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4413      	add	r3, r2
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b25b      	sxtb	r3, r3
 800e9fe:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800ea02:	4b85      	ldr	r3, [pc, #532]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800ea04:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea08:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f005 f96e 	bl	8013cf0 <RegionNewChannelReq>
 800ea14:	4603      	mov	r3, r0
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ea1c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ea20:	b25b      	sxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f2c0 826c 	blt.w	800ef00 <ProcessMacCommands+0x914>
                {
                    macCmdPayload[0] = status;
 800ea28:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ea2c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800ea30:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ea34:	2201      	movs	r2, #1
 800ea36:	4619      	mov	r1, r3
 800ea38:	2007      	movs	r0, #7
 800ea3a:	f003 fa3f 	bl	8011ebc <LoRaMacCommandsAddCmd>
                }
                break;
 800ea3e:	e25f      	b.n	800ef00 <ProcessMacCommands+0x914>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800ea40:	78fb      	ldrb	r3, [r7, #3]
 800ea42:	1c5a      	adds	r2, r3, #1
 800ea44:	70fa      	strb	r2, [r7, #3]
 800ea46:	461a      	mov	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	f003 030f 	and.w	r3, r3, #15
 800ea52:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800ea56:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d104      	bne.n	800ea68 <ProcessMacCommands+0x47c>
                {
                    delay++;
 800ea5e:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea62:	3301      	adds	r3, #1
 800ea64:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800ea68:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800ea6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ea70:	fb02 f303 	mul.w	r3, r2, r3
 800ea74:	461a      	mov	r2, r3
 800ea76:	4b68      	ldr	r3, [pc, #416]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800ea78:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ea7a:	4b67      	ldr	r3, [pc, #412]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800ea7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ea7e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800ea82:	4a65      	ldr	r2, [pc, #404]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800ea84:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800ea86:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	2008      	movs	r0, #8
 800ea90:	f003 fa14 	bl	8011ebc <LoRaMacCommandsAddCmd>
                break;
 800ea94:	e23f      	b.n	800ef16 <ProcessMacCommands+0x92a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800ea96:	78fb      	ldrb	r3, [r7, #3]
 800ea98:	1c5a      	adds	r2, r3, #1
 800ea9a:	70fa      	strb	r2, [r7, #3]
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	781b      	ldrb	r3, [r3, #0]
 800eaa4:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800eab4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eab8:	f003 0320 	and.w	r3, r3, #32
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800eac0:	2301      	movs	r3, #1
 800eac2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800eac6:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eaca:	f003 0310 	and.w	r3, r3, #16
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d002      	beq.n	800ead8 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800ead2:	2301      	movs	r3, #1
 800ead4:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800ead8:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800eadc:	f003 030f 	and.w	r3, r3, #15
 800eae0:	b2db      	uxtb	r3, r3
 800eae2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800eae6:	4b4c      	ldr	r3, [pc, #304]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eae8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eaec:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800eaf0:	4611      	mov	r1, r2
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f005 f917 	bl	8013d26 <RegionTxParamSetupReq>
 800eaf8:	4603      	mov	r3, r0
 800eafa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafe:	f000 8201 	beq.w	800ef04 <ProcessMacCommands+0x918>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800eb02:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800eb06:	4b44      	ldr	r3, [pc, #272]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb08:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800eb0c:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800eb10:	4b41      	ldr	r3, [pc, #260]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800eb16:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	4b3f      	ldr	r3, [pc, #252]	@ (800ec1c <ProcessMacCommands+0x630>)
 800eb1e:	5c9b      	ldrb	r3, [r3, r2]
 800eb20:	4618      	mov	r0, r3
 800eb22:	f7f1 fe53 	bl	80007cc <__aeabi_ui2f>
 800eb26:	4603      	mov	r3, r0
 800eb28:	4a3b      	ldr	r2, [pc, #236]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb2a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800eb2e:	2302      	movs	r3, #2
 800eb30:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eb34:	4b38      	ldr	r3, [pc, #224]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb36:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800eb3a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800eb3e:	4b36      	ldr	r3, [pc, #216]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb40:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb44:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800eb48:	4611      	mov	r1, r2
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f004 ff8b 	bl	8013a66 <RegionGetPhyParam>
 800eb50:	4603      	mov	r3, r0
 800eb52:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	b25a      	sxtb	r2, r3
 800eb58:	4b2f      	ldr	r3, [pc, #188]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb5a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	bfb8      	it	lt
 800eb62:	4613      	movlt	r3, r2
 800eb64:	b25a      	sxtb	r2, r3
 800eb66:	4b2c      	ldr	r3, [pc, #176]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800eb68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800eb6c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eb70:	2200      	movs	r2, #0
 800eb72:	4619      	mov	r1, r3
 800eb74:	2009      	movs	r0, #9
 800eb76:	f003 f9a1 	bl	8011ebc <LoRaMacCommandsAddCmd>
                }
                break;
 800eb7a:	e1c3      	b.n	800ef04 <ProcessMacCommands+0x918>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800eb7c:	2303      	movs	r3, #3
 800eb7e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	1c5a      	adds	r2, r3, #1
 800eb86:	70fa      	strb	r2, [r7, #3]
 800eb88:	461a      	mov	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4413      	add	r3, r2
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	1c5a      	adds	r2, r3, #1
 800eb98:	70fa      	strb	r2, [r7, #3]
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	4413      	add	r3, r2
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800eba4:	78fb      	ldrb	r3, [r7, #3]
 800eba6:	1c5a      	adds	r2, r3, #1
 800eba8:	70fa      	strb	r2, [r7, #3]
 800ebaa:	461a      	mov	r2, r3
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	4413      	add	r3, r2
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	021a      	lsls	r2, r3, #8
 800ebb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebb6:	4313      	orrs	r3, r2
 800ebb8:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	1c5a      	adds	r2, r3, #1
 800ebbe:	70fa      	strb	r2, [r7, #3]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	041a      	lsls	r2, r3, #16
 800ebca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd2:	2264      	movs	r2, #100	@ 0x64
 800ebd4:	fb02 f303 	mul.w	r3, r2, r3
 800ebd8:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800ebda:	4b0f      	ldr	r3, [pc, #60]	@ (800ec18 <ProcessMacCommands+0x62c>)
 800ebdc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ebe0:	f107 0220 	add.w	r2, r7, #32
 800ebe4:	4611      	mov	r1, r2
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f005 f8b8 	bl	8013d5c <RegionDlChannelReq>
 800ebec:	4603      	mov	r3, r0
 800ebee:	b2db      	uxtb	r3, r3
 800ebf0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800ebf4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ebf8:	b25b      	sxtb	r3, r3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f2c0 8184 	blt.w	800ef08 <ProcessMacCommands+0x91c>
                {
                    macCmdPayload[0] = status;
 800ec00:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800ec04:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800ec08:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	4619      	mov	r1, r3
 800ec10:	200a      	movs	r0, #10
 800ec12:	f003 f953 	bl	8011ebc <LoRaMacCommandsAddCmd>
                }
                break;
 800ec16:	e177      	b.n	800ef08 <ProcessMacCommands+0x91c>
 800ec18:	20000a0c 	.word	0x20000a0c
 800ec1c:	0801cf50 	.word	0x0801cf50
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800ec20:	200a      	movs	r0, #10
 800ec22:	f003 fc83 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800ec26:	4603      	mov	r3, r0
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 816f 	beq.w	800ef0c <ProcessMacCommands+0x920>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800ec2e:	210a      	movs	r1, #10
 800ec30:	2000      	movs	r0, #0
 800ec32:	f003 fbef 	bl	8012414 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800ec36:	f107 0318 	add.w	r3, r7, #24
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800ec40:	f107 0310 	add.w	r3, r7, #16
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
 800ec48:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800ec4a:	f107 0308 	add.w	r3, r7, #8
 800ec4e:	2200      	movs	r2, #0
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800ec54:	78fb      	ldrb	r3, [r7, #3]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	70fa      	strb	r2, [r7, #3]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4413      	add	r3, r2
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800ec64:	78fb      	ldrb	r3, [r7, #3]
 800ec66:	1c5a      	adds	r2, r3, #1
 800ec68:	70fa      	strb	r2, [r7, #3]
 800ec6a:	461a      	mov	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	4413      	add	r3, r2
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	021a      	lsls	r2, r3, #8
 800ec74:	69bb      	ldr	r3, [r7, #24]
 800ec76:	4313      	orrs	r3, r2
 800ec78:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800ec7a:	78fb      	ldrb	r3, [r7, #3]
 800ec7c:	1c5a      	adds	r2, r3, #1
 800ec7e:	70fa      	strb	r2, [r7, #3]
 800ec80:	461a      	mov	r2, r3
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4413      	add	r3, r2
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	041a      	lsls	r2, r3, #16
 800ec8a:	69bb      	ldr	r3, [r7, #24]
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800ec90:	78fb      	ldrb	r3, [r7, #3]
 800ec92:	1c5a      	adds	r2, r3, #1
 800ec94:	70fa      	strb	r2, [r7, #3]
 800ec96:	461a      	mov	r2, r3
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	4413      	add	r3, r2
 800ec9c:	781b      	ldrb	r3, [r3, #0]
 800ec9e:	061a      	lsls	r2, r3, #24
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	4313      	orrs	r3, r2
 800eca4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800eca6:	78fb      	ldrb	r3, [r7, #3]
 800eca8:	1c5a      	adds	r2, r3, #1
 800ecaa:	70fa      	strb	r2, [r7, #3]
 800ecac:	461a      	mov	r2, r3
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	b21b      	sxth	r3, r3
 800ecb6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800ecb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ecc2:	fb02 f303 	mul.w	r3, r2, r3
 800ecc6:	121b      	asrs	r3, r3, #8
 800ecc8:	b21b      	sxth	r3, r3
 800ecca:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800eccc:	f107 0310 	add.w	r3, r7, #16
 800ecd0:	f107 0218 	add.w	r2, r7, #24
 800ecd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ecd8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800ecdc:	693a      	ldr	r2, [r7, #16]
 800ecde:	4b94      	ldr	r3, [pc, #592]	@ (800ef30 <ProcessMacCommands+0x944>)
 800ece0:	4413      	add	r3, r2
 800ece2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800ece4:	f107 0308 	add.w	r3, r7, #8
 800ece8:	4618      	mov	r0, r3
 800ecea:	f00c f9c7 	bl	801b07c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800ecee:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800ecf2:	4b90      	ldr	r3, [pc, #576]	@ (800ef34 <ProcessMacCommands+0x948>)
 800ecf4:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800ecf8:	9200      	str	r2, [sp, #0]
 800ecfa:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800ecfe:	f107 0210 	add.w	r2, r7, #16
 800ed02:	ca06      	ldmia	r2, {r1, r2}
 800ed04:	f00c f953 	bl	801afae <SysTimeSub>
 800ed08:	f107 0010 	add.w	r0, r7, #16
 800ed0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ed0e:	9300      	str	r3, [sp, #0]
 800ed10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed12:	f107 0208 	add.w	r2, r7, #8
 800ed16:	ca06      	ldmia	r2, {r1, r2}
 800ed18:	f00c f910 	bl	801af3c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800ed1c:	f107 0310 	add.w	r3, r7, #16
 800ed20:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed24:	f00c f97c 	bl	801b020 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800ed28:	f002 ff81 	bl	8011c2e <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800ed2c:	4b81      	ldr	r3, [pc, #516]	@ (800ef34 <ProcessMacCommands+0x948>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800ed34:	e0ea      	b.n	800ef0c <ProcessMacCommands+0x920>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800ed36:	200d      	movs	r0, #13
 800ed38:	f003 fbf8 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 80e6 	beq.w	800ef10 <ProcessMacCommands+0x924>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800ed44:	210d      	movs	r1, #13
 800ed46:	2000      	movs	r0, #0
 800ed48:	f003 fb64 	bl	8012414 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800ed4c:	4b79      	ldr	r3, [pc, #484]	@ (800ef34 <ProcessMacCommands+0x948>)
 800ed4e:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ed52:	2b04      	cmp	r3, #4
 800ed54:	f000 80dc 	beq.w	800ef10 <ProcessMacCommands+0x924>
 800ed58:	4b76      	ldr	r3, [pc, #472]	@ (800ef34 <ProcessMacCommands+0x948>)
 800ed5a:	f893 3480 	ldrb.w	r3, [r3, #1152]	@ 0x480
 800ed5e:	2b05      	cmp	r3, #5
 800ed60:	f000 80d6 	beq.w	800ef10 <ProcessMacCommands+0x924>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800ed64:	f002 ff44 	bl	8011bf0 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800ed68:	e0d2      	b.n	800ef10 <ProcessMacCommands+0x924>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800ed6a:	2303      	movs	r3, #3
 800ed6c:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800ed70:	2300      	movs	r3, #0
 800ed72:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800ed74:	78fb      	ldrb	r3, [r7, #3]
 800ed76:	1c5a      	adds	r2, r3, #1
 800ed78:	70fa      	strb	r2, [r7, #3]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	4413      	add	r3, r2
 800ed80:	781b      	ldrb	r3, [r3, #0]
 800ed82:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ed84:	78fb      	ldrb	r3, [r7, #3]
 800ed86:	1c5a      	adds	r2, r3, #1
 800ed88:	70fa      	strb	r2, [r7, #3]
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4413      	add	r3, r2
 800ed90:	781b      	ldrb	r3, [r3, #0]
 800ed92:	021b      	lsls	r3, r3, #8
 800ed94:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ed96:	4313      	orrs	r3, r2
 800ed98:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800ed9a:	78fb      	ldrb	r3, [r7, #3]
 800ed9c:	1c5a      	adds	r2, r3, #1
 800ed9e:	70fa      	strb	r2, [r7, #3]
 800eda0:	461a      	mov	r2, r3
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4413      	add	r3, r2
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	041b      	lsls	r3, r3, #16
 800edaa:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800edac:	4313      	orrs	r3, r2
 800edae:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800edb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edb2:	2264      	movs	r2, #100	@ 0x64
 800edb4:	fb02 f303 	mul.w	r3, r2, r3
 800edb8:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800edba:	78fb      	ldrb	r3, [r7, #3]
 800edbc:	1c5a      	adds	r2, r3, #1
 800edbe:	70fa      	strb	r2, [r7, #3]
 800edc0:	461a      	mov	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	4413      	add	r3, r2
 800edc6:	781b      	ldrb	r3, [r3, #0]
 800edc8:	f003 030f 	and.w	r3, r3, #15
 800edcc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800edd0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800edd4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800edd6:	4618      	mov	r0, r3
 800edd8:	f002 ff10 	bl	8011bfc <LoRaMacClassBPingSlotChannelReq>
 800eddc:	4603      	mov	r3, r0
 800edde:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800ede2:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ede6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800edea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800edee:	2201      	movs	r2, #1
 800edf0:	4619      	mov	r1, r3
 800edf2:	2011      	movs	r0, #17
 800edf4:	f003 f862 	bl	8011ebc <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 800edf8:	e08d      	b.n	800ef16 <ProcessMacCommands+0x92a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800edfa:	200e      	movs	r0, #14
 800edfc:	f003 fb96 	bl	801252c <LoRaMacConfirmQueueIsCmdActive>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	f000 8086 	beq.w	800ef14 <ProcessMacCommands+0x928>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ee08:	210e      	movs	r1, #14
 800ee0a:	2000      	movs	r0, #0
 800ee0c:	f003 fb02 	bl	8012414 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ee10:	2300      	movs	r3, #0
 800ee12:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ee1c:	78fb      	ldrb	r3, [r7, #3]
 800ee1e:	1c5a      	adds	r2, r3, #1
 800ee20:	70fa      	strb	r2, [r7, #3]
 800ee22:	461a      	mov	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	4413      	add	r3, r2
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	1c5a      	adds	r2, r3, #1
 800ee32:	70fa      	strb	r2, [r7, #3]
 800ee34:	461a      	mov	r2, r3
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	4413      	add	r3, r2
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	021b      	lsls	r3, r3, #8
 800ee3e:	b21a      	sxth	r2, r3
 800ee40:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800ee44:	4313      	orrs	r3, r2
 800ee46:	b21b      	sxth	r3, r3
 800ee48:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800ee4c:	78fb      	ldrb	r3, [r7, #3]
 800ee4e:	1c5a      	adds	r2, r3, #1
 800ee50:	70fa      	strb	r2, [r7, #3]
 800ee52:	461a      	mov	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	4413      	add	r3, r2
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800ee5e:	4b36      	ldr	r3, [pc, #216]	@ (800ef38 <ProcessMacCommands+0x94c>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800ee66:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f002 fed2 	bl	8011c14 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800ee70:	e050      	b.n	800ef14 <ProcessMacCommands+0x928>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800ee72:	2300      	movs	r3, #0
 800ee74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800ee78:	78fb      	ldrb	r3, [r7, #3]
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	70fa      	strb	r2, [r7, #3]
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	4413      	add	r3, r2
 800ee84:	781b      	ldrb	r3, [r3, #0]
 800ee86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800ee8a:	78fb      	ldrb	r3, [r7, #3]
 800ee8c:	1c5a      	adds	r2, r3, #1
 800ee8e:	70fa      	strb	r2, [r7, #3]
 800ee90:	461a      	mov	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4413      	add	r3, r2
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	021b      	lsls	r3, r3, #8
 800ee9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800eea4:	78fb      	ldrb	r3, [r7, #3]
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	70fa      	strb	r2, [r7, #3]
 800eeaa:	461a      	mov	r2, r3
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	4413      	add	r3, r2
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	041b      	lsls	r3, r3, #16
 800eeb4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800eebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800eec2:	2264      	movs	r2, #100	@ 0x64
 800eec4:	fb02 f303 	mul.w	r3, r2, r3
 800eec8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800eecc:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800eed0:	f002 feb3 	bl	8011c3a <LoRaMacClassBBeaconFreqReq>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d003      	beq.n	800eee2 <ProcessMacCommands+0x8f6>
                    {
                        macCmdPayload[0] = 1;
 800eeda:	2301      	movs	r3, #1
 800eedc:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800eee0:	e002      	b.n	800eee8 <ProcessMacCommands+0x8fc>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800eee8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800eeec:	2201      	movs	r2, #1
 800eeee:	4619      	mov	r1, r3
 800eef0:	2013      	movs	r0, #19
 800eef2:	f002 ffe3 	bl	8011ebc <LoRaMacCommandsAddCmd>
                }
                break;
 800eef6:	e00e      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800eef8:	bf00      	nop
 800eefa:	e00c      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800eefc:	bf00      	nop
 800eefe:	e00a      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef00:	bf00      	nop
 800ef02:	e008      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef04:	bf00      	nop
 800ef06:	e006      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef08:	bf00      	nop
 800ef0a:	e004      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef0c:	bf00      	nop
 800ef0e:	e002      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef10:	bf00      	nop
 800ef12:	e000      	b.n	800ef16 <ProcessMacCommands+0x92a>
                break;
 800ef14:	bf00      	nop
    while( macIndex < commandsSize )
 800ef16:	78fa      	ldrb	r2, [r7, #3]
 800ef18:	78bb      	ldrb	r3, [r7, #2]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	f4ff ab7e 	bcc.w	800e61c <ProcessMacCommands+0x30>
 800ef20:	e002      	b.n	800ef28 <ProcessMacCommands+0x93c>
            return;
 800ef22:	bf00      	nop
 800ef24:	e000      	b.n	800ef28 <ProcessMacCommands+0x93c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ef26:	bf00      	nop
        }
    }
}
 800ef28:	378c      	adds	r7, #140	@ 0x8c
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd90      	pop	{r4, r7, pc}
 800ef2e:	bf00      	nop
 800ef30:	12d53d80 	.word	0x12d53d80
 800ef34:	20000504 	.word	0x20000504
 800ef38:	20001904 	.word	0x20001904

0800ef3c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b08e      	sub	sp, #56	@ 0x38
 800ef40:	af02      	add	r7, sp, #8
 800ef42:	60f8      	str	r0, [r7, #12]
 800ef44:	607a      	str	r2, [r7, #4]
 800ef46:	461a      	mov	r2, r3
 800ef48:	460b      	mov	r3, r1
 800ef4a:	72fb      	strb	r3, [r7, #11]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef50:	2303      	movs	r3, #3
 800ef52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef56:	4b65      	ldr	r3, [pc, #404]	@ (800f0ec <Send+0x1b0>)
 800ef58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ef5c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ef60:	4b62      	ldr	r3, [pc, #392]	@ (800f0ec <Send+0x1b0>)
 800ef62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ef66:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ef6a:	4b60      	ldr	r3, [pc, #384]	@ (800f0ec <Send+0x1b0>)
 800ef6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ef70:	4b5e      	ldr	r3, [pc, #376]	@ (800f0ec <Send+0x1b0>)
 800ef72:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d101      	bne.n	800ef7e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800ef7a:	2307      	movs	r3, #7
 800ef7c:	e0b1      	b.n	800f0e2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ef7e:	4b5b      	ldr	r3, [pc, #364]	@ (800f0ec <Send+0x1b0>)
 800ef80:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d102      	bne.n	800ef8e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ef88:	4b58      	ldr	r3, [pc, #352]	@ (800f0ec <Send+0x1b0>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800ef94:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ef98:	f023 030f 	bic.w	r3, r3, #15
 800ef9c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800efa0:	4b52      	ldr	r3, [pc, #328]	@ (800f0ec <Send+0x1b0>)
 800efa2:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800efa6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efaa:	f362 13c7 	bfi	r3, r2, #7, #1
 800efae:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800efb2:	4b4e      	ldr	r3, [pc, #312]	@ (800f0ec <Send+0x1b0>)
 800efb4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800efb8:	2b01      	cmp	r3, #1
 800efba:	d106      	bne.n	800efca <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800efbc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efc0:	f043 0310 	orr.w	r3, r3, #16
 800efc4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800efc8:	e005      	b.n	800efd6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800efca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efce:	f023 0310 	bic.w	r3, r3, #16
 800efd2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800efd6:	4b45      	ldr	r3, [pc, #276]	@ (800f0ec <Send+0x1b0>)
 800efd8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d005      	beq.n	800efec <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800efe0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800efe4:	f043 0320 	orr.w	r3, r3, #32
 800efe8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800efec:	2301      	movs	r3, #1
 800efee:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800eff0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800eff4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	bf14      	ite	ne
 800effe:	2301      	movne	r3, #1
 800f000:	2300      	moveq	r3, #0
 800f002:	b2db      	uxtb	r3, r3
 800f004:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800f006:	4b39      	ldr	r3, [pc, #228]	@ (800f0ec <Send+0x1b0>)
 800f008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f00a:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800f00c:	4b37      	ldr	r3, [pc, #220]	@ (800f0ec <Send+0x1b0>)
 800f00e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800f012:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800f014:	4b35      	ldr	r3, [pc, #212]	@ (800f0ec <Send+0x1b0>)
 800f016:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800f01a:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f01c:	4b33      	ldr	r3, [pc, #204]	@ (800f0ec <Send+0x1b0>)
 800f01e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f022:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f026:	4b31      	ldr	r3, [pc, #196]	@ (800f0ec <Send+0x1b0>)
 800f028:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f02c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f030:	4b2e      	ldr	r3, [pc, #184]	@ (800f0ec <Send+0x1b0>)
 800f032:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f036:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 800f03a:	4b2c      	ldr	r3, [pc, #176]	@ (800f0ec <Send+0x1b0>)
 800f03c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 800f044:	4b29      	ldr	r3, [pc, #164]	@ (800f0ec <Send+0x1b0>)
 800f046:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 800f04a:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800f04c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800f050:	f107 0014 	add.w	r0, r7, #20
 800f054:	4a26      	ldr	r2, [pc, #152]	@ (800f0f0 <Send+0x1b4>)
 800f056:	4927      	ldr	r1, [pc, #156]	@ (800f0f4 <Send+0x1b8>)
 800f058:	f002 fd0a 	bl	8011a70 <LoRaMacAdrCalcNext>
 800f05c:	4603      	mov	r3, r0
 800f05e:	461a      	mov	r2, r3
 800f060:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f064:	f362 1386 	bfi	r3, r2, #6, #1
 800f068:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800f06c:	7afa      	ldrb	r2, [r7, #11]
 800f06e:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800f072:	893b      	ldrh	r3, [r7, #8]
 800f074:	9300      	str	r3, [sp, #0]
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	68f8      	ldr	r0, [r7, #12]
 800f07a:	f000 fc5d 	bl	800f938 <PrepareFrame>
 800f07e:	4603      	mov	r3, r0
 800f080:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800f084:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d003      	beq.n	800f094 <Send+0x158>
 800f08c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f090:	2b0a      	cmp	r3, #10
 800f092:	d107      	bne.n	800f0a4 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800f094:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f961 	bl	800f360 <ScheduleTx>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800f0a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d00a      	beq.n	800f0c2 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800f0ac:	4a0f      	ldr	r2, [pc, #60]	@ (800f0ec <Send+0x1b0>)
 800f0ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f0b2:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800f0b6:	4a0d      	ldr	r2, [pc, #52]	@ (800f0ec <Send+0x1b0>)
 800f0b8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800f0bc:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800f0c0:	e00d      	b.n	800f0de <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800f0c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ec <Send+0x1b0>)
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800f0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0cc:	4a07      	ldr	r2, [pc, #28]	@ (800f0ec <Send+0x1b0>)
 800f0ce:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800f0d0:	f002 ff9a 	bl	8012008 <LoRaMacCommandsRemoveNoneStickyCmds>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d001      	beq.n	800f0de <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f0da:	2313      	movs	r3, #19
 800f0dc:	e001      	b.n	800f0e2 <Send+0x1a6>
        }
    }
    return status;
 800f0de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3730      	adds	r7, #48	@ 0x30
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	20000a0c 	.word	0x20000a0c
 800f0f0:	20000a44 	.word	0x20000a44
 800f0f4:	20000a45 	.word	0x20000a45

0800f0f8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4603      	mov	r3, r0
 800f100:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800f106:	2300      	movs	r3, #0
 800f108:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800f10a:	2301      	movs	r3, #1
 800f10c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800f10e:	79fb      	ldrb	r3, [r7, #7]
 800f110:	2bff      	cmp	r3, #255	@ 0xff
 800f112:	d11f      	bne.n	800f154 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800f114:	2000      	movs	r0, #0
 800f116:	f7ff f931 	bl	800e37c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800f11a:	4b15      	ldr	r3, [pc, #84]	@ (800f170 <SendReJoinReq+0x78>)
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800f122:	4b13      	ldr	r3, [pc, #76]	@ (800f170 <SendReJoinReq+0x78>)
 800f124:	4a13      	ldr	r2, [pc, #76]	@ (800f174 <SendReJoinReq+0x7c>)
 800f126:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f12a:	4b11      	ldr	r3, [pc, #68]	@ (800f170 <SendReJoinReq+0x78>)
 800f12c:	22ff      	movs	r2, #255	@ 0xff
 800f12e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800f132:	7b3b      	ldrb	r3, [r7, #12]
 800f134:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800f138:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800f13a:	7b3a      	ldrb	r2, [r7, #12]
 800f13c:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <SendReJoinReq+0x78>)
 800f13e:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800f142:	480d      	ldr	r0, [pc, #52]	@ (800f178 <SendReJoinReq+0x80>)
 800f144:	f7fc fa58 	bl	800b5f8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800f148:	480c      	ldr	r0, [pc, #48]	@ (800f17c <SendReJoinReq+0x84>)
 800f14a:	f7fc fa25 	bl	800b598 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800f14e:	2300      	movs	r3, #0
 800f150:	73fb      	strb	r3, [r7, #15]

            break;
 800f152:	e002      	b.n	800f15a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f154:	2302      	movs	r3, #2
 800f156:	73bb      	strb	r3, [r7, #14]
            break;
 800f158:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f000 f8ff 	bl	800f360 <ScheduleTx>
 800f162:	4603      	mov	r3, r0
 800f164:	73bb      	strb	r3, [r7, #14]
    return status;
 800f166:	7bbb      	ldrb	r3, [r7, #14]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3710      	adds	r7, #16
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}
 800f170:	20000504 	.word	0x20000504
 800f174:	20000506 	.word	0x20000506
 800f178:	20000612 	.word	0x20000612
 800f17c:	2000061a 	.word	0x2000061a

0800f180 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800f184:	f002 fce3 	bl	8011b4e <LoRaMacClassBIsBeaconExpected>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800f18e:	230e      	movs	r3, #14
 800f190:	e013      	b.n	800f1ba <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800f192:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c0 <CheckForClassBCollision+0x40>)
 800f194:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d10d      	bne.n	800f1b8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800f19c:	f002 fcde 	bl	8011b5c <LoRaMacClassBIsPingExpected>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d001      	beq.n	800f1aa <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f1a6:	230f      	movs	r3, #15
 800f1a8:	e007      	b.n	800f1ba <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800f1aa:	f002 fcde 	bl	8011b6a <LoRaMacClassBIsMulticastExpected>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d001      	beq.n	800f1b8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800f1b4:	230f      	movs	r3, #15
 800f1b6:	e000      	b.n	800f1ba <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	20000a0c 	.word	0x20000a0c

0800f1c4 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800f1c4:	b590      	push	{r4, r7, lr}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f1ca:	4b2d      	ldr	r3, [pc, #180]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1cc:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f1d0:	4b2b      	ldr	r3, [pc, #172]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1d2:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f1d6:	4b2a      	ldr	r3, [pc, #168]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1d8:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800f1dc:	4b28      	ldr	r3, [pc, #160]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1de:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800f1e2:	4b27      	ldr	r3, [pc, #156]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1e4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800f1e8:	b25b      	sxtb	r3, r3
 800f1ea:	f004 fe32 	bl	8013e52 <RegionApplyDrOffset>
 800f1ee:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f1f0:	b259      	sxtb	r1, r3
 800f1f2:	4b23      	ldr	r3, [pc, #140]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1f4:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f1f8:	4b21      	ldr	r3, [pc, #132]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f1fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1fc:	4821      	ldr	r0, [pc, #132]	@ (800f284 <ComputeRxWindowParameters+0xc0>)
 800f1fe:	9000      	str	r0, [sp, #0]
 800f200:	4620      	mov	r0, r4
 800f202:	f004 fcd1 	bl	8013ba8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f206:	4b1e      	ldr	r3, [pc, #120]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f208:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800f20c:	4b1c      	ldr	r3, [pc, #112]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f20e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f212:	b259      	sxtb	r1, r3
 800f214:	4b1a      	ldr	r3, [pc, #104]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f216:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f21a:	4b19      	ldr	r3, [pc, #100]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f21c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f21e:	4c1a      	ldr	r4, [pc, #104]	@ (800f288 <ComputeRxWindowParameters+0xc4>)
 800f220:	9400      	str	r4, [sp, #0]
 800f222:	f004 fcc1 	bl	8013ba8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f226:	4b16      	ldr	r3, [pc, #88]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f22a:	4a18      	ldr	r2, [pc, #96]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f22c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f230:	4413      	add	r3, r2
 800f232:	4a16      	ldr	r2, [pc, #88]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f234:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f238:	4b11      	ldr	r3, [pc, #68]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f23a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f23c:	4a13      	ldr	r2, [pc, #76]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f23e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f242:	4413      	add	r3, r2
 800f244:	4a11      	ldr	r2, [pc, #68]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f246:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800f24a:	4b10      	ldr	r3, [pc, #64]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f24c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f250:	2b04      	cmp	r3, #4
 800f252:	d011      	beq.n	800f278 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800f254:	4b0a      	ldr	r3, [pc, #40]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f256:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f258:	4a0c      	ldr	r2, [pc, #48]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f25a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800f25e:	4413      	add	r3, r2
 800f260:	4a0a      	ldr	r2, [pc, #40]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f262:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800f266:	4b06      	ldr	r3, [pc, #24]	@ (800f280 <ComputeRxWindowParameters+0xbc>)
 800f268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800f26a:	4a08      	ldr	r2, [pc, #32]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f26c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	@ 0x3d8
 800f270:	4413      	add	r3, r2
 800f272:	4a06      	ldr	r2, [pc, #24]	@ (800f28c <ComputeRxWindowParameters+0xc8>)
 800f274:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800f278:	bf00      	nop
 800f27a:	3704      	adds	r7, #4
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd90      	pop	{r4, r7, pc}
 800f280:	20000a0c 	.word	0x20000a0c
 800f284:	200008bc 	.word	0x200008bc
 800f288:	200008d0 	.word	0x200008d0
 800f28c:	20000504 	.word	0x20000504

0800f290 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800f296:	2300      	movs	r3, #0
 800f298:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800f29a:	4b13      	ldr	r3, [pc, #76]	@ (800f2e8 <VerifyTxFrame+0x58>)
 800f29c:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d01b      	beq.n	800f2dc <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800f2a4:	1d3b      	adds	r3, r7, #4
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f002 fefe 	bl	80120a8 <LoRaMacCommandsGetSizeSerializedCmds>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d001      	beq.n	800f2b6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f2b2:	2313      	movs	r3, #19
 800f2b4:	e013      	b.n	800f2de <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800f2b6:	4b0d      	ldr	r3, [pc, #52]	@ (800f2ec <VerifyTxFrame+0x5c>)
 800f2b8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800f2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800f2e8 <VerifyTxFrame+0x58>)
 800f2be:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800f2c2:	687a      	ldr	r2, [r7, #4]
 800f2c4:	b2d2      	uxtb	r2, r2
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7ff f968 	bl	800e59c <ValidatePayloadLength>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	f083 0301 	eor.w	r3, r3, #1
 800f2d2:	b2db      	uxtb	r3, r3
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d001      	beq.n	800f2dc <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800f2d8:	2308      	movs	r3, #8
 800f2da:	e000      	b.n	800f2de <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800f2dc:	2300      	movs	r3, #0
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	20000a0c 	.word	0x20000a0c
 800f2ec:	20000504 	.word	0x20000504

0800f2f0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b082      	sub	sp, #8
 800f2f4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800f2f6:	4b18      	ldr	r3, [pc, #96]	@ (800f358 <SerializeTxFrame+0x68>)
 800f2f8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d002      	beq.n	800f306 <SerializeTxFrame+0x16>
 800f300:	2b04      	cmp	r3, #4
 800f302:	d011      	beq.n	800f328 <SerializeTxFrame+0x38>
 800f304:	e021      	b.n	800f34a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f306:	4815      	ldr	r0, [pc, #84]	@ (800f35c <SerializeTxFrame+0x6c>)
 800f308:	f004 fa21 	bl	801374e <LoRaMacSerializerJoinRequest>
 800f30c:	4603      	mov	r3, r0
 800f30e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f310:	79fb      	ldrb	r3, [r7, #7]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d001      	beq.n	800f31a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f316:	2311      	movs	r3, #17
 800f318:	e01a      	b.n	800f350 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f31a:	4b0f      	ldr	r3, [pc, #60]	@ (800f358 <SerializeTxFrame+0x68>)
 800f31c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f320:	461a      	mov	r2, r3
 800f322:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <SerializeTxFrame+0x68>)
 800f324:	801a      	strh	r2, [r3, #0]
            break;
 800f326:	e012      	b.n	800f34e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800f328:	480c      	ldr	r0, [pc, #48]	@ (800f35c <SerializeTxFrame+0x6c>)
 800f32a:	f004 fa92 	bl	8013852 <LoRaMacSerializerData>
 800f32e:	4603      	mov	r3, r0
 800f330:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800f332:	79fb      	ldrb	r3, [r7, #7]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f338:	2311      	movs	r3, #17
 800f33a:	e009      	b.n	800f350 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f33c:	4b06      	ldr	r3, [pc, #24]	@ (800f358 <SerializeTxFrame+0x68>)
 800f33e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f342:	461a      	mov	r2, r3
 800f344:	4b04      	ldr	r3, [pc, #16]	@ (800f358 <SerializeTxFrame+0x68>)
 800f346:	801a      	strh	r2, [r3, #0]
            break;
 800f348:	e001      	b.n	800f34e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f34a:	2303      	movs	r3, #3
 800f34c:	e000      	b.n	800f350 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800f34e:	2300      	movs	r3, #0
}
 800f350:	4618      	mov	r0, r3
 800f352:	3708      	adds	r7, #8
 800f354:	46bd      	mov	sp, r7
 800f356:	bd80      	pop	{r7, pc}
 800f358:	20000504 	.word	0x20000504
 800f35c:	2000060c 	.word	0x2000060c

0800f360 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b090      	sub	sp, #64	@ 0x40
 800f364:	af02      	add	r7, sp, #8
 800f366:	4603      	mov	r3, r0
 800f368:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f36a:	2303      	movs	r3, #3
 800f36c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800f370:	f7ff ff06 	bl	800f180 <CheckForClassBCollision>
 800f374:	4603      	mov	r3, r0
 800f376:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f37a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <ScheduleTx+0x28>
    {
        return status;
 800f382:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f386:	e092      	b.n	800f4ae <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800f388:	f000 f8fe 	bl	800f588 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800f38c:	f7ff ffb0 	bl	800f2f0 <SerializeTxFrame>
 800f390:	4603      	mov	r3, r0
 800f392:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f396:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d002      	beq.n	800f3a4 <ScheduleTx+0x44>
    {
        return status;
 800f39e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f3a2:	e084      	b.n	800f4ae <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f3a4:	4b44      	ldr	r3, [pc, #272]	@ (800f4b8 <ScheduleTx+0x158>)
 800f3a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3a8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f3aa:	4b43      	ldr	r3, [pc, #268]	@ (800f4b8 <ScheduleTx+0x158>)
 800f3ac:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f3b0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f3b2:	4b41      	ldr	r3, [pc, #260]	@ (800f4b8 <ScheduleTx+0x158>)
 800f3b4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800f3b8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f3ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f00b fe94 	bl	801b0ec <SysTimeGetMcuTime>
 800f3c4:	4638      	mov	r0, r7
 800f3c6:	4b3c      	ldr	r3, [pc, #240]	@ (800f4b8 <ScheduleTx+0x158>)
 800f3c8:	f8d3 2124 	ldr.w	r2, [r3, #292]	@ 0x124
 800f3cc:	9200      	str	r2, [sp, #0]
 800f3ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800f3d2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f3d6:	ca06      	ldmia	r2, {r1, r2}
 800f3d8:	f00b fde9 	bl	801afae <SysTimeSub>
 800f3dc:	f107 0320 	add.w	r3, r7, #32
 800f3e0:	463a      	mov	r2, r7
 800f3e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f3e6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f3ea:	4b33      	ldr	r3, [pc, #204]	@ (800f4b8 <ScheduleTx+0x158>)
 800f3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ee:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f3fa:	4b30      	ldr	r3, [pc, #192]	@ (800f4bc <ScheduleTx+0x15c>)
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f400:	4b2d      	ldr	r3, [pc, #180]	@ (800f4b8 <ScheduleTx+0x158>)
 800f402:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 800f406:	2b00      	cmp	r3, #0
 800f408:	d104      	bne.n	800f414 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800f40a:	2301      	movs	r3, #1
 800f40c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800f410:	2300      	movs	r3, #0
 800f412:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f414:	4b28      	ldr	r3, [pc, #160]	@ (800f4b8 <ScheduleTx+0x158>)
 800f416:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f41a:	f107 0114 	add.w	r1, r7, #20
 800f41e:	4b28      	ldr	r3, [pc, #160]	@ (800f4c0 <ScheduleTx+0x160>)
 800f420:	9300      	str	r3, [sp, #0]
 800f422:	4b28      	ldr	r3, [pc, #160]	@ (800f4c4 <ScheduleTx+0x164>)
 800f424:	4a28      	ldr	r2, [pc, #160]	@ (800f4c8 <ScheduleTx+0x168>)
 800f426:	f004 fcda 	bl	8013dde <RegionNextChannel>
 800f42a:	4603      	mov	r3, r0
 800f42c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800f430:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f434:	2b00      	cmp	r3, #0
 800f436:	d025      	beq.n	800f484 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800f438:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f43c:	2b0b      	cmp	r3, #11
 800f43e:	d11e      	bne.n	800f47e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f440:	4b1e      	ldr	r3, [pc, #120]	@ (800f4bc <ScheduleTx+0x15c>)
 800f442:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f446:	2b00      	cmp	r3, #0
 800f448:	d01c      	beq.n	800f484 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800f44a:	7bfb      	ldrb	r3, [r7, #15]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d013      	beq.n	800f478 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f450:	4b1a      	ldr	r3, [pc, #104]	@ (800f4bc <ScheduleTx+0x15c>)
 800f452:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f456:	f043 0320 	orr.w	r3, r3, #32
 800f45a:	4a18      	ldr	r2, [pc, #96]	@ (800f4bc <ScheduleTx+0x15c>)
 800f45c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f460:	4b16      	ldr	r3, [pc, #88]	@ (800f4bc <ScheduleTx+0x15c>)
 800f462:	f8d3 3484 	ldr.w	r3, [r3, #1156]	@ 0x484
 800f466:	4619      	mov	r1, r3
 800f468:	4818      	ldr	r0, [pc, #96]	@ (800f4cc <ScheduleTx+0x16c>)
 800f46a:	f00c fbdd 	bl	801bc28 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800f46e:	4817      	ldr	r0, [pc, #92]	@ (800f4cc <ScheduleTx+0x16c>)
 800f470:	f00c fafc 	bl	801ba6c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800f474:	2300      	movs	r3, #0
 800f476:	e01a      	b.n	800f4ae <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800f478:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f47c:	e017      	b.n	800f4ae <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800f47e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f482:	e014      	b.n	800f4ae <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800f484:	f7ff fe9e 	bl	800f1c4 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800f488:	f7ff ff02 	bl	800f290 <VerifyTxFrame>
 800f48c:	4603      	mov	r3, r0
 800f48e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800f492:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f496:	2b00      	cmp	r3, #0
 800f498:	d002      	beq.n	800f4a0 <ScheduleTx+0x140>
    {
        return status;
 800f49a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f49e:	e006      	b.n	800f4ae <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800f4a0:	4b06      	ldr	r3, [pc, #24]	@ (800f4bc <ScheduleTx+0x15c>)
 800f4a2:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f000 fb60 	bl	800fb6c <SendFrameOnChannel>
 800f4ac:	4603      	mov	r3, r0
}
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	3738      	adds	r7, #56	@ 0x38
 800f4b2:	46bd      	mov	sp, r7
 800f4b4:	bd80      	pop	{r7, pc}
 800f4b6:	bf00      	nop
 800f4b8:	20000a0c 	.word	0x20000a0c
 800f4bc:	20000504 	.word	0x20000504
 800f4c0:	20000a3c 	.word	0x20000a3c
 800f4c4:	20000988 	.word	0x20000988
 800f4c8:	20000915 	.word	0x20000915
 800f4cc:	2000086c 	.word	0x2000086c

0800f4d0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b084      	sub	sp, #16
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	4603      	mov	r3, r0
 800f4d8:	460a      	mov	r2, r1
 800f4da:	71fb      	strb	r3, [r7, #7]
 800f4dc:	4613      	mov	r3, r2
 800f4de:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800f4e0:	2313      	movs	r3, #19
 800f4e2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800f4e8:	4b25      	ldr	r3, [pc, #148]	@ (800f580 <SecureFrame+0xb0>)
 800f4ea:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d002      	beq.n	800f4f8 <SecureFrame+0x28>
 800f4f2:	2b04      	cmp	r3, #4
 800f4f4:	d011      	beq.n	800f51a <SecureFrame+0x4a>
 800f4f6:	e03b      	b.n	800f570 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800f4f8:	4822      	ldr	r0, [pc, #136]	@ (800f584 <SecureFrame+0xb4>)
 800f4fa:	f003 fcf5 	bl	8012ee8 <LoRaMacCryptoPrepareJoinRequest>
 800f4fe:	4603      	mov	r3, r0
 800f500:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f502:	7bfb      	ldrb	r3, [r7, #15]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f508:	2311      	movs	r3, #17
 800f50a:	e034      	b.n	800f576 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800f50c:	4b1c      	ldr	r3, [pc, #112]	@ (800f580 <SecureFrame+0xb0>)
 800f50e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f512:	461a      	mov	r2, r3
 800f514:	4b1a      	ldr	r3, [pc, #104]	@ (800f580 <SecureFrame+0xb0>)
 800f516:	801a      	strh	r2, [r3, #0]
            break;
 800f518:	e02c      	b.n	800f574 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800f51a:	f107 0308 	add.w	r3, r7, #8
 800f51e:	4618      	mov	r0, r3
 800f520:	f003 fbf2 	bl	8012d08 <LoRaMacCryptoGetFCntUp>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d001      	beq.n	800f52e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800f52a:	2312      	movs	r3, #18
 800f52c:	e023      	b.n	800f576 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 800f52e:	4b14      	ldr	r3, [pc, #80]	@ (800f580 <SecureFrame+0xb0>)
 800f530:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d104      	bne.n	800f542 <SecureFrame+0x72>
 800f538:	4b11      	ldr	r3, [pc, #68]	@ (800f580 <SecureFrame+0xb0>)
 800f53a:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d902      	bls.n	800f548 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	3b01      	subs	r3, #1
 800f546:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800f548:	68b8      	ldr	r0, [r7, #8]
 800f54a:	79ba      	ldrb	r2, [r7, #6]
 800f54c:	79f9      	ldrb	r1, [r7, #7]
 800f54e:	4b0d      	ldr	r3, [pc, #52]	@ (800f584 <SecureFrame+0xb4>)
 800f550:	f003 fdf6 	bl	8013140 <LoRaMacCryptoSecureMessage>
 800f554:	4603      	mov	r3, r0
 800f556:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800f558:	7bfb      	ldrb	r3, [r7, #15]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d001      	beq.n	800f562 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800f55e:	2311      	movs	r3, #17
 800f560:	e009      	b.n	800f576 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800f562:	4b07      	ldr	r3, [pc, #28]	@ (800f580 <SecureFrame+0xb0>)
 800f564:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800f568:	461a      	mov	r2, r3
 800f56a:	4b05      	ldr	r3, [pc, #20]	@ (800f580 <SecureFrame+0xb0>)
 800f56c:	801a      	strh	r2, [r3, #0]
            break;
 800f56e:	e001      	b.n	800f574 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800f570:	2303      	movs	r3, #3
 800f572:	e000      	b.n	800f576 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 800f574:	2300      	movs	r3, #0
}
 800f576:	4618      	mov	r0, r3
 800f578:	3710      	adds	r7, #16
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	20000504 	.word	0x20000504
 800f584:	2000060c 	.word	0x2000060c

0800f588 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800f588:	b480      	push	{r7}
 800f58a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800f58c:	4b09      	ldr	r3, [pc, #36]	@ (800f5b4 <CalculateBackOff+0x2c>)
 800f58e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10a      	bne.n	800f5aa <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800f594:	4b07      	ldr	r3, [pc, #28]	@ (800f5b4 <CalculateBackOff+0x2c>)
 800f596:	f8b3 311e 	ldrh.w	r3, [r3, #286]	@ 0x11e
 800f59a:	3b01      	subs	r3, #1
 800f59c:	4a06      	ldr	r2, [pc, #24]	@ (800f5b8 <CalculateBackOff+0x30>)
 800f59e:	f8d2 2414 	ldr.w	r2, [r2, #1044]	@ 0x414
 800f5a2:	fb02 f303 	mul.w	r3, r2, r3
 800f5a6:	4a03      	ldr	r2, [pc, #12]	@ (800f5b4 <CalculateBackOff+0x2c>)
 800f5a8:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800f5aa:	bf00      	nop
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bc80      	pop	{r7}
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	20000a0c 	.word	0x20000a0c
 800f5b8:	20000504 	.word	0x20000504

0800f5bc <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	7139      	strb	r1, [r7, #4]
 800f5c6:	71fb      	strb	r3, [r7, #7]
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d002      	beq.n	800f5d8 <RemoveMacCommands+0x1c>
 800f5d2:	79fb      	ldrb	r3, [r7, #7]
 800f5d4:	2b01      	cmp	r3, #1
 800f5d6:	d10d      	bne.n	800f5f4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800f5d8:	79bb      	ldrb	r3, [r7, #6]
 800f5da:	2b01      	cmp	r3, #1
 800f5dc:	d108      	bne.n	800f5f0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800f5de:	793b      	ldrb	r3, [r7, #4]
 800f5e0:	f003 0320 	and.w	r3, r3, #32
 800f5e4:	b2db      	uxtb	r3, r3
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d004      	beq.n	800f5f4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800f5ea:	f002 fd31 	bl	8012050 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800f5ee:	e001      	b.n	800f5f4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800f5f0:	f002 fd2e 	bl	8012050 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800f5f4:	bf00      	nop
 800f5f6:	3708      	adds	r7, #8
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800f5fc:	b5b0      	push	{r4, r5, r7, lr}
 800f5fe:	b090      	sub	sp, #64	@ 0x40
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800f606:	79fb      	ldrb	r3, [r7, #7]
 800f608:	f083 0301 	eor.w	r3, r3, #1
 800f60c:	b2db      	uxtb	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d003      	beq.n	800f61a <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f612:	4b80      	ldr	r3, [pc, #512]	@ (800f814 <ResetMacParameters+0x218>)
 800f614:	2200      	movs	r2, #0
 800f616:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f61a:	4b7e      	ldr	r3, [pc, #504]	@ (800f814 <ResetMacParameters+0x218>)
 800f61c:	2200      	movs	r2, #0
 800f61e:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800f620:	4b7d      	ldr	r3, [pc, #500]	@ (800f818 <ResetMacParameters+0x21c>)
 800f622:	2200      	movs	r2, #0
 800f624:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 800f628:	4b7b      	ldr	r3, [pc, #492]	@ (800f818 <ResetMacParameters+0x21c>)
 800f62a:	2201      	movs	r2, #1
 800f62c:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 800f630:	4b79      	ldr	r3, [pc, #484]	@ (800f818 <ResetMacParameters+0x21c>)
 800f632:	2201      	movs	r2, #1
 800f634:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetry = false;
 800f638:	4b77      	ldr	r3, [pc, #476]	@ (800f818 <ResetMacParameters+0x21c>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800f640:	4b74      	ldr	r3, [pc, #464]	@ (800f814 <ResetMacParameters+0x218>)
 800f642:	2200      	movs	r2, #0
 800f644:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f648:	4b72      	ldr	r3, [pc, #456]	@ (800f814 <ResetMacParameters+0x218>)
 800f64a:	2201      	movs	r2, #1
 800f64c:	f8a3 211e 	strh.w	r2, [r3, #286]	@ 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f650:	4b70      	ldr	r3, [pc, #448]	@ (800f814 <ResetMacParameters+0x218>)
 800f652:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800f656:	4b6f      	ldr	r3, [pc, #444]	@ (800f814 <ResetMacParameters+0x218>)
 800f658:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f65c:	4b6d      	ldr	r3, [pc, #436]	@ (800f814 <ResetMacParameters+0x218>)
 800f65e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800f662:	4b6c      	ldr	r3, [pc, #432]	@ (800f814 <ResetMacParameters+0x218>)
 800f664:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f668:	4b6a      	ldr	r3, [pc, #424]	@ (800f814 <ResetMacParameters+0x218>)
 800f66a:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800f66e:	4b69      	ldr	r3, [pc, #420]	@ (800f814 <ResetMacParameters+0x218>)
 800f670:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f674:	4b67      	ldr	r3, [pc, #412]	@ (800f814 <ResetMacParameters+0x218>)
 800f676:	4a67      	ldr	r2, [pc, #412]	@ (800f814 <ResetMacParameters+0x218>)
 800f678:	336c      	adds	r3, #108	@ 0x6c
 800f67a:	32b4      	adds	r2, #180	@ 0xb4
 800f67c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f680:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f684:	4b63      	ldr	r3, [pc, #396]	@ (800f814 <ResetMacParameters+0x218>)
 800f686:	4a63      	ldr	r2, [pc, #396]	@ (800f814 <ResetMacParameters+0x218>)
 800f688:	3374      	adds	r3, #116	@ 0x74
 800f68a:	32bc      	adds	r2, #188	@ 0xbc
 800f68c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f690:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f694:	4b5f      	ldr	r3, [pc, #380]	@ (800f814 <ResetMacParameters+0x218>)
 800f696:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800f69a:	4b5e      	ldr	r3, [pc, #376]	@ (800f814 <ResetMacParameters+0x218>)
 800f69c:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f6a0:	4b5c      	ldr	r3, [pc, #368]	@ (800f814 <ResetMacParameters+0x218>)
 800f6a2:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800f6a6:	4b5b      	ldr	r3, [pc, #364]	@ (800f814 <ResetMacParameters+0x218>)
 800f6a8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f6ac:	4b59      	ldr	r3, [pc, #356]	@ (800f814 <ResetMacParameters+0x218>)
 800f6ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f6b2:	4a58      	ldr	r2, [pc, #352]	@ (800f814 <ResetMacParameters+0x218>)
 800f6b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f6b8:	4b56      	ldr	r3, [pc, #344]	@ (800f814 <ResetMacParameters+0x218>)
 800f6ba:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800f6be:	4a55      	ldr	r2, [pc, #340]	@ (800f814 <ResetMacParameters+0x218>)
 800f6c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f6c4:	4b53      	ldr	r3, [pc, #332]	@ (800f814 <ResetMacParameters+0x218>)
 800f6c6:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800f6ca:	4b52      	ldr	r3, [pc, #328]	@ (800f814 <ResetMacParameters+0x218>)
 800f6cc:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f6d0:	4b50      	ldr	r3, [pc, #320]	@ (800f814 <ResetMacParameters+0x218>)
 800f6d2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800f6d6:	4b4f      	ldr	r3, [pc, #316]	@ (800f814 <ResetMacParameters+0x218>)
 800f6d8:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800f6dc:	4b4e      	ldr	r3, [pc, #312]	@ (800f818 <ResetMacParameters+0x21c>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 800f6e4:	4b4b      	ldr	r3, [pc, #300]	@ (800f814 <ResetMacParameters+0x218>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800f6ec:	4b49      	ldr	r3, [pc, #292]	@ (800f814 <ResetMacParameters+0x218>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800f6f4:	4b47      	ldr	r3, [pc, #284]	@ (800f814 <ResetMacParameters+0x218>)
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 800f6fc:	4b45      	ldr	r3, [pc, #276]	@ (800f814 <ResetMacParameters+0x218>)
 800f6fe:	2200      	movs	r2, #0
 800f700:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800f704:	4b43      	ldr	r3, [pc, #268]	@ (800f814 <ResetMacParameters+0x218>)
 800f706:	2200      	movs	r2, #0
 800f708:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800f70c:	4b41      	ldr	r3, [pc, #260]	@ (800f814 <ResetMacParameters+0x218>)
 800f70e:	2200      	movs	r2, #0
 800f710:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800f714:	4b3f      	ldr	r3, [pc, #252]	@ (800f814 <ResetMacParameters+0x218>)
 800f716:	2200      	movs	r2, #0
 800f718:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800f71c:	4b3d      	ldr	r3, [pc, #244]	@ (800f814 <ResetMacParameters+0x218>)
 800f71e:	2200      	movs	r2, #0
 800f720:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800f724:	4b3b      	ldr	r3, [pc, #236]	@ (800f814 <ResetMacParameters+0x218>)
 800f726:	2200      	movs	r2, #0
 800f728:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f72c:	2301      	movs	r3, #1
 800f72e:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f730:	4b3a      	ldr	r3, [pc, #232]	@ (800f81c <ResetMacParameters+0x220>)
 800f732:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f734:	4b3a      	ldr	r3, [pc, #232]	@ (800f820 <ResetMacParameters+0x224>)
 800f736:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f738:	4b36      	ldr	r3, [pc, #216]	@ (800f814 <ResetMacParameters+0x218>)
 800f73a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f73e:	f107 020c 	add.w	r2, r7, #12
 800f742:	4611      	mov	r1, r2
 800f744:	4618      	mov	r0, r3
 800f746:	f004 f9c5 	bl	8013ad4 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800f74a:	4b33      	ldr	r3, [pc, #204]	@ (800f818 <ResetMacParameters+0x21c>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 2411 	strb.w	r2, [r3, #1041]	@ 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f752:	4b31      	ldr	r3, [pc, #196]	@ (800f818 <ResetMacParameters+0x21c>)
 800f754:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800f758:	4b2f      	ldr	r3, [pc, #188]	@ (800f818 <ResetMacParameters+0x21c>)
 800f75a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f75e:	4b2d      	ldr	r3, [pc, #180]	@ (800f814 <ResetMacParameters+0x218>)
 800f760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f762:	4a2d      	ldr	r2, [pc, #180]	@ (800f818 <ResetMacParameters+0x21c>)
 800f764:	f8c2 33d0 	str.w	r3, [r2, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f768:	4b2a      	ldr	r3, [pc, #168]	@ (800f814 <ResetMacParameters+0x218>)
 800f76a:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800f76e:	4b2a      	ldr	r3, [pc, #168]	@ (800f818 <ResetMacParameters+0x21c>)
 800f770:	f883 23dc 	strb.w	r2, [r3, #988]	@ 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f774:	4b27      	ldr	r3, [pc, #156]	@ (800f814 <ResetMacParameters+0x218>)
 800f776:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800f77a:	4b27      	ldr	r3, [pc, #156]	@ (800f818 <ResetMacParameters+0x21c>)
 800f77c:	f883 23dd 	strb.w	r2, [r3, #989]	@ 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f780:	4b25      	ldr	r3, [pc, #148]	@ (800f818 <ResetMacParameters+0x21c>)
 800f782:	2200      	movs	r2, #0
 800f784:	f883 23de 	strb.w	r2, [r3, #990]	@ 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f788:	4b23      	ldr	r3, [pc, #140]	@ (800f818 <ResetMacParameters+0x21c>)
 800f78a:	2201      	movs	r2, #1
 800f78c:	f883 23df 	strb.w	r2, [r3, #991]	@ 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f790:	4a21      	ldr	r2, [pc, #132]	@ (800f818 <ResetMacParameters+0x21c>)
 800f792:	4b21      	ldr	r3, [pc, #132]	@ (800f818 <ResetMacParameters+0x21c>)
 800f794:	f502 7478 	add.w	r4, r2, #992	@ 0x3e0
 800f798:	f503 7573 	add.w	r5, r3, #972	@ 0x3cc
 800f79c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f79e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7a0:	682b      	ldr	r3, [r5, #0]
 800f7a2:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f7a4:	4b1c      	ldr	r3, [pc, #112]	@ (800f818 <ResetMacParameters+0x21c>)
 800f7a6:	2201      	movs	r2, #1
 800f7a8:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800f818 <ResetMacParameters+0x21c>)
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 800f7bc:	4b16      	ldr	r3, [pc, #88]	@ (800f818 <ResetMacParameters+0x21c>)
 800f7be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d009      	beq.n	800f7da <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f7c6:	4b14      	ldr	r3, [pc, #80]	@ (800f818 <ResetMacParameters+0x21c>)
 800f7c8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f7d0:	4b11      	ldr	r3, [pc, #68]	@ (800f818 <ResetMacParameters+0x21c>)
 800f7d2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f7d6:	695b      	ldr	r3, [r3, #20]
 800f7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f7da:	4b12      	ldr	r3, [pc, #72]	@ (800f824 <ResetMacParameters+0x228>)
 800f7dc:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f7de:	4b12      	ldr	r3, [pc, #72]	@ (800f828 <ResetMacParameters+0x22c>)
 800f7e0:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f7e2:	4b12      	ldr	r3, [pc, #72]	@ (800f82c <ResetMacParameters+0x230>)
 800f7e4:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f7e6:	4b12      	ldr	r3, [pc, #72]	@ (800f830 <ResetMacParameters+0x234>)
 800f7e8:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f7ea:	4b12      	ldr	r3, [pc, #72]	@ (800f834 <ResetMacParameters+0x238>)
 800f7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f7ee:	4b12      	ldr	r3, [pc, #72]	@ (800f838 <ResetMacParameters+0x23c>)
 800f7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f7f2:	4b12      	ldr	r3, [pc, #72]	@ (800f83c <ResetMacParameters+0x240>)
 800f7f4:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f7f6:	4b12      	ldr	r3, [pc, #72]	@ (800f840 <ResetMacParameters+0x244>)
 800f7f8:	637b      	str	r3, [r7, #52]	@ 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f7fa:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800f7fe:	f107 0318 	add.w	r3, r7, #24
 800f802:	4a10      	ldr	r2, [pc, #64]	@ (800f844 <ResetMacParameters+0x248>)
 800f804:	4618      	mov	r0, r3
 800f806:	f002 f94b 	bl	8011aa0 <LoRaMacClassBInit>
}
 800f80a:	bf00      	nop
 800f80c:	3740      	adds	r7, #64	@ 0x40
 800f80e:	46bd      	mov	sp, r7
 800f810:	bdb0      	pop	{r4, r5, r7, pc}
 800f812:	bf00      	nop
 800f814:	20000a0c 	.word	0x20000a0c
 800f818:	20000504 	.word	0x20000504
 800f81c:	20000c2c 	.word	0x20000c2c
 800f820:	20000cd0 	.word	0x20000cd0
 800f824:	20000960 	.word	0x20000960
 800f828:	2000091c 	.word	0x2000091c
 800f82c:	2000094c 	.word	0x2000094c
 800f830:	20000985 	.word	0x20000985
 800f834:	20000af0 	.word	0x20000af0
 800f838:	20000a54 	.word	0x20000a54
 800f83c:	20000a58 	.word	0x20000a58
 800f840:	20000af4 	.word	0x20000af4
 800f844:	2000116c 	.word	0x2000116c

0800f848 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f00c f978 	bl	801bb48 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800f858:	4b11      	ldr	r3, [pc, #68]	@ (800f8a0 <RxWindowSetup+0x58>)
 800f85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f85c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f85e:	4b11      	ldr	r3, [pc, #68]	@ (800f8a4 <RxWindowSetup+0x5c>)
 800f860:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f864:	4a10      	ldr	r2, [pc, #64]	@ (800f8a8 <RxWindowSetup+0x60>)
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	4618      	mov	r0, r3
 800f86a:	f004 f9c0 	bl	8013bee <RegionRxConfig>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	d010      	beq.n	800f896 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f874:	4b0d      	ldr	r3, [pc, #52]	@ (800f8ac <RxWindowSetup+0x64>)
 800f876:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f87a:	4b0c      	ldr	r3, [pc, #48]	@ (800f8ac <RxWindowSetup+0x64>)
 800f87c:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f880:	4b07      	ldr	r3, [pc, #28]	@ (800f8a0 <RxWindowSetup+0x58>)
 800f882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f884:	4a07      	ldr	r2, [pc, #28]	@ (800f8a4 <RxWindowSetup+0x5c>)
 800f886:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800f888:	4610      	mov	r0, r2
 800f88a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	7cda      	ldrb	r2, [r3, #19]
 800f890:	4b06      	ldr	r3, [pc, #24]	@ (800f8ac <RxWindowSetup+0x64>)
 800f892:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f896:	bf00      	nop
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	0801d01c 	.word	0x0801d01c
 800f8a4:	20000a0c 	.word	0x20000a0c
 800f8a8:	20000920 	.word	0x20000920
 800f8ac:	20000504 	.word	0x20000504

0800f8b0 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800f8b0:	b590      	push	{r4, r7, lr}
 800f8b2:	b083      	sub	sp, #12
 800f8b4:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8b6:	4b1b      	ldr	r3, [pc, #108]	@ (800f924 <OpenContinuousRxCWindow+0x74>)
 800f8b8:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f8bc:	4b19      	ldr	r3, [pc, #100]	@ (800f924 <OpenContinuousRxCWindow+0x74>)
 800f8be:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f8c2:	b259      	sxtb	r1, r3
 800f8c4:	4b17      	ldr	r3, [pc, #92]	@ (800f924 <OpenContinuousRxCWindow+0x74>)
 800f8c6:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800f8ca:	4b16      	ldr	r3, [pc, #88]	@ (800f924 <OpenContinuousRxCWindow+0x74>)
 800f8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f8ce:	4c16      	ldr	r4, [pc, #88]	@ (800f928 <OpenContinuousRxCWindow+0x78>)
 800f8d0:	9400      	str	r4, [sp, #0]
 800f8d2:	f004 f969 	bl	8013ba8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f8d6:	4b15      	ldr	r3, [pc, #84]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f8d8:	2202      	movs	r2, #2
 800f8da:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f8de:	4b13      	ldr	r3, [pc, #76]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f8e0:	2201      	movs	r2, #1
 800f8e2:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f8e6:	4b0f      	ldr	r3, [pc, #60]	@ (800f924 <OpenContinuousRxCWindow+0x74>)
 800f8e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f8ec:	4a10      	ldr	r2, [pc, #64]	@ (800f930 <OpenContinuousRxCWindow+0x80>)
 800f8ee:	490e      	ldr	r1, [pc, #56]	@ (800f928 <OpenContinuousRxCWindow+0x78>)
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f004 f97c 	bl	8013bee <RegionRxConfig>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00f      	beq.n	800f91c <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f8fe:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800f902:	4b0a      	ldr	r3, [pc, #40]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f904:	f883 245e 	strb.w	r2, [r3, #1118]	@ 0x45e
        Radio.Rx( 0 ); // Continuous mode
 800f908:	4b0a      	ldr	r3, [pc, #40]	@ (800f934 <OpenContinuousRxCWindow+0x84>)
 800f90a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f90c:	2000      	movs	r0, #0
 800f90e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f910:	4b06      	ldr	r3, [pc, #24]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f912:	f893 23f3 	ldrb.w	r2, [r3, #1011]	@ 0x3f3
 800f916:	4b05      	ldr	r3, [pc, #20]	@ (800f92c <OpenContinuousRxCWindow+0x7c>)
 800f918:	f883 2480 	strb.w	r2, [r3, #1152]	@ 0x480
    }
}
 800f91c:	bf00      	nop
 800f91e:	3704      	adds	r7, #4
 800f920:	46bd      	mov	sp, r7
 800f922:	bd90      	pop	{r4, r7, pc}
 800f924:	20000a0c 	.word	0x20000a0c
 800f928:	200008e4 	.word	0x200008e4
 800f92c:	20000504 	.word	0x20000504
 800f930:	20000920 	.word	0x20000920
 800f934:	0801d01c 	.word	0x0801d01c

0800f938 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b088      	sub	sp, #32
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	603b      	str	r3, [r7, #0]
 800f944:	4613      	mov	r3, r2
 800f946:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800f948:	4b81      	ldr	r3, [pc, #516]	@ (800fb50 <PrepareFrame+0x218>)
 800f94a:	2200      	movs	r2, #0
 800f94c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800f94e:	4b80      	ldr	r3, [pc, #512]	@ (800fb50 <PrepareFrame+0x218>)
 800f950:	2200      	movs	r2, #0
 800f952:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
    uint32_t fCntUp = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800f95e:	2300      	movs	r3, #0
 800f960:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d101      	bne.n	800f96c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800f96c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f96e:	461a      	mov	r2, r3
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	4878      	ldr	r0, [pc, #480]	@ (800fb54 <PrepareFrame+0x21c>)
 800f974:	f007 ff49 	bl	801780a <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800f978:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f97a:	b2da      	uxtb	r2, r3
 800f97c:	4b74      	ldr	r3, [pc, #464]	@ (800fb50 <PrepareFrame+0x218>)
 800f97e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	781a      	ldrb	r2, [r3, #0]
 800f986:	4b72      	ldr	r3, [pc, #456]	@ (800fb50 <PrepareFrame+0x218>)
 800f988:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800f992:	b2db      	uxtb	r3, r3
 800f994:	2b07      	cmp	r3, #7
 800f996:	f000 80b9 	beq.w	800fb0c <PrepareFrame+0x1d4>
 800f99a:	2b07      	cmp	r3, #7
 800f99c:	f300 80ce 	bgt.w	800fb3c <PrepareFrame+0x204>
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d006      	beq.n	800f9b2 <PrepareFrame+0x7a>
 800f9a4:	2b04      	cmp	r3, #4
 800f9a6:	f040 80c9 	bne.w	800fb3c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800f9aa:	4b69      	ldr	r3, [pc, #420]	@ (800fb50 <PrepareFrame+0x218>)
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800f9b2:	4b67      	ldr	r3, [pc, #412]	@ (800fb50 <PrepareFrame+0x218>)
 800f9b4:	2204      	movs	r2, #4
 800f9b6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800f9ba:	4b65      	ldr	r3, [pc, #404]	@ (800fb50 <PrepareFrame+0x218>)
 800f9bc:	4a66      	ldr	r2, [pc, #408]	@ (800fb58 <PrepareFrame+0x220>)
 800f9be:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800f9c2:	4b63      	ldr	r3, [pc, #396]	@ (800fb50 <PrepareFrame+0x218>)
 800f9c4:	22ff      	movs	r2, #255	@ 0xff
 800f9c6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	781a      	ldrb	r2, [r3, #0]
 800f9ce:	4b60      	ldr	r3, [pc, #384]	@ (800fb50 <PrepareFrame+0x218>)
 800f9d0:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800f9d4:	4a5e      	ldr	r2, [pc, #376]	@ (800fb50 <PrepareFrame+0x218>)
 800f9d6:	79fb      	ldrb	r3, [r7, #7]
 800f9d8:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800f9dc:	4b5f      	ldr	r3, [pc, #380]	@ (800fb5c <PrepareFrame+0x224>)
 800f9de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800f9e2:	4a5b      	ldr	r2, [pc, #364]	@ (800fb50 <PrepareFrame+0x218>)
 800f9e4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	781a      	ldrb	r2, [r3, #0]
 800f9ec:	4b58      	ldr	r3, [pc, #352]	@ (800fb50 <PrepareFrame+0x218>)
 800f9ee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800f9f2:	4b57      	ldr	r3, [pc, #348]	@ (800fb50 <PrepareFrame+0x218>)
 800f9f4:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800f9f8:	4b55      	ldr	r3, [pc, #340]	@ (800fb50 <PrepareFrame+0x218>)
 800f9fa:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800f9fe:	4b54      	ldr	r3, [pc, #336]	@ (800fb50 <PrepareFrame+0x218>)
 800fa00:	4a54      	ldr	r2, [pc, #336]	@ (800fb54 <PrepareFrame+0x21c>)
 800fa02:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fa06:	f107 0318 	add.w	r3, r7, #24
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	f003 f97c 	bl	8012d08 <LoRaMacCryptoGetFCntUp>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fa16:	2312      	movs	r3, #18
 800fa18:	e096      	b.n	800fb48 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	b29a      	uxth	r2, r3
 800fa1e:	4b4c      	ldr	r3, [pc, #304]	@ (800fb50 <PrepareFrame+0x218>)
 800fa20:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 800fa24:	4b4a      	ldr	r3, [pc, #296]	@ (800fb50 <PrepareFrame+0x218>)
 800fa26:	2200      	movs	r2, #0
 800fa28:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800fa2c:	4b48      	ldr	r3, [pc, #288]	@ (800fb50 <PrepareFrame+0x218>)
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800fa34:	69bb      	ldr	r3, [r7, #24]
 800fa36:	4a46      	ldr	r2, [pc, #280]	@ (800fb50 <PrepareFrame+0x218>)
 800fa38:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800fa3c:	f107 0314 	add.w	r3, r7, #20
 800fa40:	4618      	mov	r0, r3
 800fa42:	f002 fb31 	bl	80120a8 <LoRaMacCommandsGetSizeSerializedCmds>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d001      	beq.n	800fa50 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa4c:	2313      	movs	r3, #19
 800fa4e:	e07b      	b.n	800fb48 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d074      	beq.n	800fb40 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800fa56:	4b41      	ldr	r3, [pc, #260]	@ (800fb5c <PrepareFrame+0x224>)
 800fa58:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fd75 	bl	800e54c <GetMaxAppPayloadWithoutFOptsLength>
 800fa62:	4603      	mov	r3, r0
 800fa64:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fa66:	4b3a      	ldr	r3, [pc, #232]	@ (800fb50 <PrepareFrame+0x218>)
 800fa68:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d01d      	beq.n	800faac <PrepareFrame+0x174>
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	2b0f      	cmp	r3, #15
 800fa74:	d81a      	bhi.n	800faac <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800fa76:	f107 0314 	add.w	r3, r7, #20
 800fa7a:	4a39      	ldr	r2, [pc, #228]	@ (800fb60 <PrepareFrame+0x228>)
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	200f      	movs	r0, #15
 800fa80:	f002 fb28 	bl	80120d4 <LoRaMacCommandsSerializeCmds>
 800fa84:	4603      	mov	r3, r0
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d001      	beq.n	800fa8e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fa8a:	2313      	movs	r3, #19
 800fa8c:	e05c      	b.n	800fb48 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f003 030f 	and.w	r3, r3, #15
 800fa94:	b2d9      	uxtb	r1, r3
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	7813      	ldrb	r3, [r2, #0]
 800fa9a:	f361 0303 	bfi	r3, r1, #0, #4
 800fa9e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	781a      	ldrb	r2, [r3, #0]
 800faa4:	4b2a      	ldr	r3, [pc, #168]	@ (800fb50 <PrepareFrame+0x218>)
 800faa6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800faaa:	e049      	b.n	800fb40 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800faac:	4b28      	ldr	r3, [pc, #160]	@ (800fb50 <PrepareFrame+0x218>)
 800faae:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d010      	beq.n	800fad8 <PrepareFrame+0x1a0>
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	2b0f      	cmp	r3, #15
 800faba:	d90d      	bls.n	800fad8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fabc:	7ffb      	ldrb	r3, [r7, #31]
 800fabe:	f107 0114 	add.w	r1, r7, #20
 800fac2:	4a28      	ldr	r2, [pc, #160]	@ (800fb64 <PrepareFrame+0x22c>)
 800fac4:	4618      	mov	r0, r3
 800fac6:	f002 fb05 	bl	80120d4 <LoRaMacCommandsSerializeCmds>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d001      	beq.n	800fad4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fad0:	2313      	movs	r3, #19
 800fad2:	e039      	b.n	800fb48 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800fad4:	230a      	movs	r3, #10
 800fad6:	e037      	b.n	800fb48 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fad8:	7ffb      	ldrb	r3, [r7, #31]
 800fada:	f107 0114 	add.w	r1, r7, #20
 800fade:	4a21      	ldr	r2, [pc, #132]	@ (800fb64 <PrepareFrame+0x22c>)
 800fae0:	4618      	mov	r0, r3
 800fae2:	f002 faf7 	bl	80120d4 <LoRaMacCommandsSerializeCmds>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d001      	beq.n	800faf0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800faec:	2313      	movs	r3, #19
 800faee:	e02b      	b.n	800fb48 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800faf0:	4b17      	ldr	r3, [pc, #92]	@ (800fb50 <PrepareFrame+0x218>)
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800faf8:	4b15      	ldr	r3, [pc, #84]	@ (800fb50 <PrepareFrame+0x218>)
 800fafa:	4a1a      	ldr	r2, [pc, #104]	@ (800fb64 <PrepareFrame+0x22c>)
 800fafc:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	4b12      	ldr	r3, [pc, #72]	@ (800fb50 <PrepareFrame+0x218>)
 800fb06:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800fb0a:	e019      	b.n	800fb40 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d018      	beq.n	800fb44 <PrepareFrame+0x20c>
 800fb12:	4b0f      	ldr	r3, [pc, #60]	@ (800fb50 <PrepareFrame+0x218>)
 800fb14:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d013      	beq.n	800fb44 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800fb1c:	4812      	ldr	r0, [pc, #72]	@ (800fb68 <PrepareFrame+0x230>)
 800fb1e:	4b0c      	ldr	r3, [pc, #48]	@ (800fb50 <PrepareFrame+0x218>)
 800fb20:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb24:	461a      	mov	r2, r3
 800fb26:	6839      	ldr	r1, [r7, #0]
 800fb28:	f007 fe6f 	bl	801780a <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800fb2c:	4b08      	ldr	r3, [pc, #32]	@ (800fb50 <PrepareFrame+0x218>)
 800fb2e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800fb32:	3301      	adds	r3, #1
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	4b06      	ldr	r3, [pc, #24]	@ (800fb50 <PrepareFrame+0x218>)
 800fb38:	801a      	strh	r2, [r3, #0]
            }
            break;
 800fb3a:	e003      	b.n	800fb44 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fb3c:	2302      	movs	r3, #2
 800fb3e:	e003      	b.n	800fb48 <PrepareFrame+0x210>
            break;
 800fb40:	bf00      	nop
 800fb42:	e000      	b.n	800fb46 <PrepareFrame+0x20e>
            break;
 800fb44:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800fb46:	2300      	movs	r3, #0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3720      	adds	r7, #32
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000504 	.word	0x20000504
 800fb54:	2000063c 	.word	0x2000063c
 800fb58:	20000506 	.word	0x20000506
 800fb5c:	20000a0c 	.word	0x20000a0c
 800fb60:	2000061c 	.word	0x2000061c
 800fb64:	2000098c 	.word	0x2000098c
 800fb68:	20000507 	.word	0x20000507

0800fb6c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08a      	sub	sp, #40	@ 0x28
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	4603      	mov	r3, r0
 800fb74:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fb76:	2303      	movs	r3, #3
 800fb78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800fb80:	79fb      	ldrb	r3, [r7, #7]
 800fb82:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fb84:	4b48      	ldr	r3, [pc, #288]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fb86:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fb8a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fb8c:	4b46      	ldr	r3, [pc, #280]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fb8e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fb92:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fb94:	4b44      	ldr	r3, [pc, #272]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fb96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb9a:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fb9c:	4b42      	ldr	r3, [pc, #264]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fb9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fba2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800fba4:	4b41      	ldr	r3, [pc, #260]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800fbaa:	4b3f      	ldr	r3, [pc, #252]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fbac:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800fbb0:	f107 020f 	add.w	r2, r7, #15
 800fbb4:	f107 0110 	add.w	r1, r7, #16
 800fbb8:	4b3d      	ldr	r3, [pc, #244]	@ (800fcb0 <SendFrameOnChannel+0x144>)
 800fbba:	f004 f836 	bl	8013c2a <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fbbe:	4b3b      	ldr	r3, [pc, #236]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbc0:	2201      	movs	r2, #1
 800fbc2:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbc6:	4b38      	ldr	r3, [pc, #224]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fbc8:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fbcc:	b2da      	uxtb	r2, r3
 800fbce:	4b37      	ldr	r3, [pc, #220]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbd0:	f883 2436 	strb.w	r2, [r3, #1078]	@ 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 800fbd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800fbd8:	4b34      	ldr	r3, [pc, #208]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbda:	f883 2437 	strb.w	r2, [r3, #1079]	@ 0x437
    MacCtx.McpsConfirm.Channel = channel;
 800fbde:	79fb      	ldrb	r3, [r7, #7]
 800fbe0:	4a32      	ldr	r2, [pc, #200]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbe2:	f8c2 3444 	str.w	r3, [r2, #1092]	@ 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fbe6:	4b31      	ldr	r3, [pc, #196]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbe8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fbec:	4a2f      	ldr	r2, [pc, #188]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbee:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800fbf2:	4b2e      	ldr	r3, [pc, #184]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbf4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fbf8:	4a2c      	ldr	r2, [pc, #176]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fbfa:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800fbfe:	f001 ffbb 	bl	8011b78 <LoRaMacClassBIsBeaconModeActive>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00b      	beq.n	800fc20 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800fc08:	4b28      	ldr	r3, [pc, #160]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800fc0e:	4618      	mov	r0, r3
 800fc10:	f002 f81d 	bl	8011c4e <LoRaMacClassBIsUplinkCollision>
 800fc14:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800fc16:	6a3b      	ldr	r3, [r7, #32]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d001      	beq.n	800fc20 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800fc1c:	2310      	movs	r3, #16
 800fc1e:	e03e      	b.n	800fc9e <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc20:	4b21      	ldr	r3, [pc, #132]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fc22:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d101      	bne.n	800fc2e <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800fc2a:	f002 f81a 	bl	8011c62 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800fc2e:	f001 ffb4 	bl	8011b9a <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800fc32:	4b1d      	ldr	r3, [pc, #116]	@ (800fca8 <SendFrameOnChannel+0x13c>)
 800fc34:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fc38:	b2db      	uxtb	r3, r3
 800fc3a:	4a1c      	ldr	r2, [pc, #112]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc3c:	f892 2411 	ldrb.w	r2, [r2, #1041]	@ 0x411
 800fc40:	4611      	mov	r1, r2
 800fc42:	4618      	mov	r0, r3
 800fc44:	f7ff fc44 	bl	800f4d0 <SecureFrame>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800fc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d002      	beq.n	800fc5c <SendFrameOnChannel+0xf0>
    {
        return status;
 800fc56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fc5a:	e020      	b.n	800fc9e <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fc5c:	4b13      	ldr	r3, [pc, #76]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc5e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fc62:	f043 0302 	orr.w	r3, r3, #2
 800fc66:	4a11      	ldr	r2, [pc, #68]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc68:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 800fc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc6e:	f893 3410 	ldrb.w	r3, [r3, #1040]	@ 0x410
 800fc72:	f083 0301 	eor.w	r3, r3, #1
 800fc76:	b2db      	uxtb	r3, r3
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d007      	beq.n	800fc8c <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 800fc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc7e:	f893 340c 	ldrb.w	r3, [r3, #1036]	@ 0x40c
 800fc82:	3301      	adds	r3, #1
 800fc84:	b2da      	uxtb	r2, r3
 800fc86:	4b09      	ldr	r3, [pc, #36]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc88:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800fc8c:	4b09      	ldr	r3, [pc, #36]	@ (800fcb4 <SendFrameOnChannel+0x148>)
 800fc8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc90:	4a06      	ldr	r2, [pc, #24]	@ (800fcac <SendFrameOnChannel+0x140>)
 800fc92:	8812      	ldrh	r2, [r2, #0]
 800fc94:	b2d2      	uxtb	r2, r2
 800fc96:	4611      	mov	r1, r2
 800fc98:	4807      	ldr	r0, [pc, #28]	@ (800fcb8 <SendFrameOnChannel+0x14c>)
 800fc9a:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3728      	adds	r7, #40	@ 0x28
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	20000a0c 	.word	0x20000a0c
 800fcac:	20000504 	.word	0x20000504
 800fcb0:	20000918 	.word	0x20000918
 800fcb4:	0801d01c 	.word	0x0801d01c
 800fcb8:	20000506 	.word	0x20000506

0800fcbc <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b086      	sub	sp, #24
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 800fcc6:	4b16      	ldr	r3, [pc, #88]	@ (800fd20 <SetTxContinuousWave+0x64>)
 800fcc8:	f893 3411 	ldrb.w	r3, [r3, #1041]	@ 0x411
 800fccc:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fcce:	4b15      	ldr	r3, [pc, #84]	@ (800fd24 <SetTxContinuousWave+0x68>)
 800fcd0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fcd4:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fcd6:	4b13      	ldr	r3, [pc, #76]	@ (800fd24 <SetTxContinuousWave+0x68>)
 800fcd8:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fcdc:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800fcde:	4b11      	ldr	r3, [pc, #68]	@ (800fd24 <SetTxContinuousWave+0x68>)
 800fce0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fce4:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800fce6:	4b0f      	ldr	r3, [pc, #60]	@ (800fd24 <SetTxContinuousWave+0x68>)
 800fce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fcec:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 800fcee:	88fb      	ldrh	r3, [r7, #6]
 800fcf0:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 800fcf2:	4b0c      	ldr	r3, [pc, #48]	@ (800fd24 <SetTxContinuousWave+0x68>)
 800fcf4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800fcf8:	f107 0208 	add.w	r2, r7, #8
 800fcfc:	4611      	mov	r1, r2
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f004 f890 	bl	8013e24 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd04:	4b06      	ldr	r3, [pc, #24]	@ (800fd20 <SetTxContinuousWave+0x64>)
 800fd06:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd0a:	f043 0302 	orr.w	r3, r3, #2
 800fd0e:	4a04      	ldr	r2, [pc, #16]	@ (800fd20 <SetTxContinuousWave+0x64>)
 800fd10:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fd14:	2300      	movs	r3, #0
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	20000504 	.word	0x20000504
 800fd24:	20000a0c 	.word	0x20000a0c

0800fd28 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b082      	sub	sp, #8
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	4603      	mov	r3, r0
 800fd30:	6039      	str	r1, [r7, #0]
 800fd32:	80fb      	strh	r3, [r7, #6]
 800fd34:	4613      	mov	r3, r2
 800fd36:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800fd38:	4b09      	ldr	r3, [pc, #36]	@ (800fd60 <SetTxContinuousWave1+0x38>)
 800fd3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd3c:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800fd40:	88fa      	ldrh	r2, [r7, #6]
 800fd42:	6838      	ldr	r0, [r7, #0]
 800fd44:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800fd46:	4b07      	ldr	r3, [pc, #28]	@ (800fd64 <SetTxContinuousWave1+0x3c>)
 800fd48:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd4c:	f043 0302 	orr.w	r3, r3, #2
 800fd50:	4a04      	ldr	r2, [pc, #16]	@ (800fd64 <SetTxContinuousWave1+0x3c>)
 800fd52:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800fd56:	2300      	movs	r3, #0
}
 800fd58:	4618      	mov	r0, r3
 800fd5a:	3708      	adds	r7, #8
 800fd5c:	46bd      	mov	sp, r7
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	0801d01c 	.word	0x0801d01c
 800fd64:	20000504 	.word	0x20000504

0800fd68 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800fd68:	b580      	push	{r7, lr}
 800fd6a:	b082      	sub	sp, #8
 800fd6c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800fd6e:	2300      	movs	r3, #0
 800fd70:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800fd72:	4b49      	ldr	r3, [pc, #292]	@ (800fe98 <RestoreNvmData+0x130>)
 800fd74:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800fd78:	2b01      	cmp	r3, #1
 800fd7a:	d001      	beq.n	800fd80 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	e086      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800fd80:	2124      	movs	r1, #36	@ 0x24
 800fd82:	4846      	ldr	r0, [pc, #280]	@ (800fe9c <RestoreNvmData+0x134>)
 800fd84:	f007 fd96 	bl	80178b4 <Crc32>
 800fd88:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800fd8a:	4b44      	ldr	r3, [pc, #272]	@ (800fe9c <RestoreNvmData+0x134>)
 800fd8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd8e:	687a      	ldr	r2, [r7, #4]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d001      	beq.n	800fd98 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fd94:	2317      	movs	r3, #23
 800fd96:	e07a      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800fd98:	211c      	movs	r1, #28
 800fd9a:	4841      	ldr	r0, [pc, #260]	@ (800fea0 <RestoreNvmData+0x138>)
 800fd9c:	f007 fd8a 	bl	80178b4 <Crc32>
 800fda0:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800fda2:	4b3e      	ldr	r3, [pc, #248]	@ (800fe9c <RestoreNvmData+0x134>)
 800fda4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d001      	beq.n	800fdb0 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fdac:	2317      	movs	r3, #23
 800fdae:	e06e      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800fdb0:	21fc      	movs	r1, #252	@ 0xfc
 800fdb2:	483c      	ldr	r0, [pc, #240]	@ (800fea4 <RestoreNvmData+0x13c>)
 800fdb4:	f007 fd7e 	bl	80178b4 <Crc32>
 800fdb8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800fdba:	4b38      	ldr	r3, [pc, #224]	@ (800fe9c <RestoreNvmData+0x134>)
 800fdbc:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
 800fdc0:	687a      	ldr	r2, [r7, #4]
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d001      	beq.n	800fdca <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fdc6:	2317      	movs	r3, #23
 800fdc8:	e061      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800fdca:	21d4      	movs	r1, #212	@ 0xd4
 800fdcc:	4836      	ldr	r0, [pc, #216]	@ (800fea8 <RestoreNvmData+0x140>)
 800fdce:	f007 fd71 	bl	80178b4 <Crc32>
 800fdd2:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800fdd4:	4b31      	ldr	r3, [pc, #196]	@ (800fe9c <RestoreNvmData+0x134>)
 800fdd6:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 800fdda:	687a      	ldr	r2, [r7, #4]
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d001      	beq.n	800fde4 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fde0:	2317      	movs	r3, #23
 800fde2:	e054      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800fde4:	21a0      	movs	r1, #160	@ 0xa0
 800fde6:	4831      	ldr	r0, [pc, #196]	@ (800feac <RestoreNvmData+0x144>)
 800fde8:	f007 fd64 	bl	80178b4 <Crc32>
 800fdec:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800fdee:	4b2b      	ldr	r3, [pc, #172]	@ (800fe9c <RestoreNvmData+0x134>)
 800fdf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	d001      	beq.n	800fdfe <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fdfa:	2317      	movs	r3, #23
 800fdfc:	e047      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800fdfe:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 800fe02:	482b      	ldr	r0, [pc, #172]	@ (800feb0 <RestoreNvmData+0x148>)
 800fe04:	f007 fd56 	bl	80178b4 <Crc32>
 800fe08:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800fe0a:	4b24      	ldr	r3, [pc, #144]	@ (800fe9c <RestoreNvmData+0x134>)
 800fe0c:	f8d3 375c 	ldr.w	r3, [r3, #1884]	@ 0x75c
 800fe10:	687a      	ldr	r2, [r7, #4]
 800fe12:	429a      	cmp	r2, r3
 800fe14:	d001      	beq.n	800fe1a <RestoreNvmData+0xb2>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fe16:	2317      	movs	r3, #23
 800fe18:	e039      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800fe1a:	2114      	movs	r1, #20
 800fe1c:	4825      	ldr	r0, [pc, #148]	@ (800feb4 <RestoreNvmData+0x14c>)
 800fe1e:	f007 fd49 	bl	80178b4 <Crc32>
 800fe22:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800fe24:	4b1d      	ldr	r3, [pc, #116]	@ (800fe9c <RestoreNvmData+0x134>)
 800fe26:	f8d3 3774 	ldr.w	r3, [r3, #1908]	@ 0x774
 800fe2a:	687a      	ldr	r2, [r7, #4]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d001      	beq.n	800fe34 <RestoreNvmData+0xcc>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800fe30:	2317      	movs	r3, #23
 800fe32:	e02c      	b.n	800fe8e <RestoreNvmData+0x126>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800fe34:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800fe38:	4918      	ldr	r1, [pc, #96]	@ (800fe9c <RestoreNvmData+0x134>)
 800fe3a:	481f      	ldr	r0, [pc, #124]	@ (800feb8 <RestoreNvmData+0x150>)
 800fe3c:	f007 fce5 	bl	801780a <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800fe40:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 800fe44:	2100      	movs	r1, #0
 800fe46:	4815      	ldr	r0, [pc, #84]	@ (800fe9c <RestoreNvmData+0x134>)
 800fe48:	f007 fd1a 	bl	8017880 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800fe4c:	4b12      	ldr	r3, [pc, #72]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe4e:	f893 2411 	ldrb.w	r2, [r3, #1041]	@ 0x411
 800fe52:	4b11      	ldr	r3, [pc, #68]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe54:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800fe58:	4b17      	ldr	r3, [pc, #92]	@ (800feb8 <RestoreNvmData+0x150>)
 800fe5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fe5c:	4a0e      	ldr	r2, [pc, #56]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe5e:	f8c2 33e4 	str.w	r3, [r2, #996]	@ 0x3e4
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800fe62:	4b15      	ldr	r3, [pc, #84]	@ (800feb8 <RestoreNvmData+0x150>)
 800fe64:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800fe68:	4b0b      	ldr	r3, [pc, #44]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe6a:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800fe6e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe70:	2201      	movs	r2, #1
 800fe72:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800fe76:	4b08      	ldr	r3, [pc, #32]	@ (800fe98 <RestoreNvmData+0x130>)
 800fe78:	2202      	movs	r2, #2
 800fe7a:	f883 23f3 	strb.w	r2, [r3, #1011]	@ 0x3f3

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800fe7e:	4b0f      	ldr	r3, [pc, #60]	@ (800febc <RestoreNvmData+0x154>)
 800fe80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe82:	4a0d      	ldr	r2, [pc, #52]	@ (800feb8 <RestoreNvmData+0x150>)
 800fe84:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800fe88:	4610      	mov	r0, r2
 800fe8a:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800fe8c:	2300      	movs	r3, #0
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20000504 	.word	0x20000504
 800fe9c:	20001184 	.word	0x20001184
 800fea0:	200011ac 	.word	0x200011ac
 800fea4:	200011cc 	.word	0x200011cc
 800fea8:	200012cc 	.word	0x200012cc
 800feac:	200013a4 	.word	0x200013a4
 800feb0:	20001448 	.word	0x20001448
 800feb4:	200018e4 	.word	0x200018e4
 800feb8:	20000a0c 	.word	0x20000a0c
 800febc:	0801d01c 	.word	0x0801d01c

0800fec0 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
 800fec8:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d002      	beq.n	800fed6 <DetermineFrameType+0x16>
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d101      	bne.n	800feda <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800fed6:	2303      	movs	r3, #3
 800fed8:	e03b      	b.n	800ff52 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	7b1b      	ldrb	r3, [r3, #12]
 800fede:	f003 030f 	and.w	r3, r3, #15
 800fee2:	b2db      	uxtb	r3, r3
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d008      	beq.n	800fefa <DetermineFrameType+0x3a>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d003      	beq.n	800fefa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	2200      	movs	r2, #0
 800fef6:	701a      	strb	r2, [r3, #0]
 800fef8:	e02a      	b.n	800ff50 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d103      	bne.n	800ff0c <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	2201      	movs	r2, #1
 800ff08:	701a      	strb	r2, [r3, #0]
 800ff0a:	e021      	b.n	800ff50 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	7b1b      	ldrb	r3, [r3, #12]
 800ff10:	f003 030f 	and.w	r3, r3, #15
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d108      	bne.n	800ff2c <DetermineFrameType+0x6c>
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d103      	bne.n	800ff2c <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2202      	movs	r2, #2
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	e011      	b.n	800ff50 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	7b1b      	ldrb	r3, [r3, #12]
 800ff30:	f003 030f 	and.w	r3, r3, #15
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d108      	bne.n	800ff4c <DetermineFrameType+0x8c>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d003      	beq.n	800ff4c <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	2203      	movs	r2, #3
 800ff48:	701a      	strb	r2, [r3, #0]
 800ff4a:	e001      	b.n	800ff50 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ff4c:	2318      	movs	r3, #24
 800ff4e:	e000      	b.n	800ff52 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	370c      	adds	r7, #12
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bc80      	pop	{r7}
 800ff5a:	4770      	bx	lr

0800ff5c <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 800ff60:	4b12      	ldr	r3, [pc, #72]	@ (800ffac <CheckRetransUnconfirmedUplink+0x50>)
 800ff62:	f893 240c 	ldrb.w	r2, [r3, #1036]	@ 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800ff66:	4b12      	ldr	r3, [pc, #72]	@ (800ffb0 <CheckRetransUnconfirmedUplink+0x54>)
 800ff68:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d301      	bcc.n	800ff74 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 800ff70:	2301      	movs	r3, #1
 800ff72:	e016      	b.n	800ffa2 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ff74:	4b0d      	ldr	r3, [pc, #52]	@ (800ffac <CheckRetransUnconfirmedUplink+0x50>)
 800ff76:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ff7a:	f003 0302 	and.w	r3, r3, #2
 800ff7e:	b2db      	uxtb	r3, r3
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d00d      	beq.n	800ffa0 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800ff84:	4b0a      	ldr	r3, [pc, #40]	@ (800ffb0 <CheckRetransUnconfirmedUplink+0x54>)
 800ff86:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d101      	bne.n	800ff92 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 800ff8e:	2301      	movs	r3, #1
 800ff90:	e007      	b.n	800ffa2 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ff92:	4b06      	ldr	r3, [pc, #24]	@ (800ffac <CheckRetransUnconfirmedUplink+0x50>)
 800ff94:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d101      	bne.n	800ffa0 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e000      	b.n	800ffa2 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 800ffa0:	2300      	movs	r3, #0
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bc80      	pop	{r7}
 800ffa8:	4770      	bx	lr
 800ffaa:	bf00      	nop
 800ffac:	20000504 	.word	0x20000504
 800ffb0:	20000a0c 	.word	0x20000a0c

0800ffb4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ffb8:	4b0e      	ldr	r3, [pc, #56]	@ (800fff4 <CheckRetransConfirmedUplink+0x40>)
 800ffba:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
        MacCtx.AckTimeoutRetries )
 800ffbe:	4b0d      	ldr	r3, [pc, #52]	@ (800fff4 <CheckRetransConfirmedUplink+0x40>)
 800ffc0:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d301      	bcc.n	800ffcc <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 800ffc8:	2301      	movs	r3, #1
 800ffca:	e00f      	b.n	800ffec <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ffcc:	4b09      	ldr	r3, [pc, #36]	@ (800fff4 <CheckRetransConfirmedUplink+0x40>)
 800ffce:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 800ffd2:	f003 0302 	and.w	r3, r3, #2
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d006      	beq.n	800ffea <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800ffdc:	4b05      	ldr	r3, [pc, #20]	@ (800fff4 <CheckRetransConfirmedUplink+0x40>)
 800ffde:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	e000      	b.n	800ffec <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	46bd      	mov	sp, r7
 800fff0:	bc80      	pop	{r7}
 800fff2:	4770      	bx	lr
 800fff4:	20000504 	.word	0x20000504

0800fff8 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800fff8:	b480      	push	{r7}
 800fffa:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800fffc:	4b1a      	ldr	r3, [pc, #104]	@ (8010068 <StopRetransmission+0x70>)
 800fffe:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 8010002:	f003 0302 	and.w	r3, r3, #2
 8010006:	b2db      	uxtb	r3, r3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d009      	beq.n	8010020 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801000c:	4b16      	ldr	r3, [pc, #88]	@ (8010068 <StopRetransmission+0x70>)
 801000e:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010012:	2b00      	cmp	r3, #0
 8010014:	d00e      	beq.n	8010034 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010016:	4b14      	ldr	r3, [pc, #80]	@ (8010068 <StopRetransmission+0x70>)
 8010018:	f893 347f 	ldrb.w	r3, [r3, #1151]	@ 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 801001c:	2b01      	cmp	r3, #1
 801001e:	d009      	beq.n	8010034 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010020:	4b12      	ldr	r3, [pc, #72]	@ (801006c <StopRetransmission+0x74>)
 8010022:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010026:	2b00      	cmp	r3, #0
 8010028:	d004      	beq.n	8010034 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 801002a:	4b10      	ldr	r3, [pc, #64]	@ (801006c <StopRetransmission+0x74>)
 801002c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801002e:	3301      	adds	r3, #1
 8010030:	4a0e      	ldr	r2, [pc, #56]	@ (801006c <StopRetransmission+0x74>)
 8010032:	6293      	str	r3, [r2, #40]	@ 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010034:	4b0c      	ldr	r3, [pc, #48]	@ (8010068 <StopRetransmission+0x70>)
 8010036:	2200      	movs	r2, #0
 8010038:	f883 240c 	strb.w	r2, [r3, #1036]	@ 0x40c
    MacCtx.NodeAckRequested = false;
 801003c:	4b0a      	ldr	r3, [pc, #40]	@ (8010068 <StopRetransmission+0x70>)
 801003e:	2200      	movs	r2, #0
 8010040:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8010044:	4b08      	ldr	r3, [pc, #32]	@ (8010068 <StopRetransmission+0x70>)
 8010046:	2200      	movs	r2, #0
 8010048:	f883 240f 	strb.w	r2, [r3, #1039]	@ 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 801004c:	4b06      	ldr	r3, [pc, #24]	@ (8010068 <StopRetransmission+0x70>)
 801004e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010052:	f023 0302 	bic.w	r3, r3, #2
 8010056:	4a04      	ldr	r2, [pc, #16]	@ (8010068 <StopRetransmission+0x70>)
 8010058:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 801005c:	2301      	movs	r3, #1
}
 801005e:	4618      	mov	r0, r3
 8010060:	46bd      	mov	sp, r7
 8010062:	bc80      	pop	{r7}
 8010064:	4770      	bx	lr
 8010066:	bf00      	nop
 8010068:	20000504 	.word	0x20000504
 801006c:	20000a0c 	.word	0x20000a0c

08010070 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8010074:	4b08      	ldr	r3, [pc, #32]	@ (8010098 <OnMacProcessNotify+0x28>)
 8010076:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00a      	beq.n	8010094 <OnMacProcessNotify+0x24>
 801007e:	4b06      	ldr	r3, [pc, #24]	@ (8010098 <OnMacProcessNotify+0x28>)
 8010080:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010084:	695b      	ldr	r3, [r3, #20]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d004      	beq.n	8010094 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 801008a:	4b03      	ldr	r3, [pc, #12]	@ (8010098 <OnMacProcessNotify+0x28>)
 801008c:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010090:	695b      	ldr	r3, [r3, #20]
 8010092:	4798      	blx	r3
    }
}
 8010094:	bf00      	nop
 8010096:	bd80      	pop	{r7, pc}
 8010098:	20000504 	.word	0x20000504

0801009c <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80100a6:	4b0b      	ldr	r3, [pc, #44]	@ (80100d4 <CallNvmDataChangeCallback+0x38>)
 80100a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d00c      	beq.n	80100ca <CallNvmDataChangeCallback+0x2e>
 80100b0:	4b08      	ldr	r3, [pc, #32]	@ (80100d4 <CallNvmDataChangeCallback+0x38>)
 80100b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80100b6:	691b      	ldr	r3, [r3, #16]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d006      	beq.n	80100ca <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80100bc:	4b05      	ldr	r3, [pc, #20]	@ (80100d4 <CallNvmDataChangeCallback+0x38>)
 80100be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80100c2:	691b      	ldr	r3, [r3, #16]
 80100c4:	88fa      	ldrh	r2, [r7, #6]
 80100c6:	4610      	mov	r0, r2
 80100c8:	4798      	blx	r3
    }
}
 80100ca:	bf00      	nop
 80100cc:	3708      	adds	r7, #8
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20000504 	.word	0x20000504

080100d8 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 80100de:	4b1b      	ldr	r3, [pc, #108]	@ (801014c <AckTimeoutRetriesProcess+0x74>)
 80100e0:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 80100e4:	4b19      	ldr	r3, [pc, #100]	@ (801014c <AckTimeoutRetriesProcess+0x74>)
 80100e6:	f893 340d 	ldrb.w	r3, [r3, #1037]	@ 0x40d
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d229      	bcs.n	8010142 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 80100ee:	4b17      	ldr	r3, [pc, #92]	@ (801014c <AckTimeoutRetriesProcess+0x74>)
 80100f0:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 80100f4:	3301      	adds	r3, #1
 80100f6:	b2da      	uxtb	r2, r3
 80100f8:	4b14      	ldr	r3, [pc, #80]	@ (801014c <AckTimeoutRetriesProcess+0x74>)
 80100fa:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 80100fe:	4b13      	ldr	r3, [pc, #76]	@ (801014c <AckTimeoutRetriesProcess+0x74>)
 8010100:	f893 340e 	ldrb.w	r3, [r3, #1038]	@ 0x40e
 8010104:	f003 0301 	and.w	r3, r3, #1
 8010108:	b2db      	uxtb	r3, r3
 801010a:	2b00      	cmp	r3, #0
 801010c:	d019      	beq.n	8010142 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801010e:	2322      	movs	r3, #34	@ 0x22
 8010110:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010112:	4b0f      	ldr	r3, [pc, #60]	@ (8010150 <AckTimeoutRetriesProcess+0x78>)
 8010114:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8010118:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801011a:	4b0d      	ldr	r3, [pc, #52]	@ (8010150 <AckTimeoutRetriesProcess+0x78>)
 801011c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010120:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010122:	4b0b      	ldr	r3, [pc, #44]	@ (8010150 <AckTimeoutRetriesProcess+0x78>)
 8010124:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010128:	f107 0208 	add.w	r2, r7, #8
 801012c:	4611      	mov	r1, r2
 801012e:	4618      	mov	r0, r3
 8010130:	f003 fc99 	bl	8013a66 <RegionGetPhyParam>
 8010134:	4603      	mov	r3, r0
 8010136:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	b25a      	sxtb	r2, r3
 801013c:	4b04      	ldr	r3, [pc, #16]	@ (8010150 <AckTimeoutRetriesProcess+0x78>)
 801013e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
    }
}
 8010142:	bf00      	nop
 8010144:	3710      	adds	r7, #16
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	20000504 	.word	0x20000504
 8010150:	20000a0c 	.word	0x20000a0c

08010154 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 801015a:	4b14      	ldr	r3, [pc, #80]	@ (80101ac <AckTimeoutRetriesFinalize+0x58>)
 801015c:	f893 3438 	ldrb.w	r3, [r3, #1080]	@ 0x438
 8010160:	f083 0301 	eor.w	r3, r3, #1
 8010164:	b2db      	uxtb	r3, r3
 8010166:	2b00      	cmp	r3, #0
 8010168:	d015      	beq.n	8010196 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 801016a:	2302      	movs	r3, #2
 801016c:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 801016e:	4b10      	ldr	r3, [pc, #64]	@ (80101b0 <AckTimeoutRetriesFinalize+0x5c>)
 8010170:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8010172:	4b10      	ldr	r3, [pc, #64]	@ (80101b4 <AckTimeoutRetriesFinalize+0x60>)
 8010174:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010176:	4b10      	ldr	r3, [pc, #64]	@ (80101b8 <AckTimeoutRetriesFinalize+0x64>)
 8010178:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801017c:	1d3a      	adds	r2, r7, #4
 801017e:	4611      	mov	r1, r2
 8010180:	4618      	mov	r0, r3
 8010182:	f003 fca7 	bl	8013ad4 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8010186:	4b09      	ldr	r3, [pc, #36]	@ (80101ac <AckTimeoutRetriesFinalize+0x58>)
 8010188:	2200      	movs	r2, #0
 801018a:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 801018e:	4b07      	ldr	r3, [pc, #28]	@ (80101ac <AckTimeoutRetriesFinalize+0x58>)
 8010190:	2200      	movs	r2, #0
 8010192:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8010196:	4b05      	ldr	r3, [pc, #20]	@ (80101ac <AckTimeoutRetriesFinalize+0x58>)
 8010198:	f893 240e 	ldrb.w	r2, [r3, #1038]	@ 0x40e
 801019c:	4b03      	ldr	r3, [pc, #12]	@ (80101ac <AckTimeoutRetriesFinalize+0x58>)
 801019e:	f883 2439 	strb.w	r2, [r3, #1081]	@ 0x439
}
 80101a2:	bf00      	nop
 80101a4:	3710      	adds	r7, #16
 80101a6:	46bd      	mov	sp, r7
 80101a8:	bd80      	pop	{r7, pc}
 80101aa:	bf00      	nop
 80101ac:	20000504 	.word	0x20000504
 80101b0:	20000c2c 	.word	0x20000c2c
 80101b4:	20000cd0 	.word	0x20000cd0
 80101b8:	20000a0c 	.word	0x20000a0c

080101bc <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 80101bc:	b480      	push	{r7}
 80101be:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80101c0:	4b0b      	ldr	r3, [pc, #44]	@ (80101f0 <IsRequestPending+0x34>)
 80101c2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80101c6:	f003 0304 	and.w	r3, r3, #4
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d107      	bne.n	80101e0 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 80101d0:	4b07      	ldr	r3, [pc, #28]	@ (80101f0 <IsRequestPending+0x34>)
 80101d2:	f893 3481 	ldrb.w	r3, [r3, #1153]	@ 0x481
 80101d6:	f003 0301 	and.w	r3, r3, #1
 80101da:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <IsRequestPending+0x28>
    {
        return 1;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e000      	b.n	80101e6 <IsRequestPending+0x2a>
    }
    return 0;
 80101e4:	2300      	movs	r3, #0
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bc80      	pop	{r7}
 80101ec:	4770      	bx	lr
 80101ee:	bf00      	nop
 80101f0:	20000504 	.word	0x20000504

080101f4 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80101f4:	b590      	push	{r4, r7, lr}
 80101f6:	b08f      	sub	sp, #60	@ 0x3c
 80101f8:	af02      	add	r7, sp, #8
 80101fa:	6178      	str	r0, [r7, #20]
 80101fc:	6139      	str	r1, [r7, #16]
 80101fe:	4613      	mov	r3, r2
 8010200:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010202:	697b      	ldr	r3, [r7, #20]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d002      	beq.n	801020e <LoRaMacInitialization+0x1a>
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d101      	bne.n	8010212 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801020e:	2303      	movs	r3, #3
 8010210:	e273      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00b      	beq.n	8010232 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 801021a:	697b      	ldr	r3, [r7, #20]
 801021c:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 801021e:	2b00      	cmp	r3, #0
 8010220:	d007      	beq.n	8010232 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010226:	2b00      	cmp	r3, #0
 8010228:	d003      	beq.n	8010232 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 801022e:	2b00      	cmp	r3, #0
 8010230:	d101      	bne.n	8010236 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010232:	2303      	movs	r3, #3
 8010234:	e261      	b.n	80106fa <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010236:	7bfb      	ldrb	r3, [r7, #15]
 8010238:	4618      	mov	r0, r3
 801023a:	f003 fbff 	bl	8013a3c <RegionIsActive>
 801023e:	4603      	mov	r3, r0
 8010240:	f083 0301 	eor.w	r3, r3, #1
 8010244:	b2db      	uxtb	r3, r3
 8010246:	2b00      	cmp	r3, #0
 8010248:	d001      	beq.n	801024e <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 801024a:	2309      	movs	r3, #9
 801024c:	e255      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 801024e:	6978      	ldr	r0, [r7, #20]
 8010250:	f002 f862 	bl	8012318 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010254:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 8010258:	2100      	movs	r1, #0
 801025a:	48c7      	ldr	r0, [pc, #796]	@ (8010578 <LoRaMacInitialization+0x384>)
 801025c:	f007 fb10 	bl	8017880 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010260:	f44f 62a1 	mov.w	r2, #1288	@ 0x508
 8010264:	2100      	movs	r1, #0
 8010266:	48c5      	ldr	r0, [pc, #788]	@ (801057c <LoRaMacInitialization+0x388>)
 8010268:	f007 fb0a 	bl	8017880 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 801026c:	4bc3      	ldr	r3, [pc, #780]	@ (801057c <LoRaMacInitialization+0x388>)
 801026e:	2201      	movs	r2, #1
 8010270:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8010274:	4bc1      	ldr	r3, [pc, #772]	@ (801057c <LoRaMacInitialization+0x388>)
 8010276:	2201      	movs	r2, #1
 8010278:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 801027c:	4abe      	ldr	r2, [pc, #760]	@ (8010578 <LoRaMacInitialization+0x384>)
 801027e:	7bfb      	ldrb	r3, [r7, #15]
 8010280:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010284:	4bbc      	ldr	r3, [pc, #752]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010286:	2200      	movs	r2, #0
 8010288:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 801028c:	4bba      	ldr	r3, [pc, #744]	@ (8010578 <LoRaMacInitialization+0x384>)
 801028e:	2200      	movs	r2, #0
 8010290:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010294:	4bb8      	ldr	r3, [pc, #736]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010296:	4aba      	ldr	r2, [pc, #744]	@ (8010580 <LoRaMacInitialization+0x38c>)
 8010298:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 801029c:	230f      	movs	r3, #15
 801029e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102a2:	4bb5      	ldr	r3, [pc, #724]	@ (8010578 <LoRaMacInitialization+0x384>)
 80102a4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102a8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102ac:	4611      	mov	r1, r2
 80102ae:	4618      	mov	r0, r3
 80102b0:	f003 fbd9 	bl	8013a66 <RegionGetPhyParam>
 80102b4:	4603      	mov	r3, r0
 80102b6:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 80102b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	bf14      	ite	ne
 80102be:	2301      	movne	r3, #1
 80102c0:	2300      	moveq	r3, #0
 80102c2:	b2da      	uxtb	r2, r3
 80102c4:	4bac      	ldr	r3, [pc, #688]	@ (8010578 <LoRaMacInitialization+0x384>)
 80102c6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 80102ca:	230a      	movs	r3, #10
 80102cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102d0:	4ba9      	ldr	r3, [pc, #676]	@ (8010578 <LoRaMacInitialization+0x384>)
 80102d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102d6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80102da:	4611      	mov	r1, r2
 80102dc:	4618      	mov	r0, r3
 80102de:	f003 fbc2 	bl	8013a66 <RegionGetPhyParam>
 80102e2:	4603      	mov	r3, r0
 80102e4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 80102e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e8:	b25a      	sxtb	r2, r3
 80102ea:	4ba3      	ldr	r3, [pc, #652]	@ (8010578 <LoRaMacInitialization+0x384>)
 80102ec:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 80102f0:	2306      	movs	r3, #6
 80102f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80102f6:	4ba0      	ldr	r3, [pc, #640]	@ (8010578 <LoRaMacInitialization+0x384>)
 80102f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80102fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010300:	4611      	mov	r1, r2
 8010302:	4618      	mov	r0, r3
 8010304:	f003 fbaf 	bl	8013a66 <RegionGetPhyParam>
 8010308:	4603      	mov	r3, r0
 801030a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 801030c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030e:	b25a      	sxtb	r2, r3
 8010310:	4b99      	ldr	r3, [pc, #612]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010312:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010316:	2310      	movs	r3, #16
 8010318:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801031c:	4b96      	ldr	r3, [pc, #600]	@ (8010578 <LoRaMacInitialization+0x384>)
 801031e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010322:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010326:	4611      	mov	r1, r2
 8010328:	4618      	mov	r0, r3
 801032a:	f003 fb9c 	bl	8013a66 <RegionGetPhyParam>
 801032e:	4603      	mov	r3, r0
 8010330:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010334:	4a90      	ldr	r2, [pc, #576]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010336:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 801033a:	2311      	movs	r3, #17
 801033c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010340:	4b8d      	ldr	r3, [pc, #564]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010342:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010346:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801034a:	4611      	mov	r1, r2
 801034c:	4618      	mov	r0, r3
 801034e:	f003 fb8a 	bl	8013a66 <RegionGetPhyParam>
 8010352:	4603      	mov	r3, r0
 8010354:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010358:	4a87      	ldr	r2, [pc, #540]	@ (8010578 <LoRaMacInitialization+0x384>)
 801035a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 801035e:	2312      	movs	r3, #18
 8010360:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010364:	4b84      	ldr	r3, [pc, #528]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010366:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801036a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801036e:	4611      	mov	r1, r2
 8010370:	4618      	mov	r0, r3
 8010372:	f003 fb78 	bl	8013a66 <RegionGetPhyParam>
 8010376:	4603      	mov	r3, r0
 8010378:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 801037a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801037c:	4a7e      	ldr	r2, [pc, #504]	@ (8010578 <LoRaMacInitialization+0x384>)
 801037e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010382:	2313      	movs	r3, #19
 8010384:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010388:	4b7b      	ldr	r3, [pc, #492]	@ (8010578 <LoRaMacInitialization+0x384>)
 801038a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801038e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010392:	4611      	mov	r1, r2
 8010394:	4618      	mov	r0, r3
 8010396:	f003 fb66 	bl	8013a66 <RegionGetPhyParam>
 801039a:	4603      	mov	r3, r0
 801039c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801039e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a0:	4a75      	ldr	r2, [pc, #468]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103a2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80103a6:	2314      	movs	r3, #20
 80103a8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103ac:	4b72      	ldr	r3, [pc, #456]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103b2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103b6:	4611      	mov	r1, r2
 80103b8:	4618      	mov	r0, r3
 80103ba:	f003 fb54 	bl	8013a66 <RegionGetPhyParam>
 80103be:	4603      	mov	r3, r0
 80103c0:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80103c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103c4:	4a6c      	ldr	r2, [pc, #432]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103c6:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80103ca:	2317      	movs	r3, #23
 80103cc:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103d0:	4b69      	ldr	r3, [pc, #420]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103d2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103d6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80103da:	4611      	mov	r1, r2
 80103dc:	4618      	mov	r0, r3
 80103de:	f003 fb42 	bl	8013a66 <RegionGetPhyParam>
 80103e2:	4603      	mov	r3, r0
 80103e4:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80103e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	4b63      	ldr	r3, [pc, #396]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103ec:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80103f0:	2318      	movs	r3, #24
 80103f2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80103f6:	4b60      	ldr	r3, [pc, #384]	@ (8010578 <LoRaMacInitialization+0x384>)
 80103f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80103fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010400:	4611      	mov	r1, r2
 8010402:	4618      	mov	r0, r3
 8010404:	f003 fb2f 	bl	8013a66 <RegionGetPhyParam>
 8010408:	4603      	mov	r3, r0
 801040a:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 801040c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040e:	4a5a      	ldr	r2, [pc, #360]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010410:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010416:	4a58      	ldr	r2, [pc, #352]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010418:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 801041c:	2319      	movs	r3, #25
 801041e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010422:	4b55      	ldr	r3, [pc, #340]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010424:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010428:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801042c:	4611      	mov	r1, r2
 801042e:	4618      	mov	r0, r3
 8010430:	f003 fb19 	bl	8013a66 <RegionGetPhyParam>
 8010434:	4603      	mov	r3, r0
 8010436:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801043a:	b2da      	uxtb	r2, r3
 801043c:	4b4e      	ldr	r3, [pc, #312]	@ (8010578 <LoRaMacInitialization+0x384>)
 801043e:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010444:	b2da      	uxtb	r2, r3
 8010446:	4b4c      	ldr	r3, [pc, #304]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010448:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 801044c:	231e      	movs	r3, #30
 801044e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010452:	4b49      	ldr	r3, [pc, #292]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010454:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010458:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 801045c:	4611      	mov	r1, r2
 801045e:	4618      	mov	r0, r3
 8010460:	f003 fb01 	bl	8013a66 <RegionGetPhyParam>
 8010464:	4603      	mov	r3, r0
 8010466:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801046a:	b2da      	uxtb	r2, r3
 801046c:	4b42      	ldr	r3, [pc, #264]	@ (8010578 <LoRaMacInitialization+0x384>)
 801046e:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010472:	231f      	movs	r3, #31
 8010474:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010478:	4b3f      	ldr	r3, [pc, #252]	@ (8010578 <LoRaMacInitialization+0x384>)
 801047a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801047e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010482:	4611      	mov	r1, r2
 8010484:	4618      	mov	r0, r3
 8010486:	f003 faee 	bl	8013a66 <RegionGetPhyParam>
 801048a:	4603      	mov	r3, r0
 801048c:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801048e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010490:	b2da      	uxtb	r2, r3
 8010492:	4b39      	ldr	r3, [pc, #228]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010494:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010498:	2320      	movs	r3, #32
 801049a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801049e:	4b36      	ldr	r3, [pc, #216]	@ (8010578 <LoRaMacInitialization+0x384>)
 80104a0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80104a8:	4611      	mov	r1, r2
 80104aa:	4618      	mov	r0, r3
 80104ac:	f003 fadb 	bl	8013a66 <RegionGetPhyParam>
 80104b0:	4603      	mov	r3, r0
 80104b2:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 80104b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104b6:	4a30      	ldr	r2, [pc, #192]	@ (8010578 <LoRaMacInitialization+0x384>)
 80104b8:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 80104bc:	2321      	movs	r3, #33	@ 0x21
 80104be:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104c2:	4b2d      	ldr	r3, [pc, #180]	@ (8010578 <LoRaMacInitialization+0x384>)
 80104c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104c8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80104cc:	4611      	mov	r1, r2
 80104ce:	4618      	mov	r0, r3
 80104d0:	f003 fac9 	bl	8013a66 <RegionGetPhyParam>
 80104d4:	4603      	mov	r3, r0
 80104d6:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 80104d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104da:	4a27      	ldr	r2, [pc, #156]	@ (8010578 <LoRaMacInitialization+0x384>)
 80104dc:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 80104e0:	230b      	movs	r3, #11
 80104e2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80104e6:	4b24      	ldr	r3, [pc, #144]	@ (8010578 <LoRaMacInitialization+0x384>)
 80104e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80104ec:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80104f0:	4611      	mov	r1, r2
 80104f2:	4618      	mov	r0, r3
 80104f4:	f003 fab7 	bl	8013a66 <RegionGetPhyParam>
 80104f8:	4603      	mov	r3, r0
 80104fa:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 80104fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fe:	b29a      	uxth	r2, r3
 8010500:	4b1d      	ldr	r3, [pc, #116]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010502:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8010506:	230c      	movs	r3, #12
 8010508:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801050c:	4b1a      	ldr	r3, [pc, #104]	@ (8010578 <LoRaMacInitialization+0x384>)
 801050e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010512:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f003 faa4 	bl	8013a66 <RegionGetPhyParam>
 801051e:	4603      	mov	r3, r0
 8010520:	627b      	str	r3, [r7, #36]	@ 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8010522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010524:	b29a      	uxth	r2, r3
 8010526:	4b14      	ldr	r3, [pc, #80]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010528:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 801052c:	4b12      	ldr	r3, [pc, #72]	@ (8010578 <LoRaMacInitialization+0x384>)
 801052e:	2201      	movs	r2, #1
 8010530:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8010534:	4b10      	ldr	r3, [pc, #64]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010536:	220a      	movs	r2, #10
 8010538:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 801053c:	4b0e      	ldr	r3, [pc, #56]	@ (8010578 <LoRaMacInitialization+0x384>)
 801053e:	2206      	movs	r2, #6
 8010540:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8010544:	4b0c      	ldr	r3, [pc, #48]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010546:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801054a:	4a0b      	ldr	r2, [pc, #44]	@ (8010578 <LoRaMacInitialization+0x384>)
 801054c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801054e:	4b0a      	ldr	r3, [pc, #40]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010550:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 8010554:	4b08      	ldr	r3, [pc, #32]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010556:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 801055a:	4b07      	ldr	r3, [pc, #28]	@ (8010578 <LoRaMacInitialization+0x384>)
 801055c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010560:	4a05      	ldr	r2, [pc, #20]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010562:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 8010564:	4b04      	ldr	r3, [pc, #16]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010566:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801056a:	4a03      	ldr	r2, [pc, #12]	@ (8010578 <LoRaMacInitialization+0x384>)
 801056c:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 801056e:	4b02      	ldr	r3, [pc, #8]	@ (8010578 <LoRaMacInitialization+0x384>)
 8010570:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010574:	e006      	b.n	8010584 <LoRaMacInitialization+0x390>
 8010576:	bf00      	nop
 8010578:	20000a0c 	.word	0x20000a0c
 801057c:	20000504 	.word	0x20000504
 8010580:	01000300 	.word	0x01000300
 8010584:	4a5f      	ldr	r2, [pc, #380]	@ (8010704 <LoRaMacInitialization+0x510>)
 8010586:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010588:	4b5e      	ldr	r3, [pc, #376]	@ (8010704 <LoRaMacInitialization+0x510>)
 801058a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801058e:	4a5d      	ldr	r2, [pc, #372]	@ (8010704 <LoRaMacInitialization+0x510>)
 8010590:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8010592:	4b5c      	ldr	r3, [pc, #368]	@ (8010704 <LoRaMacInitialization+0x510>)
 8010594:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8010598:	4a5a      	ldr	r2, [pc, #360]	@ (8010704 <LoRaMacInitialization+0x510>)
 801059a:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 801059c:	4b59      	ldr	r3, [pc, #356]	@ (8010704 <LoRaMacInitialization+0x510>)
 801059e:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 80105a2:	4b58      	ldr	r3, [pc, #352]	@ (8010704 <LoRaMacInitialization+0x510>)
 80105a4:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80105a8:	2300      	movs	r3, #0
 80105aa:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80105ae:	4b56      	ldr	r3, [pc, #344]	@ (8010708 <LoRaMacInitialization+0x514>)
 80105b0:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80105b2:	4b56      	ldr	r3, [pc, #344]	@ (801070c <LoRaMacInitialization+0x518>)
 80105b4:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80105b6:	4b53      	ldr	r3, [pc, #332]	@ (8010704 <LoRaMacInitialization+0x510>)
 80105b8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80105bc:	f107 0218 	add.w	r2, r7, #24
 80105c0:	4611      	mov	r1, r2
 80105c2:	4618      	mov	r0, r3
 80105c4:	f003 fa86 	bl	8013ad4 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80105c8:	4a51      	ldr	r2, [pc, #324]	@ (8010710 <LoRaMacInitialization+0x51c>)
 80105ca:	693b      	ldr	r3, [r7, #16]
 80105cc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 80105d0:	2000      	movs	r0, #0
 80105d2:	f7ff f813 	bl	800f5fc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80105d6:	4b4b      	ldr	r3, [pc, #300]	@ (8010704 <LoRaMacInitialization+0x510>)
 80105d8:	2201      	movs	r2, #1
 80105da:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 80105de:	4a4c      	ldr	r2, [pc, #304]	@ (8010710 <LoRaMacInitialization+0x51c>)
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80105e6:	4b4a      	ldr	r3, [pc, #296]	@ (8010710 <LoRaMacInitialization+0x51c>)
 80105e8:	2200      	movs	r2, #0
 80105ea:	f883 2481 	strb.w	r2, [r3, #1153]	@ 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 80105ee:	4b48      	ldr	r3, [pc, #288]	@ (8010710 <LoRaMacInitialization+0x51c>)
 80105f0:	2201      	movs	r2, #1
 80105f2:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80105f6:	4b43      	ldr	r3, [pc, #268]	@ (8010704 <LoRaMacInitialization+0x510>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80105fc:	4b41      	ldr	r3, [pc, #260]	@ (8010704 <LoRaMacInitialization+0x510>)
 80105fe:	2200      	movs	r2, #0
 8010600:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010602:	2300      	movs	r3, #0
 8010604:	9300      	str	r3, [sp, #0]
 8010606:	4b43      	ldr	r3, [pc, #268]	@ (8010714 <LoRaMacInitialization+0x520>)
 8010608:	2200      	movs	r2, #0
 801060a:	f04f 31ff 	mov.w	r1, #4294967295
 801060e:	4842      	ldr	r0, [pc, #264]	@ (8010718 <LoRaMacInitialization+0x524>)
 8010610:	f00b f9f6 	bl	801ba00 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8010614:	2300      	movs	r3, #0
 8010616:	9300      	str	r3, [sp, #0]
 8010618:	4b40      	ldr	r3, [pc, #256]	@ (801071c <LoRaMacInitialization+0x528>)
 801061a:	2200      	movs	r2, #0
 801061c:	f04f 31ff 	mov.w	r1, #4294967295
 8010620:	483f      	ldr	r0, [pc, #252]	@ (8010720 <LoRaMacInitialization+0x52c>)
 8010622:	f00b f9ed 	bl	801ba00 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8010626:	2300      	movs	r3, #0
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	4b3e      	ldr	r3, [pc, #248]	@ (8010724 <LoRaMacInitialization+0x530>)
 801062c:	2200      	movs	r2, #0
 801062e:	f04f 31ff 	mov.w	r1, #4294967295
 8010632:	483d      	ldr	r0, [pc, #244]	@ (8010728 <LoRaMacInitialization+0x534>)
 8010634:	f00b f9e4 	bl	801ba00 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8010638:	2300      	movs	r3, #0
 801063a:	9300      	str	r3, [sp, #0]
 801063c:	4b3b      	ldr	r3, [pc, #236]	@ (801072c <LoRaMacInitialization+0x538>)
 801063e:	2200      	movs	r2, #0
 8010640:	f04f 31ff 	mov.w	r1, #4294967295
 8010644:	483a      	ldr	r0, [pc, #232]	@ (8010730 <LoRaMacInitialization+0x53c>)
 8010646:	f00b f9db 	bl	801ba00 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 801064a:	4c2e      	ldr	r4, [pc, #184]	@ (8010704 <LoRaMacInitialization+0x510>)
 801064c:	463b      	mov	r3, r7
 801064e:	4618      	mov	r0, r3
 8010650:	f00a fd4c 	bl	801b0ec <SysTimeGetMcuTime>
 8010654:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8010658:	463a      	mov	r2, r7
 801065a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801065e:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8010662:	4b2b      	ldr	r3, [pc, #172]	@ (8010710 <LoRaMacInitialization+0x51c>)
 8010664:	4a33      	ldr	r2, [pc, #204]	@ (8010734 <LoRaMacInitialization+0x540>)
 8010666:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801066a:	4b29      	ldr	r3, [pc, #164]	@ (8010710 <LoRaMacInitialization+0x51c>)
 801066c:	4a32      	ldr	r2, [pc, #200]	@ (8010738 <LoRaMacInitialization+0x544>)
 801066e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8010672:	4b27      	ldr	r3, [pc, #156]	@ (8010710 <LoRaMacInitialization+0x51c>)
 8010674:	4a31      	ldr	r2, [pc, #196]	@ (801073c <LoRaMacInitialization+0x548>)
 8010676:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801067a:	4b25      	ldr	r3, [pc, #148]	@ (8010710 <LoRaMacInitialization+0x51c>)
 801067c:	4a30      	ldr	r2, [pc, #192]	@ (8010740 <LoRaMacInitialization+0x54c>)
 801067e:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8010682:	4b23      	ldr	r3, [pc, #140]	@ (8010710 <LoRaMacInitialization+0x51c>)
 8010684:	4a2f      	ldr	r2, [pc, #188]	@ (8010744 <LoRaMacInitialization+0x550>)
 8010686:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801068a:	4b2f      	ldr	r3, [pc, #188]	@ (8010748 <LoRaMacInitialization+0x554>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	482f      	ldr	r0, [pc, #188]	@ (801074c <LoRaMacInitialization+0x558>)
 8010690:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8010692:	482f      	ldr	r0, [pc, #188]	@ (8010750 <LoRaMacInitialization+0x55c>)
 8010694:	f7fa fcac 	bl	800aff0 <SecureElementInit>
 8010698:	4603      	mov	r3, r0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d001      	beq.n	80106a2 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801069e:	2311      	movs	r3, #17
 80106a0:	e02b      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80106a2:	4818      	ldr	r0, [pc, #96]	@ (8010704 <LoRaMacInitialization+0x510>)
 80106a4:	f002 faf4 	bl	8012c90 <LoRaMacCryptoInit>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d001      	beq.n	80106b2 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80106ae:	2311      	movs	r3, #17
 80106b0:	e023      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80106b2:	f001 fbf3 	bl	8011e9c <LoRaMacCommandsInit>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d001      	beq.n	80106c0 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106bc:	2313      	movs	r3, #19
 80106be:	e01c      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80106c0:	4824      	ldr	r0, [pc, #144]	@ (8010754 <LoRaMacInitialization+0x560>)
 80106c2:	f002 fbaf 	bl	8012e24 <LoRaMacCryptoSetMulticastReference>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d001      	beq.n	80106d0 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80106cc:	2311      	movs	r3, #17
 80106ce:	e014      	b.n	80106fa <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80106d0:	4b1d      	ldr	r3, [pc, #116]	@ (8010748 <LoRaMacInitialization+0x554>)
 80106d2:	695b      	ldr	r3, [r3, #20]
 80106d4:	4798      	blx	r3
 80106d6:	4603      	mov	r3, r0
 80106d8:	4618      	mov	r0, r3
 80106da:	f007 f871 	bl	80177c0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80106de:	4b1a      	ldr	r3, [pc, #104]	@ (8010748 <LoRaMacInitialization+0x554>)
 80106e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106e2:	4a08      	ldr	r2, [pc, #32]	@ (8010704 <LoRaMacInitialization+0x510>)
 80106e4:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 80106e8:	4610      	mov	r0, r2
 80106ea:	4798      	blx	r3
    Radio.Sleep( );
 80106ec:	4b16      	ldr	r3, [pc, #88]	@ (8010748 <LoRaMacInitialization+0x554>)
 80106ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106f0:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80106f2:	2001      	movs	r0, #1
 80106f4:	f7fd fa8e 	bl	800dc14 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 80106f8:	2300      	movs	r3, #0
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3734      	adds	r7, #52	@ 0x34
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd90      	pop	{r4, r7, pc}
 8010702:	bf00      	nop
 8010704:	20000a0c 	.word	0x20000a0c
 8010708:	20000c2c 	.word	0x20000c2c
 801070c:	20000cd0 	.word	0x20000cd0
 8010710:	20000504 	.word	0x20000504
 8010714:	0800e155 	.word	0x0800e155
 8010718:	2000086c 	.word	0x2000086c
 801071c:	0800e1c9 	.word	0x0800e1c9
 8010720:	20000884 	.word	0x20000884
 8010724:	0800e235 	.word	0x0800e235
 8010728:	2000089c 	.word	0x2000089c
 801072c:	0800e2a9 	.word	0x0800e2a9
 8010730:	200008f8 	.word	0x200008f8
 8010734:	0800cd15 	.word	0x0800cd15
 8010738:	0800cd71 	.word	0x0800cd71
 801073c:	0800ce09 	.word	0x0800ce09
 8010740:	0800cddd 	.word	0x0800cddd
 8010744:	0800ce25 	.word	0x0800ce25
 8010748:	0801d01c 	.word	0x0801d01c
 801074c:	20000850 	.word	0x20000850
 8010750:	20000b54 	.word	0x20000b54
 8010754:	20000af4 	.word	0x20000af4

08010758 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 801075c:	4b04      	ldr	r3, [pc, #16]	@ (8010770 <LoRaMacStart+0x18>)
 801075e:	2200      	movs	r2, #0
 8010760:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 8010764:	f7fc fb74 	bl	800ce50 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	20000504 	.word	0x20000504

08010774 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8010778:	f7fd fa20 	bl	800dbbc <LoRaMacIsBusy>
 801077c:	4603      	mov	r3, r0
 801077e:	f083 0301 	eor.w	r3, r3, #1
 8010782:	b2db      	uxtb	r3, r3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d00d      	beq.n	80107a4 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8010788:	4b0b      	ldr	r3, [pc, #44]	@ (80107b8 <LoRaMacStop+0x44>)
 801078a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801078e:	2b02      	cmp	r3, #2
 8010790:	d102      	bne.n	8010798 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8010792:	4b0a      	ldr	r3, [pc, #40]	@ (80107bc <LoRaMacStop+0x48>)
 8010794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010796:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8010798:	4b09      	ldr	r3, [pc, #36]	@ (80107c0 <LoRaMacStop+0x4c>)
 801079a:	2201      	movs	r2, #1
 801079c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 80107a0:	2300      	movs	r3, #0
 80107a2:	e007      	b.n	80107b4 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80107a4:	4b06      	ldr	r3, [pc, #24]	@ (80107c0 <LoRaMacStop+0x4c>)
 80107a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d101      	bne.n	80107b2 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 80107ae:	2300      	movs	r3, #0
 80107b0:	e000      	b.n	80107b4 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 80107b2:	2301      	movs	r3, #1
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	bd80      	pop	{r7, pc}
 80107b8:	20000a0c 	.word	0x20000a0c
 80107bc:	0801d01c 	.word	0x0801d01c
 80107c0:	20000504 	.word	0x20000504

080107c4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80107c8:	4812      	ldr	r0, [pc, #72]	@ (8010814 <LoRaMacHalt+0x50>)
 80107ca:	f00b f9bd 	bl	801bb48 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80107ce:	4812      	ldr	r0, [pc, #72]	@ (8010818 <LoRaMacHalt+0x54>)
 80107d0:	f00b f9ba 	bl	801bb48 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80107d4:	4811      	ldr	r0, [pc, #68]	@ (801081c <LoRaMacHalt+0x58>)
 80107d6:	f00b f9b7 	bl	801bb48 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 80107da:	4811      	ldr	r0, [pc, #68]	@ (8010820 <LoRaMacHalt+0x5c>)
 80107dc:	f00b f9b4 	bl	801bb48 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80107e0:	f001 f9db 	bl	8011b9a <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80107e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010824 <LoRaMacHalt+0x60>)
 80107e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107e8:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80107ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010828 <LoRaMacHalt+0x64>)
 80107ec:	2200      	movs	r2, #0
 80107ee:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 80107f2:	480e      	ldr	r0, [pc, #56]	@ (801082c <LoRaMacHalt+0x68>)
 80107f4:	f7fd fbaa 	bl	800df4c <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80107f8:	f44f 62ef 	mov.w	r2, #1912	@ 0x778
 80107fc:	490b      	ldr	r1, [pc, #44]	@ (801082c <LoRaMacHalt+0x68>)
 80107fe:	480c      	ldr	r0, [pc, #48]	@ (8010830 <LoRaMacHalt+0x6c>)
 8010800:	f007 f803 	bl	801780a <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8010804:	4b08      	ldr	r3, [pc, #32]	@ (8010828 <LoRaMacHalt+0x64>)
 8010806:	2201      	movs	r2, #1
 8010808:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801080c:	2300      	movs	r3, #0
}
 801080e:	4618      	mov	r0, r3
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	2000086c 	.word	0x2000086c
 8010818:	20000884 	.word	0x20000884
 801081c:	2000089c 	.word	0x2000089c
 8010820:	200008f8 	.word	0x200008f8
 8010824:	0801d01c 	.word	0x0801d01c
 8010828:	20000504 	.word	0x20000504
 801082c:	20000a0c 	.word	0x20000a0c
 8010830:	20001184 	.word	0x20001184

08010834 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b08a      	sub	sp, #40	@ 0x28
 8010838:	af00      	add	r7, sp, #0
 801083a:	4603      	mov	r3, r0
 801083c:	6039      	str	r1, [r7, #0]
 801083e:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010840:	4b3e      	ldr	r3, [pc, #248]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010844:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010846:	4b3d      	ldr	r3, [pc, #244]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010848:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 801084c:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801084e:	4b3b      	ldr	r3, [pc, #236]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010850:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 8010854:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d101      	bne.n	8010864 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010860:	2303      	movs	r3, #3
 8010862:	e066      	b.n	8010932 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8010864:	4b35      	ldr	r3, [pc, #212]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010866:	f8d3 3128 	ldr.w	r3, [r3, #296]	@ 0x128
 801086a:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 801086c:	2300      	movs	r3, #0
 801086e:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8010870:	4b32      	ldr	r3, [pc, #200]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010872:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 8010876:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010878:	4b30      	ldr	r3, [pc, #192]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 801087a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801087c:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 801087e:	4b2f      	ldr	r3, [pc, #188]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010880:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 8010884:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010886:	4b2d      	ldr	r3, [pc, #180]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010888:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 801088c:	847b      	strh	r3, [r7, #34]	@ 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801088e:	4b2b      	ldr	r3, [pc, #172]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 8010890:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010894:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010898:	4b28      	ldr	r3, [pc, #160]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 801089a:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801089e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80108a2:	4b26      	ldr	r3, [pc, #152]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 80108a4:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80108a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 80108ac:	4b23      	ldr	r3, [pc, #140]	@ (801093c <LoRaMacQueryTxPossible+0x108>)
 80108ae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80108b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80108b6:	f107 0310 	add.w	r3, r7, #16
 80108ba:	f107 020e 	add.w	r2, r7, #14
 80108be:	f107 010f 	add.w	r1, r7, #15
 80108c2:	f107 0014 	add.w	r0, r7, #20
 80108c6:	f001 f8d3 	bl	8011a70 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80108ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fd fe3c 	bl	800e54c <GetMaxAppPayloadWithoutFOptsLength>
 80108d4:	4603      	mov	r3, r0
 80108d6:	461a      	mov	r2, r3
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80108dc:	f107 0308 	add.w	r3, r7, #8
 80108e0:	4618      	mov	r0, r3
 80108e2:	f001 fbe1 	bl	80120a8 <LoRaMacCommandsGetSizeSerializedCmds>
 80108e6:	4603      	mov	r3, r0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d001      	beq.n	80108f0 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80108ec:	2313      	movs	r3, #19
 80108ee:	e020      	b.n	8010932 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2b0f      	cmp	r3, #15
 80108f4:	d819      	bhi.n	801092a <LoRaMacQueryTxPossible+0xf6>
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	785b      	ldrb	r3, [r3, #1]
 80108fa:	461a      	mov	r2, r3
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	429a      	cmp	r2, r3
 8010900:	d313      	bcc.n	801092a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	785a      	ldrb	r2, [r3, #1]
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	b2db      	uxtb	r3, r3
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	b2da      	uxtb	r2, r3
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	785b      	ldrb	r3, [r3, #1]
 8010916:	4619      	mov	r1, r3
 8010918:	79fa      	ldrb	r2, [r7, #7]
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	4413      	add	r3, r2
 801091e:	4299      	cmp	r1, r3
 8010920:	d301      	bcc.n	8010926 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8010922:	2300      	movs	r3, #0
 8010924:	e005      	b.n	8010932 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010926:	2308      	movs	r3, #8
 8010928:	e003      	b.n	8010932 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801092a:	683b      	ldr	r3, [r7, #0]
 801092c:	2200      	movs	r2, #0
 801092e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010930:	2308      	movs	r3, #8
    }
}
 8010932:	4618      	mov	r0, r3
 8010934:	3728      	adds	r7, #40	@ 0x28
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	20000a0c 	.word	0x20000a0c

08010940 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8010940:	b590      	push	{r4, r7, lr}
 8010942:	b087      	sub	sp, #28
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010948:	2300      	movs	r3, #0
 801094a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d101      	bne.n	8010956 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010952:	2303      	movs	r3, #3
 8010954:	e1a4      	b.n	8010ca0 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	781b      	ldrb	r3, [r3, #0]
 801095a:	2b3f      	cmp	r3, #63	@ 0x3f
 801095c:	f200 8199 	bhi.w	8010c92 <LoRaMacMibGetRequestConfirm+0x352>
 8010960:	a201      	add	r2, pc, #4	@ (adr r2, 8010968 <LoRaMacMibGetRequestConfirm+0x28>)
 8010962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010966:	bf00      	nop
 8010968:	08010a69 	.word	0x08010a69
 801096c:	08010a75 	.word	0x08010a75
 8010970:	08010a81 	.word	0x08010a81
 8010974:	08010a8d 	.word	0x08010a8d
 8010978:	08010a99 	.word	0x08010a99
 801097c:	08010aa5 	.word	0x08010aa5
 8010980:	08010ab1 	.word	0x08010ab1
 8010984:	08010c93 	.word	0x08010c93
 8010988:	08010c93 	.word	0x08010c93
 801098c:	08010c93 	.word	0x08010c93
 8010990:	08010c93 	.word	0x08010c93
 8010994:	08010c93 	.word	0x08010c93
 8010998:	08010c93 	.word	0x08010c93
 801099c:	08010c93 	.word	0x08010c93
 80109a0:	08010c93 	.word	0x08010c93
 80109a4:	08010ac5 	.word	0x08010ac5
 80109a8:	08010ad1 	.word	0x08010ad1
 80109ac:	08010add 	.word	0x08010add
 80109b0:	08010aff 	.word	0x08010aff
 80109b4:	08010b11 	.word	0x08010b11
 80109b8:	08010b23 	.word	0x08010b23
 80109bc:	08010b35 	.word	0x08010b35
 80109c0:	08010b69 	.word	0x08010b69
 80109c4:	08010b47 	.word	0x08010b47
 80109c8:	08010b8b 	.word	0x08010b8b
 80109cc:	08010b97 	.word	0x08010b97
 80109d0:	08010ba1 	.word	0x08010ba1
 80109d4:	08010bab 	.word	0x08010bab
 80109d8:	08010bb5 	.word	0x08010bb5
 80109dc:	08010bbf 	.word	0x08010bbf
 80109e0:	08010bc9 	.word	0x08010bc9
 80109e4:	08010bd5 	.word	0x08010bd5
 80109e8:	08010bed 	.word	0x08010bed
 80109ec:	08010be1 	.word	0x08010be1
 80109f0:	08010bf9 	.word	0x08010bf9
 80109f4:	08010c03 	.word	0x08010c03
 80109f8:	08010c0f 	.word	0x08010c0f
 80109fc:	08010c2b 	.word	0x08010c2b
 8010a00:	08010c1b 	.word	0x08010c1b
 8010a04:	08010c23 	.word	0x08010c23
 8010a08:	08010c93 	.word	0x08010c93
 8010a0c:	08010c37 	.word	0x08010c37
 8010a10:	08010c93 	.word	0x08010c93
 8010a14:	08010c93 	.word	0x08010c93
 8010a18:	08010c93 	.word	0x08010c93
 8010a1c:	08010c93 	.word	0x08010c93
 8010a20:	08010c93 	.word	0x08010c93
 8010a24:	08010c93 	.word	0x08010c93
 8010a28:	08010c93 	.word	0x08010c93
 8010a2c:	08010c93 	.word	0x08010c93
 8010a30:	08010c93 	.word	0x08010c93
 8010a34:	08010c93 	.word	0x08010c93
 8010a38:	08010c93 	.word	0x08010c93
 8010a3c:	08010c93 	.word	0x08010c93
 8010a40:	08010c93 	.word	0x08010c93
 8010a44:	08010c93 	.word	0x08010c93
 8010a48:	08010c93 	.word	0x08010c93
 8010a4c:	08010c4b 	.word	0x08010c4b
 8010a50:	08010c57 	.word	0x08010c57
 8010a54:	08010c63 	.word	0x08010c63
 8010a58:	08010c6f 	.word	0x08010c6f
 8010a5c:	08010c7b 	.word	0x08010c7b
 8010a60:	08010c87 	.word	0x08010c87
 8010a64:	08010c8d 	.word	0x08010c8d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8010a68:	4b8f      	ldr	r3, [pc, #572]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a6a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	711a      	strb	r2, [r3, #4]
            break;
 8010a72:	e114      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8010a74:	4b8c      	ldr	r3, [pc, #560]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a76:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	711a      	strb	r2, [r3, #4]
            break;
 8010a7e:	e10e      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	685b      	ldr	r3, [r3, #4]
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fa fd87 	bl	800b598 <SecureElementGetDevEui>
            break;
 8010a8a:	e108      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	685b      	ldr	r3, [r3, #4]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fa fdb1 	bl	800b5f8 <SecureElementGetJoinEui>
            break;
 8010a96:	e102      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8010a98:	4b83      	ldr	r3, [pc, #524]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010a9a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	711a      	strb	r2, [r3, #4]
            break;
 8010aa2:	e0fc      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8010aa4:	4b80      	ldr	r3, [pc, #512]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010aa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	605a      	str	r2, [r3, #4]
            break;
 8010aae:	e0f6      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8010ab0:	4b7d      	ldr	r3, [pc, #500]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ab2:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	3304      	adds	r3, #4
 8010aba:	4619      	mov	r1, r3
 8010abc:	4610      	mov	r0, r2
 8010abe:	f7fa fdcd 	bl	800b65c <SecureElementGetDevAddr>
            break;
 8010ac2:	e0ec      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8010ac4:	4b78      	ldr	r3, [pc, #480]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ac6:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	711a      	strb	r2, [r3, #4]
            break;
 8010ace:	e0e6      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010ad0:	4b75      	ldr	r3, [pc, #468]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ad2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	711a      	strb	r2, [r3, #4]
            break;
 8010ada:	e0e0      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8010adc:	231d      	movs	r3, #29
 8010ade:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ae0:	4b71      	ldr	r3, [pc, #452]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ae2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ae6:	f107 0210 	add.w	r2, r7, #16
 8010aea:	4611      	mov	r1, r2
 8010aec:	4618      	mov	r0, r3
 8010aee:	f002 ffba 	bl	8013a66 <RegionGetPhyParam>
 8010af2:	4603      	mov	r3, r0
 8010af4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8010af6:	68fa      	ldr	r2, [r7, #12]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	605a      	str	r2, [r3, #4]
            break;
 8010afc:	e0cf      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	4a69      	ldr	r2, [pc, #420]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b02:	3304      	adds	r3, #4
 8010b04:	326c      	adds	r2, #108	@ 0x6c
 8010b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b0a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010b0e:	e0c6      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	4a65      	ldr	r2, [pc, #404]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b14:	3304      	adds	r3, #4
 8010b16:	32b4      	adds	r2, #180	@ 0xb4
 8010b18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b1c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010b20:	e0bd      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4a60      	ldr	r2, [pc, #384]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b26:	3304      	adds	r3, #4
 8010b28:	3274      	adds	r2, #116	@ 0x74
 8010b2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b2e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010b32:	e0b4      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	4a5c      	ldr	r2, [pc, #368]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b38:	3304      	adds	r3, #4
 8010b3a:	32bc      	adds	r2, #188	@ 0xbc
 8010b3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010b40:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8010b44:	e0ab      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8010b46:	231b      	movs	r3, #27
 8010b48:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b4a:	4b57      	ldr	r3, [pc, #348]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b4c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010b50:	f107 0210 	add.w	r2, r7, #16
 8010b54:	4611      	mov	r1, r2
 8010b56:	4618      	mov	r0, r3
 8010b58:	f002 ff85 	bl	8013a66 <RegionGetPhyParam>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	605a      	str	r2, [r3, #4]
            break;
 8010b66:	e09a      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010b68:	231a      	movs	r3, #26
 8010b6a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010b72:	f107 0210 	add.w	r2, r7, #16
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f002 ff74 	bl	8013a66 <RegionGetPhyParam>
 8010b7e:	4603      	mov	r3, r0
 8010b80:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	605a      	str	r2, [r3, #4]
            break;
 8010b88:	e089      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8010b8a:	4b47      	ldr	r3, [pc, #284]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b8c:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	711a      	strb	r2, [r3, #4]
            break;
 8010b94:	e083      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8010b96:	4b44      	ldr	r3, [pc, #272]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010b98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	605a      	str	r2, [r3, #4]
            break;
 8010b9e:	e07e      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8010ba0:	4b41      	ldr	r3, [pc, #260]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010ba2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	605a      	str	r2, [r3, #4]
            break;
 8010ba8:	e079      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8010baa:	4b3f      	ldr	r3, [pc, #252]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	605a      	str	r2, [r3, #4]
            break;
 8010bb2:	e074      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8010bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	605a      	str	r2, [r3, #4]
            break;
 8010bbc:	e06f      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8010bbe:	4b3a      	ldr	r3, [pc, #232]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bc0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	605a      	str	r2, [r3, #4]
            break;
 8010bc6:	e06a      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010bc8:	4b37      	ldr	r3, [pc, #220]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bca:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	711a      	strb	r2, [r3, #4]
            break;
 8010bd2:	e064      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8010bd4:	4b34      	ldr	r3, [pc, #208]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bd6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	711a      	strb	r2, [r3, #4]
            break;
 8010bde:	e05e      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8010be0:	4b31      	ldr	r3, [pc, #196]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010be2:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	711a      	strb	r2, [r3, #4]
            break;
 8010bea:	e058      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010bec:	4b2e      	ldr	r3, [pc, #184]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bee:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	711a      	strb	r2, [r3, #4]
            break;
 8010bf6:	e052      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010bfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	605a      	str	r2, [r3, #4]
            break;
 8010c00:	e04d      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8010c02:	4b29      	ldr	r3, [pc, #164]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c04:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	711a      	strb	r2, [r3, #4]
            break;
 8010c0c:	e047      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010c0e:	4b26      	ldr	r3, [pc, #152]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c10:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	605a      	str	r2, [r3, #4]
            break;
 8010c18:	e041      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	4a22      	ldr	r2, [pc, #136]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c1e:	605a      	str	r2, [r3, #4]
            break;
 8010c20:	e03d      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	4a21      	ldr	r2, [pc, #132]	@ (8010cac <LoRaMacMibGetRequestConfirm+0x36c>)
 8010c26:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8010c28:	e039      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c2c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	605a      	str	r2, [r3, #4]
            break;
 8010c34:	e033      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	4a1b      	ldr	r2, [pc, #108]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c3a:	f8d2 2128 	ldr.w	r2, [r2, #296]	@ 0x128
 8010c3e:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010c40:	687c      	ldr	r4, [r7, #4]
 8010c42:	f003 f935 	bl	8013eb0 <RegionGetVersion>
 8010c46:	60a0      	str	r0, [r4, #8]
            break;
 8010c48:	e029      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010c4a:	4b17      	ldr	r3, [pc, #92]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	605a      	str	r2, [r3, #4]
            break;
 8010c54:	e023      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010c56:	4b14      	ldr	r3, [pc, #80]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c58:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	809a      	strh	r2, [r3, #4]
            break;
 8010c60:	e01d      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010c62:	4b11      	ldr	r3, [pc, #68]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c64:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	809a      	strh	r2, [r3, #4]
            break;
 8010c6c:	e017      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8010c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c70:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	809a      	strh	r2, [r3, #4]
            break;
 8010c78:	e011      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8010c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8010ca8 <LoRaMacMibGetRequestConfirm+0x368>)
 8010c7c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	809a      	strh	r2, [r3, #4]
            break;
 8010c84:	e00b      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010c86:	2318      	movs	r3, #24
 8010c88:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010c8a:	e008      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8010c8c:	2318      	movs	r3, #24
 8010c8e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8010c90:	e005      	b.n	8010c9e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 ff98 	bl	8011bc8 <LoRaMacClassBMibGetRequestConfirm>
 8010c98:	4603      	mov	r3, r0
 8010c9a:	75fb      	strb	r3, [r7, #23]
            break;
 8010c9c:	bf00      	nop
        }
    }
    return status;
 8010c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	371c      	adds	r7, #28
 8010ca4:	46bd      	mov	sp, r7
 8010ca6:	bd90      	pop	{r4, r7, pc}
 8010ca8:	20000a0c 	.word	0x20000a0c
 8010cac:	20001184 	.word	0x20001184

08010cb0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010cb8:	2300      	movs	r3, #0
 8010cba:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d101      	bne.n	8010cc6 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010cc2:	2303      	movs	r3, #3
 8010cc4:	e382      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010cc6:	4bbb      	ldr	r3, [pc, #748]	@ (8010fb4 <LoRaMacMibSetRequestConfirm+0x304>)
 8010cc8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010ccc:	f003 0302 	and.w	r3, r3, #2
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e379      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	781b      	ldrb	r3, [r3, #0]
 8010cdc:	2b3f      	cmp	r3, #63	@ 0x3f
 8010cde:	f200 8353 	bhi.w	8011388 <LoRaMacMibSetRequestConfirm+0x6d8>
 8010ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ce8 <LoRaMacMibSetRequestConfirm+0x38>)
 8010ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce8:	08010de9 	.word	0x08010de9
 8010cec:	08010df9 	.word	0x08010df9
 8010cf0:	08010e13 	.word	0x08010e13
 8010cf4:	08010e2b 	.word	0x08010e2b
 8010cf8:	08010e43 	.word	0x08010e43
 8010cfc:	08010e4f 	.word	0x08010e4f
 8010d00:	08010e5b 	.word	0x08010e5b
 8010d04:	08010e85 	.word	0x08010e85
 8010d08:	08010eab 	.word	0x08010eab
 8010d0c:	08010ed1 	.word	0x08010ed1
 8010d10:	08010ef7 	.word	0x08010ef7
 8010d14:	08010f1d 	.word	0x08010f1d
 8010d18:	08010f43 	.word	0x08010f43
 8010d1c:	08010f69 	.word	0x08010f69
 8010d20:	08010f8f 	.word	0x08010f8f
 8010d24:	08010fbd 	.word	0x08010fbd
 8010d28:	08010fdd 	.word	0x08010fdd
 8010d2c:	08011389 	.word	0x08011389
 8010d30:	08010fe9 	.word	0x08010fe9
 8010d34:	08011059 	.word	0x08011059
 8010d38:	08011099 	.word	0x08011099
 8010d3c:	080110fb 	.word	0x080110fb
 8010d40:	0801116b 	.word	0x0801116b
 8010d44:	0801113b 	.word	0x0801113b
 8010d48:	0801119b 	.word	0x0801119b
 8010d4c:	080111bd 	.word	0x080111bd
 8010d50:	080111c7 	.word	0x080111c7
 8010d54:	080111d1 	.word	0x080111d1
 8010d58:	080111db 	.word	0x080111db
 8010d5c:	080111e5 	.word	0x080111e5
 8010d60:	080111ef 	.word	0x080111ef
 8010d64:	08011221 	.word	0x08011221
 8010d68:	08011295 	.word	0x08011295
 8010d6c:	0801125b 	.word	0x0801125b
 8010d70:	080112c7 	.word	0x080112c7
 8010d74:	080112dd 	.word	0x080112dd
 8010d78:	080112f5 	.word	0x080112f5
 8010d7c:	08011301 	.word	0x08011301
 8010d80:	0801130d 	.word	0x0801130d
 8010d84:	08011389 	.word	0x08011389
 8010d88:	08011317 	.word	0x08011317
 8010d8c:	08011389 	.word	0x08011389
 8010d90:	08011389 	.word	0x08011389
 8010d94:	08011389 	.word	0x08011389
 8010d98:	08011389 	.word	0x08011389
 8010d9c:	08011389 	.word	0x08011389
 8010da0:	08011389 	.word	0x08011389
 8010da4:	08011389 	.word	0x08011389
 8010da8:	08011389 	.word	0x08011389
 8010dac:	08011389 	.word	0x08011389
 8010db0:	08011389 	.word	0x08011389
 8010db4:	08011389 	.word	0x08011389
 8010db8:	08011389 	.word	0x08011389
 8010dbc:	08011389 	.word	0x08011389
 8010dc0:	08011389 	.word	0x08011389
 8010dc4:	08011389 	.word	0x08011389
 8010dc8:	08011389 	.word	0x08011389
 8010dcc:	08011341 	.word	0x08011341
 8010dd0:	0801134d 	.word	0x0801134d
 8010dd4:	08011359 	.word	0x08011359
 8010dd8:	08011365 	.word	0x08011365
 8010ddc:	08011371 	.word	0x08011371
 8010de0:	0801137d 	.word	0x0801137d
 8010de4:	08011383 	.word	0x08011383
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	791b      	ldrb	r3, [r3, #4]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fd fac5 	bl	800e37c <SwitchClass>
 8010df2:	4603      	mov	r3, r0
 8010df4:	75fb      	strb	r3, [r7, #23]
            break;
 8010df6:	e2e8      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	791b      	ldrb	r3, [r3, #4]
 8010dfc:	2b02      	cmp	r3, #2
 8010dfe:	d005      	beq.n	8010e0c <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	791a      	ldrb	r2, [r3, #4]
 8010e04:	4b6c      	ldr	r3, [pc, #432]	@ (8010fb8 <LoRaMacMibSetRequestConfirm+0x308>)
 8010e06:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8010e0a:	e2de      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e0c:	2303      	movs	r3, #3
 8010e0e:	75fb      	strb	r3, [r7, #23]
            break;
 8010e10:	e2db      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7fa fba6 	bl	800b568 <SecureElementSetDevEui>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f000 82b8 	beq.w	8011394 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e24:	2303      	movs	r3, #3
 8010e26:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e28:	e2b4      	b.n	8011394 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	685b      	ldr	r3, [r3, #4]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fa fbca 	bl	800b5c8 <SecureElementSetJoinEui>
 8010e34:	4603      	mov	r3, r0
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 82ae 	beq.w	8011398 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e3c:	2303      	movs	r3, #3
 8010e3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010e40:	e2aa      	b.n	8011398 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	791a      	ldrb	r2, [r3, #4]
 8010e46:	4b5c      	ldr	r3, [pc, #368]	@ (8010fb8 <LoRaMacMibSetRequestConfirm+0x308>)
 8010e48:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 8010e4c:	e2bd      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	4a59      	ldr	r2, [pc, #356]	@ (8010fb8 <LoRaMacMibSetRequestConfirm+0x308>)
 8010e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 8010e58:	e2b7      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8010e5a:	4b57      	ldr	r3, [pc, #348]	@ (8010fb8 <LoRaMacMibSetRequestConfirm+0x308>)
 8010e5c:	f893 212c 	ldrb.w	r2, [r3, #300]	@ 0x12c
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	4619      	mov	r1, r3
 8010e66:	4610      	mov	r0, r2
 8010e68:	f7fa fbde 	bl	800b628 <SecureElementSetDevAddr>
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d002      	beq.n	8010e78 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010e72:	2303      	movs	r3, #3
 8010e74:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8010e76:	e2a8      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8010fb8 <LoRaMacMibSetRequestConfirm+0x308>)
 8010e7e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 8010e82:	e2a2      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d00b      	beq.n	8010ea4 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	4619      	mov	r1, r3
 8010e92:	2000      	movs	r0, #0
 8010e94:	f001 fff0 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010e98:	4603      	mov	r3, r0
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	f000 827e 	beq.w	801139c <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ea0:	2311      	movs	r3, #17
 8010ea2:	e293      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010ea8:	e278      	b.n	801139c <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d00b      	beq.n	8010eca <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	685b      	ldr	r3, [r3, #4]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	2001      	movs	r0, #1
 8010eba:	f001 ffdd 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	f000 826d 	beq.w	80113a0 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010ec6:	2311      	movs	r3, #17
 8010ec8:	e280      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010eca:	2303      	movs	r3, #3
 8010ecc:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010ece:	e267      	b.n	80113a0 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d00b      	beq.n	8010ef0 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	4619      	mov	r1, r3
 8010ede:	2008      	movs	r0, #8
 8010ee0:	f001 ffca 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	f000 825c 	beq.w	80113a4 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010eec:	2311      	movs	r3, #17
 8010eee:	e26d      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ef0:	2303      	movs	r3, #3
 8010ef2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010ef4:	e256      	b.n	80113a4 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	685b      	ldr	r3, [r3, #4]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00b      	beq.n	8010f16 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	685b      	ldr	r3, [r3, #4]
 8010f02:	4619      	mov	r1, r3
 8010f04:	2009      	movs	r0, #9
 8010f06:	f001 ffb7 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	f000 824b 	beq.w	80113a8 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f12:	2311      	movs	r3, #17
 8010f14:	e25a      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f16:	2303      	movs	r3, #3
 8010f18:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f1a:	e245      	b.n	80113a8 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00b      	beq.n	8010f3c <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	4619      	mov	r1, r3
 8010f2a:	200c      	movs	r0, #12
 8010f2c:	f001 ffa4 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010f30:	4603      	mov	r3, r0
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f000 823a 	beq.w	80113ac <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f38:	2311      	movs	r3, #17
 8010f3a:	e247      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f3c:	2303      	movs	r3, #3
 8010f3e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f40:	e234      	b.n	80113ac <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00b      	beq.n	8010f62 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	685b      	ldr	r3, [r3, #4]
 8010f4e:	4619      	mov	r1, r3
 8010f50:	200d      	movs	r0, #13
 8010f52:	f001 ff91 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010f56:	4603      	mov	r3, r0
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f000 8229 	beq.w	80113b0 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f5e:	2311      	movs	r3, #17
 8010f60:	e234      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f62:	2303      	movs	r3, #3
 8010f64:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f66:	e223      	b.n	80113b0 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	685b      	ldr	r3, [r3, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00b      	beq.n	8010f88 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	4619      	mov	r1, r3
 8010f76:	200e      	movs	r0, #14
 8010f78:	f001 ff7e 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010f7c:	4603      	mov	r3, r0
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 8218 	beq.w	80113b4 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010f84:	2311      	movs	r3, #17
 8010f86:	e221      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010f8c:	e212      	b.n	80113b4 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	685b      	ldr	r3, [r3, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d00b      	beq.n	8010fae <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	685b      	ldr	r3, [r3, #4]
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	200f      	movs	r0, #15
 8010f9e:	f001 ff6b 	bl	8012e78 <LoRaMacCryptoSetKey>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	f000 8207 	beq.w	80113b8 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010faa:	2311      	movs	r3, #17
 8010fac:	e20e      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010fae:	2303      	movs	r3, #3
 8010fb0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8010fb2:	e201      	b.n	80113b8 <LoRaMacMibSetRequestConfirm+0x708>
 8010fb4:	20000504 	.word	0x20000504
 8010fb8:	20000a0c 	.word	0x20000a0c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	791a      	ldrb	r2, [r3, #4]
 8010fc0:	4bb2      	ldr	r3, [pc, #712]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fc2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010fc6:	4bb2      	ldr	r3, [pc, #712]	@ (8011290 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010fca:	4ab0      	ldr	r2, [pc, #704]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fcc:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 8010fd0:	4610      	mov	r0, r2
 8010fd2:	4798      	blx	r3
            Radio.Sleep( );
 8010fd4:	4bae      	ldr	r3, [pc, #696]	@ (8011290 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8010fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fd8:	4798      	blx	r3
            break;
 8010fda:	e1f6      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	791a      	ldrb	r2, [r3, #4]
 8010fe0:	4baa      	ldr	r3, [pc, #680]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010fe2:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 8010fe6:	e1f0      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	7a1b      	ldrb	r3, [r3, #8]
 8010fec:	b25b      	sxtb	r3, r3
 8010fee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010ff0:	4ba6      	ldr	r3, [pc, #664]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ff2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8010ff6:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010ff8:	4ba4      	ldr	r3, [pc, #656]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8010ffa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8010ffe:	f107 0108 	add.w	r1, r7, #8
 8011002:	2207      	movs	r2, #7
 8011004:	4618      	mov	r0, r3
 8011006:	f002 fd7c 	bl	8013b02 <RegionVerify>
 801100a:	4603      	mov	r3, r0
 801100c:	f083 0301 	eor.w	r3, r3, #1
 8011010:	b2db      	uxtb	r3, r3
 8011012:	2b00      	cmp	r3, #0
 8011014:	d002      	beq.n	801101c <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011016:	2303      	movs	r3, #3
 8011018:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 801101a:	e1d6      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011022:	4b9a      	ldr	r3, [pc, #616]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011024:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011028:	f107 0108 	add.w	r1, r7, #8
 801102c:	2200      	movs	r2, #0
 801102e:	4618      	mov	r0, r3
 8011030:	f002 fd67 	bl	8013b02 <RegionVerify>
 8011034:	4603      	mov	r3, r0
 8011036:	f083 0301 	eor.w	r3, r3, #1
 801103a:	b2db      	uxtb	r3, r3
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011040:	2303      	movs	r3, #3
 8011042:	75fb      	strb	r3, [r7, #23]
            break;
 8011044:	e1c1      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011046:	4b91      	ldr	r3, [pc, #580]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011048:	687a      	ldr	r2, [r7, #4]
 801104a:	336c      	adds	r3, #108	@ 0x6c
 801104c:	3204      	adds	r2, #4
 801104e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011052:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011056:	e1b8      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	7a1b      	ldrb	r3, [r3, #8]
 801105c:	b25b      	sxtb	r3, r3
 801105e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011060:	4b8a      	ldr	r3, [pc, #552]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011062:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011066:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011068:	4b88      	ldr	r3, [pc, #544]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 801106a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801106e:	f107 0108 	add.w	r1, r7, #8
 8011072:	2207      	movs	r2, #7
 8011074:	4618      	mov	r0, r3
 8011076:	f002 fd44 	bl	8013b02 <RegionVerify>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d008      	beq.n	8011092 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011080:	4b82      	ldr	r3, [pc, #520]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011082:	687a      	ldr	r2, [r7, #4]
 8011084:	33b4      	adds	r3, #180	@ 0xb4
 8011086:	3204      	adds	r2, #4
 8011088:	e892 0003 	ldmia.w	r2, {r0, r1}
 801108c:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011090:	e19b      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011092:	2303      	movs	r3, #3
 8011094:	75fb      	strb	r3, [r7, #23]
            break;
 8011096:	e198      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	7a1b      	ldrb	r3, [r3, #8]
 801109c:	b25b      	sxtb	r3, r3
 801109e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80110a0:	4b7a      	ldr	r3, [pc, #488]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110a2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80110a6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80110a8:	4b78      	ldr	r3, [pc, #480]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110aa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80110ae:	f107 0108 	add.w	r1, r7, #8
 80110b2:	2207      	movs	r2, #7
 80110b4:	4618      	mov	r0, r3
 80110b6:	f002 fd24 	bl	8013b02 <RegionVerify>
 80110ba:	4603      	mov	r3, r0
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d019      	beq.n	80110f4 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80110c0:	4b72      	ldr	r3, [pc, #456]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	3374      	adds	r3, #116	@ 0x74
 80110c6:	3204      	adds	r2, #4
 80110c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80110cc:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80110d0:	4b6e      	ldr	r3, [pc, #440]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110d2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 80110d6:	2b02      	cmp	r3, #2
 80110d8:	f040 8170 	bne.w	80113bc <LoRaMacMibSetRequestConfirm+0x70c>
 80110dc:	4b6b      	ldr	r3, [pc, #428]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80110de:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	f000 816a 	beq.w	80113bc <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 80110e8:	4b69      	ldr	r3, [pc, #420]	@ (8011290 <LoRaMacMibSetRequestConfirm+0x5e0>)
 80110ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ec:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 80110ee:	f7fe fbdf 	bl	800f8b0 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80110f2:	e163      	b.n	80113bc <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80110f4:	2303      	movs	r3, #3
 80110f6:	75fb      	strb	r3, [r7, #23]
            break;
 80110f8:	e160      	b.n	80113bc <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7a1b      	ldrb	r3, [r3, #8]
 80110fe:	b25b      	sxtb	r3, r3
 8011100:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011102:	4b62      	ldr	r3, [pc, #392]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011104:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8011108:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 801110a:	4b60      	ldr	r3, [pc, #384]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 801110c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011110:	f107 0108 	add.w	r1, r7, #8
 8011114:	2207      	movs	r2, #7
 8011116:	4618      	mov	r0, r3
 8011118:	f002 fcf3 	bl	8013b02 <RegionVerify>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d008      	beq.n	8011134 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011122:	4b5a      	ldr	r3, [pc, #360]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011124:	687a      	ldr	r2, [r7, #4]
 8011126:	33bc      	adds	r3, #188	@ 0xbc
 8011128:	3204      	adds	r2, #4
 801112a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801112e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011132:	e14a      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011134:	2303      	movs	r3, #3
 8011136:	75fb      	strb	r3, [r7, #23]
            break;
 8011138:	e147      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	685b      	ldr	r3, [r3, #4]
 801113e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011140:	2301      	movs	r3, #1
 8011142:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011144:	4b51      	ldr	r3, [pc, #324]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011146:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801114a:	f107 020c 	add.w	r2, r7, #12
 801114e:	4611      	mov	r1, r2
 8011150:	4618      	mov	r0, r3
 8011152:	f002 fd0e 	bl	8013b72 <RegionChanMaskSet>
 8011156:	4603      	mov	r3, r0
 8011158:	f083 0301 	eor.w	r3, r3, #1
 801115c:	b2db      	uxtb	r3, r3
 801115e:	2b00      	cmp	r3, #0
 8011160:	f000 812e 	beq.w	80113c0 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011164:	2303      	movs	r3, #3
 8011166:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011168:	e12a      	b.n	80113c0 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	685b      	ldr	r3, [r3, #4]
 801116e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011170:	2300      	movs	r3, #0
 8011172:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011174:	4b45      	ldr	r3, [pc, #276]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011176:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801117a:	f107 020c 	add.w	r2, r7, #12
 801117e:	4611      	mov	r1, r2
 8011180:	4618      	mov	r0, r3
 8011182:	f002 fcf6 	bl	8013b72 <RegionChanMaskSet>
 8011186:	4603      	mov	r3, r0
 8011188:	f083 0301 	eor.w	r3, r3, #1
 801118c:	b2db      	uxtb	r3, r3
 801118e:	2b00      	cmp	r3, #0
 8011190:	f000 8118 	beq.w	80113c4 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011194:	2303      	movs	r3, #3
 8011196:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011198:	e114      	b.n	80113c4 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	791b      	ldrb	r3, [r3, #4]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d009      	beq.n	80111b6 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 80111a6:	2b0f      	cmp	r3, #15
 80111a8:	d805      	bhi.n	80111b6 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	791a      	ldrb	r2, [r3, #4]
 80111ae:	4b37      	ldr	r3, [pc, #220]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111b0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80111b4:	e109      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80111b6:	2303      	movs	r3, #3
 80111b8:	75fb      	strb	r3, [r7, #23]
            break;
 80111ba:	e106      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	4a32      	ldr	r2, [pc, #200]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111c2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 80111c4:	e101      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	4a30      	ldr	r2, [pc, #192]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111cc:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 80111ce:	e0fc      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	4a2d      	ldr	r2, [pc, #180]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 80111d8:	e0f7      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	4a2b      	ldr	r2, [pc, #172]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111e0:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 80111e2:	e0f2      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	685b      	ldr	r3, [r3, #4]
 80111e8:	4a28      	ldr	r2, [pc, #160]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111ea:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 80111ec:	e0ed      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80111f4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80111f6:	4b25      	ldr	r3, [pc, #148]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 80111f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80111fc:	f107 0108 	add.w	r1, r7, #8
 8011200:	2206      	movs	r2, #6
 8011202:	4618      	mov	r0, r3
 8011204:	f002 fc7d 	bl	8013b02 <RegionVerify>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d005      	beq.n	801121a <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 801120e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011212:	4b1e      	ldr	r3, [pc, #120]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011214:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011218:	e0d7      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801121a:	2303      	movs	r3, #3
 801121c:	75fb      	strb	r3, [r7, #23]
            break;
 801121e:	e0d4      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011226:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011228:	4b18      	ldr	r3, [pc, #96]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 801122a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801122e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011230:	4b16      	ldr	r3, [pc, #88]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011232:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011236:	f107 0108 	add.w	r1, r7, #8
 801123a:	2205      	movs	r2, #5
 801123c:	4618      	mov	r0, r3
 801123e:	f002 fc60 	bl	8013b02 <RegionVerify>
 8011242:	4603      	mov	r3, r0
 8011244:	2b00      	cmp	r3, #0
 8011246:	d005      	beq.n	8011254 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011248:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801124c:	4b0f      	ldr	r3, [pc, #60]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 801124e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011252:	e0ba      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011254:	2303      	movs	r3, #3
 8011256:	75fb      	strb	r3, [r7, #23]
            break;
 8011258:	e0b7      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011260:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011262:	4b0a      	ldr	r3, [pc, #40]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011264:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011268:	f107 0108 	add.w	r1, r7, #8
 801126c:	220a      	movs	r2, #10
 801126e:	4618      	mov	r0, r3
 8011270:	f002 fc47 	bl	8013b02 <RegionVerify>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d005      	beq.n	8011286 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 801127a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801127e:	4b03      	ldr	r3, [pc, #12]	@ (801128c <LoRaMacMibSetRequestConfirm+0x5dc>)
 8011280:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011284:	e0a1      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011286:	2303      	movs	r3, #3
 8011288:	75fb      	strb	r3, [r7, #23]
            break;
 801128a:	e09e      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
 801128c:	20000a0c 	.word	0x20000a0c
 8011290:	0801d01c 	.word	0x0801d01c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801129a:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 801129c:	4b4d      	ldr	r3, [pc, #308]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 801129e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80112a2:	f107 0108 	add.w	r1, r7, #8
 80112a6:	2209      	movs	r2, #9
 80112a8:	4618      	mov	r0, r3
 80112aa:	f002 fc2a 	bl	8013b02 <RegionVerify>
 80112ae:	4603      	mov	r3, r0
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d005      	beq.n	80112c0 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 80112b4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80112b8:	4b46      	ldr	r3, [pc, #280]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80112be:	e084      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80112c0:	2303      	movs	r3, #3
 80112c2:	75fb      	strb	r3, [r7, #23]
            break;
 80112c4:	e081      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685b      	ldr	r3, [r3, #4]
 80112ca:	4a42      	ldr	r2, [pc, #264]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80112d0:	4b40      	ldr	r3, [pc, #256]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80112d6:	4a3f      	ldr	r2, [pc, #252]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 80112da:	e076      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	791a      	ldrb	r2, [r3, #4]
 80112e0:	4b3c      	ldr	r3, [pc, #240]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112e2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 80112e6:	4b3b      	ldr	r3, [pc, #236]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112e8:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 80112ec:	4b39      	ldr	r3, [pc, #228]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 80112f2:	e06a      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	685b      	ldr	r3, [r3, #4]
 80112f8:	4a36      	ldr	r2, [pc, #216]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 80112fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 80112fe:	e064      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	685b      	ldr	r3, [r3, #4]
 8011304:	4a33      	ldr	r2, [pc, #204]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 8011306:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 801130a:	e05e      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 801130c:	f7fe fd2c 	bl	800fd68 <RestoreNvmData>
 8011310:	4603      	mov	r3, r0
 8011312:	75fb      	strb	r3, [r7, #23]
            break;
 8011314:	e059      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	799b      	ldrb	r3, [r3, #6]
 801131a:	2b01      	cmp	r3, #1
 801131c:	d80d      	bhi.n	801133a <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801131e:	4a2d      	ldr	r2, [pc, #180]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6858      	ldr	r0, [r3, #4]
 801132c:	f001 fcdc 	bl	8012ce8 <LoRaMacCryptoSetLrWanVersion>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d048      	beq.n	80113c8 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011336:	2311      	movs	r3, #17
 8011338:	e048      	b.n	80113cc <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801133a:	2303      	movs	r3, #3
 801133c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801133e:	e043      	b.n	80113c8 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	4a23      	ldr	r2, [pc, #140]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 8011346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 801134a:	e03e      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	889a      	ldrh	r2, [r3, #4]
 8011350:	4b20      	ldr	r3, [pc, #128]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 8011352:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 8011356:	e038      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	889a      	ldrh	r2, [r3, #4]
 801135c:	4b1d      	ldr	r3, [pc, #116]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 801135e:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 8011362:	e032      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	889a      	ldrh	r2, [r3, #4]
 8011368:	4b1a      	ldr	r3, [pc, #104]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 801136a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 801136e:	e02c      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	889a      	ldrh	r2, [r3, #4]
 8011374:	4b17      	ldr	r3, [pc, #92]	@ (80113d4 <LoRaMacMibSetRequestConfirm+0x724>)
 8011376:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 801137a:	e026      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 801137c:	2318      	movs	r3, #24
 801137e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011380:	e023      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 8011382:	2318      	movs	r3, #24
 8011384:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8011386:	e020      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 fc27 	bl	8011bdc <LoRaMacMibClassBSetRequestConfirm>
 801138e:	4603      	mov	r3, r0
 8011390:	75fb      	strb	r3, [r7, #23]
            break;
 8011392:	e01a      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011394:	bf00      	nop
 8011396:	e018      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8011398:	bf00      	nop
 801139a:	e016      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801139c:	bf00      	nop
 801139e:	e014      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113a0:	bf00      	nop
 80113a2:	e012      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113a4:	bf00      	nop
 80113a6:	e010      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113a8:	bf00      	nop
 80113aa:	e00e      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113ac:	bf00      	nop
 80113ae:	e00c      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113b0:	bf00      	nop
 80113b2:	e00a      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113b4:	bf00      	nop
 80113b6:	e008      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113b8:	bf00      	nop
 80113ba:	e006      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113bc:	bf00      	nop
 80113be:	e004      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113c0:	bf00      	nop
 80113c2:	e002      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113c4:	bf00      	nop
 80113c6:	e000      	b.n	80113ca <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80113c8:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 80113ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3718      	adds	r7, #24
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bd80      	pop	{r7, pc}
 80113d4:	20000a0c 	.word	0x20000a0c

080113d8 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b086      	sub	sp, #24
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80113e0:	2302      	movs	r3, #2
 80113e2:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80113e4:	2300      	movs	r3, #0
 80113e6:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d101      	bne.n	80113f2 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80113ee:	2303      	movs	r3, #3
 80113f0:	e13a      	b.n	8011668 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 80113f2:	f7fc fbe3 	bl	800dbbc <LoRaMacIsBusy>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d001      	beq.n	8011400 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80113fc:	2301      	movs	r3, #1
 80113fe:	e133      	b.n	8011668 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011400:	f001 f90c 	bl	801261c <LoRaMacConfirmQueueIsFull>
 8011404:	4603      	mov	r3, r0
 8011406:	2b00      	cmp	r3, #0
 8011408:	d001      	beq.n	801140e <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801140a:	2301      	movs	r3, #1
 801140c:	e12c      	b.n	8011668 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801140e:	f001 f8f9 	bl	8012604 <LoRaMacConfirmQueueGetCnt>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d104      	bne.n	8011422 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011418:	2214      	movs	r2, #20
 801141a:	2100      	movs	r1, #0
 801141c:	4894      	ldr	r0, [pc, #592]	@ (8011670 <LoRaMacMlmeRequest+0x298>)
 801141e:	f006 fa2f 	bl	8017880 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011422:	4b94      	ldr	r3, [pc, #592]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 8011424:	2201      	movs	r2, #1
 8011426:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801142a:	4a92      	ldr	r2, [pc, #584]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 801142c:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011430:	f043 0304 	orr.w	r3, r3, #4
 8011434:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    queueElement.Request = mlmeRequest->Type;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801143e:	2301      	movs	r3, #1
 8011440:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8011442:	2300      	movs	r3, #0
 8011444:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	781b      	ldrb	r3, [r3, #0]
 801144a:	3b01      	subs	r3, #1
 801144c:	2b0d      	cmp	r3, #13
 801144e:	f200 80e1 	bhi.w	8011614 <LoRaMacMlmeRequest+0x23c>
 8011452:	a201      	add	r2, pc, #4	@ (adr r2, 8011458 <LoRaMacMlmeRequest+0x80>)
 8011454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011458:	08011491 	.word	0x08011491
 801145c:	08011615 	.word	0x08011615
 8011460:	08011615 	.word	0x08011615
 8011464:	08011615 	.word	0x08011615
 8011468:	08011509 	.word	0x08011509
 801146c:	08011527 	.word	0x08011527
 8011470:	08011537 	.word	0x08011537
 8011474:	08011615 	.word	0x08011615
 8011478:	08011615 	.word	0x08011615
 801147c:	08011553 	.word	0x08011553
 8011480:	08011615 	.word	0x08011615
 8011484:	080115e9 	.word	0x080115e9
 8011488:	08011589 	.word	0x08011589
 801148c:	080115cb 	.word	0x080115cb
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011490:	4b78      	ldr	r3, [pc, #480]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 8011492:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011496:	f003 0320 	and.w	r3, r3, #32
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801149e:	2301      	movs	r3, #1
 80114a0:	e0e2      	b.n	8011668 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 80114a2:	2000      	movs	r0, #0
 80114a4:	f7fe f8aa 	bl	800f5fc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80114a8:	4b73      	ldr	r3, [pc, #460]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 80114aa:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	795b      	ldrb	r3, [r3, #5]
 80114b2:	b25b      	sxtb	r3, r3
 80114b4:	2200      	movs	r2, #0
 80114b6:	4619      	mov	r1, r3
 80114b8:	f002 fc6b 	bl	8013d92 <RegionAlternateDr>
 80114bc:	4603      	mov	r3, r0
 80114be:	461a      	mov	r2, r3
 80114c0:	4b6d      	ldr	r3, [pc, #436]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 80114c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f993 2006 	ldrsb.w	r2, [r3, #6]
 80114cc:	4b6a      	ldr	r3, [pc, #424]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 80114ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 80114d2:	2307      	movs	r3, #7
 80114d4:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 80114d6:	20ff      	movs	r0, #255	@ 0xff
 80114d8:	f7fd fe0e 	bl	800f0f8 <SendReJoinReq>
 80114dc:	4603      	mov	r3, r0
 80114de:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 80114e0:	7dfb      	ldrb	r3, [r7, #23]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 8098 	beq.w	8011618 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 80114e8:	4b63      	ldr	r3, [pc, #396]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 80114ea:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	795b      	ldrb	r3, [r3, #5]
 80114f2:	b25b      	sxtb	r3, r3
 80114f4:	2201      	movs	r2, #1
 80114f6:	4619      	mov	r1, r3
 80114f8:	f002 fc4b 	bl	8013d92 <RegionAlternateDr>
 80114fc:	4603      	mov	r3, r0
 80114fe:	461a      	mov	r2, r3
 8011500:	4b5d      	ldr	r3, [pc, #372]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 8011502:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011506:	e087      	b.n	8011618 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011508:	2300      	movs	r3, #0
 801150a:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801150c:	f107 030c 	add.w	r3, r7, #12
 8011510:	2200      	movs	r2, #0
 8011512:	4619      	mov	r1, r3
 8011514:	2002      	movs	r0, #2
 8011516:	f000 fcd1 	bl	8011ebc <LoRaMacCommandsAddCmd>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d07d      	beq.n	801161c <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011520:	2313      	movs	r3, #19
 8011522:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011524:	e07a      	b.n	801161c <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	889b      	ldrh	r3, [r3, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe fbc6 	bl	800fcbc <SetTxContinuousWave>
 8011530:	4603      	mov	r3, r0
 8011532:	75fb      	strb	r3, [r7, #23]
            break;
 8011534:	e079      	b.n	801162a <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	8898      	ldrh	r0, [r3, #4]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	6899      	ldr	r1, [r3, #8]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8011544:	b2db      	uxtb	r3, r3
 8011546:	461a      	mov	r2, r3
 8011548:	f7fe fbee 	bl	800fd28 <SetTxContinuousWave1>
 801154c:	4603      	mov	r3, r0
 801154e:	75fb      	strb	r3, [r7, #23]
            break;
 8011550:	e06b      	b.n	801162a <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8011552:	2300      	movs	r3, #0
 8011554:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8011556:	f107 0308 	add.w	r3, r7, #8
 801155a:	4619      	mov	r1, r3
 801155c:	200d      	movs	r0, #13
 801155e:	f000 fd2d 	bl	8011fbc <LoRaMacCommandsGetCmd>
 8011562:	4603      	mov	r3, r0
 8011564:	2b00      	cmp	r3, #0
 8011566:	d102      	bne.n	801156e <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 8011568:	2300      	movs	r3, #0
 801156a:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 801156c:	e058      	b.n	8011620 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801156e:	f107 030c 	add.w	r3, r7, #12
 8011572:	2200      	movs	r2, #0
 8011574:	4619      	mov	r1, r3
 8011576:	200d      	movs	r0, #13
 8011578:	f000 fca0 	bl	8011ebc <LoRaMacCommandsAddCmd>
 801157c:	4603      	mov	r3, r0
 801157e:	2b00      	cmp	r3, #0
 8011580:	d04e      	beq.n	8011620 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8011582:	2313      	movs	r3, #19
 8011584:	75fb      	strb	r3, [r7, #23]
            break;
 8011586:	e04b      	b.n	8011620 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8011588:	4b3b      	ldr	r3, [pc, #236]	@ (8011678 <LoRaMacMlmeRequest+0x2a0>)
 801158a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 801158e:	2b00      	cmp	r3, #0
 8011590:	d148      	bne.n	8011624 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	791b      	ldrb	r3, [r3, #4]
 8011596:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	791b      	ldrb	r3, [r3, #4]
 801159c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80115a0:	b2db      	uxtb	r3, r3
 80115a2:	4618      	mov	r0, r3
 80115a4:	f000 faef 	bl	8011b86 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80115a8:	7dbb      	ldrb	r3, [r7, #22]
 80115aa:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 80115b0:	f107 030c 	add.w	r3, r7, #12
 80115b4:	2201      	movs	r2, #1
 80115b6:	4619      	mov	r1, r3
 80115b8:	2010      	movs	r0, #16
 80115ba:	f000 fc7f 	bl	8011ebc <LoRaMacCommandsAddCmd>
 80115be:	4603      	mov	r3, r0
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d02f      	beq.n	8011624 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115c4:	2313      	movs	r3, #19
 80115c6:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 80115c8:	e02c      	b.n	8011624 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80115ca:	2300      	movs	r3, #0
 80115cc:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80115ce:	f107 030c 	add.w	r3, r7, #12
 80115d2:	2200      	movs	r2, #0
 80115d4:	4619      	mov	r1, r3
 80115d6:	2012      	movs	r0, #18
 80115d8:	f000 fc70 	bl	8011ebc <LoRaMacCommandsAddCmd>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d022      	beq.n	8011628 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80115e2:	2313      	movs	r3, #19
 80115e4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80115e6:	e01f      	b.n	8011628 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80115e8:	2301      	movs	r3, #1
 80115ea:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80115ec:	f000 fa81 	bl	8011af2 <LoRaMacClassBIsAcquisitionInProgress>
 80115f0:	4603      	mov	r3, r0
 80115f2:	f083 0301 	eor.w	r3, r3, #1
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d008      	beq.n	801160e <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80115fc:	2000      	movs	r0, #0
 80115fe:	f000 fa5a 	bl	8011ab6 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8011602:	2000      	movs	r0, #0
 8011604:	f000 fa7c 	bl	8011b00 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8011608:	2300      	movs	r3, #0
 801160a:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 801160c:	e00d      	b.n	801162a <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 801160e:	2301      	movs	r3, #1
 8011610:	75fb      	strb	r3, [r7, #23]
            break;
 8011612:	e00a      	b.n	801162a <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8011614:	bf00      	nop
 8011616:	e008      	b.n	801162a <LoRaMacMlmeRequest+0x252>
            break;
 8011618:	bf00      	nop
 801161a:	e006      	b.n	801162a <LoRaMacMlmeRequest+0x252>
            break;
 801161c:	bf00      	nop
 801161e:	e004      	b.n	801162a <LoRaMacMlmeRequest+0x252>
            break;
 8011620:	bf00      	nop
 8011622:	e002      	b.n	801162a <LoRaMacMlmeRequest+0x252>
            break;
 8011624:	bf00      	nop
 8011626:	e000      	b.n	801162a <LoRaMacMlmeRequest+0x252>
            break;
 8011628:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801162a:	4b12      	ldr	r3, [pc, #72]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 801162c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8011634:	7dfb      	ldrb	r3, [r7, #23]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d010      	beq.n	801165c <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801163a:	f000 ffe3 	bl	8012604 <LoRaMacConfirmQueueGetCnt>
 801163e:	4603      	mov	r3, r0
 8011640:	2b00      	cmp	r3, #0
 8011642:	d110      	bne.n	8011666 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8011644:	4b0b      	ldr	r3, [pc, #44]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 8011646:	2200      	movs	r2, #0
 8011648:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 801164c:	4a09      	ldr	r2, [pc, #36]	@ (8011674 <LoRaMacMlmeRequest+0x29c>)
 801164e:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011652:	f023 0304 	bic.w	r3, r3, #4
 8011656:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 801165a:	e004      	b.n	8011666 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 801165c:	f107 0310 	add.w	r3, r7, #16
 8011660:	4618      	mov	r0, r3
 8011662:	f000 fe7b 	bl	801235c <LoRaMacConfirmQueueAdd>
    }
    return status;
 8011666:	7dfb      	ldrb	r3, [r7, #23]
}
 8011668:	4618      	mov	r0, r3
 801166a:	3718      	adds	r7, #24
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	2000094c 	.word	0x2000094c
 8011674:	20000504 	.word	0x20000504
 8011678:	20000a0c 	.word	0x20000a0c

0801167c <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b08c      	sub	sp, #48	@ 0x30
 8011680:	af02      	add	r7, sp, #8
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011688:	2302      	movs	r3, #2
 801168a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801168e:	2300      	movs	r3, #0
 8011690:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    void* fBuffer = NULL;
 8011694:	2300      	movs	r3, #0
 8011696:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8011698:	2300      	movs	r3, #0
 801169a:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 801169c:	2300      	movs	r3, #0
 801169e:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d101      	bne.n	80116aa <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80116a6:	2303      	movs	r3, #3
 80116a8:	e0d4      	b.n	8011854 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 80116aa:	f7fc fa87 	bl	800dbbc <LoRaMacIsBusy>
 80116ae:	4603      	mov	r3, r0
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d001      	beq.n	80116b8 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 80116b4:	2301      	movs	r3, #1
 80116b6:	e0cd      	b.n	8011854 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 80116b8:	2300      	movs	r3, #0
 80116ba:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80116bc:	2214      	movs	r2, #20
 80116be:	2100      	movs	r1, #0
 80116c0:	4866      	ldr	r0, [pc, #408]	@ (801185c <LoRaMacMcpsRequest+0x1e0>)
 80116c2:	f006 f8dd 	bl	8017880 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80116c6:	4b66      	ldr	r3, [pc, #408]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 80116c8:	2201      	movs	r2, #1
 80116ca:	f883 2435 	strb.w	r2, [r3, #1077]	@ 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 80116ce:	4b64      	ldr	r3, [pc, #400]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 80116d0:	2201      	movs	r2, #1
 80116d2:	f883 240e 	strb.w	r2, [r3, #1038]	@ 0x40e

    switch( mcpsRequest->Type )
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	2b03      	cmp	r3, #3
 80116dc:	d03d      	beq.n	801175a <LoRaMacMcpsRequest+0xde>
 80116de:	2b03      	cmp	r3, #3
 80116e0:	dc4f      	bgt.n	8011782 <LoRaMacMcpsRequest+0x106>
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <LoRaMacMcpsRequest+0x70>
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d019      	beq.n	801171e <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 80116ea:	e04a      	b.n	8011782 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 80116ec:	2301      	movs	r3, #1
 80116ee:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80116f0:	4b5b      	ldr	r3, [pc, #364]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 80116f2:	2201      	movs	r2, #1
 80116f4:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80116f8:	7b3b      	ldrb	r3, [r7, #12]
 80116fa:	2202      	movs	r2, #2
 80116fc:	f362 1347 	bfi	r3, r2, #5, #3
 8011700:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	791b      	ldrb	r3, [r3, #4]
 8011706:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	689b      	ldr	r3, [r3, #8]
 801170e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	899b      	ldrh	r3, [r3, #12]
 8011714:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	7b9b      	ldrb	r3, [r3, #14]
 801171a:	777b      	strb	r3, [r7, #29]
            break;
 801171c:	e032      	b.n	8011784 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801171e:	2301      	movs	r3, #1
 8011720:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	7bdb      	ldrb	r3, [r3, #15]
 8011726:	2b08      	cmp	r3, #8
 8011728:	bf28      	it	cs
 801172a:	2308      	movcs	r3, #8
 801172c:	b2da      	uxtb	r2, r3
 801172e:	4b4c      	ldr	r3, [pc, #304]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 8011730:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8011734:	7b3b      	ldrb	r3, [r7, #12]
 8011736:	2204      	movs	r2, #4
 8011738:	f362 1347 	bfi	r3, r2, #5, #3
 801173c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	791b      	ldrb	r3, [r3, #4]
 8011742:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	689b      	ldr	r3, [r3, #8]
 801174a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	899b      	ldrh	r3, [r3, #12]
 8011750:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	7b9b      	ldrb	r3, [r3, #14]
 8011756:	777b      	strb	r3, [r7, #29]
            break;
 8011758:	e014      	b.n	8011784 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801175a:	2301      	movs	r3, #1
 801175c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801175e:	4b40      	ldr	r3, [pc, #256]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 8011760:	2201      	movs	r2, #1
 8011762:	f883 240d 	strb.w	r2, [r3, #1037]	@ 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8011766:	7b3b      	ldrb	r3, [r7, #12]
 8011768:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801176c:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	685b      	ldr	r3, [r3, #4]
 8011772:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	891b      	ldrh	r3, [r3, #8]
 8011778:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	7a9b      	ldrb	r3, [r3, #10]
 801177e:	777b      	strb	r3, [r7, #29]
            break;
 8011780:	e000      	b.n	8011784 <LoRaMacMcpsRequest+0x108>
            break;
 8011782:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8011784:	2302      	movs	r3, #2
 8011786:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011788:	4b36      	ldr	r3, [pc, #216]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 801178a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 801178e:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011790:	4b34      	ldr	r3, [pc, #208]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 8011792:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8011796:	f107 0214 	add.w	r2, r7, #20
 801179a:	4611      	mov	r1, r2
 801179c:	4618      	mov	r0, r3
 801179e:	f002 f962 	bl	8013a66 <RegionGetPhyParam>
 80117a2:	4603      	mov	r3, r0
 80117a4:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80117a6:	693b      	ldr	r3, [r7, #16]
 80117a8:	b25b      	sxtb	r3, r3
 80117aa:	f997 201d 	ldrsb.w	r2, [r7, #29]
 80117ae:	4293      	cmp	r3, r2
 80117b0:	bfb8      	it	lt
 80117b2:	4613      	movlt	r3, r2
 80117b4:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 80117b6:	7f3b      	ldrb	r3, [r7, #28]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d044      	beq.n	8011846 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 80117bc:	4b29      	ldr	r3, [pc, #164]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 80117be:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 80117c2:	f083 0301 	eor.w	r3, r3, #1
 80117c6:	b2db      	uxtb	r3, r3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d019      	beq.n	8011800 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 80117cc:	7f7b      	ldrb	r3, [r7, #29]
 80117ce:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80117d0:	4b24      	ldr	r3, [pc, #144]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 80117d2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80117d6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 80117d8:	4b22      	ldr	r3, [pc, #136]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 80117da:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80117de:	f107 0108 	add.w	r1, r7, #8
 80117e2:	2205      	movs	r2, #5
 80117e4:	4618      	mov	r0, r3
 80117e6:	f002 f98c 	bl	8013b02 <RegionVerify>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d005      	beq.n	80117fc <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 80117f0:	f997 2008 	ldrsb.w	r2, [r7, #8]
 80117f4:	4b1b      	ldr	r3, [pc, #108]	@ (8011864 <LoRaMacMcpsRequest+0x1e8>)
 80117f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 80117fa:	e001      	b.n	8011800 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 80117fc:	2303      	movs	r3, #3
 80117fe:	e029      	b.n	8011854 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8011800:	8bfa      	ldrh	r2, [r7, #30]
 8011802:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8011806:	f107 000c 	add.w	r0, r7, #12
 801180a:	78fb      	ldrb	r3, [r7, #3]
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	4613      	mov	r3, r2
 8011810:	6a3a      	ldr	r2, [r7, #32]
 8011812:	f7fd fb93 	bl	800ef3c <Send>
 8011816:	4603      	mov	r3, r0
 8011818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if( status == LORAMAC_STATUS_OK )
 801181c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011820:	2b00      	cmp	r3, #0
 8011822:	d10c      	bne.n	801183e <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	781a      	ldrb	r2, [r3, #0]
 8011828:	4b0d      	ldr	r3, [pc, #52]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 801182a:	f883 2434 	strb.w	r2, [r3, #1076]	@ 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801182e:	4a0c      	ldr	r2, [pc, #48]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 8011830:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 8011834:	f043 0301 	orr.w	r3, r3, #1
 8011838:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
 801183c:	e003      	b.n	8011846 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 801183e:	4b08      	ldr	r3, [pc, #32]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2410 	strb.w	r2, [r3, #1040]	@ 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8011846:	4b06      	ldr	r3, [pc, #24]	@ (8011860 <LoRaMacMcpsRequest+0x1e4>)
 8011848:	f8d3 2484 	ldr.w	r2, [r3, #1156]	@ 0x484
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	611a      	str	r2, [r3, #16]

    return status;
 8011850:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011854:	4618      	mov	r0, r3
 8011856:	3728      	adds	r7, #40	@ 0x28
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	20000938 	.word	0x20000938
 8011860:	20000504 	.word	0x20000504
 8011864:	20000a0c 	.word	0x20000a0c

08011868 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b084      	sub	sp, #16
 801186c:	af00      	add	r7, sp, #0
 801186e:	4603      	mov	r3, r0
 8011870:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8011872:	79fb      	ldrb	r3, [r7, #7]
 8011874:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8011876:	4b0d      	ldr	r3, [pc, #52]	@ (80118ac <LoRaMacTestSetDutyCycleOn+0x44>)
 8011878:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801187c:	f107 010c 	add.w	r1, r7, #12
 8011880:	220f      	movs	r2, #15
 8011882:	4618      	mov	r0, r3
 8011884:	f002 f93d 	bl	8013b02 <RegionVerify>
 8011888:	4603      	mov	r3, r0
 801188a:	2b00      	cmp	r3, #0
 801188c:	d00a      	beq.n	80118a4 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801188e:	4a07      	ldr	r2, [pc, #28]	@ (80118ac <LoRaMacTestSetDutyCycleOn+0x44>)
 8011890:	79fb      	ldrb	r3, [r7, #7]
 8011892:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011896:	4a06      	ldr	r2, [pc, #24]	@ (80118b0 <LoRaMacTestSetDutyCycleOn+0x48>)
 8011898:	f892 3481 	ldrb.w	r3, [r2, #1153]	@ 0x481
 801189c:	f043 0320 	orr.w	r3, r3, #32
 80118a0:	f882 3481 	strb.w	r3, [r2, #1153]	@ 0x481
    }
}
 80118a4:	bf00      	nop
 80118a6:	3710      	adds	r7, #16
 80118a8:	46bd      	mov	sp, r7
 80118aa:	bd80      	pop	{r7, pc}
 80118ac:	20000a0c 	.word	0x20000a0c
 80118b0:	20000504 	.word	0x20000504

080118b4 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 80118b8:	f7fe ff5c 	bl	8010774 <LoRaMacStop>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d115      	bne.n	80118ee <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 80118c2:	480c      	ldr	r0, [pc, #48]	@ (80118f4 <LoRaMacDeInitialization+0x40>)
 80118c4:	f00a f940 	bl	801bb48 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 80118c8:	480b      	ldr	r0, [pc, #44]	@ (80118f8 <LoRaMacDeInitialization+0x44>)
 80118ca:	f00a f93d 	bl	801bb48 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 80118ce:	480b      	ldr	r0, [pc, #44]	@ (80118fc <LoRaMacDeInitialization+0x48>)
 80118d0:	f00a f93a 	bl	801bb48 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 80118d4:	480a      	ldr	r0, [pc, #40]	@ (8011900 <LoRaMacDeInitialization+0x4c>)
 80118d6:	f00a f937 	bl	801bb48 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 80118da:	f000 f95e 	bl	8011b9a <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 80118de:	2000      	movs	r0, #0
 80118e0:	f7fd fe8c 	bl	800f5fc <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 80118e4:	4b07      	ldr	r3, [pc, #28]	@ (8011904 <LoRaMacDeInitialization+0x50>)
 80118e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e8:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 80118ea:	2300      	movs	r3, #0
 80118ec:	e000      	b.n	80118f0 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 80118ee:	2301      	movs	r3, #1
    }
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	2000086c 	.word	0x2000086c
 80118f8:	20000884 	.word	0x20000884
 80118fc:	2000089c 	.word	0x2000089c
 8011900:	200008f8 	.word	0x200008f8
 8011904:	0801d01c 	.word	0x0801d01c

08011908 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b08c      	sub	sp, #48	@ 0x30
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	607a      	str	r2, [r7, #4]
 8011914:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8011916:	2300      	movs	r3, #0
 8011918:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	7c1b      	ldrb	r3, [r3, #16]
 8011920:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	7c5b      	ldrb	r3, [r3, #17]
 8011928:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	689a      	ldr	r2, [r3, #8]
 8011930:	683b      	ldr	r3, [r7, #0]
 8011932:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	795b      	ldrb	r3, [r3, #5]
 8011938:	2b00      	cmp	r3, #0
 801193a:	f000 808b 	beq.w	8011a54 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 801193e:	2302      	movs	r3, #2
 8011940:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	7c9b      	ldrb	r3, [r3, #18]
 8011948:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	7cdb      	ldrb	r3, [r3, #19]
 8011950:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011954:	4611      	mov	r1, r2
 8011956:	4618      	mov	r0, r3
 8011958:	f002 f885 	bl	8013a66 <RegionGetPhyParam>
 801195c:	4603      	mov	r3, r0
 801195e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 8011960:	6a3b      	ldr	r3, [r7, #32]
 8011962:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        datarate = MAX( datarate, minTxDatarate );
 8011966:	f997 202c 	ldrsb.w	r2, [r7, #44]	@ 0x2c
 801196a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 801196e:	4293      	cmp	r3, r2
 8011970:	bfb8      	it	lt
 8011972:	4613      	movlt	r3, r2
 8011974:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        if( datarate == minTxDatarate )
 8011978:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 801197c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8011980:	429a      	cmp	r2, r3
 8011982:	d106      	bne.n	8011992 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	2200      	movs	r2, #0
 8011988:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 801198a:	2300      	movs	r3, #0
 801198c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8011990:	e060      	b.n	8011a54 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	689b      	ldr	r3, [r3, #8]
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	8992      	ldrh	r2, [r2, #12]
 801199a:	4293      	cmp	r3, r2
 801199c:	d303      	bcc.n	80119a6 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801199e:	2301      	movs	r3, #1
 80119a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80119a4:	e002      	b.n	80119ac <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80119a6:	2300      	movs	r3, #0
 80119a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	689b      	ldr	r3, [r3, #8]
 80119b0:	68fa      	ldr	r2, [r7, #12]
 80119b2:	8992      	ldrh	r2, [r2, #12]
 80119b4:	4611      	mov	r1, r2
 80119b6:	68fa      	ldr	r2, [r7, #12]
 80119b8:	89d2      	ldrh	r2, [r2, #14]
 80119ba:	440a      	add	r2, r1
 80119bc:	4293      	cmp	r3, r2
 80119be:	d349      	bcc.n	8011a54 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 80119c0:	2308      	movs	r3, #8
 80119c2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	7cdb      	ldrb	r3, [r3, #19]
 80119ca:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80119ce:	4611      	mov	r1, r2
 80119d0:	4618      	mov	r0, r3
 80119d2:	f002 f848 	bl	8013a66 <RegionGetPhyParam>
 80119d6:	4603      	mov	r3, r0
 80119d8:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 80119da:	6a3b      	ldr	r3, [r7, #32]
 80119dc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	689b      	ldr	r3, [r3, #8]
 80119e4:	68fa      	ldr	r2, [r7, #12]
 80119e6:	89d2      	ldrh	r2, [r2, #14]
 80119e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80119ec:	fb01 f202 	mul.w	r2, r1, r2
 80119f0:	1a9b      	subs	r3, r3, r2
 80119f2:	2b01      	cmp	r3, #1
 80119f4:	d12e      	bne.n	8011a54 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80119f6:	2322      	movs	r3, #34	@ 0x22
 80119f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                    getPhy.Datarate = datarate;
 80119fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011a00:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	7c9b      	ldrb	r3, [r3, #18]
 8011a08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	7cdb      	ldrb	r3, [r3, #19]
 8011a10:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8011a14:	4611      	mov	r1, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f002 f825 	bl	8013a66 <RegionGetPhyParam>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8011a20:	6a3b      	ldr	r3, [r7, #32]
 8011a22:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

                    if( datarate == minTxDatarate )
 8011a26:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8011a2a:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d110      	bne.n	8011a54 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8011a32:	2300      	movs	r3, #0
 8011a34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                        if( adrNext->UpdateChanMask == true )
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	791b      	ldrb	r3, [r3, #4]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d009      	beq.n	8011a54 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011a40:	2302      	movs	r3, #2
 8011a42:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	7cdb      	ldrb	r3, [r3, #19]
 8011a48:	f107 0214 	add.w	r2, r7, #20
 8011a4c:	4611      	mov	r1, r2
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f002 f840 	bl	8013ad4 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8011a5a:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8011a62:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 8011a64:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3730      	adds	r7, #48	@ 0x30
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}

08011a70 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	789b      	ldrb	r3, [r3, #2]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d107      	bne.n	8011a96 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	687a      	ldr	r2, [r7, #4]
 8011a8a:	68b9      	ldr	r1, [r7, #8]
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f7ff ff3b 	bl	8011908 <CalcNextV10X>
 8011a92:	4603      	mov	r3, r0
 8011a94:	e000      	b.n	8011a98 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8011a96:	2300      	movs	r3, #0
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3710      	adds	r7, #16
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b085      	sub	sp, #20
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	60f8      	str	r0, [r7, #12]
 8011aa8:	60b9      	str	r1, [r7, #8]
 8011aaa:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011aac:	bf00      	nop
 8011aae:	3714      	adds	r7, #20
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bc80      	pop	{r7}
 8011ab4:	4770      	bx	lr

08011ab6 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b083      	sub	sp, #12
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	4603      	mov	r3, r0
 8011abe:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ac0:	bf00      	nop
 8011ac2:	370c      	adds	r7, #12
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bc80      	pop	{r7}
 8011ac8:	4770      	bx	lr

08011aca <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8011aca:	b480      	push	{r7}
 8011acc:	b083      	sub	sp, #12
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ad4:	bf00      	nop
 8011ad6:	370c      	adds	r7, #12
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bc80      	pop	{r7}
 8011adc:	4770      	bx	lr

08011ade <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8011ade:	b480      	push	{r7}
 8011ae0:	b083      	sub	sp, #12
 8011ae2:	af00      	add	r7, sp, #0
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011ae8:	bf00      	nop
 8011aea:	370c      	adds	r7, #12
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bc80      	pop	{r7}
 8011af0:	4770      	bx	lr

08011af2 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8011af2:	b480      	push	{r7}
 8011af4:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8011af6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bc80      	pop	{r7}
 8011afe:	4770      	bx	lr

08011b00 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8011b00:	b480      	push	{r7}
 8011b02:	b083      	sub	sp, #12
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b08:	bf00      	nop
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	bc80      	pop	{r7}
 8011b10:	4770      	bx	lr

08011b12 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8011b12:	b480      	push	{r7}
 8011b14:	b083      	sub	sp, #12
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b1a:	bf00      	nop
 8011b1c:	370c      	adds	r7, #12
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bc80      	pop	{r7}
 8011b22:	4770      	bx	lr

08011b24 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8011b24:	b480      	push	{r7}
 8011b26:	b083      	sub	sp, #12
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bc80      	pop	{r7}
 8011b34:	4770      	bx	lr

08011b36 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8011b36:	b480      	push	{r7}
 8011b38:	b083      	sub	sp, #12
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	460b      	mov	r3, r1
 8011b40:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8011b42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bc80      	pop	{r7}
 8011b4c:	4770      	bx	lr

08011b4e <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 8011b4e:	b480      	push	{r7}
 8011b50:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011b52:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b54:	4618      	mov	r0, r3
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bc80      	pop	{r7}
 8011b5a:	4770      	bx	lr

08011b5c <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011b60:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b62:	4618      	mov	r0, r3
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bc80      	pop	{r7}
 8011b68:	4770      	bx	lr

08011b6a <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 8011b6a:	b480      	push	{r7}
 8011b6c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011b6e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bc80      	pop	{r7}
 8011b76:	4770      	bx	lr

08011b78 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 8011b78:	b480      	push	{r7}
 8011b7a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8011b7c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	46bd      	mov	sp, r7
 8011b82:	bc80      	pop	{r7}
 8011b84:	4770      	bx	lr

08011b86 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 8011b86:	b480      	push	{r7}
 8011b88:	b083      	sub	sp, #12
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b90:	bf00      	nop
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bc80      	pop	{r7}
 8011b98:	4770      	bx	lr

08011b9a <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8011b9a:	b480      	push	{r7}
 8011b9c:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011b9e:	bf00      	nop
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bc80      	pop	{r7}
 8011ba4:	4770      	bx	lr

08011ba6 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8011ba6:	b480      	push	{r7}
 8011ba8:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011baa:	bf00      	nop
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bc80      	pop	{r7}
 8011bb0:	4770      	bx	lr

08011bb2 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b083      	sub	sp, #12
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	4603      	mov	r3, r0
 8011bba:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011bbc:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	370c      	adds	r7, #12
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bc80      	pop	{r7}
 8011bc6:	4770      	bx	lr

08011bc8 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011bd0:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	370c      	adds	r7, #12
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bc80      	pop	{r7}
 8011bda:	4770      	bx	lr

08011bdc <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b083      	sub	sp, #12
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011be4:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bc80      	pop	{r7}
 8011bee:	4770      	bx	lr

08011bf0 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8011bf0:	b480      	push	{r7}
 8011bf2:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011bf4:	bf00      	nop
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bc80      	pop	{r7}
 8011bfa:	4770      	bx	lr

08011bfc <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	4603      	mov	r3, r0
 8011c04:	6039      	str	r1, [r7, #0]
 8011c06:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8011c08:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bc80      	pop	{r7}
 8011c12:	4770      	bx	lr

08011c14 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8011c14:	b480      	push	{r7}
 8011c16:	b083      	sub	sp, #12
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	603a      	str	r2, [r7, #0]
 8011c1e:	80fb      	strh	r3, [r7, #6]
 8011c20:	460b      	mov	r3, r1
 8011c22:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c24:	bf00      	nop
 8011c26:	370c      	adds	r7, #12
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bc80      	pop	{r7}
 8011c2c:	4770      	bx	lr

08011c2e <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8011c2e:	b480      	push	{r7}
 8011c30:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c32:	bf00      	nop
 8011c34:	46bd      	mov	sp, r7
 8011c36:	bc80      	pop	{r7}
 8011c38:	4770      	bx	lr

08011c3a <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8011c3a:	b480      	push	{r7}
 8011c3c:	b083      	sub	sp, #12
 8011c3e:	af00      	add	r7, sp, #0
 8011c40:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8011c42:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bc80      	pop	{r7}
 8011c4c:	4770      	bx	lr

08011c4e <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 8011c4e:	b480      	push	{r7}
 8011c50:	b083      	sub	sp, #12
 8011c52:	af00      	add	r7, sp, #0
 8011c54:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8011c56:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c58:	4618      	mov	r0, r3
 8011c5a:	370c      	adds	r7, #12
 8011c5c:	46bd      	mov	sp, r7
 8011c5e:	bc80      	pop	{r7}
 8011c60:	4770      	bx	lr

08011c62 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 8011c62:	b480      	push	{r7}
 8011c64:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c66:	bf00      	nop
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bc80      	pop	{r7}
 8011c6c:	4770      	bx	lr

08011c6e <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 8011c6e:	b480      	push	{r7}
 8011c70:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011c72:	bf00      	nop
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bc80      	pop	{r7}
 8011c78:	4770      	bx	lr

08011c7a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 8011c7a:	b480      	push	{r7}
 8011c7c:	b085      	sub	sp, #20
 8011c7e:	af00      	add	r7, sp, #0
 8011c80:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011c86:	2300      	movs	r3, #0
 8011c88:	81fb      	strh	r3, [r7, #14]
 8011c8a:	e00a      	b.n	8011ca2 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 8011c8c:	89fb      	ldrh	r3, [r7, #14]
 8011c8e:	68ba      	ldr	r2, [r7, #8]
 8011c90:	4413      	add	r3, r2
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d001      	beq.n	8011c9c <IsSlotFree+0x22>
        {
            return false;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	e006      	b.n	8011caa <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011c9c:	89fb      	ldrh	r3, [r7, #14]
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	81fb      	strh	r3, [r7, #14]
 8011ca2:	89fb      	ldrh	r3, [r7, #14]
 8011ca4:	2b0f      	cmp	r3, #15
 8011ca6:	d9f1      	bls.n	8011c8c <IsSlotFree+0x12>
        }
    }
    return true;
 8011ca8:	2301      	movs	r3, #1
}
 8011caa:	4618      	mov	r0, r3
 8011cac:	3714      	adds	r7, #20
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	bc80      	pop	{r7}
 8011cb2:	4770      	bx	lr

08011cb4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011cbe:	e007      	b.n	8011cd0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8011cc0:	79fb      	ldrb	r3, [r7, #7]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8011cc6:	79fb      	ldrb	r3, [r7, #7]
 8011cc8:	2b0f      	cmp	r3, #15
 8011cca:	d101      	bne.n	8011cd0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	e012      	b.n	8011cf6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8011cd0:	79fb      	ldrb	r3, [r7, #7]
 8011cd2:	011b      	lsls	r3, r3, #4
 8011cd4:	3308      	adds	r3, #8
 8011cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8011d00 <MallocNewMacCommandSlot+0x4c>)
 8011cd8:	4413      	add	r3, r2
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7ff ffcd 	bl	8011c7a <IsSlotFree>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	f083 0301 	eor.w	r3, r3, #1
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d1e9      	bne.n	8011cc0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8011cec:	79fb      	ldrb	r3, [r7, #7]
 8011cee:	011b      	lsls	r3, r3, #4
 8011cf0:	3308      	adds	r3, #8
 8011cf2:	4a03      	ldr	r2, [pc, #12]	@ (8011d00 <MallocNewMacCommandSlot+0x4c>)
 8011cf4:	4413      	add	r3, r2
}
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	3708      	adds	r7, #8
 8011cfa:	46bd      	mov	sp, r7
 8011cfc:	bd80      	pop	{r7, pc}
 8011cfe:	bf00      	nop
 8011d00:	20001914 	.word	0x20001914

08011d04 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d101      	bne.n	8011d16 <FreeMacCommandSlot+0x12>
    {
        return false;
 8011d12:	2300      	movs	r3, #0
 8011d14:	e005      	b.n	8011d22 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011d16:	2210      	movs	r2, #16
 8011d18:	2100      	movs	r1, #0
 8011d1a:	6878      	ldr	r0, [r7, #4]
 8011d1c:	f005 fdb0 	bl	8017880 <memset1>

    return true;
 8011d20:	2301      	movs	r3, #1
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8011d2a:	b480      	push	{r7}
 8011d2c:	b083      	sub	sp, #12
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d101      	bne.n	8011d3c <LinkedListInit+0x12>
    {
        return false;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	e006      	b.n	8011d4a <LinkedListInit+0x20>
    }

    list->First = NULL;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	605a      	str	r2, [r3, #4]

    return true;
 8011d48:	2301      	movs	r3, #1
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	370c      	adds	r7, #12
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bc80      	pop	{r7}
 8011d52:	4770      	bx	lr

08011d54 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8011d54:	b480      	push	{r7}
 8011d56:	b083      	sub	sp, #12
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
 8011d5c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d002      	beq.n	8011d6a <LinkedListAdd+0x16>
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d101      	bne.n	8011d6e <LinkedListAdd+0x1a>
    {
        return false;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e015      	b.n	8011d9a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d102      	bne.n	8011d7c <LinkedListAdd+0x28>
    {
        list->First = element;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	683a      	ldr	r2, [r7, #0]
 8011d7a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	685b      	ldr	r3, [r3, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d003      	beq.n	8011d8c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	685b      	ldr	r3, [r3, #4]
 8011d88:	683a      	ldr	r2, [r7, #0]
 8011d8a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	2200      	movs	r2, #0
 8011d90:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	683a      	ldr	r2, [r7, #0]
 8011d96:	605a      	str	r2, [r3, #4]

    return true;
 8011d98:	2301      	movs	r3, #1
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	370c      	adds	r7, #12
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bc80      	pop	{r7}
 8011da2:	4770      	bx	lr

08011da4 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8011da4:	b480      	push	{r7}
 8011da6:	b085      	sub	sp, #20
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d002      	beq.n	8011dba <LinkedListGetPrevious+0x16>
 8011db4:	683b      	ldr	r3, [r7, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d101      	bne.n	8011dbe <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	e016      	b.n	8011dec <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d00c      	beq.n	8011de6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011dcc:	e002      	b.n	8011dd4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d007      	beq.n	8011dea <LinkedListGetPrevious+0x46>
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	683a      	ldr	r2, [r7, #0]
 8011de0:	429a      	cmp	r2, r3
 8011de2:	d1f4      	bne.n	8011dce <LinkedListGetPrevious+0x2a>
 8011de4:	e001      	b.n	8011dea <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8011de6:	2300      	movs	r3, #0
 8011de8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8011dea:	68fb      	ldr	r3, [r7, #12]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3714      	adds	r7, #20
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bc80      	pop	{r7}
 8011df4:	4770      	bx	lr

08011df6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b084      	sub	sp, #16
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d002      	beq.n	8011e0c <LinkedListRemove+0x16>
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d101      	bne.n	8011e10 <LinkedListRemove+0x1a>
    {
        return false;
 8011e0c:	2300      	movs	r3, #0
 8011e0e:	e020      	b.n	8011e52 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8011e10:	6839      	ldr	r1, [r7, #0]
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7ff ffc6 	bl	8011da4 <LinkedListGetPrevious>
 8011e18:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	683a      	ldr	r2, [r7, #0]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d103      	bne.n	8011e2c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	683a      	ldr	r2, [r7, #0]
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d102      	bne.n	8011e3c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	68fa      	ldr	r2, [r7, #12]
 8011e3a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d003      	beq.n	8011e4a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	681a      	ldr	r2, [r3, #0]
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2200      	movs	r2, #0
 8011e4e:	601a      	str	r2, [r3, #0]

    return true;
 8011e50:	2301      	movs	r3, #1
}
 8011e52:	4618      	mov	r0, r3
 8011e54:	3710      	adds	r7, #16
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}

08011e5a <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8011e5a:	b480      	push	{r7}
 8011e5c:	b083      	sub	sp, #12
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	4603      	mov	r3, r0
 8011e62:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8011e64:	79fb      	ldrb	r3, [r7, #7]
 8011e66:	2b05      	cmp	r3, #5
 8011e68:	d004      	beq.n	8011e74 <IsSticky+0x1a>
 8011e6a:	2b05      	cmp	r3, #5
 8011e6c:	db04      	blt.n	8011e78 <IsSticky+0x1e>
 8011e6e:	3b08      	subs	r3, #8
 8011e70:	2b02      	cmp	r3, #2
 8011e72:	d801      	bhi.n	8011e78 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8011e74:	2301      	movs	r3, #1
 8011e76:	e000      	b.n	8011e7a <IsSticky+0x20>
        default:
            return false;
 8011e78:	2300      	movs	r3, #0
    }
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	370c      	adds	r7, #12
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bc80      	pop	{r7}
 8011e82:	4770      	bx	lr

08011e84 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8011e8e:	2300      	movs	r3, #0
    }
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	bc80      	pop	{r7}
 8011e98:	4770      	bx	lr
	...

08011e9c <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011e9c:	b580      	push	{r7, lr}
 8011e9e:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011ea0:	22fc      	movs	r2, #252	@ 0xfc
 8011ea2:	2100      	movs	r1, #0
 8011ea4:	4804      	ldr	r0, [pc, #16]	@ (8011eb8 <LoRaMacCommandsInit+0x1c>)
 8011ea6:	f005 fceb 	bl	8017880 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011eaa:	4803      	ldr	r0, [pc, #12]	@ (8011eb8 <LoRaMacCommandsInit+0x1c>)
 8011eac:	f7ff ff3d 	bl	8011d2a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	20001914 	.word	0x20001914

08011ebc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b086      	sub	sp, #24
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	607a      	str	r2, [r7, #4]
 8011ec8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	e03b      	b.n	8011f4c <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8011ed4:	f7ff feee 	bl	8011cb4 <MallocNewMacCommandSlot>
 8011ed8:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	e033      	b.n	8011f4c <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8011ee4:	6979      	ldr	r1, [r7, #20]
 8011ee6:	481b      	ldr	r0, [pc, #108]	@ (8011f54 <LoRaMacCommandsAddCmd+0x98>)
 8011ee8:	f7ff ff34 	bl	8011d54 <LinkedListAdd>
 8011eec:	4603      	mov	r3, r0
 8011eee:	f083 0301 	eor.w	r3, r3, #1
 8011ef2:	b2db      	uxtb	r3, r3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011ef8:	2305      	movs	r3, #5
 8011efa:	e027      	b.n	8011f4c <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8011efc:	697b      	ldr	r3, [r7, #20]
 8011efe:	7bfa      	ldrb	r2, [r7, #15]
 8011f00:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8011f02:	697b      	ldr	r3, [r7, #20]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	3305      	adds	r3, #5
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	b292      	uxth	r2, r2
 8011f10:	68b9      	ldr	r1, [r7, #8]
 8011f12:	4618      	mov	r0, r3
 8011f14:	f005 fc79 	bl	801780a <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8011f18:	7bfb      	ldrb	r3, [r7, #15]
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7ff ff9d 	bl	8011e5a <IsSticky>
 8011f20:	4603      	mov	r3, r0
 8011f22:	461a      	mov	r2, r3
 8011f24:	697b      	ldr	r3, [r7, #20]
 8011f26:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8011f28:	7bfb      	ldrb	r3, [r7, #15]
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f7ff ffaa 	bl	8011e84 <IsConfirmationRequired>
 8011f30:	4603      	mov	r3, r0
 8011f32:	461a      	mov	r2, r3
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8011f38:	4b06      	ldr	r3, [pc, #24]	@ (8011f54 <LoRaMacCommandsAddCmd+0x98>)
 8011f3a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4413      	add	r3, r2
 8011f42:	3301      	adds	r3, #1
 8011f44:	4a03      	ldr	r2, [pc, #12]	@ (8011f54 <LoRaMacCommandsAddCmd+0x98>)
 8011f46:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8011f4a:	2300      	movs	r3, #0
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3718      	adds	r7, #24
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}
 8011f54:	20001914 	.word	0x20001914

08011f58 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b082      	sub	sp, #8
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d101      	bne.n	8011f6a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8011f66:	2301      	movs	r3, #1
 8011f68:	e021      	b.n	8011fae <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011f6a:	6879      	ldr	r1, [r7, #4]
 8011f6c:	4812      	ldr	r0, [pc, #72]	@ (8011fb8 <LoRaMacCommandsRemoveCmd+0x60>)
 8011f6e:	f7ff ff42 	bl	8011df6 <LinkedListRemove>
 8011f72:	4603      	mov	r3, r0
 8011f74:	f083 0301 	eor.w	r3, r3, #1
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d001      	beq.n	8011f82 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011f7e:	2303      	movs	r3, #3
 8011f80:	e015      	b.n	8011fae <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011f82:	4b0d      	ldr	r3, [pc, #52]	@ (8011fb8 <LoRaMacCommandsRemoveCmd+0x60>)
 8011f84:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	689b      	ldr	r3, [r3, #8]
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	3b01      	subs	r3, #1
 8011f90:	4a09      	ldr	r2, [pc, #36]	@ (8011fb8 <LoRaMacCommandsRemoveCmd+0x60>)
 8011f92:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f7ff feb4 	bl	8011d04 <FreeMacCommandSlot>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	f083 0301 	eor.w	r3, r3, #1
 8011fa2:	b2db      	uxtb	r3, r3
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d001      	beq.n	8011fac <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8011fa8:	2305      	movs	r3, #5
 8011faa:	e000      	b.n	8011fae <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011fac:	2300      	movs	r3, #0
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3708      	adds	r7, #8
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20001914 	.word	0x20001914

08011fbc <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8011fbc:	b480      	push	{r7}
 8011fbe:	b085      	sub	sp, #20
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	6039      	str	r1, [r7, #0]
 8011fc6:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8011fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8012004 <LoRaMacCommandsGetCmd+0x48>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011fce:	e002      	b.n	8011fd6 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d004      	beq.n	8011fe6 <LoRaMacCommandsGetCmd+0x2a>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	791b      	ldrb	r3, [r3, #4]
 8011fe0:	79fa      	ldrb	r2, [r7, #7]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d1f4      	bne.n	8011fd0 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	68fa      	ldr	r2, [r7, #12]
 8011fea:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d101      	bne.n	8011ff6 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011ff2:	2303      	movs	r3, #3
 8011ff4:	e000      	b.n	8011ff8 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8011ff6:	2300      	movs	r3, #0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3714      	adds	r7, #20
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bc80      	pop	{r7}
 8012000:	4770      	bx	lr
 8012002:	bf00      	nop
 8012004:	20001914 	.word	0x20001914

08012008 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801200e:	4b0f      	ldr	r3, [pc, #60]	@ (801204c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012014:	e012      	b.n	801203c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	7b1b      	ldrb	r3, [r3, #12]
 801201a:	f083 0301 	eor.w	r3, r3, #1
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d008      	beq.n	8012036 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7ff ff94 	bl	8011f58 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012030:	683b      	ldr	r3, [r7, #0]
 8012032:	607b      	str	r3, [r7, #4]
 8012034:	e002      	b.n	801203c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d1e9      	bne.n	8012016 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012042:	2300      	movs	r3, #0
}
 8012044:	4618      	mov	r0, r3
 8012046:	3708      	adds	r7, #8
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20001914 	.word	0x20001914

08012050 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012056:	4b13      	ldr	r3, [pc, #76]	@ (80120a4 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 801205c:	e01a      	b.n	8012094 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	791b      	ldrb	r3, [r3, #4]
 8012068:	4618      	mov	r0, r3
 801206a:	f7ff fef6 	bl	8011e5a <IsSticky>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00d      	beq.n	8012090 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	791b      	ldrb	r3, [r3, #4]
 8012078:	4618      	mov	r0, r3
 801207a:	f7ff ff03 	bl	8011e84 <IsConfirmationRequired>
 801207e:	4603      	mov	r3, r0
 8012080:	f083 0301 	eor.w	r3, r3, #1
 8012084:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8012086:	2b00      	cmp	r3, #0
 8012088:	d002      	beq.n	8012090 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7ff ff64 	bl	8011f58 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d1e1      	bne.n	801205e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	20001914 	.word	0x20001914

080120a8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d101      	bne.n	80120ba <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80120b6:	2301      	movs	r3, #1
 80120b8:	e005      	b.n	80120c6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80120ba:	4b05      	ldr	r3, [pc, #20]	@ (80120d0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 80120bc:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	370c      	adds	r7, #12
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bc80      	pop	{r7}
 80120ce:	4770      	bx	lr
 80120d0:	20001914 	.word	0x20001914

080120d4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80120d4:	b580      	push	{r7, lr}
 80120d6:	b088      	sub	sp, #32
 80120d8:	af00      	add	r7, sp, #0
 80120da:	60f8      	str	r0, [r7, #12]
 80120dc:	60b9      	str	r1, [r7, #8]
 80120de:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80120e0:	4b25      	ldr	r3, [pc, #148]	@ (8012178 <LoRaMacCommandsSerializeCmds+0xa4>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 80120e6:	2300      	movs	r3, #0
 80120e8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d002      	beq.n	80120f6 <LoRaMacCommandsSerializeCmds+0x22>
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d126      	bne.n	8012144 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 80120f6:	2301      	movs	r3, #1
 80120f8:	e039      	b.n	801216e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80120fa:	7efb      	ldrb	r3, [r7, #27]
 80120fc:	68fa      	ldr	r2, [r7, #12]
 80120fe:	1ad2      	subs	r2, r2, r3
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	3301      	adds	r3, #1
 8012106:	429a      	cmp	r2, r3
 8012108:	d320      	bcc.n	801214c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 801210a:	7efb      	ldrb	r3, [r7, #27]
 801210c:	1c5a      	adds	r2, r3, #1
 801210e:	76fa      	strb	r2, [r7, #27]
 8012110:	461a      	mov	r2, r3
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4413      	add	r3, r2
 8012116:	69fa      	ldr	r2, [r7, #28]
 8012118:	7912      	ldrb	r2, [r2, #4]
 801211a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 801211c:	7efb      	ldrb	r3, [r7, #27]
 801211e:	687a      	ldr	r2, [r7, #4]
 8012120:	18d0      	adds	r0, r2, r3
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	1d59      	adds	r1, r3, #5
 8012126:	69fb      	ldr	r3, [r7, #28]
 8012128:	689b      	ldr	r3, [r3, #8]
 801212a:	b29b      	uxth	r3, r3
 801212c:	461a      	mov	r2, r3
 801212e:	f005 fb6c 	bl	801780a <memcpy1>
            itr += curElement->PayloadSize;
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	689b      	ldr	r3, [r3, #8]
 8012136:	b2da      	uxtb	r2, r3
 8012138:	7efb      	ldrb	r3, [r7, #27]
 801213a:	4413      	add	r3, r2
 801213c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 801213e:	69fb      	ldr	r3, [r7, #28]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d1d7      	bne.n	80120fa <LoRaMacCommandsSerializeCmds+0x26>
 801214a:	e009      	b.n	8012160 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 801214c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 801214e:	e007      	b.n	8012160 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012156:	69f8      	ldr	r0, [r7, #28]
 8012158:	f7ff fefe 	bl	8011f58 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801215c:	697b      	ldr	r3, [r7, #20]
 801215e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d1f4      	bne.n	8012150 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012166:	68b8      	ldr	r0, [r7, #8]
 8012168:	f7ff ff9e 	bl	80120a8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 801216c:	2300      	movs	r3, #0
}
 801216e:	4618      	mov	r0, r3
 8012170:	3720      	adds	r7, #32
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	20001914 	.word	0x20001914

0801217c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 801217c:	b480      	push	{r7}
 801217e:	b085      	sub	sp, #20
 8012180:	af00      	add	r7, sp, #0
 8012182:	4603      	mov	r3, r0
 8012184:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012186:	2300      	movs	r3, #0
 8012188:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 801218a:	79fb      	ldrb	r3, [r7, #7]
 801218c:	3b02      	subs	r3, #2
 801218e:	2b11      	cmp	r3, #17
 8012190:	d850      	bhi.n	8012234 <LoRaMacCommandsGetCmdSize+0xb8>
 8012192:	a201      	add	r2, pc, #4	@ (adr r2, 8012198 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012198:	080121e1 	.word	0x080121e1
 801219c:	080121e7 	.word	0x080121e7
 80121a0:	080121ed 	.word	0x080121ed
 80121a4:	080121f3 	.word	0x080121f3
 80121a8:	080121f9 	.word	0x080121f9
 80121ac:	080121ff 	.word	0x080121ff
 80121b0:	08012205 	.word	0x08012205
 80121b4:	0801220b 	.word	0x0801220b
 80121b8:	08012211 	.word	0x08012211
 80121bc:	08012235 	.word	0x08012235
 80121c0:	08012235 	.word	0x08012235
 80121c4:	08012217 	.word	0x08012217
 80121c8:	08012235 	.word	0x08012235
 80121cc:	08012235 	.word	0x08012235
 80121d0:	0801221d 	.word	0x0801221d
 80121d4:	08012223 	.word	0x08012223
 80121d8:	08012229 	.word	0x08012229
 80121dc:	0801222f 	.word	0x0801222f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 80121e0:	2303      	movs	r3, #3
 80121e2:	73fb      	strb	r3, [r7, #15]
            break;
 80121e4:	e027      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80121e6:	2305      	movs	r3, #5
 80121e8:	73fb      	strb	r3, [r7, #15]
            break;
 80121ea:	e024      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80121ec:	2302      	movs	r3, #2
 80121ee:	73fb      	strb	r3, [r7, #15]
            break;
 80121f0:	e021      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80121f2:	2305      	movs	r3, #5
 80121f4:	73fb      	strb	r3, [r7, #15]
            break;
 80121f6:	e01e      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80121f8:	2301      	movs	r3, #1
 80121fa:	73fb      	strb	r3, [r7, #15]
            break;
 80121fc:	e01b      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80121fe:	2306      	movs	r3, #6
 8012200:	73fb      	strb	r3, [r7, #15]
            break;
 8012202:	e018      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012204:	2302      	movs	r3, #2
 8012206:	73fb      	strb	r3, [r7, #15]
            break;
 8012208:	e015      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 801220a:	2302      	movs	r3, #2
 801220c:	73fb      	strb	r3, [r7, #15]
            break;
 801220e:	e012      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012210:	2305      	movs	r3, #5
 8012212:	73fb      	strb	r3, [r7, #15]
            break;
 8012214:	e00f      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012216:	2306      	movs	r3, #6
 8012218:	73fb      	strb	r3, [r7, #15]
            break;
 801221a:	e00c      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801221c:	2301      	movs	r3, #1
 801221e:	73fb      	strb	r3, [r7, #15]
            break;
 8012220:	e009      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012222:	2305      	movs	r3, #5
 8012224:	73fb      	strb	r3, [r7, #15]
            break;
 8012226:	e006      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012228:	2304      	movs	r3, #4
 801222a:	73fb      	strb	r3, [r7, #15]
            break;
 801222c:	e003      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 801222e:	2304      	movs	r3, #4
 8012230:	73fb      	strb	r3, [r7, #15]
            break;
 8012232:	e000      	b.n	8012236 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012234:	bf00      	nop
        }
    }
    return cidSize;
 8012236:	7bfb      	ldrb	r3, [r7, #15]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3714      	adds	r7, #20
 801223c:	46bd      	mov	sp, r7
 801223e:	bc80      	pop	{r7}
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop

08012244 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4a07      	ldr	r2, [pc, #28]	@ (801226c <IncreaseBufferPointer+0x28>)
 8012250:	4293      	cmp	r3, r2
 8012252:	d102      	bne.n	801225a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012254:	4b06      	ldr	r3, [pc, #24]	@ (8012270 <IncreaseBufferPointer+0x2c>)
 8012256:	607b      	str	r3, [r7, #4]
 8012258:	e002      	b.n	8012260 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	3304      	adds	r3, #4
 801225e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012260:	687b      	ldr	r3, [r7, #4]
}
 8012262:	4618      	mov	r0, r3
 8012264:	370c      	adds	r7, #12
 8012266:	46bd      	mov	sp, r7
 8012268:	bc80      	pop	{r7}
 801226a:	4770      	bx	lr
 801226c:	20001a2c 	.word	0x20001a2c
 8012270:	20001a1c 	.word	0x20001a1c

08012274 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012274:	b480      	push	{r7}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	4603      	mov	r3, r0
 801227c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 801227e:	79fb      	ldrb	r3, [r7, #7]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d101      	bne.n	8012288 <IsListEmpty+0x14>
    {
        return true;
 8012284:	2301      	movs	r3, #1
 8012286:	e000      	b.n	801228a <IsListEmpty+0x16>
    }
    return false;
 8012288:	2300      	movs	r3, #0
}
 801228a:	4618      	mov	r0, r3
 801228c:	370c      	adds	r7, #12
 801228e:	46bd      	mov	sp, r7
 8012290:	bc80      	pop	{r7}
 8012292:	4770      	bx	lr

08012294 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012294:	b480      	push	{r7}
 8012296:	b083      	sub	sp, #12
 8012298:	af00      	add	r7, sp, #0
 801229a:	4603      	mov	r3, r0
 801229c:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801229e:	79fb      	ldrb	r3, [r7, #7]
 80122a0:	2b04      	cmp	r3, #4
 80122a2:	d901      	bls.n	80122a8 <IsListFull+0x14>
    {
        return true;
 80122a4:	2301      	movs	r3, #1
 80122a6:	e000      	b.n	80122aa <IsListFull+0x16>
    }
    return false;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	370c      	adds	r7, #12
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bc80      	pop	{r7}
 80122b2:	4770      	bx	lr

080122b4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b086      	sub	sp, #24
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	60b9      	str	r1, [r7, #8]
 80122be:	607a      	str	r2, [r7, #4]
 80122c0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80122c6:	4b13      	ldr	r3, [pc, #76]	@ (8012314 <GetElement+0x60>)
 80122c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80122cc:	4618      	mov	r0, r3
 80122ce:	f7ff ffd1 	bl	8012274 <IsListEmpty>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <GetElement+0x28>
    {
        return NULL;
 80122d8:	2300      	movs	r3, #0
 80122da:	e017      	b.n	801230c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80122dc:	2300      	movs	r3, #0
 80122de:	74fb      	strb	r3, [r7, #19]
 80122e0:	e00d      	b.n	80122fe <GetElement+0x4a>
    {
        if( element->Request == request )
 80122e2:	697b      	ldr	r3, [r7, #20]
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	7bfa      	ldrb	r2, [r7, #15]
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d101      	bne.n	80122f0 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	e00d      	b.n	801230c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80122f0:	6978      	ldr	r0, [r7, #20]
 80122f2:	f7ff ffa7 	bl	8012244 <IncreaseBufferPointer>
 80122f6:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80122f8:	7cfb      	ldrb	r3, [r7, #19]
 80122fa:	3301      	adds	r3, #1
 80122fc:	74fb      	strb	r3, [r7, #19]
 80122fe:	4b05      	ldr	r3, [pc, #20]	@ (8012314 <GetElement+0x60>)
 8012300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012304:	7cfa      	ldrb	r2, [r7, #19]
 8012306:	429a      	cmp	r2, r3
 8012308:	d3eb      	bcc.n	80122e2 <GetElement+0x2e>
    }

    return NULL;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3718      	adds	r7, #24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	20001a10 	.word	0x20001a10

08012318 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b082      	sub	sp, #8
 801231c:	af00      	add	r7, sp, #0
 801231e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012320:	4a0c      	ldr	r2, [pc, #48]	@ (8012354 <LoRaMacConfirmQueueInit+0x3c>)
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012326:	4b0b      	ldr	r3, [pc, #44]	@ (8012354 <LoRaMacConfirmQueueInit+0x3c>)
 8012328:	2200      	movs	r2, #0
 801232a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801232e:	4b09      	ldr	r3, [pc, #36]	@ (8012354 <LoRaMacConfirmQueueInit+0x3c>)
 8012330:	4a09      	ldr	r2, [pc, #36]	@ (8012358 <LoRaMacConfirmQueueInit+0x40>)
 8012332:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012334:	4b07      	ldr	r3, [pc, #28]	@ (8012354 <LoRaMacConfirmQueueInit+0x3c>)
 8012336:	4a08      	ldr	r2, [pc, #32]	@ (8012358 <LoRaMacConfirmQueueInit+0x40>)
 8012338:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801233a:	2214      	movs	r2, #20
 801233c:	21ff      	movs	r1, #255	@ 0xff
 801233e:	4806      	ldr	r0, [pc, #24]	@ (8012358 <LoRaMacConfirmQueueInit+0x40>)
 8012340:	f005 fa9e 	bl	8017880 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012344:	4b03      	ldr	r3, [pc, #12]	@ (8012354 <LoRaMacConfirmQueueInit+0x3c>)
 8012346:	2201      	movs	r2, #1
 8012348:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 801234c:	bf00      	nop
 801234e:	3708      	adds	r7, #8
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	20001a10 	.word	0x20001a10
 8012358:	20001a1c 	.word	0x20001a1c

0801235c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b082      	sub	sp, #8
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012364:	4b19      	ldr	r3, [pc, #100]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 8012366:	f893 3020 	ldrb.w	r3, [r3, #32]
 801236a:	4618      	mov	r0, r3
 801236c:	f7ff ff92 	bl	8012294 <IsListFull>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d001      	beq.n	801237a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012376:	2300      	movs	r3, #0
 8012378:	e023      	b.n	80123c2 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 801237a:	4b14      	ldr	r3, [pc, #80]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 801237c:	689b      	ldr	r3, [r3, #8]
 801237e:	687a      	ldr	r2, [r7, #4]
 8012380:	7812      	ldrb	r2, [r2, #0]
 8012382:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012384:	4b11      	ldr	r3, [pc, #68]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 8012386:	689b      	ldr	r3, [r3, #8]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	7852      	ldrb	r2, [r2, #1]
 801238c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 801238e:	4b0f      	ldr	r3, [pc, #60]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	78d2      	ldrb	r2, [r2, #3]
 8012396:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8012398:	4b0c      	ldr	r3, [pc, #48]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 801239a:	689b      	ldr	r3, [r3, #8]
 801239c:	2200      	movs	r2, #0
 801239e:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80123a0:	4b0a      	ldr	r3, [pc, #40]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 80123a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123a6:	3301      	adds	r3, #1
 80123a8:	b2da      	uxtb	r2, r3
 80123aa:	4b08      	ldr	r3, [pc, #32]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 80123ac:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 80123b0:	4b06      	ldr	r3, [pc, #24]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 80123b2:	689b      	ldr	r3, [r3, #8]
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7ff ff45 	bl	8012244 <IncreaseBufferPointer>
 80123ba:	4603      	mov	r3, r0
 80123bc:	4a03      	ldr	r2, [pc, #12]	@ (80123cc <LoRaMacConfirmQueueAdd+0x70>)
 80123be:	6093      	str	r3, [r2, #8]

    return true;
 80123c0:	2301      	movs	r3, #1
}
 80123c2:	4618      	mov	r0, r3
 80123c4:	3708      	adds	r7, #8
 80123c6:	46bd      	mov	sp, r7
 80123c8:	bd80      	pop	{r7, pc}
 80123ca:	bf00      	nop
 80123cc:	20001a10 	.word	0x20001a10

080123d0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80123d4:	4b0e      	ldr	r3, [pc, #56]	@ (8012410 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80123d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff ff4a 	bl	8012274 <IsListEmpty>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d001      	beq.n	80123ea <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 80123e6:	2300      	movs	r3, #0
 80123e8:	e010      	b.n	801240c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80123ea:	4b09      	ldr	r3, [pc, #36]	@ (8012410 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80123ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	4b06      	ldr	r3, [pc, #24]	@ (8012410 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80123f6:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80123fa:	4b05      	ldr	r3, [pc, #20]	@ (8012410 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80123fc:	685b      	ldr	r3, [r3, #4]
 80123fe:	4618      	mov	r0, r3
 8012400:	f7ff ff20 	bl	8012244 <IncreaseBufferPointer>
 8012404:	4603      	mov	r3, r0
 8012406:	4a02      	ldr	r2, [pc, #8]	@ (8012410 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012408:	6053      	str	r3, [r2, #4]

    return true;
 801240a:	2301      	movs	r3, #1
}
 801240c:	4618      	mov	r0, r3
 801240e:	bd80      	pop	{r7, pc}
 8012410:	20001a10 	.word	0x20001a10

08012414 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	4603      	mov	r3, r0
 801241c:	460a      	mov	r2, r1
 801241e:	71fb      	strb	r3, [r7, #7]
 8012420:	4613      	mov	r3, r2
 8012422:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012424:	2300      	movs	r3, #0
 8012426:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012428:	4b10      	ldr	r3, [pc, #64]	@ (801246c <LoRaMacConfirmQueueSetStatus+0x58>)
 801242a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801242e:	4618      	mov	r0, r3
 8012430:	f7ff ff20 	bl	8012274 <IsListEmpty>
 8012434:	4603      	mov	r3, r0
 8012436:	f083 0301 	eor.w	r3, r3, #1
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b00      	cmp	r3, #0
 801243e:	d011      	beq.n	8012464 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012440:	4b0a      	ldr	r3, [pc, #40]	@ (801246c <LoRaMacConfirmQueueSetStatus+0x58>)
 8012442:	6859      	ldr	r1, [r3, #4]
 8012444:	4b09      	ldr	r3, [pc, #36]	@ (801246c <LoRaMacConfirmQueueSetStatus+0x58>)
 8012446:	689a      	ldr	r2, [r3, #8]
 8012448:	79bb      	ldrb	r3, [r7, #6]
 801244a:	4618      	mov	r0, r3
 801244c:	f7ff ff32 	bl	80122b4 <GetElement>
 8012450:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d005      	beq.n	8012464 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	79fa      	ldrb	r2, [r7, #7]
 801245c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	2201      	movs	r2, #1
 8012462:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012464:	bf00      	nop
 8012466:	3710      	adds	r7, #16
 8012468:	46bd      	mov	sp, r7
 801246a:	bd80      	pop	{r7, pc}
 801246c:	20001a10 	.word	0x20001a10

08012470 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	4603      	mov	r3, r0
 8012478:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 801247a:	2300      	movs	r3, #0
 801247c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801247e:	4b10      	ldr	r3, [pc, #64]	@ (80124c0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012484:	4618      	mov	r0, r3
 8012486:	f7ff fef5 	bl	8012274 <IsListEmpty>
 801248a:	4603      	mov	r3, r0
 801248c:	f083 0301 	eor.w	r3, r3, #1
 8012490:	b2db      	uxtb	r3, r3
 8012492:	2b00      	cmp	r3, #0
 8012494:	d00e      	beq.n	80124b4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012496:	4b0a      	ldr	r3, [pc, #40]	@ (80124c0 <LoRaMacConfirmQueueGetStatus+0x50>)
 8012498:	6859      	ldr	r1, [r3, #4]
 801249a:	4b09      	ldr	r3, [pc, #36]	@ (80124c0 <LoRaMacConfirmQueueGetStatus+0x50>)
 801249c:	689a      	ldr	r2, [r3, #8]
 801249e:	79fb      	ldrb	r3, [r7, #7]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7ff ff07 	bl	80122b4 <GetElement>
 80124a6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d002      	beq.n	80124b4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	785b      	ldrb	r3, [r3, #1]
 80124b2:	e000      	b.n	80124b6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80124b4:	2301      	movs	r3, #1
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	20001a10 	.word	0x20001a10

080124c4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	b084      	sub	sp, #16
 80124c8:	af00      	add	r7, sp, #0
 80124ca:	4603      	mov	r3, r0
 80124cc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80124ce:	4b16      	ldr	r3, [pc, #88]	@ (8012528 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80124d0:	685b      	ldr	r3, [r3, #4]
 80124d2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80124d4:	4a14      	ldr	r2, [pc, #80]	@ (8012528 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80124d6:	79fb      	ldrb	r3, [r7, #7]
 80124d8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80124dc:	4b12      	ldr	r3, [pc, #72]	@ (8012528 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80124de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80124e2:	4618      	mov	r0, r3
 80124e4:	f7ff fec6 	bl	8012274 <IsListEmpty>
 80124e8:	4603      	mov	r3, r0
 80124ea:	f083 0301 	eor.w	r3, r3, #1
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d015      	beq.n	8012520 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	79fa      	ldrb	r2, [r7, #7]
 80124f8:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	78db      	ldrb	r3, [r3, #3]
 80124fe:	f083 0301 	eor.w	r3, r3, #1
 8012502:	b2db      	uxtb	r3, r3
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	2201      	movs	r2, #1
 801250c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801250e:	68f8      	ldr	r0, [r7, #12]
 8012510:	f7ff fe98 	bl	8012244 <IncreaseBufferPointer>
 8012514:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8012516:	4b04      	ldr	r3, [pc, #16]	@ (8012528 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8012518:	689b      	ldr	r3, [r3, #8]
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	429a      	cmp	r2, r3
 801251e:	d1e9      	bne.n	80124f4 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8012520:	bf00      	nop
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	20001a10 	.word	0x20001a10

0801252c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b082      	sub	sp, #8
 8012530:	af00      	add	r7, sp, #0
 8012532:	4603      	mov	r3, r0
 8012534:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8012536:	4b09      	ldr	r3, [pc, #36]	@ (801255c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8012538:	6859      	ldr	r1, [r3, #4]
 801253a:	4b08      	ldr	r3, [pc, #32]	@ (801255c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801253c:	689a      	ldr	r2, [r3, #8]
 801253e:	79fb      	ldrb	r3, [r7, #7]
 8012540:	4618      	mov	r0, r3
 8012542:	f7ff feb7 	bl	80122b4 <GetElement>
 8012546:	4603      	mov	r3, r0
 8012548:	2b00      	cmp	r3, #0
 801254a:	d001      	beq.n	8012550 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801254c:	2301      	movs	r3, #1
 801254e:	e000      	b.n	8012552 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8012550:	2300      	movs	r3, #0
}
 8012552:	4618      	mov	r0, r3
 8012554:	3708      	adds	r7, #8
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}
 801255a:	bf00      	nop
 801255c:	20001a10 	.word	0x20001a10

08012560 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8012560:	b580      	push	{r7, lr}
 8012562:	b084      	sub	sp, #16
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012568:	4b25      	ldr	r3, [pc, #148]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801256a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801256e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8012570:	2300      	movs	r3, #0
 8012572:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8012574:	f107 0308 	add.w	r3, r7, #8
 8012578:	2204      	movs	r2, #4
 801257a:	2100      	movs	r1, #0
 801257c:	4618      	mov	r0, r3
 801257e:	f005 f97f 	bl	8017880 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8012582:	2300      	movs	r3, #0
 8012584:	73fb      	strb	r3, [r7, #15]
 8012586:	e032      	b.n	80125ee <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8012588:	4b1d      	ldr	r3, [pc, #116]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	781a      	ldrb	r2, [r3, #0]
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8012592:	4b1b      	ldr	r3, [pc, #108]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	785a      	ldrb	r2, [r3, #1]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 801259c:	4b18      	ldr	r3, [pc, #96]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	789b      	ldrb	r3, [r3, #2]
 80125a2:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80125a4:	7b7b      	ldrb	r3, [r7, #13]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d005      	beq.n	80125b6 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80125aa:	4b15      	ldr	r3, [pc, #84]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	689b      	ldr	r3, [r3, #8]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	4798      	blx	r3
 80125b4:	e00b      	b.n	80125ce <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80125b6:	4b12      	ldr	r3, [pc, #72]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80125be:	4b10      	ldr	r3, [pc, #64]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80125c0:	685b      	ldr	r3, [r3, #4]
 80125c2:	785b      	ldrb	r3, [r3, #1]
 80125c4:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80125c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012600 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80125c8:	685b      	ldr	r3, [r3, #4]
 80125ca:	78db      	ldrb	r3, [r3, #3]
 80125cc:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80125ce:	f7ff feff 	bl	80123d0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80125d2:	7b7b      	ldrb	r3, [r7, #13]
 80125d4:	f083 0301 	eor.w	r3, r3, #1
 80125d8:	b2db      	uxtb	r3, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d004      	beq.n	80125e8 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80125de:	f107 0308 	add.w	r3, r7, #8
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7ff feba 	bl	801235c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80125e8:	7bfb      	ldrb	r3, [r7, #15]
 80125ea:	3301      	adds	r3, #1
 80125ec:	73fb      	strb	r3, [r7, #15]
 80125ee:	7bfa      	ldrb	r2, [r7, #15]
 80125f0:	7bbb      	ldrb	r3, [r7, #14]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d3c8      	bcc.n	8012588 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80125f6:	bf00      	nop
 80125f8:	bf00      	nop
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20001a10 	.word	0x20001a10

08012604 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8012604:	b480      	push	{r7}
 8012606:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8012608:	4b03      	ldr	r3, [pc, #12]	@ (8012618 <LoRaMacConfirmQueueGetCnt+0x14>)
 801260a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801260e:	4618      	mov	r0, r3
 8012610:	46bd      	mov	sp, r7
 8012612:	bc80      	pop	{r7}
 8012614:	4770      	bx	lr
 8012616:	bf00      	nop
 8012618:	20001a10 	.word	0x20001a10

0801261c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801261c:	b580      	push	{r7, lr}
 801261e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012620:	4b06      	ldr	r3, [pc, #24]	@ (801263c <LoRaMacConfirmQueueIsFull+0x20>)
 8012622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012626:	4618      	mov	r0, r3
 8012628:	f7ff fe34 	bl	8012294 <IsListFull>
 801262c:	4603      	mov	r3, r0
 801262e:	2b00      	cmp	r3, #0
 8012630:	d001      	beq.n	8012636 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8012632:	2301      	movs	r3, #1
 8012634:	e000      	b.n	8012638 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8012636:	2300      	movs	r3, #0
    }
}
 8012638:	4618      	mov	r0, r3
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20001a10 	.word	0x20001a10

08012640 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8012640:	b580      	push	{r7, lr}
 8012642:	b08e      	sub	sp, #56	@ 0x38
 8012644:	af00      	add	r7, sp, #0
 8012646:	60f8      	str	r0, [r7, #12]
 8012648:	607b      	str	r3, [r7, #4]
 801264a:	460b      	mov	r3, r1
 801264c:	817b      	strh	r3, [r7, #10]
 801264e:	4613      	mov	r3, r2
 8012650:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	2b00      	cmp	r3, #0
 8012656:	d101      	bne.n	801265c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012658:	230a      	movs	r3, #10
 801265a:	e084      	b.n	8012766 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 801265c:	2300      	movs	r3, #0
 801265e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8012662:	2301      	movs	r3, #1
 8012664:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8012666:	f107 0320 	add.w	r3, r7, #32
 801266a:	2200      	movs	r2, #0
 801266c:	601a      	str	r2, [r3, #0]
 801266e:	605a      	str	r2, [r3, #4]
 8012670:	609a      	str	r2, [r3, #8]
 8012672:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8012674:	f107 0310 	add.w	r3, r7, #16
 8012678:	2200      	movs	r2, #0
 801267a:	601a      	str	r2, [r3, #0]
 801267c:	605a      	str	r2, [r3, #4]
 801267e:	609a      	str	r2, [r3, #8]
 8012680:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8012682:	2301      	movs	r3, #1
 8012684:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8012686:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801268a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	b2db      	uxtb	r3, r3
 8012690:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	0a1b      	lsrs	r3, r3, #8
 8012696:	b2db      	uxtb	r3, r3
 8012698:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	0c1b      	lsrs	r3, r3, #16
 801269e:	b2db      	uxtb	r3, r3
 80126a0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	0e1b      	lsrs	r3, r3, #24
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80126aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80126b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126b2:	0a1b      	lsrs	r3, r3, #8
 80126b4:	b2db      	uxtb	r3, r3
 80126b6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80126b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126ba:	0c1b      	lsrs	r3, r3, #16
 80126bc:	b2db      	uxtb	r3, r3
 80126be:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80126c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80126c2:	0e1b      	lsrs	r3, r3, #24
 80126c4:	b2db      	uxtb	r3, r3
 80126c6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80126c8:	e048      	b.n	801275c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 80126ca:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80126d0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80126d2:	3301      	adds	r3, #1
 80126d4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80126d6:	f107 0320 	add.w	r3, r7, #32
 80126da:	7a7a      	ldrb	r2, [r7, #9]
 80126dc:	f107 0010 	add.w	r0, r7, #16
 80126e0:	2110      	movs	r1, #16
 80126e2:	f7f8 fdf7 	bl	800b2d4 <SecureElementAesEncrypt>
 80126e6:	4603      	mov	r3, r0
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d001      	beq.n	80126f0 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80126ec:	230f      	movs	r3, #15
 80126ee:	e03a      	b.n	8012766 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80126f0:	2300      	movs	r3, #0
 80126f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80126f6:	e01e      	b.n	8012736 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80126f8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80126fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012700:	4413      	add	r3, r2
 8012702:	461a      	mov	r2, r3
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	4413      	add	r3, r2
 8012708:	7819      	ldrb	r1, [r3, #0]
 801270a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801270e:	3338      	adds	r3, #56	@ 0x38
 8012710:	443b      	add	r3, r7
 8012712:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8012716:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801271a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801271e:	4403      	add	r3, r0
 8012720:	4618      	mov	r0, r3
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	4403      	add	r3, r0
 8012726:	404a      	eors	r2, r1
 8012728:	b2d2      	uxtb	r2, r2
 801272a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801272c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8012730:	3301      	adds	r3, #1
 8012732:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8012736:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801273a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801273e:	2a10      	cmp	r2, #16
 8012740:	bfa8      	it	ge
 8012742:	2210      	movge	r2, #16
 8012744:	b212      	sxth	r2, r2
 8012746:	4293      	cmp	r3, r2
 8012748:	dbd6      	blt.n	80126f8 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 801274a:	897b      	ldrh	r3, [r7, #10]
 801274c:	3b10      	subs	r3, #16
 801274e:	b29b      	uxth	r3, r3
 8012750:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8012752:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012756:	3310      	adds	r3, #16
 8012758:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801275c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8012760:	2b00      	cmp	r3, #0
 8012762:	dcb2      	bgt.n	80126ca <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012764:	2300      	movs	r3, #0
}
 8012766:	4618      	mov	r0, r3
 8012768:	3738      	adds	r7, #56	@ 0x38
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801276e:	b490      	push	{r4, r7}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	4604      	mov	r4, r0
 8012776:	4608      	mov	r0, r1
 8012778:	4611      	mov	r1, r2
 801277a:	461a      	mov	r2, r3
 801277c:	4623      	mov	r3, r4
 801277e:	80fb      	strh	r3, [r7, #6]
 8012780:	4603      	mov	r3, r0
 8012782:	717b      	strb	r3, [r7, #5]
 8012784:	460b      	mov	r3, r1
 8012786:	713b      	strb	r3, [r7, #4]
 8012788:	4613      	mov	r3, r2
 801278a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d101      	bne.n	8012796 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012792:	230a      	movs	r3, #10
 8012794:	e04e      	b.n	8012834 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8012796:	69bb      	ldr	r3, [r7, #24]
 8012798:	2249      	movs	r2, #73	@ 0x49
 801279a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	3301      	adds	r3, #1
 80127a0:	2200      	movs	r2, #0
 80127a2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80127a4:	69bb      	ldr	r3, [r7, #24]
 80127a6:	3302      	adds	r3, #2
 80127a8:	2200      	movs	r2, #0
 80127aa:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	3303      	adds	r3, #3
 80127b0:	2200      	movs	r2, #0
 80127b2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	3304      	adds	r3, #4
 80127b8:	2200      	movs	r2, #0
 80127ba:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80127bc:	69bb      	ldr	r3, [r7, #24]
 80127be:	3305      	adds	r3, #5
 80127c0:	78fa      	ldrb	r2, [r7, #3]
 80127c2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	3306      	adds	r3, #6
 80127c8:	693a      	ldr	r2, [r7, #16]
 80127ca:	b2d2      	uxtb	r2, r2
 80127cc:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	0a1a      	lsrs	r2, r3, #8
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	3307      	adds	r3, #7
 80127d6:	b2d2      	uxtb	r2, r2
 80127d8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	0c1a      	lsrs	r2, r3, #16
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	3308      	adds	r3, #8
 80127e2:	b2d2      	uxtb	r2, r2
 80127e4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	0e1a      	lsrs	r2, r3, #24
 80127ea:	69bb      	ldr	r3, [r7, #24]
 80127ec:	3309      	adds	r3, #9
 80127ee:	b2d2      	uxtb	r2, r2
 80127f0:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	330a      	adds	r3, #10
 80127f6:	697a      	ldr	r2, [r7, #20]
 80127f8:	b2d2      	uxtb	r2, r2
 80127fa:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80127fc:	697b      	ldr	r3, [r7, #20]
 80127fe:	0a1a      	lsrs	r2, r3, #8
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	330b      	adds	r3, #11
 8012804:	b2d2      	uxtb	r2, r2
 8012806:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	0c1a      	lsrs	r2, r3, #16
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	330c      	adds	r3, #12
 8012810:	b2d2      	uxtb	r2, r2
 8012812:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8012814:	697b      	ldr	r3, [r7, #20]
 8012816:	0e1a      	lsrs	r2, r3, #24
 8012818:	69bb      	ldr	r3, [r7, #24]
 801281a:	330d      	adds	r3, #13
 801281c:	b2d2      	uxtb	r2, r2
 801281e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	330e      	adds	r3, #14
 8012824:	2200      	movs	r2, #0
 8012826:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	330f      	adds	r3, #15
 801282c:	88fa      	ldrh	r2, [r7, #6]
 801282e:	b2d2      	uxtb	r2, r2
 8012830:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012832:	2300      	movs	r3, #0
}
 8012834:	4618      	mov	r0, r3
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bc90      	pop	{r4, r7}
 801283c:	4770      	bx	lr

0801283e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801283e:	b590      	push	{r4, r7, lr}
 8012840:	b08b      	sub	sp, #44	@ 0x2c
 8012842:	af04      	add	r7, sp, #16
 8012844:	6078      	str	r0, [r7, #4]
 8012846:	4608      	mov	r0, r1
 8012848:	4611      	mov	r1, r2
 801284a:	461a      	mov	r2, r3
 801284c:	4603      	mov	r3, r0
 801284e:	807b      	strh	r3, [r7, #2]
 8012850:	460b      	mov	r3, r1
 8012852:	707b      	strb	r3, [r7, #1]
 8012854:	4613      	mov	r3, r2
 8012856:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d002      	beq.n	8012864 <ComputeCmacB0+0x26>
 801285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012860:	2b00      	cmp	r3, #0
 8012862:	d101      	bne.n	8012868 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012864:	230a      	movs	r3, #10
 8012866:	e024      	b.n	80128b2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012868:	887b      	ldrh	r3, [r7, #2]
 801286a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801286e:	d901      	bls.n	8012874 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012870:	230e      	movs	r3, #14
 8012872:	e01e      	b.n	80128b2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8012874:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8012878:	783a      	ldrb	r2, [r7, #0]
 801287a:	7879      	ldrb	r1, [r7, #1]
 801287c:	8878      	ldrh	r0, [r7, #2]
 801287e:	f107 0308 	add.w	r3, r7, #8
 8012882:	9302      	str	r3, [sp, #8]
 8012884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012886:	9301      	str	r3, [sp, #4]
 8012888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	4623      	mov	r3, r4
 801288e:	f7ff ff6e 	bl	801276e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8012892:	887a      	ldrh	r2, [r7, #2]
 8012894:	7879      	ldrb	r1, [r7, #1]
 8012896:	f107 0008 	add.w	r0, r7, #8
 801289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801289c:	9300      	str	r3, [sp, #0]
 801289e:	460b      	mov	r3, r1
 80128a0:	6879      	ldr	r1, [r7, #4]
 80128a2:	f7f8 fcd1 	bl	800b248 <SecureElementComputeAesCmac>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d001      	beq.n	80128b0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80128ac:	230f      	movs	r3, #15
 80128ae:	e000      	b.n	80128b2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	371c      	adds	r7, #28
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd90      	pop	{r4, r7, pc}

080128ba <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80128ba:	b590      	push	{r4, r7, lr}
 80128bc:	b0cd      	sub	sp, #308	@ 0x134
 80128be:	af04      	add	r7, sp, #16
 80128c0:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80128c4:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80128c8:	6020      	str	r0, [r4, #0]
 80128ca:	460c      	mov	r4, r1
 80128cc:	4610      	mov	r0, r2
 80128ce:	4619      	mov	r1, r3
 80128d0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128d4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80128d8:	4622      	mov	r2, r4
 80128da:	801a      	strh	r2, [r3, #0]
 80128dc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128e0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80128e4:	4602      	mov	r2, r0
 80128e6:	701a      	strb	r2, [r3, #0]
 80128e8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80128f0:	460a      	mov	r2, r1
 80128f2:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80128f4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80128f8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d101      	bne.n	8012906 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012902:	230a      	movs	r3, #10
 8012904:	e063      	b.n	80129ce <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8012906:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801290a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801290e:	881b      	ldrh	r3, [r3, #0]
 8012910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012914:	d901      	bls.n	801291a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8012916:	230e      	movs	r3, #14
 8012918:	e059      	b.n	80129ce <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801291a:	f107 030c 	add.w	r3, r7, #12
 801291e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8012922:	2100      	movs	r1, #0
 8012924:	4618      	mov	r0, r3
 8012926:	f004 ffab 	bl	8017880 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801292a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801292e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012932:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8012936:	781a      	ldrb	r2, [r3, #0]
 8012938:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801293c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8012940:	7819      	ldrb	r1, [r3, #0]
 8012942:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012946:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801294a:	8818      	ldrh	r0, [r3, #0]
 801294c:	f107 030c 	add.w	r3, r7, #12
 8012950:	9302      	str	r3, [sp, #8]
 8012952:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012956:	9301      	str	r3, [sp, #4]
 8012958:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801295c:	9300      	str	r3, [sp, #0]
 801295e:	4623      	mov	r3, r4
 8012960:	f7ff ff05 	bl	801276e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8012964:	f107 030c 	add.w	r3, r7, #12
 8012968:	3310      	adds	r3, #16
 801296a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801296e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8012972:	8812      	ldrh	r2, [r2, #0]
 8012974:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8012978:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801297c:	6809      	ldr	r1, [r1, #0]
 801297e:	4618      	mov	r0, r3
 8012980:	f004 ff43 	bl	801780a <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8012984:	2306      	movs	r3, #6
 8012986:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801298a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801298e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8012992:	881b      	ldrh	r3, [r3, #0]
 8012994:	3310      	adds	r3, #16
 8012996:	4619      	mov	r1, r3
 8012998:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801299c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	f107 000c 	add.w	r0, r7, #12
 80129a6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80129aa:	f7f8 fc67 	bl	800b27c <SecureElementVerifyAesCmac>
 80129ae:	4603      	mov	r3, r0
 80129b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80129b4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d101      	bne.n	80129c0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80129bc:	2300      	movs	r3, #0
 80129be:	e006      	b.n	80129ce <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80129c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80129c4:	2b01      	cmp	r3, #1
 80129c6:	d101      	bne.n	80129cc <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80129c8:	2301      	movs	r3, #1
 80129ca:	e000      	b.n	80129ce <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80129cc:	230f      	movs	r3, #15
}
 80129ce:	4618      	mov	r0, r3
 80129d0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd90      	pop	{r4, r7, pc}

080129d8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80129d8:	b480      	push	{r7}
 80129da:	b085      	sub	sp, #20
 80129dc:	af00      	add	r7, sp, #0
 80129de:	4603      	mov	r3, r0
 80129e0:	6039      	str	r1, [r7, #0]
 80129e2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80129e4:	2300      	movs	r3, #0
 80129e6:	73fb      	strb	r3, [r7, #15]
 80129e8:	e011      	b.n	8012a0e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80129ea:	7bfb      	ldrb	r3, [r7, #15]
 80129ec:	4a0c      	ldr	r2, [pc, #48]	@ (8012a20 <GetKeyAddrItem+0x48>)
 80129ee:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80129f2:	79fa      	ldrb	r2, [r7, #7]
 80129f4:	429a      	cmp	r2, r3
 80129f6:	d107      	bne.n	8012a08 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
 80129fa:	009b      	lsls	r3, r3, #2
 80129fc:	4a08      	ldr	r2, [pc, #32]	@ (8012a20 <GetKeyAddrItem+0x48>)
 80129fe:	441a      	add	r2, r3
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e006      	b.n	8012a16 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8012a08:	7bfb      	ldrb	r3, [r7, #15]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	73fb      	strb	r3, [r7, #15]
 8012a0e:	7bfb      	ldrb	r3, [r7, #15]
 8012a10:	2b01      	cmp	r3, #1
 8012a12:	d9ea      	bls.n	80129ea <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8012a14:	230c      	movs	r3, #12
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	3714      	adds	r7, #20
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	bc80      	pop	{r7}
 8012a1e:	4770      	bx	lr
 8012a20:	20000100 	.word	0x20000100

08012a24 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b088      	sub	sp, #32
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60b9      	str	r1, [r7, #8]
 8012a2c:	607a      	str	r2, [r7, #4]
 8012a2e:	461a      	mov	r2, r3
 8012a30:	4603      	mov	r3, r0
 8012a32:	73fb      	strb	r3, [r7, #15]
 8012a34:	4613      	mov	r3, r2
 8012a36:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8012a38:	f107 0310 	add.w	r3, r7, #16
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	601a      	str	r2, [r3, #0]
 8012a40:	605a      	str	r2, [r3, #4]
 8012a42:	609a      	str	r2, [r3, #8]
 8012a44:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8012a46:	7bfb      	ldrb	r3, [r7, #15]
 8012a48:	2b08      	cmp	r3, #8
 8012a4a:	d002      	beq.n	8012a52 <DeriveSessionKey10x+0x2e>
 8012a4c:	2b09      	cmp	r3, #9
 8012a4e:	d003      	beq.n	8012a58 <DeriveSessionKey10x+0x34>
 8012a50:	e005      	b.n	8012a5e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8012a52:	2301      	movs	r3, #1
 8012a54:	743b      	strb	r3, [r7, #16]
            break;
 8012a56:	e004      	b.n	8012a62 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8012a58:	2302      	movs	r3, #2
 8012a5a:	743b      	strb	r3, [r7, #16]
            break;
 8012a5c:	e001      	b.n	8012a62 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8012a5e:	230b      	movs	r3, #11
 8012a60:	e02a      	b.n	8012ab8 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8012a68:	68bb      	ldr	r3, [r7, #8]
 8012a6a:	0a1b      	lsrs	r3, r3, #8
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	0c1b      	lsrs	r3, r3, #16
 8012a74:	b2db      	uxtb	r3, r3
 8012a76:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	b2db      	uxtb	r3, r3
 8012a7c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	0a1b      	lsrs	r3, r3, #8
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	0c1b      	lsrs	r3, r3, #16
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8012a8e:	89bb      	ldrh	r3, [r7, #12]
 8012a90:	b2db      	uxtb	r3, r3
 8012a92:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8012a94:	89bb      	ldrh	r3, [r7, #12]
 8012a96:	0a1b      	lsrs	r3, r3, #8
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8012a9e:	7bfa      	ldrb	r2, [r7, #15]
 8012aa0:	f107 0310 	add.w	r3, r7, #16
 8012aa4:	2101      	movs	r1, #1
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7f8 fc94 	bl	800b3d4 <SecureElementDeriveAndStoreKey>
 8012aac:	4603      	mov	r3, r0
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ab2:	230f      	movs	r3, #15
 8012ab4:	e000      	b.n	8012ab8 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012ab6:	2300      	movs	r3, #0
}
 8012ab8:	4618      	mov	r0, r3
 8012aba:	3720      	adds	r7, #32
 8012abc:	46bd      	mov	sp, r7
 8012abe:	bd80      	pop	{r7, pc}

08012ac0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	6039      	str	r1, [r7, #0]
 8012aca:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8012acc:	683b      	ldr	r3, [r7, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d101      	bne.n	8012ad6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ad2:	230a      	movs	r3, #10
 8012ad4:	e029      	b.n	8012b2a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8012ad6:	79fb      	ldrb	r3, [r7, #7]
 8012ad8:	3b01      	subs	r3, #1
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d822      	bhi.n	8012b24 <GetLastFcntDown+0x64>
 8012ade:	a201      	add	r2, pc, #4	@ (adr r2, 8012ae4 <GetLastFcntDown+0x24>)
 8012ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ae4:	08012af5 	.word	0x08012af5
 8012ae8:	08012b01 	.word	0x08012b01
 8012aec:	08012b0d 	.word	0x08012b0d
 8012af0:	08012b19 	.word	0x08012b19
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8012af4:	4b0f      	ldr	r3, [pc, #60]	@ (8012b34 <GetLastFcntDown+0x74>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	691a      	ldr	r2, [r3, #16]
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	601a      	str	r2, [r3, #0]
            break;
 8012afe:	e013      	b.n	8012b28 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8012b00:	4b0c      	ldr	r3, [pc, #48]	@ (8012b34 <GetLastFcntDown+0x74>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	695a      	ldr	r2, [r3, #20]
 8012b06:	683b      	ldr	r3, [r7, #0]
 8012b08:	601a      	str	r2, [r3, #0]
            break;
 8012b0a:	e00d      	b.n	8012b28 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8012b0c:	4b09      	ldr	r3, [pc, #36]	@ (8012b34 <GetLastFcntDown+0x74>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	699a      	ldr	r2, [r3, #24]
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	601a      	str	r2, [r3, #0]
            break;
 8012b16:	e007      	b.n	8012b28 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8012b18:	4b06      	ldr	r3, [pc, #24]	@ (8012b34 <GetLastFcntDown+0x74>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	69da      	ldr	r2, [r3, #28]
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	601a      	str	r2, [r3, #0]
            break;
 8012b22:	e001      	b.n	8012b28 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012b24:	2305      	movs	r3, #5
 8012b26:	e000      	b.n	8012b2a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	370c      	adds	r7, #12
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bc80      	pop	{r7}
 8012b32:	4770      	bx	lr
 8012b34:	20001a34 	.word	0x20001a34

08012b38 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b084      	sub	sp, #16
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	4603      	mov	r3, r0
 8012b40:	6039      	str	r1, [r7, #0]
 8012b42:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8012b44:	2300      	movs	r3, #0
 8012b46:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8012b48:	f107 020c 	add.w	r2, r7, #12
 8012b4c:	79fb      	ldrb	r3, [r7, #7]
 8012b4e:	4611      	mov	r1, r2
 8012b50:	4618      	mov	r0, r3
 8012b52:	f7ff ffb5 	bl	8012ac0 <GetLastFcntDown>
 8012b56:	4603      	mov	r3, r0
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d001      	beq.n	8012b60 <CheckFCntDown+0x28>
    {
        return false;
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	e00a      	b.n	8012b76 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	683a      	ldr	r2, [r7, #0]
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d803      	bhi.n	8012b70 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8012b68:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8012b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b6e:	d101      	bne.n	8012b74 <CheckFCntDown+0x3c>
    {
        return true;
 8012b70:	2301      	movs	r3, #1
 8012b72:	e000      	b.n	8012b76 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8012b74:	2300      	movs	r3, #0
    }
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
	...

08012b80 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8012b80:	b480      	push	{r7}
 8012b82:	b083      	sub	sp, #12
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	4603      	mov	r3, r0
 8012b88:	6039      	str	r1, [r7, #0]
 8012b8a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8012b8c:	79fb      	ldrb	r3, [r7, #7]
 8012b8e:	3b01      	subs	r3, #1
 8012b90:	2b03      	cmp	r3, #3
 8012b92:	d82b      	bhi.n	8012bec <UpdateFCntDown+0x6c>
 8012b94:	a201      	add	r2, pc, #4	@ (adr r2, 8012b9c <UpdateFCntDown+0x1c>)
 8012b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b9a:	bf00      	nop
 8012b9c:	08012bad 	.word	0x08012bad
 8012ba0:	08012bbf 	.word	0x08012bbf
 8012ba4:	08012bd1 	.word	0x08012bd1
 8012ba8:	08012be3 	.word	0x08012be3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8012bac:	4b12      	ldr	r3, [pc, #72]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	683a      	ldr	r2, [r7, #0]
 8012bb2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8012bb4:	4b10      	ldr	r3, [pc, #64]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	683a      	ldr	r2, [r7, #0]
 8012bba:	621a      	str	r2, [r3, #32]
            break;
 8012bbc:	e017      	b.n	8012bee <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8012bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8012bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	683a      	ldr	r2, [r7, #0]
 8012bcc:	621a      	str	r2, [r3, #32]
            break;
 8012bce:	e00e      	b.n	8012bee <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8012bd0:	4b09      	ldr	r3, [pc, #36]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	683a      	ldr	r2, [r7, #0]
 8012bd6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8012bd8:	4b07      	ldr	r3, [pc, #28]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	683a      	ldr	r2, [r7, #0]
 8012bde:	621a      	str	r2, [r3, #32]
            break;
 8012be0:	e005      	b.n	8012bee <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8012be2:	4b05      	ldr	r3, [pc, #20]	@ (8012bf8 <UpdateFCntDown+0x78>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	683a      	ldr	r2, [r7, #0]
 8012be8:	61da      	str	r2, [r3, #28]
            break;
 8012bea:	e000      	b.n	8012bee <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8012bec:	bf00      	nop
    }
}
 8012bee:	bf00      	nop
 8012bf0:	370c      	adds	r7, #12
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bc80      	pop	{r7}
 8012bf6:	4770      	bx	lr
 8012bf8:	20001a34 	.word	0x20001a34

08012bfc <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8012c02:	4b18      	ldr	r3, [pc, #96]	@ (8012c64 <ResetFCnts+0x68>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	2200      	movs	r2, #0
 8012c08:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012c0a:	4b16      	ldr	r3, [pc, #88]	@ (8012c64 <ResetFCnts+0x68>)
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c12:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012c14:	4b13      	ldr	r3, [pc, #76]	@ (8012c64 <ResetFCnts+0x68>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	f04f 32ff 	mov.w	r2, #4294967295
 8012c1c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8012c1e:	4b11      	ldr	r3, [pc, #68]	@ (8012c64 <ResetFCnts+0x68>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	f04f 32ff 	mov.w	r2, #4294967295
 8012c26:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8012c28:	4b0e      	ldr	r3, [pc, #56]	@ (8012c64 <ResetFCnts+0x68>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8012c64 <ResetFCnts+0x68>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	6992      	ldr	r2, [r2, #24]
 8012c32:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012c34:	2300      	movs	r3, #0
 8012c36:	607b      	str	r3, [r7, #4]
 8012c38:	e00b      	b.n	8012c52 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8012c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8012c64 <ResetFCnts+0x68>)
 8012c3c:	681a      	ldr	r2, [r3, #0]
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	3306      	adds	r3, #6
 8012c42:	009b      	lsls	r3, r3, #2
 8012c44:	4413      	add	r3, r2
 8012c46:	f04f 32ff 	mov.w	r2, #4294967295
 8012c4a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	3301      	adds	r3, #1
 8012c50:	607b      	str	r3, [r7, #4]
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	ddf0      	ble.n	8012c3a <ResetFCnts+0x3e>
    }
}
 8012c58:	bf00      	nop
 8012c5a:	bf00      	nop
 8012c5c:	370c      	adds	r7, #12
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bc80      	pop	{r7}
 8012c62:	4770      	bx	lr
 8012c64:	20001a34 	.word	0x20001a34

08012c68 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8012c70:	4b06      	ldr	r3, [pc, #24]	@ (8012c8c <IsJoinNonce10xOk+0x24>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	689b      	ldr	r3, [r3, #8]
 8012c76:	687a      	ldr	r2, [r7, #4]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	bf8c      	ite	hi
 8012c7c:	2301      	movhi	r3, #1
 8012c7e:	2300      	movls	r3, #0
 8012c80:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	370c      	adds	r7, #12
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bc80      	pop	{r7}
 8012c8a:	4770      	bx	lr
 8012c8c:	20001a34 	.word	0x20001a34

08012c90 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8012c90:	b580      	push	{r7, lr}
 8012c92:	b082      	sub	sp, #8
 8012c94:	af00      	add	r7, sp, #0
 8012c96:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d101      	bne.n	8012ca2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8012c9e:	2309      	movs	r3, #9
 8012ca0:	e01c      	b.n	8012cdc <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8012ca2:	4a10      	ldr	r2, [pc, #64]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8012ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	2228      	movs	r2, #40	@ 0x28
 8012cae:	2100      	movs	r1, #0
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f004 fde5 	bl	8017880 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8012cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2201      	movs	r2, #1
 8012cbc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8012cbe:	4b09      	ldr	r3, [pc, #36]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2201      	movs	r2, #1
 8012cc4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8012cc6:	4b07      	ldr	r3, [pc, #28]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	2201      	movs	r2, #1
 8012ccc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8012cce:	4b05      	ldr	r3, [pc, #20]	@ (8012ce4 <LoRaMacCryptoInit+0x54>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8012cd6:	f7ff ff91 	bl	8012bfc <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8012cda:	2300      	movs	r3, #0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3708      	adds	r7, #8
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	20001a34 	.word	0x20001a34

08012ce8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8012ce8:	b480      	push	{r7}
 8012cea:	b083      	sub	sp, #12
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8012cf0:	4b04      	ldr	r3, [pc, #16]	@ (8012d04 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8012cf8:	2300      	movs	r3, #0
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	370c      	adds	r7, #12
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bc80      	pop	{r7}
 8012d02:	4770      	bx	lr
 8012d04:	20001a34 	.word	0x20001a34

08012d08 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d101      	bne.n	8012d1a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d16:	230a      	movs	r3, #10
 8012d18:	e006      	b.n	8012d28 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8012d1a:	4b06      	ldr	r3, [pc, #24]	@ (8012d34 <LoRaMacCryptoGetFCntUp+0x2c>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	1c5a      	adds	r2, r3, #1
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	370c      	adds	r7, #12
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bc80      	pop	{r7}
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	20001a34 	.word	0x20001a34

08012d38 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8012d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d3c:	b08a      	sub	sp, #40	@ 0x28
 8012d3e:	af00      	add	r7, sp, #0
 8012d40:	613a      	str	r2, [r7, #16]
 8012d42:	60fb      	str	r3, [r7, #12]
 8012d44:	4603      	mov	r3, r0
 8012d46:	75fb      	strb	r3, [r7, #23]
 8012d48:	460b      	mov	r3, r1
 8012d4a:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8012d4c:	2300      	movs	r3, #0
 8012d4e:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8012d50:	2300      	movs	r3, #0
 8012d52:	627b      	str	r3, [r7, #36]	@ 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8012d54:	2313      	movs	r3, #19
 8012d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    if( currentDown == NULL )
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012d60:	230a      	movs	r3, #10
 8012d62:	e057      	b.n	8012e14 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8012d64:	f107 021c 	add.w	r2, r7, #28
 8012d68:	7dfb      	ldrb	r3, [r7, #23]
 8012d6a:	4611      	mov	r1, r2
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	f7ff fea7 	bl	8012ac0 <GetLastFcntDown>
 8012d72:	4603      	mov	r3, r0
 8012d74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8012d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8012d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012d84:	e046      	b.n	8012e14 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8012d86:	69fb      	ldr	r3, [r7, #28]
 8012d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d8c:	d103      	bne.n	8012d96 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	693a      	ldr	r2, [r7, #16]
 8012d92:	601a      	str	r2, [r3, #0]
 8012d94:	e01e      	b.n	8012dd4 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8012d96:	69fb      	ldr	r3, [r7, #28]
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	693a      	ldr	r2, [r7, #16]
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	627b      	str	r3, [r7, #36]	@ 0x24

        if( fCntDiff > 0 )
 8012da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	dd05      	ble.n	8012db2 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8012da6:	69fa      	ldr	r2, [r7, #28]
 8012da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012daa:	441a      	add	r2, r3
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	601a      	str	r2, [r3, #0]
 8012db0:	e010      	b.n	8012dd4 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8012db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d104      	bne.n	8012dc2 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8012db8:	69fa      	ldr	r2, [r7, #28]
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8012dbe:	2307      	movs	r3, #7
 8012dc0:	e028      	b.n	8012e14 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8012dc2:	69fb      	ldr	r3, [r7, #28]
 8012dc4:	0c1b      	lsrs	r3, r3, #16
 8012dc6:	041b      	lsls	r3, r3, #16
 8012dc8:	693a      	ldr	r2, [r7, #16]
 8012dca:	4413      	add	r3, r2
 8012dcc:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8012dd4:	4b12      	ldr	r3, [pc, #72]	@ (8012e20 <LoRaMacCryptoGetFCntDown+0xe8>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	789b      	ldrb	r3, [r3, #2]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d119      	bne.n	8012e12 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	2200      	movs	r2, #0
 8012de4:	603b      	str	r3, [r7, #0]
 8012de6:	607a      	str	r2, [r7, #4]
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	2200      	movs	r2, #0
 8012dec:	469a      	mov	sl, r3
 8012dee:	4693      	mov	fp, r2
 8012df0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012df4:	4611      	mov	r1, r2
 8012df6:	ebb1 040a 	subs.w	r4, r1, sl
 8012dfa:	eb63 050b 	sbc.w	r5, r3, fp
 8012dfe:	8abb      	ldrh	r3, [r7, #20]
 8012e00:	2200      	movs	r2, #0
 8012e02:	4698      	mov	r8, r3
 8012e04:	4691      	mov	r9, r2
 8012e06:	4544      	cmp	r4, r8
 8012e08:	eb75 0309 	sbcs.w	r3, r5, r9
 8012e0c:	db01      	blt.n	8012e12 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8012e0e:	2308      	movs	r3, #8
 8012e10:	e000      	b.n	8012e14 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e12:	2300      	movs	r3, #0
}
 8012e14:	4618      	mov	r0, r3
 8012e16:	3728      	adds	r7, #40	@ 0x28
 8012e18:	46bd      	mov	sp, r7
 8012e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012e1e:	bf00      	nop
 8012e20:	20001a34 	.word	0x20001a34

08012e24 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b085      	sub	sp, #20
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012e32:	230a      	movs	r3, #10
 8012e34:	e019      	b.n	8012e6a <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012e36:	2300      	movs	r3, #0
 8012e38:	60fb      	str	r3, [r7, #12]
 8012e3a:	e012      	b.n	8012e62 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8012e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8012e74 <LoRaMacCryptoSetMulticastReference+0x50>)
 8012e3e:	6819      	ldr	r1, [r3, #0]
 8012e40:	68fa      	ldr	r2, [r7, #12]
 8012e42:	4613      	mov	r3, r2
 8012e44:	005b      	lsls	r3, r3, #1
 8012e46:	4413      	add	r3, r2
 8012e48:	011b      	lsls	r3, r3, #4
 8012e4a:	461a      	mov	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	4413      	add	r3, r2
 8012e50:	68fa      	ldr	r2, [r7, #12]
 8012e52:	3206      	adds	r2, #6
 8012e54:	0092      	lsls	r2, r2, #2
 8012e56:	440a      	add	r2, r1
 8012e58:	3204      	adds	r2, #4
 8012e5a:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	60fb      	str	r3, [r7, #12]
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	dde9      	ble.n	8012e3c <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012e68:	2300      	movs	r3, #0
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3714      	adds	r7, #20
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bc80      	pop	{r7}
 8012e72:	4770      	bx	lr
 8012e74:	20001a34 	.word	0x20001a34

08012e78 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
 8012e7e:	4603      	mov	r3, r0
 8012e80:	6039      	str	r1, [r7, #0]
 8012e82:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8012e84:	79fb      	ldrb	r3, [r7, #7]
 8012e86:	6839      	ldr	r1, [r7, #0]
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7f8 f97f 	bl	800b18c <SecureElementSetKey>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d001      	beq.n	8012e98 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012e94:	230f      	movs	r3, #15
 8012e96:	e021      	b.n	8012edc <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8012e98:	79fb      	ldrb	r3, [r7, #7]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d11d      	bne.n	8012eda <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012e9e:	4b11      	ldr	r3, [pc, #68]	@ (8012ee4 <LoRaMacCryptoSetKey+0x6c>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	789b      	ldrb	r3, [r3, #2]
 8012ea4:	210b      	movs	r1, #11
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f000 fa5a 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d001      	beq.n	8012eb6 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012eb2:	230f      	movs	r3, #15
 8012eb4:	e012      	b.n	8012edc <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012eb6:	210c      	movs	r1, #12
 8012eb8:	2000      	movs	r0, #0
 8012eba:	f000 fa51 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d001      	beq.n	8012ec8 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ec4:	230f      	movs	r3, #15
 8012ec6:	e009      	b.n	8012edc <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8012ec8:	210a      	movs	r1, #10
 8012eca:	2000      	movs	r0, #0
 8012ecc:	f000 fa48 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d001      	beq.n	8012eda <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012ed6:	230f      	movs	r3, #15
 8012ed8:	e000      	b.n	8012edc <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3708      	adds	r7, #8
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	20001a34 	.word	0x20001a34

08012ee8 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b086      	sub	sp, #24
 8012eec:	af02      	add	r7, sp, #8
 8012eee:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d101      	bne.n	8012efa <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012ef6:	230a      	movs	r3, #10
 8012ef8:	e033      	b.n	8012f62 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8012efa:	2301      	movs	r3, #1
 8012efc:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8012f02:	f107 0308 	add.w	r3, r7, #8
 8012f06:	4618      	mov	r0, r3
 8012f08:	f7f8 fb18 	bl	800b53c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8012f0c:	68ba      	ldr	r2, [r7, #8]
 8012f0e:	4b17      	ldr	r3, [pc, #92]	@ (8012f6c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	b292      	uxth	r2, r2
 8012f14:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8012f16:	4b15      	ldr	r3, [pc, #84]	@ (8012f6c <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	889a      	ldrh	r2, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012f20:	6878      	ldr	r0, [r7, #4]
 8012f22:	f000 fc14 	bl	801374e <LoRaMacSerializerJoinRequest>
 8012f26:	4603      	mov	r3, r0
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d001      	beq.n	8012f30 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012f2c:	2311      	movs	r3, #17
 8012f2e:	e018      	b.n	8012f62 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	3318      	adds	r3, #24
 8012f38:	7bfa      	ldrb	r2, [r7, #15]
 8012f3a:	9300      	str	r3, [sp, #0]
 8012f3c:	4613      	mov	r3, r2
 8012f3e:	2213      	movs	r2, #19
 8012f40:	2000      	movs	r0, #0
 8012f42:	f7f8 f981 	bl	800b248 <SecureElementComputeAesCmac>
 8012f46:	4603      	mov	r3, r0
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d001      	beq.n	8012f50 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012f4c:	230f      	movs	r3, #15
 8012f4e:	e008      	b.n	8012f62 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 fbfc 	bl	801374e <LoRaMacSerializerJoinRequest>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d001      	beq.n	8012f60 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8012f5c:	2311      	movs	r3, #17
 8012f5e:	e000      	b.n	8012f62 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8012f60:	2300      	movs	r3, #0
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3710      	adds	r7, #16
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	20001a34 	.word	0x20001a34

08012f70 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8012f70:	b590      	push	{r4, r7, lr}
 8012f72:	b097      	sub	sp, #92	@ 0x5c
 8012f74:	af04      	add	r7, sp, #16
 8012f76:	4603      	mov	r3, r0
 8012f78:	60b9      	str	r1, [r7, #8]
 8012f7a:	607a      	str	r2, [r7, #4]
 8012f7c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d002      	beq.n	8012f8a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d101      	bne.n	8012f8e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8012f8a:	230a      	movs	r3, #10
 8012f8c:	e0d1      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8012f8e:	2313      	movs	r3, #19
 8012f90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8012f94:	f107 0314 	add.w	r3, r7, #20
 8012f98:	2221      	movs	r2, #33	@ 0x21
 8012f9a:	2100      	movs	r1, #0
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f009 fa55 	bl	801c44c <memset>
    uint8_t versionMinor         = 0;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8012fa6:	4b65      	ldr	r3, [pc, #404]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	889b      	ldrh	r3, [r3, #4]
 8012fac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681c      	ldr	r4, [r3, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	791b      	ldrb	r3, [r3, #4]
 8012fb8:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8012fbc:	7bf8      	ldrb	r0, [r7, #15]
 8012fbe:	f107 0213 	add.w	r2, r7, #19
 8012fc2:	9202      	str	r2, [sp, #8]
 8012fc4:	f107 0214 	add.w	r2, r7, #20
 8012fc8:	9201      	str	r2, [sp, #4]
 8012fca:	9300      	str	r3, [sp, #0]
 8012fcc:	4623      	mov	r3, r4
 8012fce:	460a      	mov	r2, r1
 8012fd0:	68b9      	ldr	r1, [r7, #8]
 8012fd2:	f7f8 fa3e 	bl	800b452 <SecureElementProcessJoinAccept>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8012fdc:	230f      	movs	r3, #15
 8012fde:	e0a8      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	6818      	ldr	r0, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	791b      	ldrb	r3, [r3, #4]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	f107 0314 	add.w	r3, r7, #20
 8012fee:	4619      	mov	r1, r3
 8012ff0:	f004 fc0b 	bl	801780a <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 f9ed 	bl	80133d4 <LoRaMacParserJoinAccept>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d001      	beq.n	8013004 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013000:	2310      	movs	r3, #16
 8013002:	e096      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8013004:	2300      	movs	r3, #0
 8013006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	799b      	ldrb	r3, [r3, #6]
 801300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	79db      	ldrb	r3, [r3, #7]
 8013014:	021b      	lsls	r3, r3, #8
 8013016:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013018:	4313      	orrs	r3, r2
 801301a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	7a1b      	ldrb	r3, [r3, #8]
 8013020:	041b      	lsls	r3, r3, #16
 8013022:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013024:	4313      	orrs	r3, r2
 8013026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8013028:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801302a:	f7ff fe1d 	bl	8012c68 <IsJoinNonce10xOk>
 801302e:	4603      	mov	r3, r0
 8013030:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8013034:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8013038:	2b00      	cmp	r3, #0
 801303a:	d010      	beq.n	801305e <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 801303c:	4b3f      	ldr	r3, [pc, #252]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013042:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8013044:	7cfb      	ldrb	r3, [r7, #19]
 8013046:	210b      	movs	r1, #11
 8013048:	4618      	mov	r0, r3
 801304a:	f000 f989 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 801304e:	4603      	mov	r3, r0
 8013050:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013054:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013058:	2b00      	cmp	r3, #0
 801305a:	d005      	beq.n	8013068 <LoRaMacCryptoHandleJoinAccept+0xf8>
 801305c:	e001      	b.n	8013062 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 801305e:	2303      	movs	r3, #3
 8013060:	e067      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8013062:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013066:	e064      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8013068:	210c      	movs	r1, #12
 801306a:	2000      	movs	r0, #0
 801306c:	f000 f978 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 8013070:	4603      	mov	r3, r0
 8013072:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013076:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801307a:	2b00      	cmp	r3, #0
 801307c:	d002      	beq.n	8013084 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 801307e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013082:	e056      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8013084:	210a      	movs	r1, #10
 8013086:	2000      	movs	r0, #0
 8013088:	f000 f96a 	bl	8013360 <LoRaMacCryptoDeriveLifeTimeKey>
 801308c:	4603      	mov	r3, r0
 801308e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013092:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013096:	2b00      	cmp	r3, #0
 8013098:	d002      	beq.n	80130a0 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 801309a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801309e:	e048      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	7a5b      	ldrb	r3, [r3, #9]
 80130a4:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	7a9b      	ldrb	r3, [r3, #10]
 80130aa:	021b      	lsls	r3, r3, #8
 80130ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80130ae:	4313      	orrs	r3, r2
 80130b0:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	7adb      	ldrb	r3, [r3, #11]
 80130b6:	041b      	lsls	r3, r3, #16
 80130b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80130ba:	4313      	orrs	r3, r2
 80130bc:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 80130be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80130c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80130c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80130c6:	2009      	movs	r0, #9
 80130c8:	f7ff fcac 	bl	8012a24 <DeriveSessionKey10x>
 80130cc:	4603      	mov	r3, r0
 80130ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80130d2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d002      	beq.n	80130e0 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 80130da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80130de:	e028      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 80130e0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80130e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80130e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80130e8:	2008      	movs	r0, #8
 80130ea:	f7ff fc9b 	bl	8012a24 <DeriveSessionKey10x>
 80130ee:	4603      	mov	r3, r0
 80130f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80130f4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d002      	beq.n	8013102 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 80130fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013100:	e017      	b.n	8013132 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013102:	4b0e      	ldr	r3, [pc, #56]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	7cfa      	ldrb	r2, [r7, #19]
 8013108:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 801310a:	4b0c      	ldr	r3, [pc, #48]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2200      	movs	r2, #0
 8013110:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013112:	4b0a      	ldr	r3, [pc, #40]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	f04f 32ff 	mov.w	r2, #4294967295
 801311a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801311c:	4b07      	ldr	r3, [pc, #28]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f04f 32ff 	mov.w	r2, #4294967295
 8013124:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8013126:	4b05      	ldr	r3, [pc, #20]	@ (801313c <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	f04f 32ff 	mov.w	r2, #4294967295
 801312e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013130:	2300      	movs	r3, #0
}
 8013132:	4618      	mov	r0, r3
 8013134:	374c      	adds	r7, #76	@ 0x4c
 8013136:	46bd      	mov	sp, r7
 8013138:	bd90      	pop	{r4, r7, pc}
 801313a:	bf00      	nop
 801313c:	20001a34 	.word	0x20001a34

08013140 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013140:	b590      	push	{r4, r7, lr}
 8013142:	b08b      	sub	sp, #44	@ 0x2c
 8013144:	af04      	add	r7, sp, #16
 8013146:	60f8      	str	r0, [r7, #12]
 8013148:	607b      	str	r3, [r7, #4]
 801314a:	460b      	mov	r3, r1
 801314c:	72fb      	strb	r3, [r7, #11]
 801314e:	4613      	mov	r3, r2
 8013150:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013152:	2313      	movs	r3, #19
 8013154:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013156:	2309      	movs	r3, #9
 8013158:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d101      	bne.n	8013164 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013160:	230a      	movs	r3, #10
 8013162:	e05e      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013164:	4b31      	ldr	r3, [pc, #196]	@ (801322c <LoRaMacCryptoSecureMessage+0xec>)
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	68fa      	ldr	r2, [r7, #12]
 801316c:	429a      	cmp	r2, r3
 801316e:	d201      	bcs.n	8013174 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013170:	2306      	movs	r3, #6
 8013172:	e056      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	f893 3020 	ldrb.w	r3, [r3, #32]
 801317a:	2b00      	cmp	r3, #0
 801317c:	d101      	bne.n	8013182 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801317e:	2308      	movs	r3, #8
 8013180:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013182:	4b2a      	ldr	r3, [pc, #168]	@ (801322c <LoRaMacCryptoSecureMessage+0xec>)
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	68db      	ldr	r3, [r3, #12]
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	429a      	cmp	r2, r3
 801318c:	d916      	bls.n	80131bc <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013198:	b219      	sxth	r1, r3
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	689c      	ldr	r4, [r3, #8]
 801319e:	7dfa      	ldrb	r2, [r7, #23]
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	9301      	str	r3, [sp, #4]
 80131a4:	2300      	movs	r3, #0
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	4623      	mov	r3, r4
 80131aa:	f7ff fa49 	bl	8012640 <PayloadEncrypt>
 80131ae:	4603      	mov	r3, r0
 80131b0:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80131b2:	7dbb      	ldrb	r3, [r7, #22]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d001      	beq.n	80131bc <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 80131b8:	7dbb      	ldrb	r3, [r7, #22]
 80131ba:	e032      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f000 fb48 	bl	8013852 <LoRaMacSerializerData>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80131c8:	2311      	movs	r3, #17
 80131ca:	e02a      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 80131cc:	2308      	movs	r3, #8
 80131ce:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6818      	ldr	r0, [r3, #0]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	791b      	ldrb	r3, [r3, #4]
 80131d8:	3b04      	subs	r3, #4
 80131da:	b299      	uxth	r1, r3
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	689b      	ldr	r3, [r3, #8]
 80131e0:	687a      	ldr	r2, [r7, #4]
 80131e2:	322c      	adds	r2, #44	@ 0x2c
 80131e4:	7dfc      	ldrb	r4, [r7, #23]
 80131e6:	9203      	str	r2, [sp, #12]
 80131e8:	68fa      	ldr	r2, [r7, #12]
 80131ea:	9202      	str	r2, [sp, #8]
 80131ec:	9301      	str	r3, [sp, #4]
 80131ee:	2300      	movs	r3, #0
 80131f0:	9300      	str	r3, [sp, #0]
 80131f2:	2300      	movs	r3, #0
 80131f4:	4622      	mov	r2, r4
 80131f6:	f7ff fb22 	bl	801283e <ComputeCmacB0>
 80131fa:	4603      	mov	r3, r0
 80131fc:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80131fe:	7dbb      	ldrb	r3, [r7, #22]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d001      	beq.n	8013208 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013204:	7dbb      	ldrb	r3, [r7, #22]
 8013206:	e00c      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f000 fb22 	bl	8013852 <LoRaMacSerializerData>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d001      	beq.n	8013218 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013214:	2311      	movs	r3, #17
 8013216:	e004      	b.n	8013222 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013218:	4b04      	ldr	r3, [pc, #16]	@ (801322c <LoRaMacCryptoSecureMessage+0xec>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	68fa      	ldr	r2, [r7, #12]
 801321e:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	371c      	adds	r7, #28
 8013226:	46bd      	mov	sp, r7
 8013228:	bd90      	pop	{r4, r7, pc}
 801322a:	bf00      	nop
 801322c:	20001a34 	.word	0x20001a34

08013230 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013230:	b590      	push	{r4, r7, lr}
 8013232:	b08b      	sub	sp, #44	@ 0x2c
 8013234:	af04      	add	r7, sp, #16
 8013236:	60b9      	str	r1, [r7, #8]
 8013238:	607b      	str	r3, [r7, #4]
 801323a:	4603      	mov	r3, r0
 801323c:	73fb      	strb	r3, [r7, #15]
 801323e:	4613      	mov	r3, r2
 8013240:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013244:	2b00      	cmp	r3, #0
 8013246:	d101      	bne.n	801324c <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013248:	230a      	movs	r3, #10
 801324a:	e083      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 801324c:	7bbb      	ldrb	r3, [r7, #14]
 801324e:	6879      	ldr	r1, [r7, #4]
 8013250:	4618      	mov	r0, r3
 8013252:	f7ff fc71 	bl	8012b38 <CheckFCntDown>
 8013256:	4603      	mov	r3, r0
 8013258:	f083 0301 	eor.w	r3, r3, #1
 801325c:	b2db      	uxtb	r3, r3
 801325e:	2b00      	cmp	r3, #0
 8013260:	d001      	beq.n	8013266 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013262:	2306      	movs	r3, #6
 8013264:	e076      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013266:	2313      	movs	r3, #19
 8013268:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 801326a:	2309      	movs	r3, #9
 801326c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 801326e:	2308      	movs	r3, #8
 8013270:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013274:	f000 f979 	bl	801356a <LoRaMacParserData>
 8013278:	4603      	mov	r3, r0
 801327a:	2b00      	cmp	r3, #0
 801327c:	d001      	beq.n	8013282 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 801327e:	2310      	movs	r3, #16
 8013280:	e068      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013282:	f107 0210 	add.w	r2, r7, #16
 8013286:	7bfb      	ldrb	r3, [r7, #15]
 8013288:	4611      	mov	r1, r2
 801328a:	4618      	mov	r0, r3
 801328c:	f7ff fba4 	bl	80129d8 <GetKeyAddrItem>
 8013290:	4603      	mov	r3, r0
 8013292:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013294:	7d7b      	ldrb	r3, [r7, #21]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d001      	beq.n	801329e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 801329a:	7d7b      	ldrb	r3, [r7, #21]
 801329c:	e05a      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	785b      	ldrb	r3, [r3, #1]
 80132a2:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	789b      	ldrb	r3, [r3, #2]
 80132a8:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 80132aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ac:	689b      	ldr	r3, [r3, #8]
 80132ae:	68ba      	ldr	r2, [r7, #8]
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d001      	beq.n	80132b8 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80132b4:	2302      	movs	r3, #2
 80132b6:	e04d      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 80132b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132ba:	7b1b      	ldrb	r3, [r3, #12]
 80132bc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	bf14      	ite	ne
 80132c6:	2301      	movne	r3, #1
 80132c8:	2300      	moveq	r3, #0
 80132ca:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 80132cc:	4b23      	ldr	r3, [pc, #140]	@ (801335c <LoRaMacCryptoUnsecureMessage+0x12c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	789b      	ldrb	r3, [r3, #2]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d101      	bne.n	80132da <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 80132d6:	2300      	movs	r3, #0
 80132d8:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 80132da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132dc:	6818      	ldr	r0, [r3, #0]
 80132de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e0:	791b      	ldrb	r3, [r3, #4]
 80132e2:	3b04      	subs	r3, #4
 80132e4:	b299      	uxth	r1, r3
 80132e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80132ea:	7dbc      	ldrb	r4, [r7, #22]
 80132ec:	7d3a      	ldrb	r2, [r7, #20]
 80132ee:	9303      	str	r3, [sp, #12]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	9302      	str	r3, [sp, #8]
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	9301      	str	r3, [sp, #4]
 80132f8:	2301      	movs	r3, #1
 80132fa:	9300      	str	r3, [sp, #0]
 80132fc:	4623      	mov	r3, r4
 80132fe:	f7ff fadc 	bl	80128ba <VerifyCmacB0>
 8013302:	4603      	mov	r3, r0
 8013304:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013306:	7d7b      	ldrb	r3, [r7, #21]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 801330c:	7d7b      	ldrb	r3, [r7, #21]
 801330e:	e021      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013312:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d101      	bne.n	801331e <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801331a:	2308      	movs	r3, #8
 801331c:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 801331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013320:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013328:	b219      	sxth	r1, r3
 801332a:	7dfa      	ldrb	r2, [r7, #23]
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	9301      	str	r3, [sp, #4]
 8013330:	2301      	movs	r3, #1
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	f7ff f983 	bl	8012640 <PayloadEncrypt>
 801333a:	4603      	mov	r3, r0
 801333c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801333e:	7d7b      	ldrb	r3, [r7, #21]
 8013340:	2b00      	cmp	r3, #0
 8013342:	d001      	beq.n	8013348 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013344:	7d7b      	ldrb	r3, [r7, #21]
 8013346:	e005      	b.n	8013354 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8013348:	7bbb      	ldrb	r3, [r7, #14]
 801334a:	6879      	ldr	r1, [r7, #4]
 801334c:	4618      	mov	r0, r3
 801334e:	f7ff fc17 	bl	8012b80 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013352:	2300      	movs	r3, #0
}
 8013354:	4618      	mov	r0, r3
 8013356:	371c      	adds	r7, #28
 8013358:	46bd      	mov	sp, r7
 801335a:	bd90      	pop	{r4, r7, pc}
 801335c:	20001a34 	.word	0x20001a34

08013360 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b088      	sub	sp, #32
 8013364:	af00      	add	r7, sp, #0
 8013366:	4603      	mov	r3, r0
 8013368:	460a      	mov	r2, r1
 801336a:	71fb      	strb	r3, [r7, #7]
 801336c:	4613      	mov	r3, r2
 801336e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8013370:	f107 030c 	add.w	r3, r7, #12
 8013374:	2200      	movs	r2, #0
 8013376:	601a      	str	r2, [r3, #0]
 8013378:	605a      	str	r2, [r3, #4]
 801337a:	609a      	str	r2, [r3, #8]
 801337c:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 801337e:	2300      	movs	r3, #0
 8013380:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8013382:	79bb      	ldrb	r3, [r7, #6]
 8013384:	2b0c      	cmp	r3, #12
 8013386:	d00b      	beq.n	80133a0 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8013388:	2b0c      	cmp	r3, #12
 801338a:	dc0f      	bgt.n	80133ac <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 801338c:	2b0a      	cmp	r3, #10
 801338e:	d00a      	beq.n	80133a6 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8013390:	2b0b      	cmp	r3, #11
 8013392:	d10b      	bne.n	80133ac <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8013394:	79fb      	ldrb	r3, [r7, #7]
 8013396:	2b01      	cmp	r3, #1
 8013398:	d10a      	bne.n	80133b0 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 801339a:	2320      	movs	r3, #32
 801339c:	733b      	strb	r3, [r7, #12]
            }
            break;
 801339e:	e007      	b.n	80133b0 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80133a0:	230b      	movs	r3, #11
 80133a2:	77fb      	strb	r3, [r7, #31]
            break;
 80133a4:	e005      	b.n	80133b2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80133a6:	2330      	movs	r3, #48	@ 0x30
 80133a8:	733b      	strb	r3, [r7, #12]
            break;
 80133aa:	e002      	b.n	80133b2 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80133ac:	230b      	movs	r3, #11
 80133ae:	e00d      	b.n	80133cc <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 80133b0:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 80133b2:	79ba      	ldrb	r2, [r7, #6]
 80133b4:	7ff9      	ldrb	r1, [r7, #31]
 80133b6:	f107 030c 	add.w	r3, r7, #12
 80133ba:	4618      	mov	r0, r3
 80133bc:	f7f8 f80a 	bl	800b3d4 <SecureElementDeriveAndStoreKey>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133c6:	230f      	movs	r3, #15
 80133c8:	e000      	b.n	80133cc <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80133ca:	2300      	movs	r3, #0
}
 80133cc:	4618      	mov	r0, r3
 80133ce:	3720      	adds	r7, #32
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}

080133d4 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b084      	sub	sp, #16
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d003      	beq.n	80133ea <LoRaMacParserJoinAccept+0x16>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d101      	bne.n	80133ee <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80133ea:	2302      	movs	r3, #2
 80133ec:	e0b9      	b.n	8013562 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	681a      	ldr	r2, [r3, #0]
 80133f6:	89fb      	ldrh	r3, [r7, #14]
 80133f8:	1c59      	adds	r1, r3, #1
 80133fa:	81f9      	strh	r1, [r7, #14]
 80133fc:	4413      	add	r3, r2
 80133fe:	781a      	ldrb	r2, [r3, #0]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	1d98      	adds	r0, r3, #6
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681a      	ldr	r2, [r3, #0]
 801340c:	89fb      	ldrh	r3, [r7, #14]
 801340e:	4413      	add	r3, r2
 8013410:	2203      	movs	r2, #3
 8013412:	4619      	mov	r1, r3
 8013414:	f004 f9f9 	bl	801780a <memcpy1>
    bufItr = bufItr + 3;
 8013418:	89fb      	ldrh	r3, [r7, #14]
 801341a:	3303      	adds	r3, #3
 801341c:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	f103 0009 	add.w	r0, r3, #9
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	89fb      	ldrh	r3, [r7, #14]
 801342a:	4413      	add	r3, r2
 801342c:	2203      	movs	r2, #3
 801342e:	4619      	mov	r1, r3
 8013430:	f004 f9eb 	bl	801780a <memcpy1>
    bufItr = bufItr + 3;
 8013434:	89fb      	ldrh	r3, [r7, #14]
 8013436:	3303      	adds	r3, #3
 8013438:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	89fb      	ldrh	r3, [r7, #14]
 8013440:	1c59      	adds	r1, r3, #1
 8013442:	81f9      	strh	r1, [r7, #14]
 8013444:	4413      	add	r3, r2
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	461a      	mov	r2, r3
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	89fb      	ldrh	r3, [r7, #14]
 8013454:	1c59      	adds	r1, r3, #1
 8013456:	81f9      	strh	r1, [r7, #14]
 8013458:	4413      	add	r3, r2
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	021a      	lsls	r2, r3, #8
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	68db      	ldr	r3, [r3, #12]
 8013462:	431a      	orrs	r2, r3
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	681a      	ldr	r2, [r3, #0]
 801346c:	89fb      	ldrh	r3, [r7, #14]
 801346e:	1c59      	adds	r1, r3, #1
 8013470:	81f9      	strh	r1, [r7, #14]
 8013472:	4413      	add	r3, r2
 8013474:	781b      	ldrb	r3, [r3, #0]
 8013476:	041a      	lsls	r2, r3, #16
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	68db      	ldr	r3, [r3, #12]
 801347c:	431a      	orrs	r2, r3
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	89fb      	ldrh	r3, [r7, #14]
 8013488:	1c59      	adds	r1, r3, #1
 801348a:	81f9      	strh	r1, [r7, #14]
 801348c:	4413      	add	r3, r2
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	061a      	lsls	r2, r3, #24
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	431a      	orrs	r2, r3
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	89fb      	ldrh	r3, [r7, #14]
 80134a2:	1c59      	adds	r1, r3, #1
 80134a4:	81f9      	strh	r1, [r7, #14]
 80134a6:	4413      	add	r3, r2
 80134a8:	781a      	ldrb	r2, [r3, #0]
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	89fb      	ldrh	r3, [r7, #14]
 80134b4:	1c59      	adds	r1, r3, #1
 80134b6:	81f9      	strh	r1, [r7, #14]
 80134b8:	4413      	add	r3, r2
 80134ba:	781a      	ldrb	r2, [r3, #0]
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	791b      	ldrb	r3, [r3, #4]
 80134c4:	1f1a      	subs	r2, r3, #4
 80134c6:	89fb      	ldrh	r3, [r7, #14]
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	2b10      	cmp	r3, #16
 80134cc:	d10e      	bne.n	80134ec <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	f103 0012 	add.w	r0, r3, #18
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	89fb      	ldrh	r3, [r7, #14]
 80134da:	4413      	add	r3, r2
 80134dc:	2210      	movs	r2, #16
 80134de:	4619      	mov	r1, r3
 80134e0:	f004 f993 	bl	801780a <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 80134e4:	89fb      	ldrh	r3, [r7, #14]
 80134e6:	3310      	adds	r3, #16
 80134e8:	81fb      	strh	r3, [r7, #14]
 80134ea:	e008      	b.n	80134fe <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	791b      	ldrb	r3, [r3, #4]
 80134f0:	1f1a      	subs	r2, r3, #4
 80134f2:	89fb      	ldrh	r3, [r7, #14]
 80134f4:	1ad3      	subs	r3, r2, r3
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	dd01      	ble.n	80134fe <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 80134fa:	2301      	movs	r3, #1
 80134fc:	e031      	b.n	8013562 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	681a      	ldr	r2, [r3, #0]
 8013502:	89fb      	ldrh	r3, [r7, #14]
 8013504:	1c59      	adds	r1, r3, #1
 8013506:	81f9      	strh	r1, [r7, #14]
 8013508:	4413      	add	r3, r2
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	461a      	mov	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681a      	ldr	r2, [r3, #0]
 8013516:	89fb      	ldrh	r3, [r7, #14]
 8013518:	1c59      	adds	r1, r3, #1
 801351a:	81f9      	strh	r1, [r7, #14]
 801351c:	4413      	add	r3, r2
 801351e:	781b      	ldrb	r3, [r3, #0]
 8013520:	021a      	lsls	r2, r3, #8
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013526:	431a      	orrs	r2, r3
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	681a      	ldr	r2, [r3, #0]
 8013530:	89fb      	ldrh	r3, [r7, #14]
 8013532:	1c59      	adds	r1, r3, #1
 8013534:	81f9      	strh	r1, [r7, #14]
 8013536:	4413      	add	r3, r2
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	041a      	lsls	r2, r3, #16
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013540:	431a      	orrs	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	681a      	ldr	r2, [r3, #0]
 801354a:	89fb      	ldrh	r3, [r7, #14]
 801354c:	1c59      	adds	r1, r3, #1
 801354e:	81f9      	strh	r1, [r7, #14]
 8013550:	4413      	add	r3, r2
 8013552:	781b      	ldrb	r3, [r3, #0]
 8013554:	061a      	lsls	r2, r3, #24
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801355a:	431a      	orrs	r2, r3
 801355c:	687b      	ldr	r3, [r7, #4]
 801355e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8013560:	2300      	movs	r3, #0
}
 8013562:	4618      	mov	r0, r3
 8013564:	3710      	adds	r7, #16
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}

0801356a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801356a:	b580      	push	{r7, lr}
 801356c:	b084      	sub	sp, #16
 801356e:	af00      	add	r7, sp, #0
 8013570:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d003      	beq.n	8013580 <LoRaMacParserData+0x16>
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d101      	bne.n	8013584 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013580:	2302      	movs	r3, #2
 8013582:	e0e0      	b.n	8013746 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8013584:	2300      	movs	r3, #0
 8013586:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	89fb      	ldrh	r3, [r7, #14]
 801358e:	1c59      	adds	r1, r3, #1
 8013590:	81f9      	strh	r1, [r7, #14]
 8013592:	4413      	add	r3, r2
 8013594:	781a      	ldrb	r2, [r3, #0]
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681a      	ldr	r2, [r3, #0]
 801359e:	89fb      	ldrh	r3, [r7, #14]
 80135a0:	1c59      	adds	r1, r3, #1
 80135a2:	81f9      	strh	r1, [r7, #14]
 80135a4:	4413      	add	r3, r2
 80135a6:	781b      	ldrb	r3, [r3, #0]
 80135a8:	461a      	mov	r2, r3
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	681a      	ldr	r2, [r3, #0]
 80135b2:	89fb      	ldrh	r3, [r7, #14]
 80135b4:	1c59      	adds	r1, r3, #1
 80135b6:	81f9      	strh	r1, [r7, #14]
 80135b8:	4413      	add	r3, r2
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	021a      	lsls	r2, r3, #8
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	431a      	orrs	r2, r3
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	681a      	ldr	r2, [r3, #0]
 80135cc:	89fb      	ldrh	r3, [r7, #14]
 80135ce:	1c59      	adds	r1, r3, #1
 80135d0:	81f9      	strh	r1, [r7, #14]
 80135d2:	4413      	add	r3, r2
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	041a      	lsls	r2, r3, #16
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	689b      	ldr	r3, [r3, #8]
 80135dc:	431a      	orrs	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681a      	ldr	r2, [r3, #0]
 80135e6:	89fb      	ldrh	r3, [r7, #14]
 80135e8:	1c59      	adds	r1, r3, #1
 80135ea:	81f9      	strh	r1, [r7, #14]
 80135ec:	4413      	add	r3, r2
 80135ee:	781b      	ldrb	r3, [r3, #0]
 80135f0:	061a      	lsls	r2, r3, #24
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	689b      	ldr	r3, [r3, #8]
 80135f6:	431a      	orrs	r2, r3
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	89fb      	ldrh	r3, [r7, #14]
 8013602:	1c59      	adds	r1, r3, #1
 8013604:	81f9      	strh	r1, [r7, #14]
 8013606:	4413      	add	r3, r2
 8013608:	781a      	ldrb	r2, [r3, #0]
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681a      	ldr	r2, [r3, #0]
 8013612:	89fb      	ldrh	r3, [r7, #14]
 8013614:	1c59      	adds	r1, r3, #1
 8013616:	81f9      	strh	r1, [r7, #14]
 8013618:	4413      	add	r3, r2
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	461a      	mov	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681a      	ldr	r2, [r3, #0]
 8013626:	89fb      	ldrh	r3, [r7, #14]
 8013628:	1c59      	adds	r1, r3, #1
 801362a:	81f9      	strh	r1, [r7, #14]
 801362c:	4413      	add	r3, r2
 801362e:	781b      	ldrb	r3, [r3, #0]
 8013630:	0219      	lsls	r1, r3, #8
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	89db      	ldrh	r3, [r3, #14]
 8013636:	b21a      	sxth	r2, r3
 8013638:	b20b      	sxth	r3, r1
 801363a:	4313      	orrs	r3, r2
 801363c:	b21b      	sxth	r3, r3
 801363e:	b29a      	uxth	r2, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	f103 0010 	add.w	r0, r3, #16
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681a      	ldr	r2, [r3, #0]
 801364e:	89fb      	ldrh	r3, [r7, #14]
 8013650:	18d1      	adds	r1, r2, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	7b1b      	ldrb	r3, [r3, #12]
 8013656:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801365a:	b2db      	uxtb	r3, r3
 801365c:	461a      	mov	r2, r3
 801365e:	f004 f8d4 	bl	801780a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	7b1b      	ldrb	r3, [r3, #12]
 8013666:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801366a:	b2db      	uxtb	r3, r3
 801366c:	461a      	mov	r2, r3
 801366e:	89fb      	ldrh	r3, [r7, #14]
 8013670:	4413      	add	r3, r2
 8013672:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	2200      	movs	r2, #0
 8013678:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	791b      	ldrb	r3, [r3, #4]
 8013688:	461a      	mov	r2, r3
 801368a:	89fb      	ldrh	r3, [r7, #14]
 801368c:	1ad3      	subs	r3, r2, r3
 801368e:	2b04      	cmp	r3, #4
 8013690:	dd27      	ble.n	80136e2 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	681a      	ldr	r2, [r3, #0]
 8013696:	89fb      	ldrh	r3, [r7, #14]
 8013698:	1c59      	adds	r1, r3, #1
 801369a:	81f9      	strh	r1, [r7, #14]
 801369c:	4413      	add	r3, r2
 801369e:	781a      	ldrb	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	791a      	ldrb	r2, [r3, #4]
 80136aa:	89fb      	ldrh	r3, [r7, #14]
 80136ac:	b2db      	uxtb	r3, r3
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	3b04      	subs	r3, #4
 80136b4:	b2da      	uxtb	r2, r3
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	681a      	ldr	r2, [r3, #0]
 80136c4:	89fb      	ldrh	r3, [r7, #14]
 80136c6:	18d1      	adds	r1, r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80136ce:	461a      	mov	r2, r3
 80136d0:	f004 f89b 	bl	801780a <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80136da:	461a      	mov	r2, r3
 80136dc:	89fb      	ldrh	r3, [r7, #14]
 80136de:	4413      	add	r3, r2
 80136e0:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	791b      	ldrb	r3, [r3, #4]
 80136ea:	3b04      	subs	r3, #4
 80136ec:	4413      	add	r3, r2
 80136ee:	781b      	ldrb	r3, [r3, #0]
 80136f0:	461a      	mov	r2, r3
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	6819      	ldr	r1, [r3, #0]
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	791b      	ldrb	r3, [r3, #4]
 8013702:	3b03      	subs	r3, #3
 8013704:	440b      	add	r3, r1
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	021b      	lsls	r3, r3, #8
 801370a:	431a      	orrs	r2, r3
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6819      	ldr	r1, [r3, #0]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	791b      	ldrb	r3, [r3, #4]
 801371c:	3b02      	subs	r3, #2
 801371e:	440b      	add	r3, r1
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	041b      	lsls	r3, r3, #16
 8013724:	431a      	orrs	r2, r3
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	6819      	ldr	r1, [r3, #0]
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	791b      	ldrb	r3, [r3, #4]
 8013736:	3b01      	subs	r3, #1
 8013738:	440b      	add	r3, r1
 801373a:	781b      	ldrb	r3, [r3, #0]
 801373c:	061b      	lsls	r3, r3, #24
 801373e:	431a      	orrs	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 8013744:	2300      	movs	r3, #0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3710      	adds	r7, #16
 801374a:	46bd      	mov	sp, r7
 801374c:	bd80      	pop	{r7, pc}

0801374e <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801374e:	b580      	push	{r7, lr}
 8013750:	b084      	sub	sp, #16
 8013752:	af00      	add	r7, sp, #0
 8013754:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d003      	beq.n	8013764 <LoRaMacSerializerJoinRequest+0x16>
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d101      	bne.n	8013768 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013764:	2301      	movs	r3, #1
 8013766:	e070      	b.n	801384a <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8013768:	2300      	movs	r3, #0
 801376a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	791b      	ldrb	r3, [r3, #4]
 8013770:	2b16      	cmp	r3, #22
 8013772:	d801      	bhi.n	8013778 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8013774:	2302      	movs	r3, #2
 8013776:	e068      	b.n	801384a <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	681a      	ldr	r2, [r3, #0]
 801377c:	89fb      	ldrh	r3, [r7, #14]
 801377e:	1c59      	adds	r1, r3, #1
 8013780:	81f9      	strh	r1, [r7, #14]
 8013782:	4413      	add	r3, r2
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	7952      	ldrb	r2, [r2, #5]
 8013788:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	681a      	ldr	r2, [r3, #0]
 801378e:	89fb      	ldrh	r3, [r7, #14]
 8013790:	18d0      	adds	r0, r2, r3
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	3306      	adds	r3, #6
 8013796:	2208      	movs	r2, #8
 8013798:	4619      	mov	r1, r3
 801379a:	f004 f851 	bl	8017840 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801379e:	89fb      	ldrh	r3, [r7, #14]
 80137a0:	3308      	adds	r3, #8
 80137a2:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	681a      	ldr	r2, [r3, #0]
 80137a8:	89fb      	ldrh	r3, [r7, #14]
 80137aa:	18d0      	adds	r0, r2, r3
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	330e      	adds	r3, #14
 80137b0:	2208      	movs	r2, #8
 80137b2:	4619      	mov	r1, r3
 80137b4:	f004 f844 	bl	8017840 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 80137b8:	89fb      	ldrh	r3, [r7, #14]
 80137ba:	3308      	adds	r3, #8
 80137bc:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	8ad9      	ldrh	r1, [r3, #22]
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681a      	ldr	r2, [r3, #0]
 80137c6:	89fb      	ldrh	r3, [r7, #14]
 80137c8:	1c58      	adds	r0, r3, #1
 80137ca:	81f8      	strh	r0, [r7, #14]
 80137cc:	4413      	add	r3, r2
 80137ce:	b2ca      	uxtb	r2, r1
 80137d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	8adb      	ldrh	r3, [r3, #22]
 80137d6:	0a1b      	lsrs	r3, r3, #8
 80137d8:	b299      	uxth	r1, r3
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	681a      	ldr	r2, [r3, #0]
 80137de:	89fb      	ldrh	r3, [r7, #14]
 80137e0:	1c58      	adds	r0, r3, #1
 80137e2:	81f8      	strh	r0, [r7, #14]
 80137e4:	4413      	add	r3, r2
 80137e6:	b2ca      	uxtb	r2, r1
 80137e8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6999      	ldr	r1, [r3, #24]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	89fb      	ldrh	r3, [r7, #14]
 80137f4:	1c58      	adds	r0, r3, #1
 80137f6:	81f8      	strh	r0, [r7, #14]
 80137f8:	4413      	add	r3, r2
 80137fa:	b2ca      	uxtb	r2, r1
 80137fc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	699b      	ldr	r3, [r3, #24]
 8013802:	0a19      	lsrs	r1, r3, #8
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	89fb      	ldrh	r3, [r7, #14]
 801380a:	1c58      	adds	r0, r3, #1
 801380c:	81f8      	strh	r0, [r7, #14]
 801380e:	4413      	add	r3, r2
 8013810:	b2ca      	uxtb	r2, r1
 8013812:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	699b      	ldr	r3, [r3, #24]
 8013818:	0c19      	lsrs	r1, r3, #16
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681a      	ldr	r2, [r3, #0]
 801381e:	89fb      	ldrh	r3, [r7, #14]
 8013820:	1c58      	adds	r0, r3, #1
 8013822:	81f8      	strh	r0, [r7, #14]
 8013824:	4413      	add	r3, r2
 8013826:	b2ca      	uxtb	r2, r1
 8013828:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	699b      	ldr	r3, [r3, #24]
 801382e:	0e19      	lsrs	r1, r3, #24
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	681a      	ldr	r2, [r3, #0]
 8013834:	89fb      	ldrh	r3, [r7, #14]
 8013836:	1c58      	adds	r0, r3, #1
 8013838:	81f8      	strh	r0, [r7, #14]
 801383a:	4413      	add	r3, r2
 801383c:	b2ca      	uxtb	r2, r1
 801383e:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013840:	89fb      	ldrh	r3, [r7, #14]
 8013842:	b2da      	uxtb	r2, r3
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013848:	2300      	movs	r3, #0
}
 801384a:	4618      	mov	r0, r3
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b084      	sub	sp, #16
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d003      	beq.n	8013868 <LoRaMacSerializerData+0x16>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d101      	bne.n	801386c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8013868:	2301      	movs	r3, #1
 801386a:	e0e3      	b.n	8013a34 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801386c:	2300      	movs	r3, #0
 801386e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8013870:	2308      	movs	r3, #8
 8013872:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	7b1b      	ldrb	r3, [r3, #12]
 8013878:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801387c:	b2db      	uxtb	r3, r3
 801387e:	461a      	mov	r2, r3
 8013880:	89bb      	ldrh	r3, [r7, #12]
 8013882:	4413      	add	r3, r2
 8013884:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801388c:	2b00      	cmp	r3, #0
 801388e:	d002      	beq.n	8013896 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8013890:	89bb      	ldrh	r3, [r7, #12]
 8013892:	3301      	adds	r3, #1
 8013894:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801389c:	461a      	mov	r2, r3
 801389e:	89bb      	ldrh	r3, [r7, #12]
 80138a0:	4413      	add	r3, r2
 80138a2:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80138a4:	89bb      	ldrh	r3, [r7, #12]
 80138a6:	3304      	adds	r3, #4
 80138a8:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	791b      	ldrb	r3, [r3, #4]
 80138ae:	461a      	mov	r2, r3
 80138b0:	89bb      	ldrh	r3, [r7, #12]
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d901      	bls.n	80138ba <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80138b6:	2302      	movs	r3, #2
 80138b8:	e0bc      	b.n	8013a34 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	681a      	ldr	r2, [r3, #0]
 80138be:	89fb      	ldrh	r3, [r7, #14]
 80138c0:	1c59      	adds	r1, r3, #1
 80138c2:	81f9      	strh	r1, [r7, #14]
 80138c4:	4413      	add	r3, r2
 80138c6:	687a      	ldr	r2, [r7, #4]
 80138c8:	7952      	ldrb	r2, [r2, #5]
 80138ca:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6899      	ldr	r1, [r3, #8]
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	681a      	ldr	r2, [r3, #0]
 80138d4:	89fb      	ldrh	r3, [r7, #14]
 80138d6:	1c58      	adds	r0, r3, #1
 80138d8:	81f8      	strh	r0, [r7, #14]
 80138da:	4413      	add	r3, r2
 80138dc:	b2ca      	uxtb	r2, r1
 80138de:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	0a19      	lsrs	r1, r3, #8
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	89fb      	ldrh	r3, [r7, #14]
 80138ec:	1c58      	adds	r0, r3, #1
 80138ee:	81f8      	strh	r0, [r7, #14]
 80138f0:	4413      	add	r3, r2
 80138f2:	b2ca      	uxtb	r2, r1
 80138f4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	0c19      	lsrs	r1, r3, #16
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	89fb      	ldrh	r3, [r7, #14]
 8013902:	1c58      	adds	r0, r3, #1
 8013904:	81f8      	strh	r0, [r7, #14]
 8013906:	4413      	add	r3, r2
 8013908:	b2ca      	uxtb	r2, r1
 801390a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	689b      	ldr	r3, [r3, #8]
 8013910:	0e19      	lsrs	r1, r3, #24
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	89fb      	ldrh	r3, [r7, #14]
 8013918:	1c58      	adds	r0, r3, #1
 801391a:	81f8      	strh	r0, [r7, #14]
 801391c:	4413      	add	r3, r2
 801391e:	b2ca      	uxtb	r2, r1
 8013920:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	89fb      	ldrh	r3, [r7, #14]
 8013928:	1c59      	adds	r1, r3, #1
 801392a:	81f9      	strh	r1, [r7, #14]
 801392c:	4413      	add	r3, r2
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	7b12      	ldrb	r2, [r2, #12]
 8013932:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	89d9      	ldrh	r1, [r3, #14]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681a      	ldr	r2, [r3, #0]
 801393c:	89fb      	ldrh	r3, [r7, #14]
 801393e:	1c58      	adds	r0, r3, #1
 8013940:	81f8      	strh	r0, [r7, #14]
 8013942:	4413      	add	r3, r2
 8013944:	b2ca      	uxtb	r2, r1
 8013946:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	89db      	ldrh	r3, [r3, #14]
 801394c:	0a1b      	lsrs	r3, r3, #8
 801394e:	b299      	uxth	r1, r3
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	681a      	ldr	r2, [r3, #0]
 8013954:	89fb      	ldrh	r3, [r7, #14]
 8013956:	1c58      	adds	r0, r3, #1
 8013958:	81f8      	strh	r0, [r7, #14]
 801395a:	4413      	add	r3, r2
 801395c:	b2ca      	uxtb	r2, r1
 801395e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	89fb      	ldrh	r3, [r7, #14]
 8013966:	18d0      	adds	r0, r2, r3
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	f103 0110 	add.w	r1, r3, #16
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	7b1b      	ldrb	r3, [r3, #12]
 8013972:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013976:	b2db      	uxtb	r3, r3
 8013978:	461a      	mov	r2, r3
 801397a:	f003 ff46 	bl	801780a <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	7b1b      	ldrb	r3, [r3, #12]
 8013982:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8013986:	b2db      	uxtb	r3, r3
 8013988:	461a      	mov	r2, r3
 801398a:	89fb      	ldrh	r3, [r7, #14]
 801398c:	4413      	add	r3, r2
 801398e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013996:	2b00      	cmp	r3, #0
 8013998:	d009      	beq.n	80139ae <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	681a      	ldr	r2, [r3, #0]
 801399e:	89fb      	ldrh	r3, [r7, #14]
 80139a0:	1c59      	adds	r1, r3, #1
 80139a2:	81f9      	strh	r1, [r7, #14]
 80139a4:	4413      	add	r3, r2
 80139a6:	687a      	ldr	r2, [r7, #4]
 80139a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80139ac:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681a      	ldr	r2, [r3, #0]
 80139b2:	89fb      	ldrh	r3, [r7, #14]
 80139b4:	18d0      	adds	r0, r2, r3
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80139c0:	461a      	mov	r2, r3
 80139c2:	f003 ff22 	bl	801780a <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80139cc:	461a      	mov	r2, r3
 80139ce:	89fb      	ldrh	r3, [r7, #14]
 80139d0:	4413      	add	r3, r2
 80139d2:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	89fb      	ldrh	r3, [r7, #14]
 80139de:	1c58      	adds	r0, r3, #1
 80139e0:	81f8      	strh	r0, [r7, #14]
 80139e2:	4413      	add	r3, r2
 80139e4:	b2ca      	uxtb	r2, r1
 80139e6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80139ec:	0a19      	lsrs	r1, r3, #8
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	89fb      	ldrh	r3, [r7, #14]
 80139f4:	1c58      	adds	r0, r3, #1
 80139f6:	81f8      	strh	r0, [r7, #14]
 80139f8:	4413      	add	r3, r2
 80139fa:	b2ca      	uxtb	r2, r1
 80139fc:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a02:	0c19      	lsrs	r1, r3, #16
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	89fb      	ldrh	r3, [r7, #14]
 8013a0a:	1c58      	adds	r0, r3, #1
 8013a0c:	81f8      	strh	r0, [r7, #14]
 8013a0e:	4413      	add	r3, r2
 8013a10:	b2ca      	uxtb	r2, r1
 8013a12:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013a18:	0e19      	lsrs	r1, r3, #24
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681a      	ldr	r2, [r3, #0]
 8013a1e:	89fb      	ldrh	r3, [r7, #14]
 8013a20:	1c58      	adds	r0, r3, #1
 8013a22:	81f8      	strh	r0, [r7, #14]
 8013a24:	4413      	add	r3, r2
 8013a26:	b2ca      	uxtb	r2, r1
 8013a28:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8013a2a:	89fb      	ldrh	r3, [r7, #14]
 8013a2c:	b2da      	uxtb	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8013a32:	2300      	movs	r3, #0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	3710      	adds	r7, #16
 8013a38:	46bd      	mov	sp, r7
 8013a3a:	bd80      	pop	{r7, pc}

08013a3c <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	b083      	sub	sp, #12
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	4603      	mov	r3, r0
 8013a44:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013a46:	79fb      	ldrb	r3, [r7, #7]
 8013a48:	2b05      	cmp	r3, #5
 8013a4a:	d002      	beq.n	8013a52 <RegionIsActive+0x16>
 8013a4c:	2b08      	cmp	r3, #8
 8013a4e:	d002      	beq.n	8013a56 <RegionIsActive+0x1a>
 8013a50:	e003      	b.n	8013a5a <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8013a52:	2301      	movs	r3, #1
 8013a54:	e002      	b.n	8013a5c <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8013a56:	2301      	movs	r3, #1
 8013a58:	e000      	b.n	8013a5c <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8013a5a:	2300      	movs	r3, #0
        }
    }
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	370c      	adds	r7, #12
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bc80      	pop	{r7}
 8013a64:	4770      	bx	lr

08013a66 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8013a66:	b580      	push	{r7, lr}
 8013a68:	b084      	sub	sp, #16
 8013a6a:	af00      	add	r7, sp, #0
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	6039      	str	r1, [r7, #0]
 8013a70:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8013a72:	2300      	movs	r3, #0
 8013a74:	60bb      	str	r3, [r7, #8]
    switch( region )
 8013a76:	79fb      	ldrb	r3, [r7, #7]
 8013a78:	2b05      	cmp	r3, #5
 8013a7a:	d002      	beq.n	8013a82 <RegionGetPhyParam+0x1c>
 8013a7c:	2b08      	cmp	r3, #8
 8013a7e:	d006      	beq.n	8013a8e <RegionGetPhyParam+0x28>
 8013a80:	e00b      	b.n	8013a9a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8013a82:	6838      	ldr	r0, [r7, #0]
 8013a84:	f001 fae8 	bl	8015058 <RegionEU868GetPhyParam>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	60fb      	str	r3, [r7, #12]
 8013a8c:	e007      	b.n	8013a9e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 8013a8e:	6838      	ldr	r0, [r7, #0]
 8013a90:	f002 fcbc 	bl	801640c <RegionUS915GetPhyParam>
 8013a94:	4603      	mov	r3, r0
 8013a96:	60fb      	str	r3, [r7, #12]
 8013a98:	e001      	b.n	8013a9e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8013a9a:	68bb      	ldr	r3, [r7, #8]
 8013a9c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3710      	adds	r7, #16
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}

08013aa8 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8013aa8:	b580      	push	{r7, lr}
 8013aaa:	b082      	sub	sp, #8
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	4603      	mov	r3, r0
 8013ab0:	6039      	str	r1, [r7, #0]
 8013ab2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ab4:	79fb      	ldrb	r3, [r7, #7]
 8013ab6:	2b05      	cmp	r3, #5
 8013ab8:	d002      	beq.n	8013ac0 <RegionSetBandTxDone+0x18>
 8013aba:	2b08      	cmp	r3, #8
 8013abc:	d004      	beq.n	8013ac8 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8013abe:	e006      	b.n	8013ace <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8013ac0:	6838      	ldr	r0, [r7, #0]
 8013ac2:	f001 fc15 	bl	80152f0 <RegionEU868SetBandTxDone>
 8013ac6:	e002      	b.n	8013ace <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8013ac8:	6838      	ldr	r0, [r7, #0]
 8013aca:	f002 fe01 	bl	80166d0 <RegionUS915SetBandTxDone>
        }
    }
}
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	4603      	mov	r3, r0
 8013adc:	6039      	str	r1, [r7, #0]
 8013ade:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013ae0:	79fb      	ldrb	r3, [r7, #7]
 8013ae2:	2b05      	cmp	r3, #5
 8013ae4:	d002      	beq.n	8013aec <RegionInitDefaults+0x18>
 8013ae6:	2b08      	cmp	r3, #8
 8013ae8:	d004      	beq.n	8013af4 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8013aea:	e006      	b.n	8013afa <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8013aec:	6838      	ldr	r0, [r7, #0]
 8013aee:	f001 fc2b 	bl	8015348 <RegionEU868InitDefaults>
 8013af2:	e002      	b.n	8013afa <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 8013af4:	6838      	ldr	r0, [r7, #0]
 8013af6:	f002 fe17 	bl	8016728 <RegionUS915InitDefaults>
        }
    }
}
 8013afa:	bf00      	nop
 8013afc:	3708      	adds	r7, #8
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b082      	sub	sp, #8
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	4603      	mov	r3, r0
 8013b0a:	6039      	str	r1, [r7, #0]
 8013b0c:	71fb      	strb	r3, [r7, #7]
 8013b0e:	4613      	mov	r3, r2
 8013b10:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8013b12:	79fb      	ldrb	r3, [r7, #7]
 8013b14:	2b05      	cmp	r3, #5
 8013b16:	d002      	beq.n	8013b1e <RegionVerify+0x1c>
 8013b18:	2b08      	cmp	r3, #8
 8013b1a:	d007      	beq.n	8013b2c <RegionVerify+0x2a>
 8013b1c:	e00d      	b.n	8013b3a <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8013b1e:	79bb      	ldrb	r3, [r7, #6]
 8013b20:	4619      	mov	r1, r3
 8013b22:	6838      	ldr	r0, [r7, #0]
 8013b24:	f001 fcae 	bl	8015484 <RegionEU868Verify>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	e007      	b.n	8013b3c <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8013b2c:	79bb      	ldrb	r3, [r7, #6]
 8013b2e:	4619      	mov	r1, r3
 8013b30:	6838      	ldr	r0, [r7, #0]
 8013b32:	f002 ff2b 	bl	801698c <RegionUS915Verify>
 8013b36:	4603      	mov	r3, r0
 8013b38:	e000      	b.n	8013b3c <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8013b3a:	2300      	movs	r3, #0
        }
    }
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3708      	adds	r7, #8
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd80      	pop	{r7, pc}

08013b44 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b082      	sub	sp, #8
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	6039      	str	r1, [r7, #0]
 8013b4e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013b50:	79fb      	ldrb	r3, [r7, #7]
 8013b52:	2b05      	cmp	r3, #5
 8013b54:	d002      	beq.n	8013b5c <RegionApplyCFList+0x18>
 8013b56:	2b08      	cmp	r3, #8
 8013b58:	d004      	beq.n	8013b64 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8013b5a:	e006      	b.n	8013b6a <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 8013b5c:	6838      	ldr	r0, [r7, #0]
 8013b5e:	f001 fd0d 	bl	801557c <RegionEU868ApplyCFList>
 8013b62:	e002      	b.n	8013b6a <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8013b64:	6838      	ldr	r0, [r7, #0]
 8013b66:	f002 ff79 	bl	8016a5c <RegionUS915ApplyCFList>
        }
    }
}
 8013b6a:	bf00      	nop
 8013b6c:	3708      	adds	r7, #8
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}

08013b72 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8013b72:	b580      	push	{r7, lr}
 8013b74:	b082      	sub	sp, #8
 8013b76:	af00      	add	r7, sp, #0
 8013b78:	4603      	mov	r3, r0
 8013b7a:	6039      	str	r1, [r7, #0]
 8013b7c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013b7e:	79fb      	ldrb	r3, [r7, #7]
 8013b80:	2b05      	cmp	r3, #5
 8013b82:	d002      	beq.n	8013b8a <RegionChanMaskSet+0x18>
 8013b84:	2b08      	cmp	r3, #8
 8013b86:	d005      	beq.n	8013b94 <RegionChanMaskSet+0x22>
 8013b88:	e009      	b.n	8013b9e <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 8013b8a:	6838      	ldr	r0, [r7, #0]
 8013b8c:	f001 fd6a 	bl	8015664 <RegionEU868ChanMaskSet>
 8013b90:	4603      	mov	r3, r0
 8013b92:	e005      	b.n	8013ba0 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8013b94:	6838      	ldr	r0, [r7, #0]
 8013b96:	f002 ffd5 	bl	8016b44 <RegionUS915ChanMaskSet>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	e000      	b.n	8013ba0 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8013b9e:	2300      	movs	r3, #0
        }
    }
}
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	3708      	adds	r7, #8
 8013ba4:	46bd      	mov	sp, r7
 8013ba6:	bd80      	pop	{r7, pc}

08013ba8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	603b      	str	r3, [r7, #0]
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	71fb      	strb	r3, [r7, #7]
 8013bb4:	460b      	mov	r3, r1
 8013bb6:	71bb      	strb	r3, [r7, #6]
 8013bb8:	4613      	mov	r3, r2
 8013bba:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013bbc:	79fb      	ldrb	r3, [r7, #7]
 8013bbe:	2b05      	cmp	r3, #5
 8013bc0:	d002      	beq.n	8013bc8 <RegionComputeRxWindowParameters+0x20>
 8013bc2:	2b08      	cmp	r3, #8
 8013bc4:	d008      	beq.n	8013bd8 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8013bc6:	e00e      	b.n	8013be6 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013bc8:	7979      	ldrb	r1, [r7, #5]
 8013bca:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013bce:	693b      	ldr	r3, [r7, #16]
 8013bd0:	683a      	ldr	r2, [r7, #0]
 8013bd2:	f001 fd71 	bl	80156b8 <RegionEU868ComputeRxWindowParameters>
 8013bd6:	e006      	b.n	8013be6 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8013bd8:	7979      	ldrb	r1, [r7, #5]
 8013bda:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8013bde:	693b      	ldr	r3, [r7, #16]
 8013be0:	683a      	ldr	r2, [r7, #0]
 8013be2:	f003 f819 	bl	8016c18 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8013be6:	bf00      	nop
 8013be8:	3708      	adds	r7, #8
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bd80      	pop	{r7, pc}

08013bee <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013bee:	b580      	push	{r7, lr}
 8013bf0:	b084      	sub	sp, #16
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	60b9      	str	r1, [r7, #8]
 8013bf8:	607a      	str	r2, [r7, #4]
 8013bfa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013bfc:	7bfb      	ldrb	r3, [r7, #15]
 8013bfe:	2b05      	cmp	r3, #5
 8013c00:	d002      	beq.n	8013c08 <RegionRxConfig+0x1a>
 8013c02:	2b08      	cmp	r3, #8
 8013c04:	d006      	beq.n	8013c14 <RegionRxConfig+0x26>
 8013c06:	e00b      	b.n	8013c20 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8013c08:	6879      	ldr	r1, [r7, #4]
 8013c0a:	68b8      	ldr	r0, [r7, #8]
 8013c0c:	f001 fdae 	bl	801576c <RegionEU868RxConfig>
 8013c10:	4603      	mov	r3, r0
 8013c12:	e006      	b.n	8013c22 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8013c14:	6879      	ldr	r1, [r7, #4]
 8013c16:	68b8      	ldr	r0, [r7, #8]
 8013c18:	f003 f848 	bl	8016cac <RegionUS915RxConfig>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	e000      	b.n	8013c22 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8013c20:	2300      	movs	r3, #0
        }
    }
}
 8013c22:	4618      	mov	r0, r3
 8013c24:	3710      	adds	r7, #16
 8013c26:	46bd      	mov	sp, r7
 8013c28:	bd80      	pop	{r7, pc}

08013c2a <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013c2a:	b580      	push	{r7, lr}
 8013c2c:	b084      	sub	sp, #16
 8013c2e:	af00      	add	r7, sp, #0
 8013c30:	60b9      	str	r1, [r7, #8]
 8013c32:	607a      	str	r2, [r7, #4]
 8013c34:	603b      	str	r3, [r7, #0]
 8013c36:	4603      	mov	r3, r0
 8013c38:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013c3a:	7bfb      	ldrb	r3, [r7, #15]
 8013c3c:	2b05      	cmp	r3, #5
 8013c3e:	d002      	beq.n	8013c46 <RegionTxConfig+0x1c>
 8013c40:	2b08      	cmp	r3, #8
 8013c42:	d007      	beq.n	8013c54 <RegionTxConfig+0x2a>
 8013c44:	e00d      	b.n	8013c62 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	6879      	ldr	r1, [r7, #4]
 8013c4a:	68b8      	ldr	r0, [r7, #8]
 8013c4c:	f001 fe5e 	bl	801590c <RegionEU868TxConfig>
 8013c50:	4603      	mov	r3, r0
 8013c52:	e007      	b.n	8013c64 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8013c54:	683a      	ldr	r2, [r7, #0]
 8013c56:	6879      	ldr	r1, [r7, #4]
 8013c58:	68b8      	ldr	r0, [r7, #8]
 8013c5a:	f003 f8ab 	bl	8016db4 <RegionUS915TxConfig>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	e000      	b.n	8013c64 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8013c62:	2300      	movs	r3, #0
        }
    }
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3710      	adds	r7, #16
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}

08013c6c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b086      	sub	sp, #24
 8013c70:	af02      	add	r7, sp, #8
 8013c72:	60b9      	str	r1, [r7, #8]
 8013c74:	607a      	str	r2, [r7, #4]
 8013c76:	603b      	str	r3, [r7, #0]
 8013c78:	4603      	mov	r3, r0
 8013c7a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013c7c:	7bfb      	ldrb	r3, [r7, #15]
 8013c7e:	2b05      	cmp	r3, #5
 8013c80:	d002      	beq.n	8013c88 <RegionLinkAdrReq+0x1c>
 8013c82:	2b08      	cmp	r3, #8
 8013c84:	d00a      	beq.n	8013c9c <RegionLinkAdrReq+0x30>
 8013c86:	e013      	b.n	8013cb0 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	9300      	str	r3, [sp, #0]
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	683a      	ldr	r2, [r7, #0]
 8013c90:	6879      	ldr	r1, [r7, #4]
 8013c92:	68b8      	ldr	r0, [r7, #8]
 8013c94:	f001 ff0a 	bl	8015aac <RegionEU868LinkAdrReq>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	e00a      	b.n	8013cb2 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8013c9c:	69fb      	ldr	r3, [r7, #28]
 8013c9e:	9300      	str	r3, [sp, #0]
 8013ca0:	69bb      	ldr	r3, [r7, #24]
 8013ca2:	683a      	ldr	r2, [r7, #0]
 8013ca4:	6879      	ldr	r1, [r7, #4]
 8013ca6:	68b8      	ldr	r0, [r7, #8]
 8013ca8:	f003 f930 	bl	8016f0c <RegionUS915LinkAdrReq>
 8013cac:	4603      	mov	r3, r0
 8013cae:	e000      	b.n	8013cb2 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8013cb0:	2300      	movs	r3, #0
        }
    }
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3710      	adds	r7, #16
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b082      	sub	sp, #8
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	6039      	str	r1, [r7, #0]
 8013cc4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013cc6:	79fb      	ldrb	r3, [r7, #7]
 8013cc8:	2b05      	cmp	r3, #5
 8013cca:	d002      	beq.n	8013cd2 <RegionRxParamSetupReq+0x18>
 8013ccc:	2b08      	cmp	r3, #8
 8013cce:	d005      	beq.n	8013cdc <RegionRxParamSetupReq+0x22>
 8013cd0:	e009      	b.n	8013ce6 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8013cd2:	6838      	ldr	r0, [r7, #0]
 8013cd4:	f002 f80c 	bl	8015cf0 <RegionEU868RxParamSetupReq>
 8013cd8:	4603      	mov	r3, r0
 8013cda:	e005      	b.n	8013ce8 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8013cdc:	6838      	ldr	r0, [r7, #0]
 8013cde:	f003 fb39 	bl	8017354 <RegionUS915RxParamSetupReq>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	e000      	b.n	8013ce8 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013ce6:	2300      	movs	r3, #0
        }
    }
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3708      	adds	r7, #8
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b082      	sub	sp, #8
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	6039      	str	r1, [r7, #0]
 8013cfa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013cfc:	79fb      	ldrb	r3, [r7, #7]
 8013cfe:	2b05      	cmp	r3, #5
 8013d00:	d002      	beq.n	8013d08 <RegionNewChannelReq+0x18>
 8013d02:	2b08      	cmp	r3, #8
 8013d04:	d005      	beq.n	8013d12 <RegionNewChannelReq+0x22>
 8013d06:	e009      	b.n	8013d1c <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8013d08:	6838      	ldr	r0, [r7, #0]
 8013d0a:	f002 f82f 	bl	8015d6c <RegionEU868NewChannelReq>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	e005      	b.n	8013d1e <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8013d12:	6838      	ldr	r0, [r7, #0]
 8013d14:	f003 fb6a 	bl	80173ec <RegionUS915NewChannelReq>
 8013d18:	4603      	mov	r3, r0
 8013d1a:	e000      	b.n	8013d1e <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013d1c:	2300      	movs	r3, #0
        }
    }
}
 8013d1e:	4618      	mov	r0, r3
 8013d20:	3708      	adds	r7, #8
 8013d22:	46bd      	mov	sp, r7
 8013d24:	bd80      	pop	{r7, pc}

08013d26 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8013d26:	b580      	push	{r7, lr}
 8013d28:	b082      	sub	sp, #8
 8013d2a:	af00      	add	r7, sp, #0
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	6039      	str	r1, [r7, #0]
 8013d30:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d32:	79fb      	ldrb	r3, [r7, #7]
 8013d34:	2b05      	cmp	r3, #5
 8013d36:	d002      	beq.n	8013d3e <RegionTxParamSetupReq+0x18>
 8013d38:	2b08      	cmp	r3, #8
 8013d3a:	d005      	beq.n	8013d48 <RegionTxParamSetupReq+0x22>
 8013d3c:	e009      	b.n	8013d52 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8013d3e:	6838      	ldr	r0, [r7, #0]
 8013d40:	f002 f872 	bl	8015e28 <RegionEU868TxParamSetupReq>
 8013d44:	4603      	mov	r3, r0
 8013d46:	e005      	b.n	8013d54 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8013d48:	6838      	ldr	r0, [r7, #0]
 8013d4a:	f003 fb5a 	bl	8017402 <RegionUS915TxParamSetupReq>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	e000      	b.n	8013d54 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8013d52:	2300      	movs	r3, #0
        }
    }
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3708      	adds	r7, #8
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd80      	pop	{r7, pc}

08013d5c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	4603      	mov	r3, r0
 8013d64:	6039      	str	r1, [r7, #0]
 8013d66:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013d68:	79fb      	ldrb	r3, [r7, #7]
 8013d6a:	2b05      	cmp	r3, #5
 8013d6c:	d002      	beq.n	8013d74 <RegionDlChannelReq+0x18>
 8013d6e:	2b08      	cmp	r3, #8
 8013d70:	d005      	beq.n	8013d7e <RegionDlChannelReq+0x22>
 8013d72:	e009      	b.n	8013d88 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8013d74:	6838      	ldr	r0, [r7, #0]
 8013d76:	f002 f863 	bl	8015e40 <RegionEU868DlChannelReq>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	e005      	b.n	8013d8a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8013d7e:	6838      	ldr	r0, [r7, #0]
 8013d80:	f003 fb4a 	bl	8017418 <RegionUS915DlChannelReq>
 8013d84:	4603      	mov	r3, r0
 8013d86:	e000      	b.n	8013d8a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8013d88:	2300      	movs	r3, #0
        }
    }
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3708      	adds	r7, #8
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}

08013d92 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8013d92:	b580      	push	{r7, lr}
 8013d94:	b082      	sub	sp, #8
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	4603      	mov	r3, r0
 8013d9a:	71fb      	strb	r3, [r7, #7]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	71bb      	strb	r3, [r7, #6]
 8013da0:	4613      	mov	r3, r2
 8013da2:	717b      	strb	r3, [r7, #5]
    switch( region )
 8013da4:	79fb      	ldrb	r3, [r7, #7]
 8013da6:	2b05      	cmp	r3, #5
 8013da8:	d002      	beq.n	8013db0 <RegionAlternateDr+0x1e>
 8013daa:	2b08      	cmp	r3, #8
 8013dac:	d009      	beq.n	8013dc2 <RegionAlternateDr+0x30>
 8013dae:	e011      	b.n	8013dd4 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8013db0:	797a      	ldrb	r2, [r7, #5]
 8013db2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013db6:	4611      	mov	r1, r2
 8013db8:	4618      	mov	r0, r3
 8013dba:	f002 f88b 	bl	8015ed4 <RegionEU868AlternateDr>
 8013dbe:	4603      	mov	r3, r0
 8013dc0:	e009      	b.n	8013dd6 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8013dc2:	797a      	ldrb	r2, [r7, #5]
 8013dc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8013dc8:	4611      	mov	r1, r2
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f003 fb30 	bl	8017430 <RegionUS915AlternateDr>
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	e000      	b.n	8013dd6 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8013dd4:	2300      	movs	r3, #0
        }
    }
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3708      	adds	r7, #8
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b084      	sub	sp, #16
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	60b9      	str	r1, [r7, #8]
 8013de6:	607a      	str	r2, [r7, #4]
 8013de8:	603b      	str	r3, [r7, #0]
 8013dea:	4603      	mov	r3, r0
 8013dec:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8013dee:	7bfb      	ldrb	r3, [r7, #15]
 8013df0:	2b05      	cmp	r3, #5
 8013df2:	d002      	beq.n	8013dfa <RegionNextChannel+0x1c>
 8013df4:	2b08      	cmp	r3, #8
 8013df6:	d008      	beq.n	8013e0a <RegionNextChannel+0x2c>
 8013df8:	e00f      	b.n	8013e1a <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8013dfa:	69bb      	ldr	r3, [r7, #24]
 8013dfc:	683a      	ldr	r2, [r7, #0]
 8013dfe:	6879      	ldr	r1, [r7, #4]
 8013e00:	68b8      	ldr	r0, [r7, #8]
 8013e02:	f002 f877 	bl	8015ef4 <RegionEU868NextChannel>
 8013e06:	4603      	mov	r3, r0
 8013e08:	e008      	b.n	8013e1c <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	683a      	ldr	r2, [r7, #0]
 8013e0e:	6879      	ldr	r1, [r7, #4]
 8013e10:	68b8      	ldr	r0, [r7, #8]
 8013e12:	f003 fb49 	bl	80174a8 <RegionUS915NextChannel>
 8013e16:	4603      	mov	r3, r0
 8013e18:	e000      	b.n	8013e1c <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013e1a:	2309      	movs	r3, #9
        }
    }
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3710      	adds	r7, #16
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b082      	sub	sp, #8
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	6039      	str	r1, [r7, #0]
 8013e2e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8013e30:	79fb      	ldrb	r3, [r7, #7]
 8013e32:	2b05      	cmp	r3, #5
 8013e34:	d002      	beq.n	8013e3c <RegionSetContinuousWave+0x18>
 8013e36:	2b08      	cmp	r3, #8
 8013e38:	d004      	beq.n	8013e44 <RegionSetContinuousWave+0x20>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8013e3a:	e006      	b.n	8013e4a <RegionSetContinuousWave+0x26>
        EU868_SET_CONTINUOUS_WAVE( );
 8013e3c:	6838      	ldr	r0, [r7, #0]
 8013e3e:	f002 f9d3 	bl	80161e8 <RegionEU868SetContinuousWave>
 8013e42:	e002      	b.n	8013e4a <RegionSetContinuousWave+0x26>
        US915_SET_CONTINUOUS_WAVE( );
 8013e44:	6838      	ldr	r0, [r7, #0]
 8013e46:	f003 fc21 	bl	801768c <RegionUS915SetContinuousWave>
        }
    }
}
 8013e4a:	bf00      	nop
 8013e4c:	3708      	adds	r7, #8
 8013e4e:	46bd      	mov	sp, r7
 8013e50:	bd80      	pop	{r7, pc}

08013e52 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013e52:	b590      	push	{r4, r7, lr}
 8013e54:	b083      	sub	sp, #12
 8013e56:	af00      	add	r7, sp, #0
 8013e58:	4604      	mov	r4, r0
 8013e5a:	4608      	mov	r0, r1
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	461a      	mov	r2, r3
 8013e60:	4623      	mov	r3, r4
 8013e62:	71fb      	strb	r3, [r7, #7]
 8013e64:	4603      	mov	r3, r0
 8013e66:	71bb      	strb	r3, [r7, #6]
 8013e68:	460b      	mov	r3, r1
 8013e6a:	717b      	strb	r3, [r7, #5]
 8013e6c:	4613      	mov	r3, r2
 8013e6e:	713b      	strb	r3, [r7, #4]
    switch( region )
 8013e70:	79fb      	ldrb	r3, [r7, #7]
 8013e72:	2b05      	cmp	r3, #5
 8013e74:	d002      	beq.n	8013e7c <RegionApplyDrOffset+0x2a>
 8013e76:	2b08      	cmp	r3, #8
 8013e78:	d00a      	beq.n	8013e90 <RegionApplyDrOffset+0x3e>
 8013e7a:	e013      	b.n	8013ea4 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8013e7c:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013e80:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013e84:	79bb      	ldrb	r3, [r7, #6]
 8013e86:	4618      	mov	r0, r3
 8013e88:	f002 f9fc 	bl	8016284 <RegionEU868ApplyDrOffset>
 8013e8c:	4603      	mov	r3, r0
 8013e8e:	e00a      	b.n	8013ea6 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8013e90:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8013e94:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013e98:	79bb      	ldrb	r3, [r7, #6]
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f003 fc4c 	bl	8017738 <RegionUS915ApplyDrOffset>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	e000      	b.n	8013ea6 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8013ea4:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	370c      	adds	r7, #12
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd90      	pop	{r4, r7, pc}
	...

08013eb0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8013eb0:	b480      	push	{r7}
 8013eb2:	b083      	sub	sp, #12
 8013eb4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8013eb6:	4b04      	ldr	r3, [pc, #16]	@ (8013ec8 <RegionGetVersion+0x18>)
 8013eb8:	607b      	str	r3, [r7, #4]

    return version;
 8013eba:	687b      	ldr	r3, [r7, #4]
}
 8013ebc:	4618      	mov	r0, r3
 8013ebe:	370c      	adds	r7, #12
 8013ec0:	46bd      	mov	sp, r7
 8013ec2:	bc80      	pop	{r7}
 8013ec4:	4770      	bx	lr
 8013ec6:	bf00      	nop
 8013ec8:	01010003 	.word	0x01010003

08013ecc <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8013ecc:	b480      	push	{r7}
 8013ece:	b087      	sub	sp, #28
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	60b9      	str	r1, [r7, #8]
 8013ed6:	607a      	str	r2, [r7, #4]
 8013ed8:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d002      	beq.n	8013ee6 <FindAvailable125kHzChannels+0x1a>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013ee6:	2303      	movs	r3, #3
 8013ee8:	e021      	b.n	8013f2e <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	2200      	movs	r2, #0
 8013eee:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	75fb      	strb	r3, [r7, #23]
 8013ef4:	e017      	b.n	8013f26 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8013ef6:	89fa      	ldrh	r2, [r7, #14]
 8013ef8:	7dfb      	ldrb	r3, [r7, #23]
 8013efa:	fa42 f303 	asr.w	r3, r2, r3
 8013efe:	f003 0301 	and.w	r3, r3, #1
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d00c      	beq.n	8013f20 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	461a      	mov	r2, r3
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	4413      	add	r3, r2
 8013f10:	7dfa      	ldrb	r2, [r7, #23]
 8013f12:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	3301      	adds	r3, #1
 8013f1a:	b2da      	uxtb	r2, r3
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8013f20:	7dfb      	ldrb	r3, [r7, #23]
 8013f22:	3301      	adds	r3, #1
 8013f24:	75fb      	strb	r3, [r7, #23]
 8013f26:	7dfb      	ldrb	r3, [r7, #23]
 8013f28:	2b07      	cmp	r3, #7
 8013f2a:	d9e4      	bls.n	8013ef6 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8013f2c:	2300      	movs	r3, #0
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	371c      	adds	r7, #28
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bc80      	pop	{r7}
 8013f36:	4770      	bx	lr

08013f38 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8013f38:	b590      	push	{r4, r7, lr}
 8013f3a:	b089      	sub	sp, #36	@ 0x24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8013f44:	f107 0314 	add.w	r3, r7, #20
 8013f48:	2200      	movs	r2, #0
 8013f4a:	601a      	str	r2, [r3, #0]
 8013f4c:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d005      	beq.n	8013f64 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d002      	beq.n	8013f64 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d101      	bne.n	8013f68 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f64:	2303      	movs	r3, #3
 8013f66:	e055      	b.n	8014014 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	781b      	ldrb	r3, [r3, #0]
 8013f6c:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8013f6e:	7f7b      	ldrb	r3, [r7, #29]
 8013f70:	085b      	lsrs	r3, r3, #1
 8013f72:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8013f74:	7f7b      	ldrb	r3, [r7, #29]
 8013f76:	f003 0301 	and.w	r3, r3, #1
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d107      	bne.n	8013f90 <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8013f80:	7f3b      	ldrb	r3, [r7, #28]
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	68fa      	ldr	r2, [r7, #12]
 8013f86:	4413      	add	r3, r2
 8013f88:	881b      	ldrh	r3, [r3, #0]
 8013f8a:	b2db      	uxtb	r3, r3
 8013f8c:	83fb      	strh	r3, [r7, #30]
 8013f8e:	e006      	b.n	8013f9e <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8013f90:	7f3b      	ldrb	r3, [r7, #28]
 8013f92:	005b      	lsls	r3, r3, #1
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	4413      	add	r3, r2
 8013f98:	881b      	ldrh	r3, [r3, #0]
 8013f9a:	0a1b      	lsrs	r3, r3, #8
 8013f9c:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8013f9e:	f107 0213 	add.w	r2, r7, #19
 8013fa2:	f107 0114 	add.w	r1, r7, #20
 8013fa6:	8bfb      	ldrh	r3, [r7, #30]
 8013fa8:	4618      	mov	r0, r3
 8013faa:	f7ff ff8f 	bl	8013ecc <FindAvailable125kHzChannels>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b03      	cmp	r3, #3
 8013fb2:	d101      	bne.n	8013fb8 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fb4:	2303      	movs	r3, #3
 8013fb6:	e02d      	b.n	8014014 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8013fb8:	7cfb      	ldrb	r3, [r7, #19]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d011      	beq.n	8013fe2 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8013fbe:	7f7b      	ldrb	r3, [r7, #29]
 8013fc0:	00db      	lsls	r3, r3, #3
 8013fc2:	b2dc      	uxtb	r4, r3
 8013fc4:	7cfb      	ldrb	r3, [r7, #19]
 8013fc6:	3b01      	subs	r3, #1
 8013fc8:	4619      	mov	r1, r3
 8013fca:	2000      	movs	r0, #0
 8013fcc:	f003 fc06 	bl	80177dc <randr>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	3320      	adds	r3, #32
 8013fd4:	443b      	add	r3, r7
 8013fd6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8013fda:	4423      	add	r3, r4
 8013fdc:	b2da      	uxtb	r2, r3
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8013fe2:	7f7b      	ldrb	r3, [r7, #29]
 8013fe4:	3301      	adds	r3, #1
 8013fe6:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8013fe8:	7f7b      	ldrb	r3, [r7, #29]
 8013fea:	2b07      	cmp	r3, #7
 8013fec:	d901      	bls.n	8013ff2 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8013ff2:	7cfb      	ldrb	r3, [r7, #19]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d104      	bne.n	8014002 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	7f7a      	ldrb	r2, [r7, #29]
 8013ffe:	429a      	cmp	r2, r3
 8014000:	d1b5      	bne.n	8013f6e <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 8014002:	7cfb      	ldrb	r3, [r7, #19]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d004      	beq.n	8014012 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	7f7a      	ldrb	r2, [r7, #29]
 801400c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801400e:	2300      	movs	r3, #0
 8014010:	e000      	b.n	8014014 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014012:	2303      	movs	r3, #3
}
 8014014:	4618      	mov	r0, r3
 8014016:	3724      	adds	r7, #36	@ 0x24
 8014018:	46bd      	mov	sp, r7
 801401a:	bd90      	pop	{r4, r7, pc}

0801401c <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 801401c:	b480      	push	{r7}
 801401e:	b085      	sub	sp, #20
 8014020:	af00      	add	r7, sp, #0
 8014022:	4603      	mov	r3, r0
 8014024:	60b9      	str	r1, [r7, #8]
 8014026:	607a      	str	r2, [r7, #4]
 8014028:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 801402a:	7bfb      	ldrb	r3, [r7, #15]
 801402c:	687a      	ldr	r2, [r7, #4]
 801402e:	fb03 f202 	mul.w	r2, r3, r2
 8014032:	68bb      	ldr	r3, [r7, #8]
 8014034:	4413      	add	r3, r2
}
 8014036:	4618      	mov	r0, r3
 8014038:	3714      	adds	r7, #20
 801403a:	46bd      	mov	sp, r7
 801403c:	bc80      	pop	{r7}
 801403e:	4770      	bx	lr

08014040 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014040:	b480      	push	{r7}
 8014042:	b087      	sub	sp, #28
 8014044:	af00      	add	r7, sp, #0
 8014046:	60f8      	str	r0, [r7, #12]
 8014048:	4608      	mov	r0, r1
 801404a:	4639      	mov	r1, r7
 801404c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014050:	4603      	mov	r3, r0
 8014052:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014054:	68fb      	ldr	r3, [r7, #12]
 8014056:	881b      	ldrh	r3, [r3, #0]
 8014058:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 801405a:	7afb      	ldrb	r3, [r7, #11]
 801405c:	f083 0301 	eor.w	r3, r3, #1
 8014060:	b2db      	uxtb	r3, r3
 8014062:	2b00      	cmp	r3, #0
 8014064:	d01b      	beq.n	801409e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014066:	f242 7310 	movw	r3, #10000	@ 0x2710
 801406a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 801406c:	683b      	ldr	r3, [r7, #0]
 801406e:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8014072:	d202      	bcs.n	801407a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014074:	2364      	movs	r3, #100	@ 0x64
 8014076:	82bb      	strh	r3, [r7, #20]
 8014078:	e00b      	b.n	8014092 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8014080:	4293      	cmp	r3, r2
 8014082:	d803      	bhi.n	801408c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014084:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014088:	82bb      	strh	r3, [r7, #20]
 801408a:	e002      	b.n	8014092 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 801408c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014090:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8014092:	8aba      	ldrh	r2, [r7, #20]
 8014094:	8afb      	ldrh	r3, [r7, #22]
 8014096:	4293      	cmp	r3, r2
 8014098:	bf38      	it	cc
 801409a:	4613      	movcc	r3, r2
 801409c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801409e:	8afb      	ldrh	r3, [r7, #22]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d101      	bne.n	80140a8 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 80140a4:	2301      	movs	r3, #1
 80140a6:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 80140a8:	8afb      	ldrh	r3, [r7, #22]
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	371c      	adds	r7, #28
 80140ae:	46bd      	mov	sp, r7
 80140b0:	bc80      	pop	{r7}
 80140b2:	4770      	bx	lr

080140b4 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b08e      	sub	sp, #56	@ 0x38
 80140b8:	af02      	add	r7, sp, #8
 80140ba:	60f8      	str	r0, [r7, #12]
 80140bc:	4608      	mov	r0, r1
 80140be:	4639      	mov	r1, r7
 80140c0:	e881 000c 	stmia.w	r1, {r2, r3}
 80140c4:	4603      	mov	r3, r0
 80140c6:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	881b      	ldrh	r3, [r3, #0]
 80140cc:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80140ce:	4b4b      	ldr	r3, [pc, #300]	@ (80141fc <SetMaxTimeCredits+0x148>)
 80140d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 80140d2:	463b      	mov	r3, r7
 80140d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80140d8:	f007 f828 	bl	801b12c <SysTimeToMs>
 80140dc:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80140de:	f107 0314 	add.w	r3, r7, #20
 80140e2:	2200      	movs	r2, #0
 80140e4:	601a      	str	r2, [r3, #0]
 80140e6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80140e8:	7af9      	ldrb	r1, [r7, #11]
 80140ea:	463b      	mov	r3, r7
 80140ec:	cb0c      	ldmia	r3, {r2, r3}
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f7ff ffa6 	bl	8014040 <GetDutyCycle>
 80140f4:	4603      	mov	r3, r0
 80140f6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80140f8:	7afb      	ldrb	r3, [r7, #11]
 80140fa:	f083 0301 	eor.w	r3, r3, #1
 80140fe:	b2db      	uxtb	r3, r3
 8014100:	2b00      	cmp	r3, #0
 8014102:	d062      	beq.n	80141ca <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014104:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014106:	2b64      	cmp	r3, #100	@ 0x64
 8014108:	d105      	bne.n	8014116 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801410a:	4b3c      	ldr	r3, [pc, #240]	@ (80141fc <SetMaxTimeCredits+0x148>)
 801410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014112:	609a      	str	r2, [r3, #8]
 8014114:	e00b      	b.n	801412e <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014116:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801411c:	d105      	bne.n	801412a <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801411e:	4b38      	ldr	r3, [pc, #224]	@ (8014200 <SetMaxTimeCredits+0x14c>)
 8014120:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8014122:	68fb      	ldr	r3, [r7, #12]
 8014124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014126:	609a      	str	r2, [r3, #8]
 8014128:	e001      	b.n	801412e <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801412a:	4b36      	ldr	r3, [pc, #216]	@ (8014204 <SetMaxTimeCredits+0x150>)
 801412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	689a      	ldr	r2, [r3, #8]
 8014132:	f107 031c 	add.w	r3, r7, #28
 8014136:	4611      	mov	r1, r2
 8014138:	4618      	mov	r0, r3
 801413a:	f007 f81f 	bl	801b17c <SysTimeFromMs>
 801413e:	f107 0014 	add.w	r0, r7, #20
 8014142:	6a3b      	ldr	r3, [r7, #32]
 8014144:	9300      	str	r3, [sp, #0]
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	463a      	mov	r2, r7
 801414a:	ca06      	ldmia	r2, {r1, r2}
 801414c:	f006 ff2f 	bl	801afae <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014150:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8014154:	f083 0301 	eor.w	r3, r3, #1
 8014158:	b2db      	uxtb	r3, r3
 801415a:	2b00      	cmp	r3, #0
 801415c:	d006      	beq.n	801416c <SetMaxTimeCredits+0xb8>
 801415e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8014162:	f083 0301 	eor.w	r3, r3, #1
 8014166:	b2db      	uxtb	r3, r3
 8014168:	2b00      	cmp	r3, #0
 801416a:	d108      	bne.n	801417e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8014170:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014172:	429a      	cmp	r2, r3
 8014174:	d103      	bne.n	801417e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014176:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014178:	4a23      	ldr	r2, [pc, #140]	@ (8014208 <SetMaxTimeCredits+0x154>)
 801417a:	4293      	cmp	r3, r2
 801417c:	d92f      	bls.n	80141de <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014182:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014184:	683b      	ldr	r3, [r7, #0]
 8014186:	4a21      	ldr	r2, [pc, #132]	@ (801420c <SetMaxTimeCredits+0x158>)
 8014188:	4293      	cmp	r3, r2
 801418a:	d928      	bls.n	80141de <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8014192:	3b30      	subs	r3, #48	@ 0x30
 8014194:	4a1e      	ldr	r2, [pc, #120]	@ (8014210 <SetMaxTimeCredits+0x15c>)
 8014196:	fba2 2303 	umull	r2, r3, r2, r3
 801419a:	0c1b      	lsrs	r3, r3, #16
 801419c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	4a1c      	ldr	r2, [pc, #112]	@ (8014214 <SetMaxTimeCredits+0x160>)
 80141a2:	fb02 f303 	mul.w	r3, r2, r3
 80141a6:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80141a8:	697b      	ldr	r3, [r7, #20]
 80141aa:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 80141ae:	3330      	adds	r3, #48	@ 0x30
 80141b0:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 80141b2:	2300      	movs	r3, #0
 80141b4:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80141b6:	f107 0314 	add.w	r3, r7, #20
 80141ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80141be:	f006 ffb5 	bl	801b12c <SysTimeToMs>
 80141c2:	4602      	mov	r2, r0
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	609a      	str	r2, [r3, #8]
 80141c8:	e009      	b.n	80141de <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 80141ca:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80141ce:	f083 0301 	eor.w	r3, r3, #1
 80141d2:	b2db      	uxtb	r3, r3
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d002      	beq.n	80141de <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141dc:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	685b      	ldr	r3, [r3, #4]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d102      	bne.n	80141ec <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80141e6:	68fb      	ldr	r3, [r7, #12]
 80141e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141ea:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80141f0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80141f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80141f4:	4618      	mov	r0, r3
 80141f6:	3730      	adds	r7, #48	@ 0x30
 80141f8:	46bd      	mov	sp, r7
 80141fa:	bd80      	pop	{r7, pc}
 80141fc:	001b7740 	.word	0x001b7740
 8014200:	0112a880 	.word	0x0112a880
 8014204:	02932e00 	.word	0x02932e00
 8014208:	0001517f 	.word	0x0001517f
 801420c:	0001ec2f 	.word	0x0001ec2f
 8014210:	c22e4507 	.word	0xc22e4507
 8014214:	00015180 	.word	0x00015180

08014218 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b086      	sub	sp, #24
 801421c:	af02      	add	r7, sp, #8
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	4608      	mov	r0, r1
 8014222:	4611      	mov	r1, r2
 8014224:	461a      	mov	r2, r3
 8014226:	4603      	mov	r3, r0
 8014228:	70fb      	strb	r3, [r7, #3]
 801422a:	460b      	mov	r3, r1
 801422c:	70bb      	strb	r3, [r7, #2]
 801422e:	4613      	mov	r3, r2
 8014230:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8014232:	78f9      	ldrb	r1, [r7, #3]
 8014234:	787b      	ldrb	r3, [r7, #1]
 8014236:	9301      	str	r3, [sp, #4]
 8014238:	78bb      	ldrb	r3, [r7, #2]
 801423a:	9300      	str	r3, [sp, #0]
 801423c:	f107 0318 	add.w	r3, r7, #24
 8014240:	cb0c      	ldmia	r3, {r2, r3}
 8014242:	6878      	ldr	r0, [r7, #4]
 8014244:	f7ff ff36 	bl	80140b4 <SetMaxTimeCredits>
 8014248:	4603      	mov	r3, r0
 801424a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 801424c:	78fb      	ldrb	r3, [r7, #3]
 801424e:	2b00      	cmp	r3, #0
 8014250:	d00a      	beq.n	8014268 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	685b      	ldr	r3, [r3, #4]
 8014256:	4618      	mov	r0, r3
 8014258:	f007 fda2 	bl	801bda0 <UTIL_TIMER_GetElapsedTime>
 801425c:	4602      	mov	r2, r0
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	68db      	ldr	r3, [r3, #12]
 8014262:	441a      	add	r2, r3
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	68da      	ldr	r2, [r3, #12]
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	691b      	ldr	r3, [r3, #16]
 8014270:	429a      	cmp	r2, r3
 8014272:	d903      	bls.n	801427c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	691a      	ldr	r2, [r3, #16]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	6a3a      	ldr	r2, [r7, #32]
 8014280:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014282:	89fb      	ldrh	r3, [r7, #14]
}
 8014284:	4618      	mov	r0, r3
 8014286:	3710      	adds	r7, #16
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 801428c:	b480      	push	{r7}
 801428e:	b085      	sub	sp, #20
 8014290:	af00      	add	r7, sp, #0
 8014292:	4603      	mov	r3, r0
 8014294:	460a      	mov	r2, r1
 8014296:	80fb      	strh	r3, [r7, #6]
 8014298:	4613      	mov	r3, r2
 801429a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80142a0:	2300      	movs	r3, #0
 80142a2:	73bb      	strb	r3, [r7, #14]
 80142a4:	e011      	b.n	80142ca <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80142a6:	88fa      	ldrh	r2, [r7, #6]
 80142a8:	7bbb      	ldrb	r3, [r7, #14]
 80142aa:	2101      	movs	r1, #1
 80142ac:	fa01 f303 	lsl.w	r3, r1, r3
 80142b0:	401a      	ands	r2, r3
 80142b2:	7bbb      	ldrb	r3, [r7, #14]
 80142b4:	2101      	movs	r1, #1
 80142b6:	fa01 f303 	lsl.w	r3, r1, r3
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d102      	bne.n	80142c4 <CountChannels+0x38>
        {
            nbActiveBits++;
 80142be:	7bfb      	ldrb	r3, [r7, #15]
 80142c0:	3301      	adds	r3, #1
 80142c2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80142c4:	7bbb      	ldrb	r3, [r7, #14]
 80142c6:	3301      	adds	r3, #1
 80142c8:	73bb      	strb	r3, [r7, #14]
 80142ca:	7bba      	ldrb	r2, [r7, #14]
 80142cc:	797b      	ldrb	r3, [r7, #5]
 80142ce:	429a      	cmp	r2, r3
 80142d0:	d3e9      	bcc.n	80142a6 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80142d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80142d4:	4618      	mov	r0, r3
 80142d6:	3714      	adds	r7, #20
 80142d8:	46bd      	mov	sp, r7
 80142da:	bc80      	pop	{r7}
 80142dc:	4770      	bx	lr

080142de <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 80142de:	b580      	push	{r7, lr}
 80142e0:	b084      	sub	sp, #16
 80142e2:	af00      	add	r7, sp, #0
 80142e4:	6039      	str	r1, [r7, #0]
 80142e6:	4611      	mov	r1, r2
 80142e8:	461a      	mov	r2, r3
 80142ea:	4603      	mov	r3, r0
 80142ec:	71fb      	strb	r3, [r7, #7]
 80142ee:	460b      	mov	r3, r1
 80142f0:	71bb      	strb	r3, [r7, #6]
 80142f2:	4613      	mov	r3, r2
 80142f4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80142f6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 80142fa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80142fe:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014302:	4618      	mov	r0, r3
 8014304:	f000 f85d 	bl	80143c2 <RegionCommonValueInRange>
 8014308:	4603      	mov	r3, r0
 801430a:	2b00      	cmp	r3, #0
 801430c:	d101      	bne.n	8014312 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 801430e:	2300      	movs	r3, #0
 8014310:	e053      	b.n	80143ba <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014312:	2300      	movs	r3, #0
 8014314:	73fb      	strb	r3, [r7, #15]
 8014316:	2300      	movs	r3, #0
 8014318:	73bb      	strb	r3, [r7, #14]
 801431a:	e049      	b.n	80143b0 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801431c:	2300      	movs	r3, #0
 801431e:	737b      	strb	r3, [r7, #13]
 8014320:	e03d      	b.n	801439e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014322:	7bbb      	ldrb	r3, [r7, #14]
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	683a      	ldr	r2, [r7, #0]
 8014328:	4413      	add	r3, r2
 801432a:	881b      	ldrh	r3, [r3, #0]
 801432c:	461a      	mov	r2, r3
 801432e:	7b7b      	ldrb	r3, [r7, #13]
 8014330:	fa42 f303 	asr.w	r3, r2, r3
 8014334:	f003 0301 	and.w	r3, r3, #1
 8014338:	2b00      	cmp	r3, #0
 801433a:	d02d      	beq.n	8014398 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801433c:	7bfa      	ldrb	r2, [r7, #15]
 801433e:	7b7b      	ldrb	r3, [r7, #13]
 8014340:	4413      	add	r3, r2
 8014342:	461a      	mov	r2, r3
 8014344:	4613      	mov	r3, r2
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	4413      	add	r3, r2
 801434a:	009b      	lsls	r3, r3, #2
 801434c:	461a      	mov	r2, r3
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	4413      	add	r3, r2
 8014352:	7a1b      	ldrb	r3, [r3, #8]
 8014354:	f343 0303 	sbfx	r3, r3, #0, #4
 8014358:	b25b      	sxtb	r3, r3
 801435a:	f003 030f 	and.w	r3, r3, #15
 801435e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014360:	7bfa      	ldrb	r2, [r7, #15]
 8014362:	7b7b      	ldrb	r3, [r7, #13]
 8014364:	4413      	add	r3, r2
 8014366:	461a      	mov	r2, r3
 8014368:	4613      	mov	r3, r2
 801436a:	005b      	lsls	r3, r3, #1
 801436c:	4413      	add	r3, r2
 801436e:	009b      	lsls	r3, r3, #2
 8014370:	461a      	mov	r2, r3
 8014372:	69fb      	ldr	r3, [r7, #28]
 8014374:	4413      	add	r3, r2
 8014376:	7a1b      	ldrb	r3, [r3, #8]
 8014378:	f343 1303 	sbfx	r3, r3, #4, #4
 801437c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801437e:	f003 030f 	and.w	r3, r3, #15
 8014382:	b25a      	sxtb	r2, r3
 8014384:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014388:	4618      	mov	r0, r3
 801438a:	f000 f81a 	bl	80143c2 <RegionCommonValueInRange>
 801438e:	4603      	mov	r3, r0
 8014390:	2b01      	cmp	r3, #1
 8014392:	d101      	bne.n	8014398 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014394:	2301      	movs	r3, #1
 8014396:	e010      	b.n	80143ba <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014398:	7b7b      	ldrb	r3, [r7, #13]
 801439a:	3301      	adds	r3, #1
 801439c:	737b      	strb	r3, [r7, #13]
 801439e:	7b7b      	ldrb	r3, [r7, #13]
 80143a0:	2b0f      	cmp	r3, #15
 80143a2:	d9be      	bls.n	8014322 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80143a4:	7bfb      	ldrb	r3, [r7, #15]
 80143a6:	3310      	adds	r3, #16
 80143a8:	73fb      	strb	r3, [r7, #15]
 80143aa:	7bbb      	ldrb	r3, [r7, #14]
 80143ac:	3301      	adds	r3, #1
 80143ae:	73bb      	strb	r3, [r7, #14]
 80143b0:	7bfa      	ldrb	r2, [r7, #15]
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	429a      	cmp	r2, r3
 80143b6:	d3b1      	bcc.n	801431c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80143b8:	2300      	movs	r3, #0
}
 80143ba:	4618      	mov	r0, r3
 80143bc:	3710      	adds	r7, #16
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}

080143c2 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80143c2:	b480      	push	{r7}
 80143c4:	b083      	sub	sp, #12
 80143c6:	af00      	add	r7, sp, #0
 80143c8:	4603      	mov	r3, r0
 80143ca:	71fb      	strb	r3, [r7, #7]
 80143cc:	460b      	mov	r3, r1
 80143ce:	71bb      	strb	r3, [r7, #6]
 80143d0:	4613      	mov	r3, r2
 80143d2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80143d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80143d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80143dc:	429a      	cmp	r2, r3
 80143de:	db07      	blt.n	80143f0 <RegionCommonValueInRange+0x2e>
 80143e0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80143e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80143e8:	429a      	cmp	r2, r3
 80143ea:	dc01      	bgt.n	80143f0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 80143ec:	2301      	movs	r3, #1
 80143ee:	e000      	b.n	80143f2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 80143f0:	2300      	movs	r3, #0
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	370c      	adds	r7, #12
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bc80      	pop	{r7}
 80143fa:	4770      	bx	lr

080143fc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 80143fc:	b480      	push	{r7}
 80143fe:	b085      	sub	sp, #20
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
 8014404:	460b      	mov	r3, r1
 8014406:	70fb      	strb	r3, [r7, #3]
 8014408:	4613      	mov	r3, r2
 801440a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 801440c:	78fb      	ldrb	r3, [r7, #3]
 801440e:	091b      	lsrs	r3, r3, #4
 8014410:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014412:	78bb      	ldrb	r3, [r7, #2]
 8014414:	091b      	lsrs	r3, r3, #4
 8014416:	b2db      	uxtb	r3, r3
 8014418:	7bfa      	ldrb	r2, [r7, #15]
 801441a:	429a      	cmp	r2, r3
 801441c:	d803      	bhi.n	8014426 <RegionCommonChanDisable+0x2a>
 801441e:	78fa      	ldrb	r2, [r7, #3]
 8014420:	78bb      	ldrb	r3, [r7, #2]
 8014422:	429a      	cmp	r2, r3
 8014424:	d301      	bcc.n	801442a <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014426:	2300      	movs	r3, #0
 8014428:	e017      	b.n	801445a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 801442a:	7bfb      	ldrb	r3, [r7, #15]
 801442c:	005b      	lsls	r3, r3, #1
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	4413      	add	r3, r2
 8014432:	881b      	ldrh	r3, [r3, #0]
 8014434:	b21a      	sxth	r2, r3
 8014436:	78fb      	ldrb	r3, [r7, #3]
 8014438:	f003 030f 	and.w	r3, r3, #15
 801443c:	2101      	movs	r1, #1
 801443e:	fa01 f303 	lsl.w	r3, r1, r3
 8014442:	b21b      	sxth	r3, r3
 8014444:	43db      	mvns	r3, r3
 8014446:	b21b      	sxth	r3, r3
 8014448:	4013      	ands	r3, r2
 801444a:	b219      	sxth	r1, r3
 801444c:	7bfb      	ldrb	r3, [r7, #15]
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	687a      	ldr	r2, [r7, #4]
 8014452:	4413      	add	r3, r2
 8014454:	b28a      	uxth	r2, r1
 8014456:	801a      	strh	r2, [r3, #0]

    return true;
 8014458:	2301      	movs	r3, #1
}
 801445a:	4618      	mov	r0, r3
 801445c:	3714      	adds	r7, #20
 801445e:	46bd      	mov	sp, r7
 8014460:	bc80      	pop	{r7}
 8014462:	4770      	bx	lr

08014464 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	6078      	str	r0, [r7, #4]
 801446c:	460b      	mov	r3, r1
 801446e:	70fb      	strb	r3, [r7, #3]
 8014470:	4613      	mov	r3, r2
 8014472:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014474:	2300      	movs	r3, #0
 8014476:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d101      	bne.n	8014482 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 801447e:	2300      	movs	r3, #0
 8014480:	e018      	b.n	80144b4 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014482:	78fb      	ldrb	r3, [r7, #3]
 8014484:	73bb      	strb	r3, [r7, #14]
 8014486:	e010      	b.n	80144aa <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014488:	7bbb      	ldrb	r3, [r7, #14]
 801448a:	005b      	lsls	r3, r3, #1
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	4413      	add	r3, r2
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	2110      	movs	r1, #16
 8014494:	4618      	mov	r0, r3
 8014496:	f7ff fef9 	bl	801428c <CountChannels>
 801449a:	4603      	mov	r3, r0
 801449c:	461a      	mov	r2, r3
 801449e:	7bfb      	ldrb	r3, [r7, #15]
 80144a0:	4413      	add	r3, r2
 80144a2:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80144a4:	7bbb      	ldrb	r3, [r7, #14]
 80144a6:	3301      	adds	r3, #1
 80144a8:	73bb      	strb	r3, [r7, #14]
 80144aa:	7bba      	ldrb	r2, [r7, #14]
 80144ac:	78bb      	ldrb	r3, [r7, #2]
 80144ae:	429a      	cmp	r2, r3
 80144b0:	d3ea      	bcc.n	8014488 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	3710      	adds	r7, #16
 80144b8:	46bd      	mov	sp, r7
 80144ba:	bd80      	pop	{r7, pc}

080144bc <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80144bc:	b480      	push	{r7}
 80144be:	b087      	sub	sp, #28
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	60f8      	str	r0, [r7, #12]
 80144c4:	60b9      	str	r1, [r7, #8]
 80144c6:	4613      	mov	r3, r2
 80144c8:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d016      	beq.n	80144fe <RegionCommonChanMaskCopy+0x42>
 80144d0:	68bb      	ldr	r3, [r7, #8]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d013      	beq.n	80144fe <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80144d6:	2300      	movs	r3, #0
 80144d8:	75fb      	strb	r3, [r7, #23]
 80144da:	e00c      	b.n	80144f6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 80144dc:	7dfb      	ldrb	r3, [r7, #23]
 80144de:	005b      	lsls	r3, r3, #1
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	441a      	add	r2, r3
 80144e4:	7dfb      	ldrb	r3, [r7, #23]
 80144e6:	005b      	lsls	r3, r3, #1
 80144e8:	68f9      	ldr	r1, [r7, #12]
 80144ea:	440b      	add	r3, r1
 80144ec:	8812      	ldrh	r2, [r2, #0]
 80144ee:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	3301      	adds	r3, #1
 80144f4:	75fb      	strb	r3, [r7, #23]
 80144f6:	7dfa      	ldrb	r2, [r7, #23]
 80144f8:	79fb      	ldrb	r3, [r7, #7]
 80144fa:	429a      	cmp	r2, r3
 80144fc:	d3ee      	bcc.n	80144dc <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 80144fe:	bf00      	nop
 8014500:	371c      	adds	r7, #28
 8014502:	46bd      	mov	sp, r7
 8014504:	bc80      	pop	{r7}
 8014506:	4770      	bx	lr

08014508 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014508:	b082      	sub	sp, #8
 801450a:	b580      	push	{r7, lr}
 801450c:	b086      	sub	sp, #24
 801450e:	af00      	add	r7, sp, #0
 8014510:	60f8      	str	r0, [r7, #12]
 8014512:	60b9      	str	r1, [r7, #8]
 8014514:	627b      	str	r3, [r7, #36]	@ 0x24
 8014516:	4613      	mov	r3, r2
 8014518:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 801451a:	79f9      	ldrb	r1, [r7, #7]
 801451c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014520:	cb0c      	ldmia	r3, {r2, r3}
 8014522:	68f8      	ldr	r0, [r7, #12]
 8014524:	f7ff fd8c 	bl	8014040 <GetDutyCycle>
 8014528:	4603      	mov	r3, r0
 801452a:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	68da      	ldr	r2, [r3, #12]
 8014530:	8afb      	ldrh	r3, [r7, #22]
 8014532:	68b9      	ldr	r1, [r7, #8]
 8014534:	fb01 f303 	mul.w	r3, r1, r3
 8014538:	429a      	cmp	r2, r3
 801453a:	d909      	bls.n	8014550 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	68da      	ldr	r2, [r3, #12]
 8014540:	8afb      	ldrh	r3, [r7, #22]
 8014542:	68b9      	ldr	r1, [r7, #8]
 8014544:	fb01 f303 	mul.w	r3, r1, r3
 8014548:	1ad2      	subs	r2, r2, r3
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801454e:	e002      	b.n	8014556 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2200      	movs	r2, #0
 8014554:	60da      	str	r2, [r3, #12]
}
 8014556:	bf00      	nop
 8014558:	3718      	adds	r7, #24
 801455a:	46bd      	mov	sp, r7
 801455c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014560:	b002      	add	sp, #8
 8014562:	4770      	bx	lr

08014564 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014566:	b08f      	sub	sp, #60	@ 0x3c
 8014568:	af04      	add	r7, sp, #16
 801456a:	6039      	str	r1, [r7, #0]
 801456c:	4611      	mov	r1, r2
 801456e:	461a      	mov	r2, r3
 8014570:	4603      	mov	r3, r0
 8014572:	71fb      	strb	r3, [r7, #7]
 8014574:	460b      	mov	r3, r1
 8014576:	71bb      	strb	r3, [r7, #6]
 8014578:	4613      	mov	r3, r2
 801457a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801457c:	f04f 33ff 	mov.w	r3, #4294967295
 8014580:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014582:	f007 fbfb 	bl	801bd7c <UTIL_TIMER_GetCurrentTime>
 8014586:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014588:	2300      	movs	r3, #0
 801458a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801458c:	2301      	movs	r3, #1
 801458e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014590:	2300      	movs	r3, #0
 8014592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014596:	2300      	movs	r3, #0
 8014598:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801459c:	e0ba      	b.n	8014714 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801459e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145a2:	4613      	mov	r3, r2
 80145a4:	005b      	lsls	r3, r3, #1
 80145a6:	4413      	add	r3, r2
 80145a8:	00db      	lsls	r3, r3, #3
 80145aa:	461a      	mov	r2, r3
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	189c      	adds	r4, r3, r2
 80145b0:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80145b4:	797a      	ldrb	r2, [r7, #5]
 80145b6:	79fd      	ldrb	r5, [r7, #7]
 80145b8:	69fb      	ldr	r3, [r7, #28]
 80145ba:	9302      	str	r3, [sp, #8]
 80145bc:	46ec      	mov	ip, sp
 80145be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80145c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80145c6:	e88c 0003 	stmia.w	ip, {r0, r1}
 80145ca:	4633      	mov	r3, r6
 80145cc:	4629      	mov	r1, r5
 80145ce:	4620      	mov	r0, r4
 80145d0:	f7ff fe22 	bl	8014218 <UpdateTimeCredits>
 80145d4:	4603      	mov	r3, r0
 80145d6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80145d8:	8afa      	ldrh	r2, [r7, #22]
 80145da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80145dc:	fb02 f303 	mul.w	r3, r2, r3
 80145e0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80145e2:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	461a      	mov	r2, r3
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	4413      	add	r3, r2
 80145f4:	68db      	ldr	r3, [r3, #12]
 80145f6:	69ba      	ldr	r2, [r7, #24]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d908      	bls.n	801460e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80145fc:	797b      	ldrb	r3, [r7, #5]
 80145fe:	f083 0301 	eor.w	r3, r3, #1
 8014602:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8014604:	2b00      	cmp	r3, #0
 8014606:	d013      	beq.n	8014630 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014608:	79fb      	ldrb	r3, [r7, #7]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d010      	beq.n	8014630 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801460e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	461a      	mov	r2, r3
 801461c:	683b      	ldr	r3, [r7, #0]
 801461e:	4413      	add	r3, r2
 8014620:	2201      	movs	r2, #1
 8014622:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014624:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014628:	3301      	adds	r3, #1
 801462a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 801462e:	e06c      	b.n	801470a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014630:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014634:	4613      	mov	r3, r2
 8014636:	005b      	lsls	r3, r3, #1
 8014638:	4413      	add	r3, r2
 801463a:	00db      	lsls	r3, r3, #3
 801463c:	461a      	mov	r2, r3
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	4413      	add	r3, r2
 8014642:	2200      	movs	r2, #0
 8014644:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8014646:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801464a:	4613      	mov	r3, r2
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	461a      	mov	r2, r3
 8014654:	683b      	ldr	r3, [r7, #0]
 8014656:	4413      	add	r3, r2
 8014658:	691b      	ldr	r3, [r3, #16]
 801465a:	69ba      	ldr	r2, [r7, #24]
 801465c:	429a      	cmp	r2, r3
 801465e:	d815      	bhi.n	801468c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014660:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014664:	4613      	mov	r3, r2
 8014666:	005b      	lsls	r3, r3, #1
 8014668:	4413      	add	r3, r2
 801466a:	00db      	lsls	r3, r3, #3
 801466c:	461a      	mov	r2, r3
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	4413      	add	r3, r2
 8014672:	68db      	ldr	r3, [r3, #12]
 8014674:	69ba      	ldr	r2, [r7, #24]
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801467a:	4293      	cmp	r3, r2
 801467c:	bf28      	it	cs
 801467e:	4613      	movcs	r3, r2
 8014680:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014682:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014686:	3301      	adds	r3, #1
 8014688:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801468c:	79fb      	ldrb	r3, [r7, #7]
 801468e:	f083 0301 	eor.w	r3, r3, #1
 8014692:	b2db      	uxtb	r3, r3
 8014694:	2b00      	cmp	r3, #0
 8014696:	d038      	beq.n	801470a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014698:	2300      	movs	r3, #0
 801469a:	60fb      	str	r3, [r7, #12]
 801469c:	2300      	movs	r3, #0
 801469e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80146a0:	8afb      	ldrh	r3, [r7, #22]
 80146a2:	2b64      	cmp	r3, #100	@ 0x64
 80146a4:	d103      	bne.n	80146ae <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80146a6:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80146aa:	60fb      	str	r3, [r7, #12]
 80146ac:	e009      	b.n	80146c2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80146ae:	8afb      	ldrh	r3, [r7, #22]
 80146b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80146b4:	d103      	bne.n	80146be <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80146b6:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80146ba:	60fb      	str	r3, [r7, #12]
 80146bc:	e001      	b.n	80146c2 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80146be:	4b1e      	ldr	r3, [pc, #120]	@ (8014738 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80146c0:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80146c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146c4:	4a1c      	ldr	r2, [pc, #112]	@ (8014738 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d90e      	bls.n	80146e8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80146ca:	68fa      	ldr	r2, [r7, #12]
 80146cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146ce:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80146d2:	3b30      	subs	r3, #48	@ 0x30
 80146d4:	4919      	ldr	r1, [pc, #100]	@ (801473c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80146d6:	fba1 1303 	umull	r1, r3, r1, r3
 80146da:	0c1b      	lsrs	r3, r3, #16
 80146dc:	3301      	adds	r3, #1
 80146de:	4918      	ldr	r1, [pc, #96]	@ (8014740 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80146e0:	fb01 f303 	mul.w	r3, r1, r3
 80146e4:	4413      	add	r3, r2
 80146e6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80146e8:	f107 000c 	add.w	r0, r7, #12
 80146ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80146ee:	9300      	str	r3, [sp, #0]
 80146f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146f2:	f107 020c 	add.w	r2, r7, #12
 80146f6:	ca06      	ldmia	r2, {r1, r2}
 80146f8:	f006 fc59 	bl	801afae <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80146fc:	f107 030c 	add.w	r3, r7, #12
 8014700:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014704:	f006 fd12 	bl	801b12c <SysTimeToMs>
 8014708:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801470a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801470e:	3301      	adds	r3, #1
 8014710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014714:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014718:	79bb      	ldrb	r3, [r7, #6]
 801471a:	429a      	cmp	r2, r3
 801471c:	f4ff af3f 	bcc.w	801459e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8014720:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014724:	2b00      	cmp	r3, #0
 8014726:	d102      	bne.n	801472e <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014728:	f04f 33ff 	mov.w	r3, #4294967295
 801472c:	e000      	b.n	8014730 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 801472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014730:	4618      	mov	r0, r3
 8014732:	372c      	adds	r7, #44	@ 0x2c
 8014734:	46bd      	mov	sp, r7
 8014736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014738:	0001ec30 	.word	0x0001ec30
 801473c:	c22e4507 	.word	0xc22e4507
 8014740:	00015180 	.word	0x00015180

08014744 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014744:	b480      	push	{r7}
 8014746:	b085      	sub	sp, #20
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801474e:	2300      	movs	r3, #0
 8014750:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	781b      	ldrb	r3, [r3, #0]
 8014756:	2b03      	cmp	r3, #3
 8014758:	d140      	bne.n	80147dc <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	3301      	adds	r3, #1
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	b25a      	sxtb	r2, r3
 8014762:	683b      	ldr	r3, [r7, #0]
 8014764:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014766:	683b      	ldr	r3, [r7, #0]
 8014768:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801476c:	f003 030f 	and.w	r3, r3, #15
 8014770:	b25a      	sxtb	r2, r3
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801477c:	b2db      	uxtb	r3, r3
 801477e:	091b      	lsrs	r3, r3, #4
 8014780:	b2db      	uxtb	r3, r3
 8014782:	b25a      	sxtb	r2, r3
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	3302      	adds	r3, #2
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	461a      	mov	r2, r3
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	889b      	ldrh	r3, [r3, #4]
 8014798:	b21a      	sxth	r2, r3
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	3303      	adds	r3, #3
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	b21b      	sxth	r3, r3
 80147a2:	021b      	lsls	r3, r3, #8
 80147a4:	b21b      	sxth	r3, r3
 80147a6:	4313      	orrs	r3, r2
 80147a8:	b21b      	sxth	r3, r3
 80147aa:	b29a      	uxth	r2, r3
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	791a      	ldrb	r2, [r3, #4]
 80147b4:	683b      	ldr	r3, [r7, #0]
 80147b6:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80147b8:	683b      	ldr	r3, [r7, #0]
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	091b      	lsrs	r3, r3, #4
 80147be:	b2db      	uxtb	r3, r3
 80147c0:	f003 0307 	and.w	r3, r3, #7
 80147c4:	b2da      	uxtb	r2, r3
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80147ca:	683b      	ldr	r3, [r7, #0]
 80147cc:	781b      	ldrb	r3, [r3, #0]
 80147ce:	f003 030f 	and.w	r3, r3, #15
 80147d2:	b2da      	uxtb	r2, r3
 80147d4:	683b      	ldr	r3, [r7, #0]
 80147d6:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80147d8:	2305      	movs	r3, #5
 80147da:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80147dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3714      	adds	r7, #20
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bc80      	pop	{r7}
 80147e6:	4770      	bx	lr

080147e8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80147e8:	b5b0      	push	{r4, r5, r7, lr}
 80147ea:	b088      	sub	sp, #32
 80147ec:	af02      	add	r7, sp, #8
 80147ee:	60f8      	str	r0, [r7, #12]
 80147f0:	60b9      	str	r1, [r7, #8]
 80147f2:	607a      	str	r2, [r7, #4]
 80147f4:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	791b      	ldrb	r3, [r3, #4]
 80147fa:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	799b      	ldrb	r3, [r3, #6]
 8014800:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	79db      	ldrb	r3, [r3, #7]
 8014806:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	7a1b      	ldrb	r3, [r3, #8]
 801480c:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	795b      	ldrb	r3, [r3, #5]
 8014812:	f083 0301 	eor.w	r3, r3, #1
 8014816:	b2db      	uxtb	r3, r3
 8014818:	2b00      	cmp	r3, #0
 801481a:	d008      	beq.n	801482e <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801481c:	68fb      	ldr	r3, [r7, #12]
 801481e:	7adb      	ldrb	r3, [r3, #11]
 8014820:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	7a5b      	ldrb	r3, [r3, #9]
 8014826:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014828:	68fb      	ldr	r3, [r7, #12]
 801482a:	7a9b      	ldrb	r3, [r3, #10]
 801482c:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 801482e:	7dfb      	ldrb	r3, [r7, #23]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d04a      	beq.n	80148ca <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014834:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8014838:	2b0f      	cmp	r3, #15
 801483a:	d103      	bne.n	8014844 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	7a5b      	ldrb	r3, [r3, #9]
 8014840:	75bb      	strb	r3, [r7, #22]
 8014842:	e01d      	b.n	8014880 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014844:	68fb      	ldr	r3, [r7, #12]
 8014846:	7b18      	ldrb	r0, [r3, #12]
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	6919      	ldr	r1, [r3, #16]
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8014852:	68fb      	ldr	r3, [r7, #12]
 8014854:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	6992      	ldr	r2, [r2, #24]
 801485c:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8014860:	9201      	str	r2, [sp, #4]
 8014862:	9300      	str	r3, [sp, #0]
 8014864:	462b      	mov	r3, r5
 8014866:	4622      	mov	r2, r4
 8014868:	f7ff fd39 	bl	80142de <RegionCommonChanVerifyDr>
 801486c:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801486e:	f083 0301 	eor.w	r3, r3, #1
 8014872:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8014874:	2b00      	cmp	r3, #0
 8014876:	d003      	beq.n	8014880 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8014878:	7dfb      	ldrb	r3, [r7, #23]
 801487a:	f023 0302 	bic.w	r3, r3, #2
 801487e:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8014880:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8014884:	2b0f      	cmp	r3, #15
 8014886:	d103      	bne.n	8014890 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	7a9b      	ldrb	r3, [r3, #10]
 801488c:	757b      	strb	r3, [r7, #21]
 801488e:	e01c      	b.n	80148ca <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801489c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7ff fd8e 	bl	80143c2 <RegionCommonValueInRange>
 80148a6:	4603      	mov	r3, r0
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d10e      	bne.n	80148ca <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80148b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80148b6:	429a      	cmp	r2, r3
 80148b8:	da03      	bge.n	80148c2 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	7f5b      	ldrb	r3, [r3, #29]
 80148be:	757b      	strb	r3, [r7, #21]
 80148c0:	e003      	b.n	80148ca <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80148c2:	7dfb      	ldrb	r3, [r7, #23]
 80148c4:	f023 0304 	bic.w	r3, r3, #4
 80148c8:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80148ca:	7dfb      	ldrb	r3, [r7, #23]
 80148cc:	2b07      	cmp	r3, #7
 80148ce:	d105      	bne.n	80148dc <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80148d0:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d101      	bne.n	80148dc <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80148d8:	2301      	movs	r3, #1
 80148da:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	7dba      	ldrb	r2, [r7, #22]
 80148e0:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	7d7a      	ldrb	r2, [r7, #21]
 80148e6:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80148e8:	7d3a      	ldrb	r2, [r7, #20]
 80148ea:	683b      	ldr	r3, [r7, #0]
 80148ec:	701a      	strb	r2, [r3, #0]

    return status;
 80148ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3718      	adds	r7, #24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bdb0      	pop	{r4, r5, r7, pc}

080148f8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80148f8:	b480      	push	{r7}
 80148fa:	b083      	sub	sp, #12
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	4603      	mov	r3, r0
 8014900:	6039      	str	r1, [r7, #0]
 8014902:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8014904:	79fb      	ldrb	r3, [r7, #7]
 8014906:	4a06      	ldr	r2, [pc, #24]	@ (8014920 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8014908:	fa02 f303 	lsl.w	r3, r2, r3
 801490c:	461a      	mov	r2, r3
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014914:	4618      	mov	r0, r3
 8014916:	370c      	adds	r7, #12
 8014918:	46bd      	mov	sp, r7
 801491a:	bc80      	pop	{r7}
 801491c:	4770      	bx	lr
 801491e:	bf00      	nop
 8014920:	000f4240 	.word	0x000f4240

08014924 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 8014924:	b480      	push	{r7}
 8014926:	b083      	sub	sp, #12
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 801492e:	79fb      	ldrb	r3, [r7, #7]
 8014930:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8014934:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8014938:	4618      	mov	r0, r3
 801493a:	370c      	adds	r7, #12
 801493c:	46bd      	mov	sp, r7
 801493e:	bc80      	pop	{r7}
 8014940:	4770      	bx	lr
	...

08014944 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8014944:	b480      	push	{r7}
 8014946:	b085      	sub	sp, #20
 8014948:	af00      	add	r7, sp, #0
 801494a:	60f8      	str	r0, [r7, #12]
 801494c:	607a      	str	r2, [r7, #4]
 801494e:	603b      	str	r3, [r7, #0]
 8014950:	460b      	mov	r3, r1
 8014952:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8014954:	7afa      	ldrb	r2, [r7, #11]
 8014956:	7afb      	ldrb	r3, [r7, #11]
 8014958:	3b04      	subs	r3, #4
 801495a:	4619      	mov	r1, r3
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	fb03 f101 	mul.w	r1, r3, r1
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014968:	fb00 f303 	mul.w	r3, r0, r3
 801496c:	440b      	add	r3, r1
 801496e:	005b      	lsls	r3, r3, #1
 8014970:	2b00      	cmp	r3, #0
 8014972:	d013      	beq.n	801499c <RegionCommonComputeRxWindowParameters+0x58>
 8014974:	7afb      	ldrb	r3, [r7, #11]
 8014976:	3b04      	subs	r3, #4
 8014978:	4619      	mov	r1, r3
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	fb03 f101 	mul.w	r1, r3, r1
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8014986:	fb00 f303 	mul.w	r3, r0, r3
 801498a:	440b      	add	r3, r1
 801498c:	0059      	lsls	r1, r3, #1
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	440b      	add	r3, r1
 8014992:	1e59      	subs	r1, r3, #1
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	fbb1 f3f3 	udiv	r3, r1, r3
 801499a:	e00f      	b.n	80149bc <RegionCommonComputeRxWindowParameters+0x78>
 801499c:	7afb      	ldrb	r3, [r7, #11]
 801499e:	3b04      	subs	r3, #4
 80149a0:	4619      	mov	r1, r3
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	fb03 f101 	mul.w	r1, r3, r1
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80149ae:	fb00 f303 	mul.w	r3, r0, r3
 80149b2:	440b      	add	r3, r1
 80149b4:	0059      	lsls	r1, r3, #1
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80149bc:	429a      	cmp	r2, r3
 80149be:	bf38      	it	cc
 80149c0:	461a      	movcc	r2, r3
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	009b      	lsls	r3, r3, #2
 80149ca:	4619      	mov	r1, r3
 80149cc:	69bb      	ldr	r3, [r7, #24]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	fb02 f303 	mul.w	r3, r2, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d007      	beq.n	80149ea <RegionCommonComputeRxWindowParameters+0xa6>
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	68fa      	ldr	r2, [r7, #12]
 80149e0:	fb02 f303 	mul.w	r3, r2, r3
 80149e4:	3301      	adds	r3, #1
 80149e6:	085b      	lsrs	r3, r3, #1
 80149e8:	e005      	b.n	80149f6 <RegionCommonComputeRxWindowParameters+0xb2>
 80149ea:	69bb      	ldr	r3, [r7, #24]
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	68fa      	ldr	r2, [r7, #12]
 80149f0:	fb02 f303 	mul.w	r3, r2, r3
 80149f4:	085b      	lsrs	r3, r3, #1
 80149f6:	1acb      	subs	r3, r1, r3
 80149f8:	683a      	ldr	r2, [r7, #0]
 80149fa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80149fe:	fb01 f202 	mul.w	r2, r1, r2
 8014a02:	1a9b      	subs	r3, r3, r2
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	dd27      	ble.n	8014a58 <RegionCommonComputeRxWindowParameters+0x114>
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	009b      	lsls	r3, r3, #2
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	69bb      	ldr	r3, [r7, #24]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	68fa      	ldr	r2, [r7, #12]
 8014a14:	fb02 f303 	mul.w	r3, r2, r3
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d007      	beq.n	8014a2c <RegionCommonComputeRxWindowParameters+0xe8>
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	68fa      	ldr	r2, [r7, #12]
 8014a22:	fb02 f303 	mul.w	r3, r2, r3
 8014a26:	3301      	adds	r3, #1
 8014a28:	085b      	lsrs	r3, r3, #1
 8014a2a:	e005      	b.n	8014a38 <RegionCommonComputeRxWindowParameters+0xf4>
 8014a2c:	69bb      	ldr	r3, [r7, #24]
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	68fa      	ldr	r2, [r7, #12]
 8014a32:	fb02 f303 	mul.w	r3, r2, r3
 8014a36:	085b      	lsrs	r3, r3, #1
 8014a38:	1acb      	subs	r3, r1, r3
 8014a3a:	683a      	ldr	r2, [r7, #0]
 8014a3c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014a40:	fb01 f202 	mul.w	r2, r1, r2
 8014a44:	1a9b      	subs	r3, r3, r2
 8014a46:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8014a4a:	4a19      	ldr	r2, [pc, #100]	@ (8014ab0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8014a50:	1192      	asrs	r2, r2, #6
 8014a52:	17db      	asrs	r3, r3, #31
 8014a54:	1ad3      	subs	r3, r2, r3
 8014a56:	e024      	b.n	8014aa2 <RegionCommonComputeRxWindowParameters+0x15e>
 8014a58:	68fb      	ldr	r3, [r7, #12]
 8014a5a:	009b      	lsls	r3, r3, #2
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	69bb      	ldr	r3, [r7, #24]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	68fa      	ldr	r2, [r7, #12]
 8014a64:	fb02 f303 	mul.w	r3, r2, r3
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d007      	beq.n	8014a7c <RegionCommonComputeRxWindowParameters+0x138>
 8014a6c:	69bb      	ldr	r3, [r7, #24]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	68fa      	ldr	r2, [r7, #12]
 8014a72:	fb02 f303 	mul.w	r3, r2, r3
 8014a76:	3301      	adds	r3, #1
 8014a78:	085b      	lsrs	r3, r3, #1
 8014a7a:	e005      	b.n	8014a88 <RegionCommonComputeRxWindowParameters+0x144>
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	68fa      	ldr	r2, [r7, #12]
 8014a82:	fb02 f303 	mul.w	r3, r2, r3
 8014a86:	085b      	lsrs	r3, r3, #1
 8014a88:	1acb      	subs	r3, r1, r3
 8014a8a:	683a      	ldr	r2, [r7, #0]
 8014a8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014a90:	fb01 f202 	mul.w	r2, r1, r2
 8014a94:	1a9b      	subs	r3, r3, r2
 8014a96:	4a06      	ldr	r2, [pc, #24]	@ (8014ab0 <RegionCommonComputeRxWindowParameters+0x16c>)
 8014a98:	fb82 1203 	smull	r1, r2, r2, r3
 8014a9c:	1192      	asrs	r2, r2, #6
 8014a9e:	17db      	asrs	r3, r3, #31
 8014aa0:	1ad3      	subs	r3, r2, r3
 8014aa2:	69fa      	ldr	r2, [r7, #28]
 8014aa4:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8014aa6:	bf00      	nop
 8014aa8:	3714      	adds	r7, #20
 8014aaa:	46bd      	mov	sp, r7
 8014aac:	bc80      	pop	{r7}
 8014aae:	4770      	bx	lr
 8014ab0:	10624dd3 	.word	0x10624dd3

08014ab4 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b086      	sub	sp, #24
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	4603      	mov	r3, r0
 8014abc:	60b9      	str	r1, [r7, #8]
 8014abe:	607a      	str	r2, [r7, #4]
 8014ac0:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8014ac2:	2300      	movs	r3, #0
 8014ac4:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8014ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7eb fe7d 	bl	80007cc <__aeabi_ui2f>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	4619      	mov	r1, r3
 8014ad6:	68b8      	ldr	r0, [r7, #8]
 8014ad8:	f7eb fdc6 	bl	8000668 <__aeabi_fsub>
 8014adc:	4603      	mov	r3, r0
 8014ade:	6879      	ldr	r1, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7eb fdc1 	bl	8000668 <__aeabi_fsub>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7eb fcb1 	bl	8000450 <__aeabi_f2d>
 8014aee:	4602      	mov	r2, r0
 8014af0:	460b      	mov	r3, r1
 8014af2:	4610      	mov	r0, r2
 8014af4:	4619      	mov	r1, r3
 8014af6:	f007 fcd7 	bl	801c4a8 <floor>
 8014afa:	4602      	mov	r2, r0
 8014afc:	460b      	mov	r3, r1
 8014afe:	4610      	mov	r0, r2
 8014b00:	4619      	mov	r1, r3
 8014b02:	f7eb fd85 	bl	8000610 <__aeabi_d2iz>
 8014b06:	4603      	mov	r3, r0
 8014b08:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8014b0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3718      	adds	r7, #24
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}

08014b16 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8014b16:	b590      	push	{r4, r7, lr}
 8014b18:	b087      	sub	sp, #28
 8014b1a:	af00      	add	r7, sp, #0
 8014b1c:	60f8      	str	r0, [r7, #12]
 8014b1e:	60b9      	str	r1, [r7, #8]
 8014b20:	607a      	str	r2, [r7, #4]
 8014b22:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 8014b24:	2300      	movs	r3, #0
 8014b26:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014b2c:	2300      	movs	r3, #0
 8014b2e:	757b      	strb	r3, [r7, #21]
 8014b30:	2300      	movs	r3, #0
 8014b32:	753b      	strb	r3, [r7, #20]
 8014b34:	e09c      	b.n	8014c70 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014b36:	2300      	movs	r3, #0
 8014b38:	74fb      	strb	r3, [r7, #19]
 8014b3a:	e08f      	b.n	8014c5c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	685a      	ldr	r2, [r3, #4]
 8014b40:	7d3b      	ldrb	r3, [r7, #20]
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	4413      	add	r3, r2
 8014b46:	881b      	ldrh	r3, [r3, #0]
 8014b48:	461a      	mov	r2, r3
 8014b4a:	7cfb      	ldrb	r3, [r7, #19]
 8014b4c:	fa42 f303 	asr.w	r3, r2, r3
 8014b50:	f003 0301 	and.w	r3, r3, #1
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d07e      	beq.n	8014c56 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	689a      	ldr	r2, [r3, #8]
 8014b5c:	7d79      	ldrb	r1, [r7, #21]
 8014b5e:	7cfb      	ldrb	r3, [r7, #19]
 8014b60:	440b      	add	r3, r1
 8014b62:	4619      	mov	r1, r3
 8014b64:	460b      	mov	r3, r1
 8014b66:	005b      	lsls	r3, r3, #1
 8014b68:	440b      	add	r3, r1
 8014b6a:	009b      	lsls	r3, r3, #2
 8014b6c:	4413      	add	r3, r2
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d06b      	beq.n	8014c4c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	f083 0301 	eor.w	r3, r3, #1
 8014b7c:	b2db      	uxtb	r3, r3
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d011      	beq.n	8014ba6 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00d      	beq.n	8014ba6 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	695a      	ldr	r2, [r3, #20]
 8014b8e:	7d3b      	ldrb	r3, [r7, #20]
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	4413      	add	r3, r2
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	461a      	mov	r2, r3
 8014b98:	7cfb      	ldrb	r3, [r7, #19]
 8014b9a:	fa42 f303 	asr.w	r3, r2, r3
 8014b9e:	f003 0301 	and.w	r3, r3, #1
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d054      	beq.n	8014c50 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014ba6:	68fb      	ldr	r3, [r7, #12]
 8014ba8:	785b      	ldrb	r3, [r3, #1]
 8014baa:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	689a      	ldr	r2, [r3, #8]
 8014bb0:	7d79      	ldrb	r1, [r7, #21]
 8014bb2:	7cfb      	ldrb	r3, [r7, #19]
 8014bb4:	440b      	add	r3, r1
 8014bb6:	4619      	mov	r1, r3
 8014bb8:	460b      	mov	r3, r1
 8014bba:	005b      	lsls	r3, r3, #1
 8014bbc:	440b      	add	r3, r1
 8014bbe:	009b      	lsls	r3, r3, #2
 8014bc0:	4413      	add	r3, r2
 8014bc2:	7a1b      	ldrb	r3, [r3, #8]
 8014bc4:	f343 0303 	sbfx	r3, r3, #0, #4
 8014bc8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014bca:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	689a      	ldr	r2, [r3, #8]
 8014bd0:	7d79      	ldrb	r1, [r7, #21]
 8014bd2:	7cfb      	ldrb	r3, [r7, #19]
 8014bd4:	440b      	add	r3, r1
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	460b      	mov	r3, r1
 8014bda:	005b      	lsls	r3, r3, #1
 8014bdc:	440b      	add	r3, r1
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	7a1b      	ldrb	r3, [r3, #8]
 8014be4:	f343 1303 	sbfx	r3, r3, #4, #4
 8014be8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8014bea:	461a      	mov	r2, r3
 8014bec:	4621      	mov	r1, r4
 8014bee:	f7ff fbe8 	bl	80143c2 <RegionCommonValueInRange>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d02d      	beq.n	8014c54 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	68da      	ldr	r2, [r3, #12]
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	6899      	ldr	r1, [r3, #8]
 8014c00:	7d78      	ldrb	r0, [r7, #21]
 8014c02:	7cfb      	ldrb	r3, [r7, #19]
 8014c04:	4403      	add	r3, r0
 8014c06:	4618      	mov	r0, r3
 8014c08:	4603      	mov	r3, r0
 8014c0a:	005b      	lsls	r3, r3, #1
 8014c0c:	4403      	add	r3, r0
 8014c0e:	009b      	lsls	r3, r3, #2
 8014c10:	440b      	add	r3, r1
 8014c12:	7a5b      	ldrb	r3, [r3, #9]
 8014c14:	4619      	mov	r1, r3
 8014c16:	460b      	mov	r3, r1
 8014c18:	005b      	lsls	r3, r3, #1
 8014c1a:	440b      	add	r3, r1
 8014c1c:	00db      	lsls	r3, r3, #3
 8014c1e:	4413      	add	r3, r2
 8014c20:	7d1b      	ldrb	r3, [r3, #20]
 8014c22:	f083 0301 	eor.w	r3, r3, #1
 8014c26:	b2db      	uxtb	r3, r3
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d003      	beq.n	8014c34 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8014c2c:	7dbb      	ldrb	r3, [r7, #22]
 8014c2e:	3301      	adds	r3, #1
 8014c30:	75bb      	strb	r3, [r7, #22]
                    continue;
 8014c32:	e010      	b.n	8014c56 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8014c34:	7dfb      	ldrb	r3, [r7, #23]
 8014c36:	1c5a      	adds	r2, r3, #1
 8014c38:	75fa      	strb	r2, [r7, #23]
 8014c3a:	461a      	mov	r2, r3
 8014c3c:	68bb      	ldr	r3, [r7, #8]
 8014c3e:	4413      	add	r3, r2
 8014c40:	7d79      	ldrb	r1, [r7, #21]
 8014c42:	7cfa      	ldrb	r2, [r7, #19]
 8014c44:	440a      	add	r2, r1
 8014c46:	b2d2      	uxtb	r2, r2
 8014c48:	701a      	strb	r2, [r3, #0]
 8014c4a:	e004      	b.n	8014c56 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014c4c:	bf00      	nop
 8014c4e:	e002      	b.n	8014c56 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8014c50:	bf00      	nop
 8014c52:	e000      	b.n	8014c56 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8014c54:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8014c56:	7cfb      	ldrb	r3, [r7, #19]
 8014c58:	3301      	adds	r3, #1
 8014c5a:	74fb      	strb	r3, [r7, #19]
 8014c5c:	7cfb      	ldrb	r3, [r7, #19]
 8014c5e:	2b0f      	cmp	r3, #15
 8014c60:	f67f af6c 	bls.w	8014b3c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8014c64:	7d7b      	ldrb	r3, [r7, #21]
 8014c66:	3310      	adds	r3, #16
 8014c68:	757b      	strb	r3, [r7, #21]
 8014c6a:	7d3b      	ldrb	r3, [r7, #20]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	753b      	strb	r3, [r7, #20]
 8014c70:	7d7b      	ldrb	r3, [r7, #21]
 8014c72:	b29a      	uxth	r2, r3
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	8a1b      	ldrh	r3, [r3, #16]
 8014c78:	429a      	cmp	r2, r3
 8014c7a:	f4ff af5c 	bcc.w	8014b36 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	7dfa      	ldrb	r2, [r7, #23]
 8014c82:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8014c84:	683b      	ldr	r3, [r7, #0]
 8014c86:	7dba      	ldrb	r2, [r7, #22]
 8014c88:	701a      	strb	r2, [r3, #0]
}
 8014c8a:	bf00      	nop
 8014c8c:	371c      	adds	r7, #28
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	bd90      	pop	{r4, r7, pc}

08014c92 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8014c92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014c94:	b08b      	sub	sp, #44	@ 0x2c
 8014c96:	af04      	add	r7, sp, #16
 8014c98:	60f8      	str	r0, [r7, #12]
 8014c9a:	60b9      	str	r1, [r7, #8]
 8014c9c:	607a      	str	r2, [r7, #4]
 8014c9e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	4618      	mov	r0, r3
 8014ca6:	f007 f87b 	bl	801bda0 <UTIL_TIMER_GetElapsedTime>
 8014caa:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681a      	ldr	r2, [r3, #0]
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	1ad2      	subs	r2, r2, r3
 8014cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014cb6:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8014cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cba:	2201      	movs	r2, #1
 8014cbc:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d004      	beq.n	8014cd6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8014cd0:	697a      	ldr	r2, [r7, #20]
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d32b      	bcc.n	8014d2e <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8014cd6:	68bb      	ldr	r3, [r7, #8]
 8014cd8:	2200      	movs	r2, #0
 8014cda:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	69db      	ldr	r3, [r3, #28]
 8014ce0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8014ce6:	68dd      	ldr	r5, [r3, #12]
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	7a5e      	ldrb	r6, [r3, #9]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	f893 c008 	ldrb.w	ip, [r3, #8]
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	7d1b      	ldrb	r3, [r3, #20]
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	6992      	ldr	r2, [r2, #24]
 8014cfa:	9203      	str	r2, [sp, #12]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	f10d 0e04 	add.w	lr, sp, #4
 8014d02:	320c      	adds	r2, #12
 8014d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014d08:	e88e 0003 	stmia.w	lr, {r0, r1}
 8014d0c:	9300      	str	r3, [sp, #0]
 8014d0e:	4663      	mov	r3, ip
 8014d10:	4632      	mov	r2, r6
 8014d12:	4629      	mov	r1, r5
 8014d14:	4620      	mov	r0, r4
 8014d16:	f7ff fc25 	bl	8014564 <RegionCommonUpdateBandTimeOff>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d1e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	69d8      	ldr	r0, [r3, #28]
 8014d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d26:	683a      	ldr	r2, [r7, #0]
 8014d28:	6879      	ldr	r1, [r7, #4]
 8014d2a:	f7ff fef4 	bl	8014b16 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8014d2e:	683b      	ldr	r3, [r7, #0]
 8014d30:	781b      	ldrb	r3, [r3, #0]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d004      	beq.n	8014d40 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8014d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d38:	2200      	movs	r2, #0
 8014d3a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8014d3c:	2300      	movs	r3, #0
 8014d3e:	e006      	b.n	8014d4e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8014d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d42:	781b      	ldrb	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d001      	beq.n	8014d4c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8014d48:	230b      	movs	r3, #11
 8014d4a:	e000      	b.n	8014d4e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014d4c:	230c      	movs	r3, #12
    }
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	371c      	adds	r7, #28
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014d56 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8014d56:	b5b0      	push	{r4, r5, r7, lr}
 8014d58:	b086      	sub	sp, #24
 8014d5a:	af02      	add	r7, sp, #8
 8014d5c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	781b      	ldrb	r3, [r3, #0]
 8014d62:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f993 2000 	ldrsb.w	r2, [r3]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d70:	429a      	cmp	r2, r3
 8014d72:	d103      	bne.n	8014d7c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d7a:	e026      	b.n	8014dca <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8014d7c:	7bfb      	ldrb	r3, [r7, #15]
 8014d7e:	3b01      	subs	r3, #1
 8014d80:	b2db      	uxtb	r3, r3
 8014d82:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8014d8a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014d8e:	429a      	cmp	r2, r3
 8014d90:	d019      	beq.n	8014dc6 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	78d8      	ldrb	r0, [r3, #3]
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	6859      	ldr	r1, [r3, #4]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	6892      	ldr	r2, [r2, #8]
 8014daa:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8014dae:	9201      	str	r2, [sp, #4]
 8014db0:	9300      	str	r3, [sp, #0]
 8014db2:	462b      	mov	r3, r5
 8014db4:	4622      	mov	r2, r4
 8014db6:	f7ff fa92 	bl	80142de <RegionCommonChanVerifyDr>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	f083 0301 	eor.w	r3, r3, #1
 8014dc0:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d1da      	bne.n	8014d7c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8014dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8014dca:	4618      	mov	r0, r3
 8014dcc:	3710      	adds	r7, #16
 8014dce:	46bd      	mov	sp, r7
 8014dd0:	bdb0      	pop	{r4, r5, r7, pc}

08014dd2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8014dd2:	b480      	push	{r7}
 8014dd4:	b083      	sub	sp, #12
 8014dd6:	af00      	add	r7, sp, #0
 8014dd8:	4603      	mov	r3, r0
 8014dda:	460a      	mov	r2, r1
 8014ddc:	71fb      	strb	r3, [r7, #7]
 8014dde:	4613      	mov	r3, r2
 8014de0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8014de2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014dea:	4293      	cmp	r3, r2
 8014dec:	bfb8      	it	lt
 8014dee:	4613      	movlt	r3, r2
 8014df0:	b25b      	sxtb	r3, r3
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	370c      	adds	r7, #12
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bc80      	pop	{r7}
 8014dfa:	4770      	bx	lr

08014dfc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b083      	sub	sp, #12
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	009b      	lsls	r3, r3, #2
 8014e0a:	683a      	ldr	r2, [r7, #0]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	4a07      	ldr	r2, [pc, #28]	@ (8014e30 <RegionCommonGetBandwidth+0x34>)
 8014e12:	4293      	cmp	r3, r2
 8014e14:	d004      	beq.n	8014e20 <RegionCommonGetBandwidth+0x24>
 8014e16:	4a07      	ldr	r2, [pc, #28]	@ (8014e34 <RegionCommonGetBandwidth+0x38>)
 8014e18:	4293      	cmp	r3, r2
 8014e1a:	d003      	beq.n	8014e24 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	e002      	b.n	8014e26 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8014e20:	2301      	movs	r3, #1
 8014e22:	e000      	b.n	8014e26 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8014e24:	2302      	movs	r3, #2
    }
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	370c      	adds	r7, #12
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bc80      	pop	{r7}
 8014e2e:	4770      	bx	lr
 8014e30:	0003d090 	.word	0x0003d090
 8014e34:	0007a120 	.word	0x0007a120

08014e38 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b086      	sub	sp, #24
 8014e3c:	af04      	add	r7, sp, #16
 8014e3e:	4603      	mov	r3, r0
 8014e40:	6039      	str	r1, [r7, #0]
 8014e42:	71fb      	strb	r3, [r7, #7]
 8014e44:	4613      	mov	r3, r2
 8014e46:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8014e48:	79fb      	ldrb	r3, [r7, #7]
 8014e4a:	2b05      	cmp	r3, #5
 8014e4c:	d810      	bhi.n	8014e70 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8014e4e:	79fb      	ldrb	r3, [r7, #7]
 8014e50:	4a0f      	ldr	r2, [pc, #60]	@ (8014e90 <RegionCommonRxConfigPrint+0x58>)
 8014e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014e56:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014e5a:	9202      	str	r2, [sp, #8]
 8014e5c:	683a      	ldr	r2, [r7, #0]
 8014e5e:	9201      	str	r2, [sp, #4]
 8014e60:	9300      	str	r3, [sp, #0]
 8014e62:	4b0c      	ldr	r3, [pc, #48]	@ (8014e94 <RegionCommonRxConfigPrint+0x5c>)
 8014e64:	2201      	movs	r2, #1
 8014e66:	2100      	movs	r1, #0
 8014e68:	2002      	movs	r0, #2
 8014e6a:	f007 f877 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8014e6e:	e00a      	b.n	8014e86 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014e70:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014e74:	9301      	str	r3, [sp, #4]
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	9300      	str	r3, [sp, #0]
 8014e7a:	4b07      	ldr	r3, [pc, #28]	@ (8014e98 <RegionCommonRxConfigPrint+0x60>)
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	2100      	movs	r1, #0
 8014e80:	2002      	movs	r0, #2
 8014e82:	f007 f86b 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 8014e86:	bf00      	nop
 8014e88:	3708      	adds	r7, #8
 8014e8a:	46bd      	mov	sp, r7
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	20000108 	.word	0x20000108
 8014e94:	0801c94c 	.word	0x0801c94c
 8014e98:	0801c96c 	.word	0x0801c96c

08014e9c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b084      	sub	sp, #16
 8014ea0:	af02      	add	r7, sp, #8
 8014ea2:	6078      	str	r0, [r7, #4]
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8014ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014eac:	9301      	str	r3, [sp, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	9300      	str	r3, [sp, #0]
 8014eb2:	4b05      	ldr	r3, [pc, #20]	@ (8014ec8 <RegionCommonTxConfigPrint+0x2c>)
 8014eb4:	2201      	movs	r2, #1
 8014eb6:	2100      	movs	r1, #0
 8014eb8:	2002      	movs	r0, #2
 8014eba:	f007 f84f 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
}
 8014ebe:	bf00      	nop
 8014ec0:	3708      	adds	r7, #8
 8014ec2:	46bd      	mov	sp, r7
 8014ec4:	bd80      	pop	{r7, pc}
 8014ec6:	bf00      	nop
 8014ec8:	0801c988 	.word	0x0801c988

08014ecc <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8014ecc:	b580      	push	{r7, lr}
 8014ece:	b082      	sub	sp, #8
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8014ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8014f8c <VerifyRfFreq+0xc0>)
 8014ed8:	6a1b      	ldr	r3, [r3, #32]
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	4798      	blx	r3
 8014ede:	4603      	mov	r3, r0
 8014ee0:	f083 0301 	eor.w	r3, r3, #1
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d001      	beq.n	8014eee <VerifyRfFreq+0x22>
    {
        return false;
 8014eea:	2300      	movs	r3, #0
 8014eec:	e04a      	b.n	8014f84 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	4a27      	ldr	r2, [pc, #156]	@ (8014f90 <VerifyRfFreq+0xc4>)
 8014ef2:	4293      	cmp	r3, r2
 8014ef4:	d307      	bcc.n	8014f06 <VerifyRfFreq+0x3a>
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	4a26      	ldr	r2, [pc, #152]	@ (8014f94 <VerifyRfFreq+0xc8>)
 8014efa:	4293      	cmp	r3, r2
 8014efc:	d803      	bhi.n	8014f06 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	2202      	movs	r2, #2
 8014f02:	701a      	strb	r2, [r3, #0]
 8014f04:	e03d      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	4a22      	ldr	r2, [pc, #136]	@ (8014f94 <VerifyRfFreq+0xc8>)
 8014f0a:	4293      	cmp	r3, r2
 8014f0c:	d907      	bls.n	8014f1e <VerifyRfFreq+0x52>
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4a21      	ldr	r2, [pc, #132]	@ (8014f98 <VerifyRfFreq+0xcc>)
 8014f12:	4293      	cmp	r3, r2
 8014f14:	d803      	bhi.n	8014f1e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	2200      	movs	r2, #0
 8014f1a:	701a      	strb	r2, [r3, #0]
 8014f1c:	e031      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	4a1d      	ldr	r2, [pc, #116]	@ (8014f98 <VerifyRfFreq+0xcc>)
 8014f22:	4293      	cmp	r3, r2
 8014f24:	d907      	bls.n	8014f36 <VerifyRfFreq+0x6a>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	4a1c      	ldr	r2, [pc, #112]	@ (8014f9c <VerifyRfFreq+0xd0>)
 8014f2a:	4293      	cmp	r3, r2
 8014f2c:	d803      	bhi.n	8014f36 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	2201      	movs	r2, #1
 8014f32:	701a      	strb	r2, [r3, #0]
 8014f34:	e025      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	4a19      	ldr	r2, [pc, #100]	@ (8014fa0 <VerifyRfFreq+0xd4>)
 8014f3a:	4293      	cmp	r3, r2
 8014f3c:	d907      	bls.n	8014f4e <VerifyRfFreq+0x82>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	4a18      	ldr	r2, [pc, #96]	@ (8014fa4 <VerifyRfFreq+0xd8>)
 8014f42:	4293      	cmp	r3, r2
 8014f44:	d803      	bhi.n	8014f4e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	2205      	movs	r2, #5
 8014f4a:	701a      	strb	r2, [r3, #0]
 8014f4c:	e019      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	4a15      	ldr	r2, [pc, #84]	@ (8014fa8 <VerifyRfFreq+0xdc>)
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d907      	bls.n	8014f66 <VerifyRfFreq+0x9a>
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	4a14      	ldr	r2, [pc, #80]	@ (8014fac <VerifyRfFreq+0xe0>)
 8014f5a:	4293      	cmp	r3, r2
 8014f5c:	d803      	bhi.n	8014f66 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	2203      	movs	r2, #3
 8014f62:	701a      	strb	r2, [r3, #0]
 8014f64:	e00d      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	4a11      	ldr	r2, [pc, #68]	@ (8014fb0 <VerifyRfFreq+0xe4>)
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d307      	bcc.n	8014f7e <VerifyRfFreq+0xb2>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4a10      	ldr	r2, [pc, #64]	@ (8014fb4 <VerifyRfFreq+0xe8>)
 8014f72:	4293      	cmp	r3, r2
 8014f74:	d803      	bhi.n	8014f7e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	2204      	movs	r2, #4
 8014f7a:	701a      	strb	r2, [r3, #0]
 8014f7c:	e001      	b.n	8014f82 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8014f7e:	2300      	movs	r3, #0
 8014f80:	e000      	b.n	8014f84 <VerifyRfFreq+0xb8>
    }
    return true;
 8014f82:	2301      	movs	r3, #1
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	0801d01c 	.word	0x0801d01c
 8014f90:	337055c0 	.word	0x337055c0
 8014f94:	338eda3f 	.word	0x338eda3f
 8014f98:	33bca100 	.word	0x33bca100
 8014f9c:	33c5c8c0 	.word	0x33c5c8c0
 8014fa0:	33c74f5f 	.word	0x33c74f5f
 8014fa4:	33cef080 	.word	0x33cef080
 8014fa8:	33d1fdbf 	.word	0x33d1fdbf
 8014fac:	33d5ce50 	.word	0x33d5ce50
 8014fb0:	33d691a0 	.word	0x33d691a0
 8014fb4:	33db2580 	.word	0x33db2580

08014fb8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8014fb8:	b590      	push	{r4, r7, lr}
 8014fba:	b08b      	sub	sp, #44	@ 0x2c
 8014fbc:	af04      	add	r7, sp, #16
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	460a      	mov	r2, r1
 8014fc2:	71fb      	strb	r3, [r7, #7]
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8014fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fcc:	4a1f      	ldr	r2, [pc, #124]	@ (801504c <GetTimeOnAir+0x94>)
 8014fce:	5cd3      	ldrb	r3, [r2, r3]
 8014fd0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8014fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fd6:	491e      	ldr	r1, [pc, #120]	@ (8015050 <GetTimeOnAir+0x98>)
 8014fd8:	4618      	mov	r0, r3
 8014fda:	f7ff ff0f 	bl	8014dfc <RegionCommonGetBandwidth>
 8014fde:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8014fe0:	2300      	movs	r3, #0
 8014fe2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8014fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fe8:	2b07      	cmp	r3, #7
 8014fea:	d118      	bne.n	801501e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8014fec:	4b19      	ldr	r3, [pc, #100]	@ (8015054 <GetTimeOnAir+0x9c>)
 8014fee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014ff0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014ff4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ff8:	fb02 f303 	mul.w	r3, r2, r3
 8014ffc:	4619      	mov	r1, r3
 8014ffe:	88bb      	ldrh	r3, [r7, #4]
 8015000:	b2db      	uxtb	r3, r3
 8015002:	2201      	movs	r2, #1
 8015004:	9203      	str	r2, [sp, #12]
 8015006:	9302      	str	r3, [sp, #8]
 8015008:	2300      	movs	r3, #0
 801500a:	9301      	str	r3, [sp, #4]
 801500c:	2305      	movs	r3, #5
 801500e:	9300      	str	r3, [sp, #0]
 8015010:	2300      	movs	r3, #0
 8015012:	460a      	mov	r2, r1
 8015014:	68f9      	ldr	r1, [r7, #12]
 8015016:	2000      	movs	r0, #0
 8015018:	47a0      	blx	r4
 801501a:	6178      	str	r0, [r7, #20]
 801501c:	e011      	b.n	8015042 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 801501e:	4b0d      	ldr	r3, [pc, #52]	@ (8015054 <GetTimeOnAir+0x9c>)
 8015020:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8015022:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015026:	88bb      	ldrh	r3, [r7, #4]
 8015028:	b2db      	uxtb	r3, r3
 801502a:	2101      	movs	r1, #1
 801502c:	9103      	str	r1, [sp, #12]
 801502e:	9302      	str	r3, [sp, #8]
 8015030:	2300      	movs	r3, #0
 8015032:	9301      	str	r3, [sp, #4]
 8015034:	2308      	movs	r3, #8
 8015036:	9300      	str	r3, [sp, #0]
 8015038:	2301      	movs	r3, #1
 801503a:	68f9      	ldr	r1, [r7, #12]
 801503c:	2001      	movs	r0, #1
 801503e:	47a0      	blx	r4
 8015040:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8015042:	697b      	ldr	r3, [r7, #20]
}
 8015044:	4618      	mov	r0, r3
 8015046:	371c      	adds	r7, #28
 8015048:	46bd      	mov	sp, r7
 801504a:	bd90      	pop	{r4, r7, pc}
 801504c:	0801cf60 	.word	0x0801cf60
 8015050:	0801cf68 	.word	0x0801cf68
 8015054:	0801d01c 	.word	0x0801d01c

08015058 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b088      	sub	sp, #32
 801505c:	af00      	add	r7, sp, #0
 801505e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8015060:	2300      	movs	r3, #0
 8015062:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	781b      	ldrb	r3, [r3, #0]
 8015068:	3b01      	subs	r3, #1
 801506a:	2b38      	cmp	r3, #56	@ 0x38
 801506c:	f200 8128 	bhi.w	80152c0 <RegionEU868GetPhyParam+0x268>
 8015070:	a201      	add	r2, pc, #4	@ (adr r2, 8015078 <RegionEU868GetPhyParam+0x20>)
 8015072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015076:	bf00      	nop
 8015078:	0801515d 	.word	0x0801515d
 801507c:	08015163 	.word	0x08015163
 8015080:	080152c1 	.word	0x080152c1
 8015084:	080152c1 	.word	0x080152c1
 8015088:	080152c1 	.word	0x080152c1
 801508c:	08015169 	.word	0x08015169
 8015090:	080152c1 	.word	0x080152c1
 8015094:	080151a3 	.word	0x080151a3
 8015098:	080152c1 	.word	0x080152c1
 801509c:	080151a9 	.word	0x080151a9
 80150a0:	080151af 	.word	0x080151af
 80150a4:	080151b5 	.word	0x080151b5
 80150a8:	080151bb 	.word	0x080151bb
 80150ac:	080151cb 	.word	0x080151cb
 80150b0:	080151db 	.word	0x080151db
 80150b4:	080151e1 	.word	0x080151e1
 80150b8:	080151e9 	.word	0x080151e9
 80150bc:	080151f1 	.word	0x080151f1
 80150c0:	080151f9 	.word	0x080151f9
 80150c4:	08015201 	.word	0x08015201
 80150c8:	08015209 	.word	0x08015209
 80150cc:	08015211 	.word	0x08015211
 80150d0:	08015225 	.word	0x08015225
 80150d4:	0801522b 	.word	0x0801522b
 80150d8:	08015231 	.word	0x08015231
 80150dc:	08015237 	.word	0x08015237
 80150e0:	08015243 	.word	0x08015243
 80150e4:	0801524f 	.word	0x0801524f
 80150e8:	08015255 	.word	0x08015255
 80150ec:	0801525d 	.word	0x0801525d
 80150f0:	08015263 	.word	0x08015263
 80150f4:	08015269 	.word	0x08015269
 80150f8:	08015271 	.word	0x08015271
 80150fc:	0801516f 	.word	0x0801516f
 8015100:	080152c1 	.word	0x080152c1
 8015104:	080152c1 	.word	0x080152c1
 8015108:	080152c1 	.word	0x080152c1
 801510c:	080152c1 	.word	0x080152c1
 8015110:	080152c1 	.word	0x080152c1
 8015114:	080152c1 	.word	0x080152c1
 8015118:	080152c1 	.word	0x080152c1
 801511c:	080152c1 	.word	0x080152c1
 8015120:	080152c1 	.word	0x080152c1
 8015124:	080152c1 	.word	0x080152c1
 8015128:	080152c1 	.word	0x080152c1
 801512c:	080152c1 	.word	0x080152c1
 8015130:	080152c1 	.word	0x080152c1
 8015134:	08015277 	.word	0x08015277
 8015138:	0801527d 	.word	0x0801527d
 801513c:	0801528b 	.word	0x0801528b
 8015140:	080152c1 	.word	0x080152c1
 8015144:	080152c1 	.word	0x080152c1
 8015148:	08015291 	.word	0x08015291
 801514c:	08015297 	.word	0x08015297
 8015150:	080152c1 	.word	0x080152c1
 8015154:	0801529d 	.word	0x0801529d
 8015158:	080152ad 	.word	0x080152ad
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 801515c:	2300      	movs	r3, #0
 801515e:	61bb      	str	r3, [r7, #24]
            break;
 8015160:	e0af      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8015162:	2300      	movs	r3, #0
 8015164:	61bb      	str	r3, [r7, #24]
            break;
 8015166:	e0ac      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015168:	2300      	movs	r3, #0
 801516a:	61bb      	str	r3, [r7, #24]
            break;
 801516c:	e0a9      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015174:	733b      	strb	r3, [r7, #12]
 8015176:	2307      	movs	r3, #7
 8015178:	737b      	strb	r3, [r7, #13]
 801517a:	2300      	movs	r3, #0
 801517c:	73bb      	strb	r3, [r7, #14]
 801517e:	2310      	movs	r3, #16
 8015180:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8015182:	4b53      	ldr	r3, [pc, #332]	@ (80152d0 <RegionEU868GetPhyParam+0x278>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801518a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 801518c:	4b50      	ldr	r3, [pc, #320]	@ (80152d0 <RegionEU868GetPhyParam+0x278>)
 801518e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015190:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8015192:	f107 030c 	add.w	r3, r7, #12
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff fddd 	bl	8014d56 <RegionCommonGetNextLowerTxDr>
 801519c:	4603      	mov	r3, r0
 801519e:	61bb      	str	r3, [r7, #24]
            break;
 80151a0:	e08f      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 80151a2:	2300      	movs	r3, #0
 80151a4:	61bb      	str	r3, [r7, #24]
            break;
 80151a6:	e08c      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 80151a8:	2300      	movs	r3, #0
 80151aa:	61bb      	str	r3, [r7, #24]
            break;
 80151ac:	e089      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80151ae:	2340      	movs	r3, #64	@ 0x40
 80151b0:	61bb      	str	r3, [r7, #24]
            break;
 80151b2:	e086      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80151b4:	2320      	movs	r3, #32
 80151b6:	61bb      	str	r3, [r7, #24]
            break;
 80151b8:	e083      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151c0:	461a      	mov	r2, r3
 80151c2:	4b44      	ldr	r3, [pc, #272]	@ (80152d4 <RegionEU868GetPhyParam+0x27c>)
 80151c4:	5c9b      	ldrb	r3, [r3, r2]
 80151c6:	61bb      	str	r3, [r7, #24]
            break;
 80151c8:	e07b      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80151d0:	461a      	mov	r2, r3
 80151d2:	4b41      	ldr	r3, [pc, #260]	@ (80152d8 <RegionEU868GetPhyParam+0x280>)
 80151d4:	5c9b      	ldrb	r3, [r3, r2]
 80151d6:	61bb      	str	r3, [r7, #24]
            break;
 80151d8:	e073      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80151da:	2301      	movs	r3, #1
 80151dc:	61bb      	str	r3, [r7, #24]
            break;
 80151de:	e070      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80151e0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80151e4:	61bb      	str	r3, [r7, #24]
            break;
 80151e6:	e06c      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80151e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80151ec:	61bb      	str	r3, [r7, #24]
            break;
 80151ee:	e068      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80151f0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80151f4:	61bb      	str	r3, [r7, #24]
            break;
 80151f6:	e064      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80151f8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80151fc:	61bb      	str	r3, [r7, #24]
            break;
 80151fe:	e060      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8015200:	f241 7370 	movw	r3, #6000	@ 0x1770
 8015204:	61bb      	str	r3, [r7, #24]
            break;
 8015206:	e05c      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8015208:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801520c:	61bb      	str	r3, [r7, #24]
            break;
 801520e:	e058      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8015210:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8015214:	4831      	ldr	r0, [pc, #196]	@ (80152dc <RegionEU868GetPhyParam+0x284>)
 8015216:	f002 fae1 	bl	80177dc <randr>
 801521a:	4603      	mov	r3, r0
 801521c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8015220:	61bb      	str	r3, [r7, #24]
            break;
 8015222:	e04e      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8015224:	2300      	movs	r3, #0
 8015226:	61bb      	str	r3, [r7, #24]
            break;
 8015228:	e04b      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 801522a:	4b2d      	ldr	r3, [pc, #180]	@ (80152e0 <RegionEU868GetPhyParam+0x288>)
 801522c:	61bb      	str	r3, [r7, #24]
            break;
 801522e:	e048      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8015230:	2300      	movs	r3, #0
 8015232:	61bb      	str	r3, [r7, #24]
            break;
 8015234:	e045      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015236:	4b26      	ldr	r3, [pc, #152]	@ (80152d0 <RegionEU868GetPhyParam+0x278>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 801523e:	61bb      	str	r3, [r7, #24]
            break;
 8015240:	e03f      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015242:	4b23      	ldr	r3, [pc, #140]	@ (80152d0 <RegionEU868GetPhyParam+0x278>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 801524a:	61bb      	str	r3, [r7, #24]
            break;
 801524c:	e039      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801524e:	2310      	movs	r3, #16
 8015250:	61bb      	str	r3, [r7, #24]
            break;
 8015252:	e036      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015254:	4b1e      	ldr	r3, [pc, #120]	@ (80152d0 <RegionEU868GetPhyParam+0x278>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	61bb      	str	r3, [r7, #24]
            break;
 801525a:	e032      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 801525c:	2300      	movs	r3, #0
 801525e:	61bb      	str	r3, [r7, #24]
            break;
 8015260:	e02f      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015262:	2300      	movs	r3, #0
 8015264:	61bb      	str	r3, [r7, #24]
            break;
 8015266:	e02c      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015268:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 801526c:	61bb      	str	r3, [r7, #24]
            break;
 801526e:	e028      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015270:	4b1c      	ldr	r3, [pc, #112]	@ (80152e4 <RegionEU868GetPhyParam+0x28c>)
 8015272:	61bb      	str	r3, [r7, #24]
            break;
 8015274:	e025      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015276:	4b1a      	ldr	r3, [pc, #104]	@ (80152e0 <RegionEU868GetPhyParam+0x288>)
 8015278:	61bb      	str	r3, [r7, #24]
            break;
 801527a:	e022      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 801527c:	2311      	movs	r3, #17
 801527e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015280:	2302      	movs	r3, #2
 8015282:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015284:	2300      	movs	r3, #0
 8015286:	76bb      	strb	r3, [r7, #26]
            break;
 8015288:	e01b      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 801528a:	2303      	movs	r3, #3
 801528c:	61bb      	str	r3, [r7, #24]
            break;
 801528e:	e018      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015290:	4b13      	ldr	r3, [pc, #76]	@ (80152e0 <RegionEU868GetPhyParam+0x288>)
 8015292:	61bb      	str	r3, [r7, #24]
            break;
 8015294:	e015      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015296:	2303      	movs	r3, #3
 8015298:	61bb      	str	r3, [r7, #24]
            break;
 801529a:	e012      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152a2:	461a      	mov	r2, r3
 80152a4:	4b10      	ldr	r3, [pc, #64]	@ (80152e8 <RegionEU868GetPhyParam+0x290>)
 80152a6:	5c9b      	ldrb	r3, [r3, r2]
 80152a8:	61bb      	str	r3, [r7, #24]
            break;
 80152aa:	e00a      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80152b2:	490e      	ldr	r1, [pc, #56]	@ (80152ec <RegionEU868GetPhyParam+0x294>)
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7ff fda1 	bl	8014dfc <RegionCommonGetBandwidth>
 80152ba:	4603      	mov	r3, r0
 80152bc:	61bb      	str	r3, [r7, #24]
            break;
 80152be:	e000      	b.n	80152c2 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 80152c0:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	61fb      	str	r3, [r7, #28]
 80152c6:	69fb      	ldr	r3, [r7, #28]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	3720      	adds	r7, #32
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	20001a3c 	.word	0x20001a3c
 80152d4:	0801cf88 	.word	0x0801cf88
 80152d8:	0801cf90 	.word	0x0801cf90
 80152dc:	fffffc18 	.word	0xfffffc18
 80152e0:	33d3e608 	.word	0x33d3e608
 80152e4:	4009999a 	.word	0x4009999a
 80152e8:	0801cf60 	.word	0x0801cf60
 80152ec:	0801cf68 	.word	0x0801cf68

080152f0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80152f0:	b590      	push	{r4, r7, lr}
 80152f2:	b085      	sub	sp, #20
 80152f4:	af02      	add	r7, sp, #8
 80152f6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80152f8:	4b11      	ldr	r3, [pc, #68]	@ (8015340 <RegionEU868SetBandTxDone+0x50>)
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	4b11      	ldr	r3, [pc, #68]	@ (8015344 <RegionEU868SetBandTxDone+0x54>)
 80152fe:	6819      	ldr	r1, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	781b      	ldrb	r3, [r3, #0]
 8015304:	4618      	mov	r0, r3
 8015306:	4603      	mov	r3, r0
 8015308:	005b      	lsls	r3, r3, #1
 801530a:	4403      	add	r3, r0
 801530c:	009b      	lsls	r3, r3, #2
 801530e:	440b      	add	r3, r1
 8015310:	3309      	adds	r3, #9
 8015312:	781b      	ldrb	r3, [r3, #0]
 8015314:	4619      	mov	r1, r3
 8015316:	460b      	mov	r3, r1
 8015318:	005b      	lsls	r3, r3, #1
 801531a:	440b      	add	r3, r1
 801531c:	00db      	lsls	r3, r3, #3
 801531e:	18d0      	adds	r0, r2, r3
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6899      	ldr	r1, [r3, #8]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	785c      	ldrb	r4, [r3, #1]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	691a      	ldr	r2, [r3, #16]
 801532c:	9200      	str	r2, [sp, #0]
 801532e:	68db      	ldr	r3, [r3, #12]
 8015330:	4622      	mov	r2, r4
 8015332:	f7ff f8e9 	bl	8014508 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015336:	bf00      	nop
 8015338:	370c      	adds	r7, #12
 801533a:	46bd      	mov	sp, r7
 801533c:	bd90      	pop	{r4, r7, pc}
 801533e:	bf00      	nop
 8015340:	20001a38 	.word	0x20001a38
 8015344:	20001a3c 	.word	0x20001a3c

08015348 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b0b0      	sub	sp, #192	@ 0xc0
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015350:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015354:	2290      	movs	r2, #144	@ 0x90
 8015356:	2100      	movs	r1, #0
 8015358:	4618      	mov	r0, r3
 801535a:	f007 f877 	bl	801c44c <memset>
 801535e:	2364      	movs	r3, #100	@ 0x64
 8015360:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015362:	2364      	movs	r3, #100	@ 0x64
 8015364:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801536c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8015370:	230a      	movs	r3, #10
 8015372:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8015376:	2364      	movs	r3, #100	@ 0x64
 8015378:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 801537c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015380:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	7a1b      	ldrb	r3, [r3, #8]
 8015388:	2b02      	cmp	r3, #2
 801538a:	d05e      	beq.n	801544a <RegionEU868InitDefaults+0x102>
 801538c:	2b02      	cmp	r3, #2
 801538e:	dc6b      	bgt.n	8015468 <RegionEU868InitDefaults+0x120>
 8015390:	2b00      	cmp	r3, #0
 8015392:	d002      	beq.n	801539a <RegionEU868InitDefaults+0x52>
 8015394:	2b01      	cmp	r3, #1
 8015396:	d03f      	beq.n	8015418 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015398:	e066      	b.n	8015468 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	681b      	ldr	r3, [r3, #0]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d063      	beq.n	801546a <RegionEU868InitDefaults+0x122>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	d05f      	beq.n	801546a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	4a30      	ldr	r2, [pc, #192]	@ (8015470 <RegionEU868InitDefaults+0x128>)
 80153b0:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	4a2f      	ldr	r2, [pc, #188]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 80153b8:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80153ba:	4b2d      	ldr	r3, [pc, #180]	@ (8015470 <RegionEU868InitDefaults+0x128>)
 80153bc:	681b      	ldr	r3, [r3, #0]
 80153be:	4618      	mov	r0, r3
 80153c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80153c4:	2290      	movs	r2, #144	@ 0x90
 80153c6:	4619      	mov	r1, r3
 80153c8:	f002 fa1f 	bl	801780a <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80153cc:	4b29      	ldr	r3, [pc, #164]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	4a29      	ldr	r2, [pc, #164]	@ (8015478 <RegionEU868InitDefaults+0x130>)
 80153d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80153d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80153d8:	4b26      	ldr	r3, [pc, #152]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	4a27      	ldr	r2, [pc, #156]	@ (801547c <RegionEU868InitDefaults+0x134>)
 80153de:	330c      	adds	r3, #12
 80153e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80153e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 80153e6:	4b23      	ldr	r3, [pc, #140]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	4a25      	ldr	r2, [pc, #148]	@ (8015480 <RegionEU868InitDefaults+0x138>)
 80153ec:	3318      	adds	r3, #24
 80153ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80153f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 80153f4:	4b1f      	ldr	r3, [pc, #124]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	2207      	movs	r2, #7
 80153fa:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80153fe:	4b1d      	ldr	r3, [pc, #116]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015406:	4b1b      	ldr	r3, [pc, #108]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 801540e:	2201      	movs	r2, #1
 8015410:	4619      	mov	r1, r3
 8015412:	f7ff f853 	bl	80144bc <RegionCommonChanMaskCopy>
 8015416:	e028      	b.n	801546a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015418:	4b16      	ldr	r3, [pc, #88]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	2200      	movs	r2, #0
 801541e:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015420:	4b14      	ldr	r3, [pc, #80]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2200      	movs	r2, #0
 8015426:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015428:	4b12      	ldr	r3, [pc, #72]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	2200      	movs	r2, #0
 801542e:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015430:	4b10      	ldr	r3, [pc, #64]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015438:	4b0e      	ldr	r3, [pc, #56]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8015440:	2201      	movs	r2, #1
 8015442:	4619      	mov	r1, r3
 8015444:	f7ff f83a 	bl	80144bc <RegionCommonChanMaskCopy>
            break;
 8015448:	e00f      	b.n	801546a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 801544a:	4b0a      	ldr	r3, [pc, #40]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	@ 0x480
 8015452:	4b08      	ldr	r3, [pc, #32]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	@ 0x48c
 801545a:	4b06      	ldr	r3, [pc, #24]	@ (8015474 <RegionEU868InitDefaults+0x12c>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	430a      	orrs	r2, r1
 8015460:	b292      	uxth	r2, r2
 8015462:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
            break;
 8015466:	e000      	b.n	801546a <RegionEU868InitDefaults+0x122>
            break;
 8015468:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801546a:	37c0      	adds	r7, #192	@ 0xc0
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}
 8015470:	20001a38 	.word	0x20001a38
 8015474:	20001a3c 	.word	0x20001a3c
 8015478:	0801c9a4 	.word	0x0801c9a4
 801547c:	0801c9b0 	.word	0x0801c9b0
 8015480:	0801c9bc 	.word	0x0801c9bc

08015484 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b084      	sub	sp, #16
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	460b      	mov	r3, r1
 801548e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015490:	78fb      	ldrb	r3, [r7, #3]
 8015492:	2b0f      	cmp	r3, #15
 8015494:	d86c      	bhi.n	8015570 <RegionEU868Verify+0xec>
 8015496:	a201      	add	r2, pc, #4	@ (adr r2, 801549c <RegionEU868Verify+0x18>)
 8015498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801549c:	080154dd 	.word	0x080154dd
 80154a0:	08015571 	.word	0x08015571
 80154a4:	08015571 	.word	0x08015571
 80154a8:	08015571 	.word	0x08015571
 80154ac:	08015571 	.word	0x08015571
 80154b0:	080154f5 	.word	0x080154f5
 80154b4:	08015513 	.word	0x08015513
 80154b8:	08015531 	.word	0x08015531
 80154bc:	08015571 	.word	0x08015571
 80154c0:	0801554f 	.word	0x0801554f
 80154c4:	0801554f 	.word	0x0801554f
 80154c8:	08015571 	.word	0x08015571
 80154cc:	08015571 	.word	0x08015571
 80154d0:	08015571 	.word	0x08015571
 80154d4:	08015571 	.word	0x08015571
 80154d8:	0801556d 	.word	0x0801556d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80154dc:	2300      	movs	r3, #0
 80154de:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	f107 020f 	add.w	r2, r7, #15
 80154e8:	4611      	mov	r1, r2
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7ff fcee 	bl	8014ecc <VerifyRfFreq>
 80154f0:	4603      	mov	r3, r0
 80154f2:	e03e      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	f993 3000 	ldrsb.w	r3, [r3]
 80154fa:	2207      	movs	r2, #7
 80154fc:	2100      	movs	r1, #0
 80154fe:	4618      	mov	r0, r3
 8015500:	f7fe ff5f 	bl	80143c2 <RegionCommonValueInRange>
 8015504:	4603      	mov	r3, r0
 8015506:	2b00      	cmp	r3, #0
 8015508:	bf14      	ite	ne
 801550a:	2301      	movne	r3, #1
 801550c:	2300      	moveq	r3, #0
 801550e:	b2db      	uxtb	r3, r3
 8015510:	e02f      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f993 3000 	ldrsb.w	r3, [r3]
 8015518:	2205      	movs	r2, #5
 801551a:	2100      	movs	r1, #0
 801551c:	4618      	mov	r0, r3
 801551e:	f7fe ff50 	bl	80143c2 <RegionCommonValueInRange>
 8015522:	4603      	mov	r3, r0
 8015524:	2b00      	cmp	r3, #0
 8015526:	bf14      	ite	ne
 8015528:	2301      	movne	r3, #1
 801552a:	2300      	moveq	r3, #0
 801552c:	b2db      	uxtb	r3, r3
 801552e:	e020      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f993 3000 	ldrsb.w	r3, [r3]
 8015536:	2207      	movs	r2, #7
 8015538:	2100      	movs	r1, #0
 801553a:	4618      	mov	r0, r3
 801553c:	f7fe ff41 	bl	80143c2 <RegionCommonValueInRange>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	bf14      	ite	ne
 8015546:	2301      	movne	r3, #1
 8015548:	2300      	moveq	r3, #0
 801554a:	b2db      	uxtb	r3, r3
 801554c:	e011      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	f993 3000 	ldrsb.w	r3, [r3]
 8015554:	2207      	movs	r2, #7
 8015556:	2100      	movs	r1, #0
 8015558:	4618      	mov	r0, r3
 801555a:	f7fe ff32 	bl	80143c2 <RegionCommonValueInRange>
 801555e:	4603      	mov	r3, r0
 8015560:	2b00      	cmp	r3, #0
 8015562:	bf14      	ite	ne
 8015564:	2301      	movne	r3, #1
 8015566:	2300      	moveq	r3, #0
 8015568:	b2db      	uxtb	r3, r3
 801556a:	e002      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801556c:	2301      	movs	r3, #1
 801556e:	e000      	b.n	8015572 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015570:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015572:	4618      	mov	r0, r3
 8015574:	3710      	adds	r7, #16
 8015576:	46bd      	mov	sp, r7
 8015578:	bd80      	pop	{r7, pc}
 801557a:	bf00      	nop

0801557c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b08a      	sub	sp, #40	@ 0x28
 8015580:	af00      	add	r7, sp, #0
 8015582:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015584:	2350      	movs	r3, #80	@ 0x50
 8015586:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	791b      	ldrb	r3, [r3, #4]
 801558e:	2b10      	cmp	r3, #16
 8015590:	d162      	bne.n	8015658 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	330f      	adds	r3, #15
 8015598:	781b      	ldrb	r3, [r3, #0]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d15e      	bne.n	801565c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801559e:	2300      	movs	r3, #0
 80155a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80155a4:	2303      	movs	r3, #3
 80155a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80155aa:	e050      	b.n	801564e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80155ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80155b0:	2b07      	cmp	r3, #7
 80155b2:	d824      	bhi.n	80155fe <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155bc:	4413      	add	r3, r2
 80155be:	781b      	ldrb	r3, [r3, #0]
 80155c0:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80155c2:	69ba      	ldr	r2, [r7, #24]
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6819      	ldr	r1, [r3, #0]
 80155c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155cc:	3301      	adds	r3, #1
 80155ce:	440b      	add	r3, r1
 80155d0:	781b      	ldrb	r3, [r3, #0]
 80155d2:	021b      	lsls	r3, r3, #8
 80155d4:	4313      	orrs	r3, r2
 80155d6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80155d8:	69ba      	ldr	r2, [r7, #24]
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6819      	ldr	r1, [r3, #0]
 80155de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80155e2:	3302      	adds	r3, #2
 80155e4:	440b      	add	r3, r1
 80155e6:	781b      	ldrb	r3, [r3, #0]
 80155e8:	041b      	lsls	r3, r3, #16
 80155ea:	4313      	orrs	r3, r2
 80155ec:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80155ee:	69bb      	ldr	r3, [r7, #24]
 80155f0:	2264      	movs	r2, #100	@ 0x64
 80155f2:	fb02 f303 	mul.w	r3, r2, r3
 80155f6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80155f8:	2300      	movs	r3, #0
 80155fa:	61fb      	str	r3, [r7, #28]
 80155fc:	e006      	b.n	801560c <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80155fe:	2300      	movs	r3, #0
 8015600:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015602:	2300      	movs	r3, #0
 8015604:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015608:	2300      	movs	r3, #0
 801560a:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 801560c:	69bb      	ldr	r3, [r7, #24]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00b      	beq.n	801562a <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015612:	f107 0318 	add.w	r3, r7, #24
 8015616:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015618:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801561c:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801561e:	f107 0310 	add.w	r3, r7, #16
 8015622:	4618      	mov	r0, r3
 8015624:	f000 fd14 	bl	8016050 <RegionEU868ChannelAdd>
 8015628:	e007      	b.n	801563a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801562a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801562e:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015630:	f107 030c 	add.w	r3, r7, #12
 8015634:	4618      	mov	r0, r3
 8015636:	f000 fdad 	bl	8016194 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801563a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801563e:	3303      	adds	r3, #3
 8015640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015648:	3301      	adds	r3, #1
 801564a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801564e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015652:	2b0f      	cmp	r3, #15
 8015654:	d9aa      	bls.n	80155ac <RegionEU868ApplyCFList+0x30>
 8015656:	e002      	b.n	801565e <RegionEU868ApplyCFList+0xe2>
        return;
 8015658:	bf00      	nop
 801565a:	e000      	b.n	801565e <RegionEU868ApplyCFList+0xe2>
        return;
 801565c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801565e:	3728      	adds	r7, #40	@ 0x28
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}

08015664 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015664:	b580      	push	{r7, lr}
 8015666:	b082      	sub	sp, #8
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	791b      	ldrb	r3, [r3, #4]
 8015670:	2b00      	cmp	r3, #0
 8015672:	d002      	beq.n	801567a <RegionEU868ChanMaskSet+0x16>
 8015674:	2b01      	cmp	r3, #1
 8015676:	d00b      	beq.n	8015690 <RegionEU868ChanMaskSet+0x2c>
 8015678:	e015      	b.n	80156a6 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801567a:	4b0e      	ldr	r3, [pc, #56]	@ (80156b4 <RegionEU868ChanMaskSet+0x50>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	681b      	ldr	r3, [r3, #0]
 8015686:	2201      	movs	r2, #1
 8015688:	4619      	mov	r1, r3
 801568a:	f7fe ff17 	bl	80144bc <RegionCommonChanMaskCopy>
            break;
 801568e:	e00c      	b.n	80156aa <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015690:	4b08      	ldr	r3, [pc, #32]	@ (80156b4 <RegionEU868ChanMaskSet+0x50>)
 8015692:	681b      	ldr	r3, [r3, #0]
 8015694:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	2201      	movs	r2, #1
 801569e:	4619      	mov	r1, r3
 80156a0:	f7fe ff0c 	bl	80144bc <RegionCommonChanMaskCopy>
            break;
 80156a4:	e001      	b.n	80156aa <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80156a6:	2300      	movs	r3, #0
 80156a8:	e000      	b.n	80156ac <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80156aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3708      	adds	r7, #8
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	20001a3c 	.word	0x20001a3c

080156b8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b088      	sub	sp, #32
 80156bc:	af02      	add	r7, sp, #8
 80156be:	60ba      	str	r2, [r7, #8]
 80156c0:	607b      	str	r3, [r7, #4]
 80156c2:	4603      	mov	r3, r0
 80156c4:	73fb      	strb	r3, [r7, #15]
 80156c6:	460b      	mov	r3, r1
 80156c8:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80156ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156d2:	2b07      	cmp	r3, #7
 80156d4:	bfa8      	it	ge
 80156d6:	2307      	movge	r3, #7
 80156d8:	b25a      	sxtb	r2, r3
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156e4:	491e      	ldr	r1, [pc, #120]	@ (8015760 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80156e6:	4618      	mov	r0, r3
 80156e8:	f7ff fb88 	bl	8014dfc <RegionCommonGetBandwidth>
 80156ec:	4603      	mov	r3, r0
 80156ee:	b2da      	uxtb	r2, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80156fa:	2b07      	cmp	r3, #7
 80156fc:	d10a      	bne.n	8015714 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015704:	461a      	mov	r2, r3
 8015706:	4b17      	ldr	r3, [pc, #92]	@ (8015764 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015708:	5c9b      	ldrb	r3, [r3, r2]
 801570a:	4618      	mov	r0, r3
 801570c:	f7ff f90a 	bl	8014924 <RegionCommonComputeSymbolTimeFsk>
 8015710:	6178      	str	r0, [r7, #20]
 8015712:	e011      	b.n	8015738 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801571a:	461a      	mov	r2, r3
 801571c:	4b11      	ldr	r3, [pc, #68]	@ (8015764 <RegionEU868ComputeRxWindowParameters+0xac>)
 801571e:	5c9a      	ldrb	r2, [r3, r2]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015726:	4619      	mov	r1, r3
 8015728:	4b0d      	ldr	r3, [pc, #52]	@ (8015760 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801572a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801572e:	4619      	mov	r1, r3
 8015730:	4610      	mov	r0, r2
 8015732:	f7ff f8e1 	bl	80148f8 <RegionCommonComputeSymbolTimeLoRa>
 8015736:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015738:	4b0b      	ldr	r3, [pc, #44]	@ (8015768 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801573a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801573c:	4798      	blx	r3
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	3308      	adds	r3, #8
 8015742:	687a      	ldr	r2, [r7, #4]
 8015744:	320c      	adds	r2, #12
 8015746:	7bb9      	ldrb	r1, [r7, #14]
 8015748:	9201      	str	r2, [sp, #4]
 801574a:	9300      	str	r3, [sp, #0]
 801574c:	4603      	mov	r3, r0
 801574e:	68ba      	ldr	r2, [r7, #8]
 8015750:	6978      	ldr	r0, [r7, #20]
 8015752:	f7ff f8f7 	bl	8014944 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015756:	bf00      	nop
 8015758:	3718      	adds	r7, #24
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	0801cf68 	.word	0x0801cf68
 8015764:	0801cf60 	.word	0x0801cf60
 8015768:	0801d01c 	.word	0x0801d01c

0801576c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801576c:	b5b0      	push	{r4, r5, r7, lr}
 801576e:	b090      	sub	sp, #64	@ 0x40
 8015770:	af0a      	add	r7, sp, #40	@ 0x28
 8015772:	6078      	str	r0, [r7, #4]
 8015774:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	785b      	ldrb	r3, [r3, #1]
 801577a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801577c:	2300      	movs	r3, #0
 801577e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015780:	2300      	movs	r3, #0
 8015782:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	685b      	ldr	r3, [r3, #4]
 8015788:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801578a:	4b5a      	ldr	r3, [pc, #360]	@ (80158f4 <RegionEU868RxConfig+0x188>)
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	4798      	blx	r3
 8015790:	4603      	mov	r3, r0
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015796:	2300      	movs	r3, #0
 8015798:	e0a8      	b.n	80158ec <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	7cdb      	ldrb	r3, [r3, #19]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d126      	bne.n	80157f0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80157a2:	4b55      	ldr	r3, [pc, #340]	@ (80158f8 <RegionEU868RxConfig+0x18c>)
 80157a4:	681a      	ldr	r2, [r3, #0]
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	4619      	mov	r1, r3
 80157ac:	460b      	mov	r3, r1
 80157ae:	005b      	lsls	r3, r3, #1
 80157b0:	440b      	add	r3, r1
 80157b2:	009b      	lsls	r3, r3, #2
 80157b4:	4413      	add	r3, r2
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80157ba:	4b4f      	ldr	r3, [pc, #316]	@ (80158f8 <RegionEU868RxConfig+0x18c>)
 80157bc:	681a      	ldr	r2, [r3, #0]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	4619      	mov	r1, r3
 80157c4:	460b      	mov	r3, r1
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	440b      	add	r3, r1
 80157ca:	009b      	lsls	r3, r3, #2
 80157cc:	4413      	add	r3, r2
 80157ce:	3304      	adds	r3, #4
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00c      	beq.n	80157f0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80157d6:	4b48      	ldr	r3, [pc, #288]	@ (80158f8 <RegionEU868RxConfig+0x18c>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	4619      	mov	r1, r3
 80157e0:	460b      	mov	r3, r1
 80157e2:	005b      	lsls	r3, r3, #1
 80157e4:	440b      	add	r3, r1
 80157e6:	009b      	lsls	r3, r3, #2
 80157e8:	4413      	add	r3, r2
 80157ea:	3304      	adds	r3, #4
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80157f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80157f4:	4a41      	ldr	r2, [pc, #260]	@ (80158fc <RegionEU868RxConfig+0x190>)
 80157f6:	5cd3      	ldrb	r3, [r2, r3]
 80157f8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80157fa:	4b3e      	ldr	r3, [pc, #248]	@ (80158f4 <RegionEU868RxConfig+0x188>)
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	6938      	ldr	r0, [r7, #16]
 8015800:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015806:	2b07      	cmp	r3, #7
 8015808:	d128      	bne.n	801585c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801580a:	2300      	movs	r3, #0
 801580c:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801580e:	4b39      	ldr	r3, [pc, #228]	@ (80158f4 <RegionEU868RxConfig+0x188>)
 8015810:	699c      	ldr	r4, [r3, #24]
 8015812:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015816:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801581a:	fb02 f303 	mul.w	r3, r2, r3
 801581e:	4619      	mov	r1, r3
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	689b      	ldr	r3, [r3, #8]
 8015824:	b29b      	uxth	r3, r3
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	7c92      	ldrb	r2, [r2, #18]
 801582a:	7df8      	ldrb	r0, [r7, #23]
 801582c:	9209      	str	r2, [sp, #36]	@ 0x24
 801582e:	2200      	movs	r2, #0
 8015830:	9208      	str	r2, [sp, #32]
 8015832:	2200      	movs	r2, #0
 8015834:	9207      	str	r2, [sp, #28]
 8015836:	2200      	movs	r2, #0
 8015838:	9206      	str	r2, [sp, #24]
 801583a:	2201      	movs	r2, #1
 801583c:	9205      	str	r2, [sp, #20]
 801583e:	2200      	movs	r2, #0
 8015840:	9204      	str	r2, [sp, #16]
 8015842:	2200      	movs	r2, #0
 8015844:	9203      	str	r2, [sp, #12]
 8015846:	9302      	str	r3, [sp, #8]
 8015848:	2305      	movs	r3, #5
 801584a:	9301      	str	r3, [sp, #4]
 801584c:	4b2c      	ldr	r3, [pc, #176]	@ (8015900 <RegionEU868RxConfig+0x194>)
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	2300      	movs	r3, #0
 8015852:	460a      	mov	r2, r1
 8015854:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8015858:	47a0      	blx	r4
 801585a:	e024      	b.n	80158a6 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801585c:	2301      	movs	r3, #1
 801585e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8015860:	4b24      	ldr	r3, [pc, #144]	@ (80158f4 <RegionEU868RxConfig+0x188>)
 8015862:	699c      	ldr	r4, [r3, #24]
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	789b      	ldrb	r3, [r3, #2]
 8015868:	461d      	mov	r5, r3
 801586a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	689b      	ldr	r3, [r3, #8]
 8015872:	b29b      	uxth	r3, r3
 8015874:	687a      	ldr	r2, [r7, #4]
 8015876:	7c92      	ldrb	r2, [r2, #18]
 8015878:	7df8      	ldrb	r0, [r7, #23]
 801587a:	9209      	str	r2, [sp, #36]	@ 0x24
 801587c:	2201      	movs	r2, #1
 801587e:	9208      	str	r2, [sp, #32]
 8015880:	2200      	movs	r2, #0
 8015882:	9207      	str	r2, [sp, #28]
 8015884:	2200      	movs	r2, #0
 8015886:	9206      	str	r2, [sp, #24]
 8015888:	2200      	movs	r2, #0
 801588a:	9205      	str	r2, [sp, #20]
 801588c:	2200      	movs	r2, #0
 801588e:	9204      	str	r2, [sp, #16]
 8015890:	2200      	movs	r2, #0
 8015892:	9203      	str	r2, [sp, #12]
 8015894:	9302      	str	r3, [sp, #8]
 8015896:	2308      	movs	r3, #8
 8015898:	9301      	str	r3, [sp, #4]
 801589a:	2300      	movs	r3, #0
 801589c:	9300      	str	r3, [sp, #0]
 801589e:	2301      	movs	r3, #1
 80158a0:	460a      	mov	r2, r1
 80158a2:	4629      	mov	r1, r5
 80158a4:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	7c5b      	ldrb	r3, [r3, #17]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d005      	beq.n	80158ba <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80158ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158b2:	4a14      	ldr	r2, [pc, #80]	@ (8015904 <RegionEU868RxConfig+0x198>)
 80158b4:	5cd3      	ldrb	r3, [r2, r3]
 80158b6:	75bb      	strb	r3, [r7, #22]
 80158b8:	e004      	b.n	80158c4 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80158ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80158be:	4a12      	ldr	r2, [pc, #72]	@ (8015908 <RegionEU868RxConfig+0x19c>)
 80158c0:	5cd3      	ldrb	r3, [r2, r3]
 80158c2:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80158c4:	4b0b      	ldr	r3, [pc, #44]	@ (80158f4 <RegionEU868RxConfig+0x188>)
 80158c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158c8:	7dba      	ldrb	r2, [r7, #22]
 80158ca:	320d      	adds	r2, #13
 80158cc:	b2d1      	uxtb	r1, r2
 80158ce:	7dfa      	ldrb	r2, [r7, #23]
 80158d0:	4610      	mov	r0, r2
 80158d2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	7cdb      	ldrb	r3, [r3, #19]
 80158d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80158dc:	6939      	ldr	r1, [r7, #16]
 80158de:	4618      	mov	r0, r3
 80158e0:	f7ff faaa 	bl	8014e38 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80158e4:	683b      	ldr	r3, [r7, #0]
 80158e6:	7bfa      	ldrb	r2, [r7, #15]
 80158e8:	701a      	strb	r2, [r3, #0]
    return true;
 80158ea:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80158ec:	4618      	mov	r0, r3
 80158ee:	3718      	adds	r7, #24
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bdb0      	pop	{r4, r5, r7, pc}
 80158f4:	0801d01c 	.word	0x0801d01c
 80158f8:	20001a3c 	.word	0x20001a3c
 80158fc:	0801cf60 	.word	0x0801cf60
 8015900:	00014585 	.word	0x00014585
 8015904:	0801cf90 	.word	0x0801cf90
 8015908:	0801cf88 	.word	0x0801cf88

0801590c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801590c:	b590      	push	{r4, r7, lr}
 801590e:	b093      	sub	sp, #76	@ 0x4c
 8015910:	af0a      	add	r7, sp, #40	@ 0x28
 8015912:	60f8      	str	r0, [r7, #12]
 8015914:	60b9      	str	r1, [r7, #8]
 8015916:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801591e:	461a      	mov	r2, r3
 8015920:	4b5d      	ldr	r3, [pc, #372]	@ (8015a98 <RegionEU868TxConfig+0x18c>)
 8015922:	5c9b      	ldrb	r3, [r3, r2]
 8015924:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801592c:	4b5b      	ldr	r3, [pc, #364]	@ (8015a9c <RegionEU868TxConfig+0x190>)
 801592e:	681a      	ldr	r2, [r3, #0]
 8015930:	4b5b      	ldr	r3, [pc, #364]	@ (8015aa0 <RegionEU868TxConfig+0x194>)
 8015932:	6819      	ldr	r1, [r3, #0]
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	781b      	ldrb	r3, [r3, #0]
 8015938:	461c      	mov	r4, r3
 801593a:	4623      	mov	r3, r4
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4423      	add	r3, r4
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	440b      	add	r3, r1
 8015944:	3309      	adds	r3, #9
 8015946:	781b      	ldrb	r3, [r3, #0]
 8015948:	4619      	mov	r1, r3
 801594a:	460b      	mov	r3, r1
 801594c:	005b      	lsls	r3, r3, #1
 801594e:	440b      	add	r3, r1
 8015950:	00db      	lsls	r3, r3, #3
 8015952:	4413      	add	r3, r2
 8015954:	3302      	adds	r3, #2
 8015956:	f993 3000 	ldrsb.w	r3, [r3]
 801595a:	4619      	mov	r1, r3
 801595c:	f7ff fa39 	bl	8014dd2 <RegionCommonLimitTxPower>
 8015960:	4603      	mov	r3, r0
 8015962:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801596a:	494e      	ldr	r1, [pc, #312]	@ (8015aa4 <RegionEU868TxConfig+0x198>)
 801596c:	4618      	mov	r0, r3
 801596e:	f7ff fa45 	bl	8014dfc <RegionCommonGetBandwidth>
 8015972:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8015974:	2300      	movs	r3, #0
 8015976:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8015978:	68fb      	ldr	r3, [r7, #12]
 801597a:	6859      	ldr	r1, [r3, #4]
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	689a      	ldr	r2, [r3, #8]
 8015980:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015984:	4618      	mov	r0, r3
 8015986:	f7ff f895 	bl	8014ab4 <RegionCommonComputeTxPower>
 801598a:	4603      	mov	r3, r0
 801598c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801598e:	4b46      	ldr	r3, [pc, #280]	@ (8015aa8 <RegionEU868TxConfig+0x19c>)
 8015990:	68da      	ldr	r2, [r3, #12]
 8015992:	4b43      	ldr	r3, [pc, #268]	@ (8015aa0 <RegionEU868TxConfig+0x194>)
 8015994:	6819      	ldr	r1, [r3, #0]
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	4618      	mov	r0, r3
 801599c:	4603      	mov	r3, r0
 801599e:	005b      	lsls	r3, r3, #1
 80159a0:	4403      	add	r3, r0
 80159a2:	009b      	lsls	r3, r3, #2
 80159a4:	440b      	add	r3, r1
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4618      	mov	r0, r3
 80159aa:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80159b2:	2b07      	cmp	r3, #7
 80159b4:	d124      	bne.n	8015a00 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80159b6:	2300      	movs	r3, #0
 80159b8:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80159ba:	4b3b      	ldr	r3, [pc, #236]	@ (8015aa8 <RegionEU868TxConfig+0x19c>)
 80159bc:	69dc      	ldr	r4, [r3, #28]
 80159be:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80159c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80159c6:	fb02 f303 	mul.w	r3, r2, r3
 80159ca:	461a      	mov	r2, r3
 80159cc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80159d0:	7ff8      	ldrb	r0, [r7, #31]
 80159d2:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80159d6:	9308      	str	r3, [sp, #32]
 80159d8:	2300      	movs	r3, #0
 80159da:	9307      	str	r3, [sp, #28]
 80159dc:	2300      	movs	r3, #0
 80159de:	9306      	str	r3, [sp, #24]
 80159e0:	2300      	movs	r3, #0
 80159e2:	9305      	str	r3, [sp, #20]
 80159e4:	2301      	movs	r3, #1
 80159e6:	9304      	str	r3, [sp, #16]
 80159e8:	2300      	movs	r3, #0
 80159ea:	9303      	str	r3, [sp, #12]
 80159ec:	2305      	movs	r3, #5
 80159ee:	9302      	str	r3, [sp, #8]
 80159f0:	2300      	movs	r3, #0
 80159f2:	9301      	str	r3, [sp, #4]
 80159f4:	9200      	str	r2, [sp, #0]
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80159fc:	47a0      	blx	r4
 80159fe:	e01d      	b.n	8015a3c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 8015a00:	2301      	movs	r3, #1
 8015a02:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8015a04:	4b28      	ldr	r3, [pc, #160]	@ (8015aa8 <RegionEU868TxConfig+0x19c>)
 8015a06:	69dc      	ldr	r4, [r3, #28]
 8015a08:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015a0c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8015a10:	7ff8      	ldrb	r0, [r7, #31]
 8015a12:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8015a16:	9208      	str	r2, [sp, #32]
 8015a18:	2200      	movs	r2, #0
 8015a1a:	9207      	str	r2, [sp, #28]
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	9206      	str	r2, [sp, #24]
 8015a20:	2200      	movs	r2, #0
 8015a22:	9205      	str	r2, [sp, #20]
 8015a24:	2201      	movs	r2, #1
 8015a26:	9204      	str	r2, [sp, #16]
 8015a28:	2200      	movs	r2, #0
 8015a2a:	9203      	str	r2, [sp, #12]
 8015a2c:	2208      	movs	r2, #8
 8015a2e:	9202      	str	r2, [sp, #8]
 8015a30:	2201      	movs	r2, #1
 8015a32:	9201      	str	r2, [sp, #4]
 8015a34:	9300      	str	r3, [sp, #0]
 8015a36:	69bb      	ldr	r3, [r7, #24]
 8015a38:	2200      	movs	r2, #0
 8015a3a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8015a3c:	4b18      	ldr	r3, [pc, #96]	@ (8015aa0 <RegionEU868TxConfig+0x194>)
 8015a3e:	681a      	ldr	r2, [r3, #0]
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	4619      	mov	r1, r3
 8015a46:	460b      	mov	r3, r1
 8015a48:	005b      	lsls	r3, r3, #1
 8015a4a:	440b      	add	r3, r1
 8015a4c:	009b      	lsls	r3, r3, #2
 8015a4e:	4413      	add	r3, r2
 8015a50:	681a      	ldr	r2, [r3, #0]
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a58:	4619      	mov	r1, r3
 8015a5a:	4610      	mov	r0, r2
 8015a5c:	f7ff fa1e 	bl	8014e9c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8015a66:	68fb      	ldr	r3, [r7, #12]
 8015a68:	899b      	ldrh	r3, [r3, #12]
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4610      	mov	r0, r2
 8015a6e:	f7ff faa3 	bl	8014fb8 <GetTimeOnAir>
 8015a72:	4602      	mov	r2, r0
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8015a78:	4b0b      	ldr	r3, [pc, #44]	@ (8015aa8 <RegionEU868TxConfig+0x19c>)
 8015a7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015a7c:	68fa      	ldr	r2, [r7, #12]
 8015a7e:	8992      	ldrh	r2, [r2, #12]
 8015a80:	b2d1      	uxtb	r1, r2
 8015a82:	7ffa      	ldrb	r2, [r7, #31]
 8015a84:	4610      	mov	r0, r2
 8015a86:	4798      	blx	r3

    *txPower = txPowerLimited;
 8015a88:	68bb      	ldr	r3, [r7, #8]
 8015a8a:	7f7a      	ldrb	r2, [r7, #29]
 8015a8c:	701a      	strb	r2, [r3, #0]
    return true;
 8015a8e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3724      	adds	r7, #36	@ 0x24
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd90      	pop	{r4, r7, pc}
 8015a98:	0801cf60 	.word	0x0801cf60
 8015a9c:	20001a38 	.word	0x20001a38
 8015aa0:	20001a3c 	.word	0x20001a3c
 8015aa4:	0801cf68 	.word	0x0801cf68
 8015aa8:	0801d01c 	.word	0x0801d01c

08015aac <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8015aac:	b590      	push	{r4, r7, lr}
 8015aae:	b093      	sub	sp, #76	@ 0x4c
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	60f8      	str	r0, [r7, #12]
 8015ab4:	60b9      	str	r1, [r7, #8]
 8015ab6:	607a      	str	r2, [r7, #4]
 8015ab8:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8015aba:	2307      	movs	r3, #7
 8015abc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8015ac0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015ac4:	2200      	movs	r2, #0
 8015ac6:	601a      	str	r2, [r3, #0]
 8015ac8:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8015aca:	2300      	movs	r3, #0
 8015acc:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015ada:	e085      	b.n	8015be8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8015adc:	68fb      	ldr	r3, [r7, #12]
 8015ade:	685a      	ldr	r2, [r3, #4]
 8015ae0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8015ae4:	4413      	add	r3, r2
 8015ae6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8015aea:	4611      	mov	r1, r2
 8015aec:	4618      	mov	r0, r3
 8015aee:	f7fe fe29 	bl	8014744 <RegionCommonParseLinkAdrReq>
 8015af2:	4603      	mov	r3, r0
 8015af4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8015af8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d07b      	beq.n	8015bf8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8015b00:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015b04:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8015b08:	4413      	add	r3, r2
 8015b0a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8015b0e:	2307      	movs	r3, #7
 8015b10:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8015b14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015b18:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8015b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d109      	bne.n	8015b36 <RegionEU868LinkAdrReq+0x8a>
 8015b22:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d106      	bne.n	8015b36 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8015b28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b2c:	f023 0301 	bic.w	r3, r3, #1
 8015b30:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015b34:	e058      	b.n	8015be8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015b36:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d003      	beq.n	8015b46 <RegionEU868LinkAdrReq+0x9a>
 8015b3e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b42:	2b05      	cmp	r3, #5
 8015b44:	d903      	bls.n	8015b4e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8015b46:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8015b4a:	2b06      	cmp	r3, #6
 8015b4c:	d906      	bls.n	8015b5c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8015b4e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015b52:	f023 0301 	bic.w	r3, r3, #1
 8015b56:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015b5a:	e045      	b.n	8015be8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015b62:	e03d      	b.n	8015be0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8015b64:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015b68:	2b06      	cmp	r3, #6
 8015b6a:	d118      	bne.n	8015b9e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8015b6c:	4b5f      	ldr	r3, [pc, #380]	@ (8015cec <RegionEU868LinkAdrReq+0x240>)
 8015b6e:	6819      	ldr	r1, [r3, #0]
 8015b70:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015b74:	4613      	mov	r3, r2
 8015b76:	005b      	lsls	r3, r3, #1
 8015b78:	4413      	add	r3, r2
 8015b7a:	009b      	lsls	r3, r3, #2
 8015b7c:	440b      	add	r3, r1
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d028      	beq.n	8015bd6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8015b84:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015b88:	2201      	movs	r2, #1
 8015b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015b8e:	b21a      	sxth	r2, r3
 8015b90:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015b92:	b21b      	sxth	r3, r3
 8015b94:	4313      	orrs	r3, r2
 8015b96:	b21b      	sxth	r3, r3
 8015b98:	b29b      	uxth	r3, r3
 8015b9a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8015b9c:	e01b      	b.n	8015bd6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015b9e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015ba0:	461a      	mov	r2, r3
 8015ba2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015ba6:	fa42 f303 	asr.w	r3, r2, r3
 8015baa:	f003 0301 	and.w	r3, r3, #1
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d011      	beq.n	8015bd6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8015bb2:	4b4e      	ldr	r3, [pc, #312]	@ (8015cec <RegionEU868LinkAdrReq+0x240>)
 8015bb4:	6819      	ldr	r1, [r3, #0]
 8015bb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	009b      	lsls	r3, r3, #2
 8015bc2:	440b      	add	r3, r1
 8015bc4:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d105      	bne.n	8015bd6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8015bca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015bce:	f023 0301 	bic.w	r3, r3, #1
 8015bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8015bd6:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015bda:	3301      	adds	r3, #1
 8015bdc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8015be0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8015be4:	2b0f      	cmp	r3, #15
 8015be6:	d9bd      	bls.n	8015b64 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8015be8:	68fb      	ldr	r3, [r7, #12]
 8015bea:	7a1b      	ldrb	r3, [r3, #8]
 8015bec:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	f4ff af73 	bcc.w	8015adc <RegionEU868LinkAdrReq+0x30>
 8015bf6:	e000      	b.n	8015bfa <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8015bf8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8015bfa:	2302      	movs	r3, #2
 8015bfc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	7a5b      	ldrb	r3, [r3, #9]
 8015c04:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8015c08:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	f7ff fa23 	bl	8015058 <RegionEU868GetPhyParam>
 8015c12:	4603      	mov	r3, r0
 8015c14:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8015c16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015c1a:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	7a9b      	ldrb	r3, [r3, #10]
 8015c20:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8015c22:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8015c26:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8015c28:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8015c2c:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8015c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8015c32:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8015c34:	68fb      	ldr	r3, [r7, #12]
 8015c36:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8015c3a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015c42:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	7b5b      	ldrb	r3, [r3, #13]
 8015c48:	b25b      	sxtb	r3, r3
 8015c4a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8015c4c:	2310      	movs	r3, #16
 8015c4e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8015c50:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8015c54:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8015c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015c58:	b25b      	sxtb	r3, r3
 8015c5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8015c5e:	2307      	movs	r3, #7
 8015c60:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8015c64:	4b21      	ldr	r3, [pc, #132]	@ (8015cec <RegionEU868LinkAdrReq+0x240>)
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8015c6a:	2307      	movs	r3, #7
 8015c6c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8015c70:	2300      	movs	r3, #0
 8015c72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8015c7c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8015c80:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c84:	1c9a      	adds	r2, r3, #2
 8015c86:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8015c8a:	1c59      	adds	r1, r3, #1
 8015c8c:	f107 0010 	add.w	r0, r7, #16
 8015c90:	4623      	mov	r3, r4
 8015c92:	f7fe fda9 	bl	80147e8 <RegionCommonLinkAdrReqVerifyParams>
 8015c96:	4603      	mov	r3, r0
 8015c98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8015c9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015ca0:	2b07      	cmp	r3, #7
 8015ca2:	d10d      	bne.n	8015cc0 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8015ca4:	4b11      	ldr	r3, [pc, #68]	@ (8015cec <RegionEU868LinkAdrReq+0x240>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015cac:	220c      	movs	r2, #12
 8015cae:	2100      	movs	r1, #0
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f001 fde5 	bl	8017880 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8015cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8015cec <RegionEU868LinkAdrReq+0x240>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015cbc:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8015cc0:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8015cc4:	68bb      	ldr	r3, [r7, #8]
 8015cc6:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015cc8:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8015cd0:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8015cd4:	683b      	ldr	r3, [r7, #0]
 8015cd6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8015cd8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8015cda:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8015cde:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8015ce0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	374c      	adds	r7, #76	@ 0x4c
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd90      	pop	{r4, r7, pc}
 8015cec:	20001a3c 	.word	0x20001a3c

08015cf0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8015cf8:	2307      	movs	r3, #7
 8015cfa:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	f107 020e 	add.w	r2, r7, #14
 8015d08:	4611      	mov	r1, r2
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7ff f8de 	bl	8014ecc <VerifyRfFreq>
 8015d10:	4603      	mov	r3, r0
 8015d12:	f083 0301 	eor.w	r3, r3, #1
 8015d16:	b2db      	uxtb	r3, r3
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d003      	beq.n	8015d24 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8015d1c:	7bfb      	ldrb	r3, [r7, #15]
 8015d1e:	f023 0301 	bic.w	r3, r3, #1
 8015d22:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	f993 3000 	ldrsb.w	r3, [r3]
 8015d2a:	2207      	movs	r2, #7
 8015d2c:	2100      	movs	r1, #0
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7fe fb47 	bl	80143c2 <RegionCommonValueInRange>
 8015d34:	4603      	mov	r3, r0
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d103      	bne.n	8015d42 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8015d3a:	7bfb      	ldrb	r3, [r7, #15]
 8015d3c:	f023 0302 	bic.w	r3, r3, #2
 8015d40:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015d48:	2205      	movs	r2, #5
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7fe fb38 	bl	80143c2 <RegionCommonValueInRange>
 8015d52:	4603      	mov	r3, r0
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d103      	bne.n	8015d60 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8015d58:	7bfb      	ldrb	r3, [r7, #15]
 8015d5a:	f023 0304 	bic.w	r3, r3, #4
 8015d5e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8015d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3710      	adds	r7, #16
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
	...

08015d6c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b086      	sub	sp, #24
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015d74:	2303      	movs	r3, #3
 8015d76:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d114      	bne.n	8015dac <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015d88:	b2db      	uxtb	r3, r3
 8015d8a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8015d8c:	f107 0308 	add.w	r3, r7, #8
 8015d90:	4618      	mov	r0, r3
 8015d92:	f000 f9ff 	bl	8016194 <RegionEU868ChannelsRemove>
 8015d96:	4603      	mov	r3, r0
 8015d98:	f083 0301 	eor.w	r3, r3, #1
 8015d9c:	b2db      	uxtb	r3, r3
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d03b      	beq.n	8015e1a <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8015da2:	7dfb      	ldrb	r3, [r7, #23]
 8015da4:	f023 0303 	bic.w	r3, r3, #3
 8015da8:	75fb      	strb	r3, [r7, #23]
 8015daa:	e036      	b.n	8015e1a <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8015dbc:	f107 030c 	add.w	r3, r7, #12
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f000 f945 	bl	8016050 <RegionEU868ChannelAdd>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	2b06      	cmp	r3, #6
 8015dca:	d820      	bhi.n	8015e0e <RegionEU868NewChannelReq+0xa2>
 8015dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8015dd4 <RegionEU868NewChannelReq+0x68>)
 8015dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015dd2:	bf00      	nop
 8015dd4:	08015e19 	.word	0x08015e19
 8015dd8:	08015e0f 	.word	0x08015e0f
 8015ddc:	08015e0f 	.word	0x08015e0f
 8015de0:	08015e0f 	.word	0x08015e0f
 8015de4:	08015df1 	.word	0x08015df1
 8015de8:	08015dfb 	.word	0x08015dfb
 8015dec:	08015e05 	.word	0x08015e05
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8015df0:	7dfb      	ldrb	r3, [r7, #23]
 8015df2:	f023 0301 	bic.w	r3, r3, #1
 8015df6:	75fb      	strb	r3, [r7, #23]
                break;
 8015df8:	e00f      	b.n	8015e1a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8015dfa:	7dfb      	ldrb	r3, [r7, #23]
 8015dfc:	f023 0302 	bic.w	r3, r3, #2
 8015e00:	75fb      	strb	r3, [r7, #23]
                break;
 8015e02:	e00a      	b.n	8015e1a <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	f023 0303 	bic.w	r3, r3, #3
 8015e0a:	75fb      	strb	r3, [r7, #23]
                break;
 8015e0c:	e005      	b.n	8015e1a <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8015e0e:	7dfb      	ldrb	r3, [r7, #23]
 8015e10:	f023 0303 	bic.w	r3, r3, #3
 8015e14:	75fb      	strb	r3, [r7, #23]
                break;
 8015e16:	e000      	b.n	8015e1a <RegionEU868NewChannelReq+0xae>
                break;
 8015e18:	bf00      	nop
            }
        }
    }

    return status;
 8015e1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}
 8015e26:	bf00      	nop

08015e28 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015e28:	b480      	push	{r7}
 8015e2a:	b083      	sub	sp, #12
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015e30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015e34:	4618      	mov	r0, r3
 8015e36:	370c      	adds	r7, #12
 8015e38:	46bd      	mov	sp, r7
 8015e3a:	bc80      	pop	{r7}
 8015e3c:	4770      	bx	lr
	...

08015e40 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8015e48:	2303      	movs	r3, #3
 8015e4a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	781b      	ldrb	r3, [r3, #0]
 8015e54:	2b0f      	cmp	r3, #15
 8015e56:	d901      	bls.n	8015e5c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	e035      	b.n	8015ec8 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	685b      	ldr	r3, [r3, #4]
 8015e60:	f107 020e 	add.w	r2, r7, #14
 8015e64:	4611      	mov	r1, r2
 8015e66:	4618      	mov	r0, r3
 8015e68:	f7ff f830 	bl	8014ecc <VerifyRfFreq>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	f083 0301 	eor.w	r3, r3, #1
 8015e72:	b2db      	uxtb	r3, r3
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d003      	beq.n	8015e80 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8015e78:	7bfb      	ldrb	r3, [r7, #15]
 8015e7a:	f023 0301 	bic.w	r3, r3, #1
 8015e7e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8015e80:	4b13      	ldr	r3, [pc, #76]	@ (8015ed0 <RegionEU868DlChannelReq+0x90>)
 8015e82:	681a      	ldr	r2, [r3, #0]
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	781b      	ldrb	r3, [r3, #0]
 8015e88:	4619      	mov	r1, r3
 8015e8a:	460b      	mov	r3, r1
 8015e8c:	005b      	lsls	r3, r3, #1
 8015e8e:	440b      	add	r3, r1
 8015e90:	009b      	lsls	r3, r3, #2
 8015e92:	4413      	add	r3, r2
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d103      	bne.n	8015ea2 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8015e9a:	7bfb      	ldrb	r3, [r7, #15]
 8015e9c:	f023 0302 	bic.w	r3, r3, #2
 8015ea0:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8015ea2:	7bfb      	ldrb	r3, [r7, #15]
 8015ea4:	2b03      	cmp	r3, #3
 8015ea6:	d10d      	bne.n	8015ec4 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8015ea8:	4b09      	ldr	r3, [pc, #36]	@ (8015ed0 <RegionEU868DlChannelReq+0x90>)
 8015eaa:	6819      	ldr	r1, [r3, #0]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	781b      	ldrb	r3, [r3, #0]
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	685a      	ldr	r2, [r3, #4]
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	005b      	lsls	r3, r3, #1
 8015eba:	4403      	add	r3, r0
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	440b      	add	r3, r1
 8015ec0:	3304      	adds	r3, #4
 8015ec2:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8015ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ec8:	4618      	mov	r0, r3
 8015eca:	3710      	adds	r7, #16
 8015ecc:	46bd      	mov	sp, r7
 8015ece:	bd80      	pop	{r7, pc}
 8015ed0:	20001a3c 	.word	0x20001a3c

08015ed4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	4603      	mov	r3, r0
 8015edc:	460a      	mov	r2, r1
 8015ede:	71fb      	strb	r3, [r7, #7]
 8015ee0:	4613      	mov	r3, r2
 8015ee2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8015ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8015ee8:	4618      	mov	r0, r3
 8015eea:	370c      	adds	r7, #12
 8015eec:	46bd      	mov	sp, r7
 8015eee:	bc80      	pop	{r7}
 8015ef0:	4770      	bx	lr
	...

08015ef4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	b09a      	sub	sp, #104	@ 0x68
 8015ef8:	af02      	add	r7, sp, #8
 8015efa:	60f8      	str	r0, [r7, #12]
 8015efc:	60b9      	str	r1, [r7, #8]
 8015efe:	607a      	str	r2, [r7, #4]
 8015f00:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8015f02:	2300      	movs	r3, #0
 8015f04:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8015f0e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8015f12:	2200      	movs	r2, #0
 8015f14:	601a      	str	r2, [r3, #0]
 8015f16:	605a      	str	r2, [r3, #4]
 8015f18:	609a      	str	r2, [r3, #8]
 8015f1a:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015f1c:	230c      	movs	r3, #12
 8015f1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8015f22:	2307      	movs	r3, #7
 8015f24:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8015f26:	4b48      	ldr	r3, [pc, #288]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015f2e:	2201      	movs	r2, #1
 8015f30:	2100      	movs	r1, #0
 8015f32:	4618      	mov	r0, r3
 8015f34:	f7fe fa96 	bl	8014464 <RegionCommonCountChannels>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d10a      	bne.n	8015f54 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8015f3e:	4b42      	ldr	r3, [pc, #264]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 8015f46:	4b40      	ldr	r3, [pc, #256]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	f042 0207 	orr.w	r2, r2, #7
 8015f4e:	b292      	uxth	r2, r2
 8015f50:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	7a5b      	ldrb	r3, [r3, #9]
 8015f58:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015f5a:	68fb      	ldr	r3, [r7, #12]
 8015f5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8015f64:	4b38      	ldr	r3, [pc, #224]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8015f6c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8015f6e:	4b36      	ldr	r3, [pc, #216]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8015f74:	4b35      	ldr	r3, [pc, #212]	@ (801604c <RegionEU868NextChannel+0x158>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8015f7a:	2310      	movs	r3, #16
 8015f7c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8015f7e:	f107 0312 	add.w	r3, r7, #18
 8015f82:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	685b      	ldr	r3, [r3, #4]
 8015f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	7a9b      	ldrb	r3, [r3, #10]
 8015f94:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8015f98:	2306      	movs	r3, #6
 8015f9a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8015f9e:	68fa      	ldr	r2, [r7, #12]
 8015fa0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015fa4:	320c      	adds	r2, #12
 8015fa6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015faa:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	7d1b      	ldrb	r3, [r3, #20]
 8015fb2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	8adb      	ldrh	r3, [r3, #22]
 8015fc0:	4619      	mov	r1, r3
 8015fc2:	4610      	mov	r0, r2
 8015fc4:	f7fe fff8 	bl	8014fb8 <GetTimeOnAir>
 8015fc8:	4603      	mov	r3, r0
 8015fca:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8015fcc:	f107 0314 	add.w	r3, r7, #20
 8015fd0:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015fd2:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8015fd6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015fda:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	9301      	str	r3, [sp, #4]
 8015fe2:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8015fe6:	9300      	str	r3, [sp, #0]
 8015fe8:	460b      	mov	r3, r1
 8015fea:	6839      	ldr	r1, [r7, #0]
 8015fec:	f7fe fe51 	bl	8014c92 <RegionCommonIdentifyChannels>
 8015ff0:	4603      	mov	r3, r0
 8015ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8015ff6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d10e      	bne.n	801601c <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8015ffe:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8016002:	3b01      	subs	r3, #1
 8016004:	4619      	mov	r1, r3
 8016006:	2000      	movs	r0, #0
 8016008:	f001 fbe8 	bl	80177dc <randr>
 801600c:	4603      	mov	r3, r0
 801600e:	3360      	adds	r3, #96	@ 0x60
 8016010:	443b      	add	r3, r7
 8016012:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	701a      	strb	r2, [r3, #0]
 801601a:	e00e      	b.n	801603a <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 801601c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8016020:	2b0c      	cmp	r3, #12
 8016022:	d10a      	bne.n	801603a <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8016024:	4b08      	ldr	r3, [pc, #32]	@ (8016048 <RegionEU868NextChannel+0x154>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 801602c:	4b06      	ldr	r3, [pc, #24]	@ (8016048 <RegionEU868NextChannel+0x154>)
 801602e:	681b      	ldr	r3, [r3, #0]
 8016030:	f042 0207 	orr.w	r2, r2, #7
 8016034:	b292      	uxth	r2, r2
 8016036:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    }
    return status;
 801603a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801603e:	4618      	mov	r0, r3
 8016040:	3760      	adds	r7, #96	@ 0x60
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	20001a3c 	.word	0x20001a3c
 801604c:	20001a38 	.word	0x20001a38

08016050 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b084      	sub	sp, #16
 8016054:	af00      	add	r7, sp, #0
 8016056:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8016058:	2300      	movs	r3, #0
 801605a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 801605c:	2300      	movs	r3, #0
 801605e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016060:	2300      	movs	r3, #0
 8016062:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	791b      	ldrb	r3, [r3, #4]
 8016068:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801606a:	7b7b      	ldrb	r3, [r7, #13]
 801606c:	2b02      	cmp	r3, #2
 801606e:	d801      	bhi.n	8016074 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016070:	2306      	movs	r3, #6
 8016072:	e089      	b.n	8016188 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016074:	7b7b      	ldrb	r3, [r7, #13]
 8016076:	2b0f      	cmp	r3, #15
 8016078:	d901      	bls.n	801607e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801607a:	2303      	movs	r3, #3
 801607c:	e084      	b.n	8016188 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	7a1b      	ldrb	r3, [r3, #8]
 8016084:	f343 0303 	sbfx	r3, r3, #0, #4
 8016088:	b25b      	sxtb	r3, r3
 801608a:	2207      	movs	r2, #7
 801608c:	2100      	movs	r1, #0
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe f997 	bl	80143c2 <RegionCommonValueInRange>
 8016094:	4603      	mov	r3, r0
 8016096:	2b00      	cmp	r3, #0
 8016098:	d101      	bne.n	801609e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801609a:	2301      	movs	r3, #1
 801609c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	7a1b      	ldrb	r3, [r3, #8]
 80160a4:	f343 1303 	sbfx	r3, r3, #4, #4
 80160a8:	b25b      	sxtb	r3, r3
 80160aa:	2207      	movs	r2, #7
 80160ac:	2100      	movs	r1, #0
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7fe f987 	bl	80143c2 <RegionCommonValueInRange>
 80160b4:	4603      	mov	r3, r0
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d101      	bne.n	80160be <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 80160ba:	2301      	movs	r3, #1
 80160bc:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	681b      	ldr	r3, [r3, #0]
 80160c2:	7a1b      	ldrb	r3, [r3, #8]
 80160c4:	f343 0303 	sbfx	r3, r3, #0, #4
 80160c8:	b25a      	sxtb	r2, r3
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	7a1b      	ldrb	r3, [r3, #8]
 80160d0:	f343 1303 	sbfx	r3, r3, #4, #4
 80160d4:	b25b      	sxtb	r3, r3
 80160d6:	429a      	cmp	r2, r3
 80160d8:	dd01      	ble.n	80160de <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 80160da:	2301      	movs	r3, #1
 80160dc:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 80160de:	7bbb      	ldrb	r3, [r7, #14]
 80160e0:	f083 0301 	eor.w	r3, r3, #1
 80160e4:	b2db      	uxtb	r3, r3
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d010      	beq.n	801610c <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	f107 020c 	add.w	r2, r7, #12
 80160f4:	4611      	mov	r1, r2
 80160f6:	4618      	mov	r0, r3
 80160f8:	f7fe fee8 	bl	8014ecc <VerifyRfFreq>
 80160fc:	4603      	mov	r3, r0
 80160fe:	f083 0301 	eor.w	r3, r3, #1
 8016102:	b2db      	uxtb	r3, r3
 8016104:	2b00      	cmp	r3, #0
 8016106:	d001      	beq.n	801610c <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8016108:	2301      	movs	r3, #1
 801610a:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 801610c:	7bfb      	ldrb	r3, [r7, #15]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d004      	beq.n	801611c <RegionEU868ChannelAdd+0xcc>
 8016112:	7bbb      	ldrb	r3, [r7, #14]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d001      	beq.n	801611c <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016118:	2306      	movs	r3, #6
 801611a:	e035      	b.n	8016188 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 801611c:	7bfb      	ldrb	r3, [r7, #15]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d001      	beq.n	8016126 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8016122:	2305      	movs	r3, #5
 8016124:	e030      	b.n	8016188 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8016126:	7bbb      	ldrb	r3, [r7, #14]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d001      	beq.n	8016130 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 801612c:	2304      	movs	r3, #4
 801612e:	e02b      	b.n	8016188 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8016130:	4b17      	ldr	r3, [pc, #92]	@ (8016190 <RegionEU868ChannelAdd+0x140>)
 8016132:	6819      	ldr	r1, [r3, #0]
 8016134:	7b7a      	ldrb	r2, [r7, #13]
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	18c8      	adds	r0, r1, r3
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	220c      	movs	r2, #12
 8016146:	4619      	mov	r1, r3
 8016148:	f001 fb5f 	bl	801780a <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 801614c:	4b10      	ldr	r3, [pc, #64]	@ (8016190 <RegionEU868ChannelAdd+0x140>)
 801614e:	6819      	ldr	r1, [r3, #0]
 8016150:	7b7a      	ldrb	r2, [r7, #13]
 8016152:	7b38      	ldrb	r0, [r7, #12]
 8016154:	4613      	mov	r3, r2
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	4413      	add	r3, r2
 801615a:	009b      	lsls	r3, r3, #2
 801615c:	440b      	add	r3, r1
 801615e:	3309      	adds	r3, #9
 8016160:	4602      	mov	r2, r0
 8016162:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016164:	4b0a      	ldr	r3, [pc, #40]	@ (8016190 <RegionEU868ChannelAdd+0x140>)
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	@ 0x480
 801616c:	b21a      	sxth	r2, r3
 801616e:	7b7b      	ldrb	r3, [r7, #13]
 8016170:	2101      	movs	r1, #1
 8016172:	fa01 f303 	lsl.w	r3, r1, r3
 8016176:	b21b      	sxth	r3, r3
 8016178:	4313      	orrs	r3, r2
 801617a:	b21a      	sxth	r2, r3
 801617c:	4b04      	ldr	r3, [pc, #16]	@ (8016190 <RegionEU868ChannelAdd+0x140>)
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	b292      	uxth	r2, r2
 8016182:	f8a3 2480 	strh.w	r2, [r3, #1152]	@ 0x480
    return LORAMAC_STATUS_OK;
 8016186:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8016188:	4618      	mov	r0, r3
 801618a:	3710      	adds	r7, #16
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}
 8016190:	20001a3c 	.word	0x20001a3c

08016194 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b086      	sub	sp, #24
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 80161a2:	7dfb      	ldrb	r3, [r7, #23]
 80161a4:	2b02      	cmp	r3, #2
 80161a6:	d801      	bhi.n	80161ac <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 80161a8:	2300      	movs	r3, #0
 80161aa:	e016      	b.n	80161da <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80161ac:	4b0d      	ldr	r3, [pc, #52]	@ (80161e4 <RegionEU868ChannelsRemove+0x50>)
 80161ae:	6819      	ldr	r1, [r3, #0]
 80161b0:	7dfa      	ldrb	r2, [r7, #23]
 80161b2:	4613      	mov	r3, r2
 80161b4:	005b      	lsls	r3, r3, #1
 80161b6:	4413      	add	r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	440b      	add	r3, r1
 80161bc:	461a      	mov	r2, r3
 80161be:	2300      	movs	r3, #0
 80161c0:	6013      	str	r3, [r2, #0]
 80161c2:	6053      	str	r3, [r2, #4]
 80161c4:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 80161c6:	4b07      	ldr	r3, [pc, #28]	@ (80161e4 <RegionEU868ChannelsRemove+0x50>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80161ce:	7df9      	ldrb	r1, [r7, #23]
 80161d0:	2210      	movs	r2, #16
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7fe f912 	bl	80143fc <RegionCommonChanDisable>
 80161d8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 80161da:	4618      	mov	r0, r3
 80161dc:	3718      	adds	r7, #24
 80161de:	46bd      	mov	sp, r7
 80161e0:	bd80      	pop	{r7, pc}
 80161e2:	bf00      	nop
 80161e4:	20001a3c 	.word	0x20001a3c

080161e8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 80161e8:	b590      	push	{r4, r7, lr}
 80161ea:	b085      	sub	sp, #20
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80161f6:	4b20      	ldr	r3, [pc, #128]	@ (8016278 <RegionEU868SetContinuousWave+0x90>)
 80161f8:	681a      	ldr	r2, [r3, #0]
 80161fa:	4b20      	ldr	r3, [pc, #128]	@ (801627c <RegionEU868SetContinuousWave+0x94>)
 80161fc:	6819      	ldr	r1, [r3, #0]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	461c      	mov	r4, r3
 8016204:	4623      	mov	r3, r4
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4423      	add	r3, r4
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	440b      	add	r3, r1
 801620e:	3309      	adds	r3, #9
 8016210:	781b      	ldrb	r3, [r3, #0]
 8016212:	4619      	mov	r1, r3
 8016214:	460b      	mov	r3, r1
 8016216:	005b      	lsls	r3, r3, #1
 8016218:	440b      	add	r3, r1
 801621a:	00db      	lsls	r3, r3, #3
 801621c:	4413      	add	r3, r2
 801621e:	3302      	adds	r3, #2
 8016220:	f993 3000 	ldrsb.w	r3, [r3]
 8016224:	4619      	mov	r1, r3
 8016226:	f7fe fdd4 	bl	8014dd2 <RegionCommonLimitTxPower>
 801622a:	4603      	mov	r3, r0
 801622c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801622e:	2300      	movs	r3, #0
 8016230:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8016232:	4b12      	ldr	r3, [pc, #72]	@ (801627c <RegionEU868SetContinuousWave+0x94>)
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	4619      	mov	r1, r3
 801623c:	460b      	mov	r3, r1
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	440b      	add	r3, r1
 8016242:	009b      	lsls	r3, r3, #2
 8016244:	4413      	add	r3, r2
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	6859      	ldr	r1, [r3, #4]
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	689a      	ldr	r2, [r3, #8]
 8016252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016256:	4618      	mov	r0, r3
 8016258:	f7fe fc2c 	bl	8014ab4 <RegionCommonComputeTxPower>
 801625c:	4603      	mov	r3, r0
 801625e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8016260:	4b07      	ldr	r3, [pc, #28]	@ (8016280 <RegionEU868SetContinuousWave+0x98>)
 8016262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016264:	687a      	ldr	r2, [r7, #4]
 8016266:	8992      	ldrh	r2, [r2, #12]
 8016268:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801626c:	68b8      	ldr	r0, [r7, #8]
 801626e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8016270:	bf00      	nop
 8016272:	3714      	adds	r7, #20
 8016274:	46bd      	mov	sp, r7
 8016276:	bd90      	pop	{r4, r7, pc}
 8016278:	20001a38 	.word	0x20001a38
 801627c:	20001a3c 	.word	0x20001a3c
 8016280:	0801d01c 	.word	0x0801d01c

08016284 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8016284:	b480      	push	{r7}
 8016286:	b085      	sub	sp, #20
 8016288:	af00      	add	r7, sp, #0
 801628a:	4603      	mov	r3, r0
 801628c:	71fb      	strb	r3, [r7, #7]
 801628e:	460b      	mov	r3, r1
 8016290:	71bb      	strb	r3, [r7, #6]
 8016292:	4613      	mov	r3, r2
 8016294:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8016296:	79ba      	ldrb	r2, [r7, #6]
 8016298:	797b      	ldrb	r3, [r7, #5]
 801629a:	1ad3      	subs	r3, r2, r3
 801629c:	b2db      	uxtb	r3, r3
 801629e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80162a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	da01      	bge.n	80162ac <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80162ac:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80162ae:	4618      	mov	r0, r3
 80162b0:	3714      	adds	r7, #20
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bc80      	pop	{r7}
 80162b6:	4770      	bx	lr

080162b8 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b084      	sub	sp, #16
 80162bc:	af00      	add	r7, sp, #0
 80162be:	603b      	str	r3, [r7, #0]
 80162c0:	4603      	mov	r3, r0
 80162c2:	71fb      	strb	r3, [r7, #7]
 80162c4:	460b      	mov	r3, r1
 80162c6:	71bb      	strb	r3, [r7, #6]
 80162c8:	4613      	mov	r3, r2
 80162ca:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 80162cc:	79fb      	ldrb	r3, [r7, #7]
 80162ce:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 80162d0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80162d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162d8:	4611      	mov	r1, r2
 80162da:	4618      	mov	r0, r3
 80162dc:	f7fe fd79 	bl	8014dd2 <RegionCommonLimitTxPower>
 80162e0:	4603      	mov	r3, r0
 80162e2:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 80162e4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80162e8:	2b04      	cmp	r3, #4
 80162ea:	d106      	bne.n	80162fa <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 80162ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162f0:	2b02      	cmp	r3, #2
 80162f2:	bfb8      	it	lt
 80162f4:	2302      	movlt	r3, #2
 80162f6:	73fb      	strb	r3, [r7, #15]
 80162f8:	e00d      	b.n	8016316 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 80162fa:	2204      	movs	r2, #4
 80162fc:	2100      	movs	r1, #0
 80162fe:	6838      	ldr	r0, [r7, #0]
 8016300:	f7fe f8b0 	bl	8014464 <RegionCommonCountChannels>
 8016304:	4603      	mov	r3, r0
 8016306:	2b31      	cmp	r3, #49	@ 0x31
 8016308:	d805      	bhi.n	8016316 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801630a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801630e:	2b05      	cmp	r3, #5
 8016310:	bfb8      	it	lt
 8016312:	2305      	movlt	r3, #5
 8016314:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8016316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801631a:	4618      	mov	r0, r3
 801631c:	3710      	adds	r7, #16
 801631e:	46bd      	mov	sp, r7
 8016320:	bd80      	pop	{r7, pc}
	...

08016324 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8016324:	b580      	push	{r7, lr}
 8016326:	b082      	sub	sp, #8
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801632c:	4b18      	ldr	r3, [pc, #96]	@ (8016390 <VerifyRfFreq+0x6c>)
 801632e:	6a1b      	ldr	r3, [r3, #32]
 8016330:	6878      	ldr	r0, [r7, #4]
 8016332:	4798      	blx	r3
 8016334:	4603      	mov	r3, r0
 8016336:	f083 0301 	eor.w	r3, r3, #1
 801633a:	b2db      	uxtb	r3, r3
 801633c:	2b00      	cmp	r3, #0
 801633e:	d001      	beq.n	8016344 <VerifyRfFreq+0x20>
    {
        return false;
 8016340:	2300      	movs	r3, #0
 8016342:	e021      	b.n	8016388 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	4a13      	ldr	r2, [pc, #76]	@ (8016394 <VerifyRfFreq+0x70>)
 8016348:	4293      	cmp	r3, r2
 801634a:	d910      	bls.n	801636e <VerifyRfFreq+0x4a>
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	4a12      	ldr	r2, [pc, #72]	@ (8016398 <VerifyRfFreq+0x74>)
 8016350:	4293      	cmp	r3, r2
 8016352:	d80c      	bhi.n	801636e <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8016354:	687a      	ldr	r2, [r7, #4]
 8016356:	4b11      	ldr	r3, [pc, #68]	@ (801639c <VerifyRfFreq+0x78>)
 8016358:	4413      	add	r3, r2
 801635a:	4a11      	ldr	r2, [pc, #68]	@ (80163a0 <VerifyRfFreq+0x7c>)
 801635c:	fba2 1203 	umull	r1, r2, r2, r3
 8016360:	0c92      	lsrs	r2, r2, #18
 8016362:	4910      	ldr	r1, [pc, #64]	@ (80163a4 <VerifyRfFreq+0x80>)
 8016364:	fb01 f202 	mul.w	r2, r1, r2
 8016368:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 801636a:	2a00      	cmp	r2, #0
 801636c:	d001      	beq.n	8016372 <VerifyRfFreq+0x4e>
    {
        return false;
 801636e:	2300      	movs	r3, #0
 8016370:	e00a      	b.n	8016388 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	4a0c      	ldr	r2, [pc, #48]	@ (80163a8 <VerifyRfFreq+0x84>)
 8016376:	4293      	cmp	r3, r2
 8016378:	d903      	bls.n	8016382 <VerifyRfFreq+0x5e>
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	4a06      	ldr	r2, [pc, #24]	@ (8016398 <VerifyRfFreq+0x74>)
 801637e:	4293      	cmp	r3, r2
 8016380:	d901      	bls.n	8016386 <VerifyRfFreq+0x62>
    {
        return false;
 8016382:	2300      	movs	r3, #0
 8016384:	e000      	b.n	8016388 <VerifyRfFreq+0x64>
    }
    return true;
 8016386:	2301      	movs	r3, #1
}
 8016388:	4618      	mov	r0, r3
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}
 8016390:	0801d01c 	.word	0x0801d01c
 8016394:	3708709f 	.word	0x3708709f
 8016398:	374886e0 	.word	0x374886e0
 801639c:	c8f78f60 	.word	0xc8f78f60
 80163a0:	6fd91d85 	.word	0x6fd91d85
 80163a4:	000927c0 	.word	0x000927c0
 80163a8:	35c8015f 	.word	0x35c8015f

080163ac <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80163ac:	b590      	push	{r4, r7, lr}
 80163ae:	b089      	sub	sp, #36	@ 0x24
 80163b0:	af04      	add	r7, sp, #16
 80163b2:	4603      	mov	r3, r0
 80163b4:	460a      	mov	r2, r1
 80163b6:	71fb      	strb	r3, [r7, #7]
 80163b8:	4613      	mov	r3, r2
 80163ba:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 80163bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163c0:	4a0f      	ldr	r2, [pc, #60]	@ (8016400 <GetTimeOnAir+0x54>)
 80163c2:	5cd3      	ldrb	r3, [r2, r3]
 80163c4:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 80163c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80163ca:	490e      	ldr	r1, [pc, #56]	@ (8016404 <GetTimeOnAir+0x58>)
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7fe fd15 	bl	8014dfc <RegionCommonGetBandwidth>
 80163d2:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80163d4:	4b0c      	ldr	r3, [pc, #48]	@ (8016408 <GetTimeOnAir+0x5c>)
 80163d6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80163d8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80163dc:	88bb      	ldrh	r3, [r7, #4]
 80163de:	b2db      	uxtb	r3, r3
 80163e0:	2101      	movs	r1, #1
 80163e2:	9103      	str	r1, [sp, #12]
 80163e4:	9302      	str	r3, [sp, #8]
 80163e6:	2300      	movs	r3, #0
 80163e8:	9301      	str	r3, [sp, #4]
 80163ea:	2308      	movs	r3, #8
 80163ec:	9300      	str	r3, [sp, #0]
 80163ee:	2301      	movs	r3, #1
 80163f0:	68b9      	ldr	r1, [r7, #8]
 80163f2:	2001      	movs	r0, #1
 80163f4:	47a0      	blx	r4
 80163f6:	4603      	mov	r3, r0
}
 80163f8:	4618      	mov	r0, r3
 80163fa:	3714      	adds	r7, #20
 80163fc:	46bd      	mov	sp, r7
 80163fe:	bd90      	pop	{r4, r7, pc}
 8016400:	0801cf98 	.word	0x0801cf98
 8016404:	0801cfa8 	.word	0x0801cfa8
 8016408:	0801d01c 	.word	0x0801d01c

0801640c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801640c:	b580      	push	{r7, lr}
 801640e:	b088      	sub	sp, #32
 8016410:	af00      	add	r7, sp, #0
 8016412:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8016414:	2300      	movs	r3, #0
 8016416:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	3b01      	subs	r3, #1
 801641e:	2b38      	cmp	r3, #56	@ 0x38
 8016420:	f200 813c 	bhi.w	801669c <RegionUS915GetPhyParam+0x290>
 8016424:	a201      	add	r2, pc, #4	@ (adr r2, 801642c <RegionUS915GetPhyParam+0x20>)
 8016426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801642a:	bf00      	nop
 801642c:	08016511 	.word	0x08016511
 8016430:	08016517 	.word	0x08016517
 8016434:	0801669d 	.word	0x0801669d
 8016438:	0801669d 	.word	0x0801669d
 801643c:	0801669d 	.word	0x0801669d
 8016440:	0801651d 	.word	0x0801651d
 8016444:	0801669d 	.word	0x0801669d
 8016448:	08016557 	.word	0x08016557
 801644c:	0801669d 	.word	0x0801669d
 8016450:	0801655d 	.word	0x0801655d
 8016454:	08016563 	.word	0x08016563
 8016458:	08016569 	.word	0x08016569
 801645c:	0801656f 	.word	0x0801656f
 8016460:	0801657f 	.word	0x0801657f
 8016464:	0801658f 	.word	0x0801658f
 8016468:	08016595 	.word	0x08016595
 801646c:	0801659d 	.word	0x0801659d
 8016470:	080165a5 	.word	0x080165a5
 8016474:	080165ad 	.word	0x080165ad
 8016478:	080165b5 	.word	0x080165b5
 801647c:	080165bd 	.word	0x080165bd
 8016480:	080165c5 	.word	0x080165c5
 8016484:	080165d9 	.word	0x080165d9
 8016488:	080165df 	.word	0x080165df
 801648c:	080165e5 	.word	0x080165e5
 8016490:	080165eb 	.word	0x080165eb
 8016494:	080165f7 	.word	0x080165f7
 8016498:	08016603 	.word	0x08016603
 801649c:	08016609 	.word	0x08016609
 80164a0:	08016611 	.word	0x08016611
 80164a4:	08016617 	.word	0x08016617
 80164a8:	0801661d 	.word	0x0801661d
 80164ac:	08016623 	.word	0x08016623
 80164b0:	08016523 	.word	0x08016523
 80164b4:	0801669d 	.word	0x0801669d
 80164b8:	0801669d 	.word	0x0801669d
 80164bc:	0801669d 	.word	0x0801669d
 80164c0:	0801669d 	.word	0x0801669d
 80164c4:	0801669d 	.word	0x0801669d
 80164c8:	0801669d 	.word	0x0801669d
 80164cc:	0801669d 	.word	0x0801669d
 80164d0:	0801669d 	.word	0x0801669d
 80164d4:	0801669d 	.word	0x0801669d
 80164d8:	0801669d 	.word	0x0801669d
 80164dc:	0801669d 	.word	0x0801669d
 80164e0:	0801669d 	.word	0x0801669d
 80164e4:	0801669d 	.word	0x0801669d
 80164e8:	0801662b 	.word	0x0801662b
 80164ec:	0801663f 	.word	0x0801663f
 80164f0:	0801664d 	.word	0x0801664d
 80164f4:	08016653 	.word	0x08016653
 80164f8:	0801669d 	.word	0x0801669d
 80164fc:	08016659 	.word	0x08016659
 8016500:	0801666d 	.word	0x0801666d
 8016504:	08016673 	.word	0x08016673
 8016508:	08016679 	.word	0x08016679
 801650c:	08016689 	.word	0x08016689
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8016510:	2308      	movs	r3, #8
 8016512:	61bb      	str	r3, [r7, #24]
            break;
 8016514:	e0c3      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8016516:	2300      	movs	r3, #0
 8016518:	61bb      	str	r3, [r7, #24]
            break;
 801651a:	e0c0      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 801651c:	2300      	movs	r3, #0
 801651e:	61bb      	str	r3, [r7, #24]
            break;
 8016520:	e0bd      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016528:	733b      	strb	r3, [r7, #12]
 801652a:	2304      	movs	r3, #4
 801652c:	737b      	strb	r3, [r7, #13]
 801652e:	2300      	movs	r3, #0
 8016530:	73bb      	strb	r3, [r7, #14]
 8016532:	2348      	movs	r3, #72	@ 0x48
 8016534:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8016536:	4b5d      	ldr	r3, [pc, #372]	@ (80166ac <RegionUS915GetPhyParam+0x2a0>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801653e:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8016540:	4b5a      	ldr	r3, [pc, #360]	@ (80166ac <RegionUS915GetPhyParam+0x2a0>)
 8016542:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8016544:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8016546:	f107 030c 	add.w	r3, r7, #12
 801654a:	4618      	mov	r0, r3
 801654c:	f7fe fc03 	bl	8014d56 <RegionCommonGetNextLowerTxDr>
 8016550:	4603      	mov	r3, r0
 8016552:	61bb      	str	r3, [r7, #24]
            break;
 8016554:	e0a3      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8016556:	2300      	movs	r3, #0
 8016558:	61bb      	str	r3, [r7, #24]
            break;
 801655a:	e0a0      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 801655c:	2300      	movs	r3, #0
 801655e:	61bb      	str	r3, [r7, #24]
            break;
 8016560:	e09d      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8016562:	2340      	movs	r3, #64	@ 0x40
 8016564:	61bb      	str	r3, [r7, #24]
            break;
 8016566:	e09a      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8016568:	2320      	movs	r3, #32
 801656a:	61bb      	str	r3, [r7, #24]
            break;
 801656c:	e097      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016574:	461a      	mov	r2, r3
 8016576:	4b4e      	ldr	r3, [pc, #312]	@ (80166b0 <RegionUS915GetPhyParam+0x2a4>)
 8016578:	5c9b      	ldrb	r3, [r3, r2]
 801657a:	61bb      	str	r3, [r7, #24]
            break;
 801657c:	e08f      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016584:	461a      	mov	r2, r3
 8016586:	4b4b      	ldr	r3, [pc, #300]	@ (80166b4 <RegionUS915GetPhyParam+0x2a8>)
 8016588:	5c9b      	ldrb	r3, [r3, r2]
 801658a:	61bb      	str	r3, [r7, #24]
            break;
 801658c:	e087      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801658e:	2300      	movs	r3, #0
 8016590:	61bb      	str	r3, [r7, #24]
            break;
 8016592:	e084      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8016594:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016598:	61bb      	str	r3, [r7, #24]
            break;
 801659a:	e080      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801659c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80165a0:	61bb      	str	r3, [r7, #24]
            break;
 80165a2:	e07c      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80165a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80165a8:	61bb      	str	r3, [r7, #24]
            break;
 80165aa:	e078      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80165ac:	f241 3388 	movw	r3, #5000	@ 0x1388
 80165b0:	61bb      	str	r3, [r7, #24]
            break;
 80165b2:	e074      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80165b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80165b8:	61bb      	str	r3, [r7, #24]
            break;
 80165ba:	e070      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 80165bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80165c0:	61bb      	str	r3, [r7, #24]
            break;
 80165c2:	e06c      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 80165c4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80165c8:	483b      	ldr	r0, [pc, #236]	@ (80166b8 <RegionUS915GetPhyParam+0x2ac>)
 80165ca:	f001 f907 	bl	80177dc <randr>
 80165ce:	4603      	mov	r3, r0
 80165d0:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80165d4:	61bb      	str	r3, [r7, #24]
            break;
 80165d6:	e062      	b.n	801669e <RegionUS915GetPhyParam+0x292>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80165d8:	2300      	movs	r3, #0
 80165da:	61bb      	str	r3, [r7, #24]
            break;
 80165dc:	e05f      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 80165de:	4b37      	ldr	r3, [pc, #220]	@ (80166bc <RegionUS915GetPhyParam+0x2b0>)
 80165e0:	61bb      	str	r3, [r7, #24]
            break;
 80165e2:	e05c      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 80165e4:	2308      	movs	r3, #8
 80165e6:	61bb      	str	r3, [r7, #24]
            break;
 80165e8:	e059      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80165ea:	4b30      	ldr	r3, [pc, #192]	@ (80166ac <RegionUS915GetPhyParam+0x2a0>)
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80165f2:	61bb      	str	r3, [r7, #24]
            break;
 80165f4:	e053      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 80165f6:	4b2d      	ldr	r3, [pc, #180]	@ (80166ac <RegionUS915GetPhyParam+0x2a0>)
 80165f8:	681b      	ldr	r3, [r3, #0]
 80165fa:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80165fe:	61bb      	str	r3, [r7, #24]
            break;
 8016600:	e04d      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8016602:	2348      	movs	r3, #72	@ 0x48
 8016604:	61bb      	str	r3, [r7, #24]
            break;
 8016606:	e04a      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8016608:	4b28      	ldr	r3, [pc, #160]	@ (80166ac <RegionUS915GetPhyParam+0x2a0>)
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	61bb      	str	r3, [r7, #24]
            break;
 801660e:	e046      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8016610:	2300      	movs	r3, #0
 8016612:	61bb      	str	r3, [r7, #24]
            break;
 8016614:	e043      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8016616:	2300      	movs	r3, #0
 8016618:	61bb      	str	r3, [r7, #24]
            break;
 801661a:	e040      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 801661c:	4b28      	ldr	r3, [pc, #160]	@ (80166c0 <RegionUS915GetPhyParam+0x2b4>)
 801661e:	61bb      	str	r3, [r7, #24]
            break;
 8016620:	e03d      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8016622:	f04f 0300 	mov.w	r3, #0
 8016626:	61bb      	str	r3, [r7, #24]
            break;
 8016628:	e039      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	791b      	ldrb	r3, [r3, #4]
 801662e:	4a25      	ldr	r2, [pc, #148]	@ (80166c4 <RegionUS915GetPhyParam+0x2b8>)
 8016630:	4922      	ldr	r1, [pc, #136]	@ (80166bc <RegionUS915GetPhyParam+0x2b0>)
 8016632:	4618      	mov	r0, r3
 8016634:	f7fd fcf2 	bl	801401c <RegionBaseUSCalcDownlinkFrequency>
 8016638:	4603      	mov	r3, r0
 801663a:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801663c:	e02f      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801663e:	2317      	movs	r3, #23
 8016640:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 8016642:	2305      	movs	r3, #5
 8016644:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8016646:	2303      	movs	r3, #3
 8016648:	76bb      	strb	r3, [r7, #26]
            break;
 801664a:	e028      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 801664c:	2308      	movs	r3, #8
 801664e:	61bb      	str	r3, [r7, #24]
            break;
 8016650:	e025      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8016652:	2308      	movs	r3, #8
 8016654:	61bb      	str	r3, [r7, #24]
            break;
 8016656:	e022      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	791b      	ldrb	r3, [r3, #4]
 801665c:	4a19      	ldr	r2, [pc, #100]	@ (80166c4 <RegionUS915GetPhyParam+0x2b8>)
 801665e:	4917      	ldr	r1, [pc, #92]	@ (80166bc <RegionUS915GetPhyParam+0x2b0>)
 8016660:	4618      	mov	r0, r3
 8016662:	f7fd fcdb 	bl	801401c <RegionBaseUSCalcDownlinkFrequency>
 8016666:	4603      	mov	r3, r0
 8016668:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 801666a:	e018      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 801666c:	2308      	movs	r3, #8
 801666e:	61bb      	str	r3, [r7, #24]
            break;
 8016670:	e015      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 8016672:	2308      	movs	r3, #8
 8016674:	61bb      	str	r3, [r7, #24]
            break;
 8016676:	e012      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801667e:	461a      	mov	r2, r3
 8016680:	4b11      	ldr	r3, [pc, #68]	@ (80166c8 <RegionUS915GetPhyParam+0x2bc>)
 8016682:	5c9b      	ldrb	r3, [r3, r2]
 8016684:	61bb      	str	r3, [r7, #24]
            break;
 8016686:	e00a      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801668e:	490f      	ldr	r1, [pc, #60]	@ (80166cc <RegionUS915GetPhyParam+0x2c0>)
 8016690:	4618      	mov	r0, r3
 8016692:	f7fe fbb3 	bl	8014dfc <RegionCommonGetBandwidth>
 8016696:	4603      	mov	r3, r0
 8016698:	61bb      	str	r3, [r7, #24]
            break;
 801669a:	e000      	b.n	801669e <RegionUS915GetPhyParam+0x292>
        }
        default:
        {
            break;
 801669c:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	61fb      	str	r3, [r7, #28]
 80166a2:	69fb      	ldr	r3, [r7, #28]
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	3720      	adds	r7, #32
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}
 80166ac:	20001a44 	.word	0x20001a44
 80166b0:	0801cffc 	.word	0x0801cffc
 80166b4:	0801d00c 	.word	0x0801d00c
 80166b8:	fffffc18 	.word	0xfffffc18
 80166bc:	370870a0 	.word	0x370870a0
 80166c0:	4200999a 	.word	0x4200999a
 80166c4:	000927c0 	.word	0x000927c0
 80166c8:	0801cf98 	.word	0x0801cf98
 80166cc:	0801cfa8 	.word	0x0801cfa8

080166d0 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 80166d0:	b590      	push	{r4, r7, lr}
 80166d2:	b085      	sub	sp, #20
 80166d4:	af02      	add	r7, sp, #8
 80166d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80166d8:	4b11      	ldr	r3, [pc, #68]	@ (8016720 <RegionUS915SetBandTxDone+0x50>)
 80166da:	681a      	ldr	r2, [r3, #0]
 80166dc:	4b11      	ldr	r3, [pc, #68]	@ (8016724 <RegionUS915SetBandTxDone+0x54>)
 80166de:	6819      	ldr	r1, [r3, #0]
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	781b      	ldrb	r3, [r3, #0]
 80166e4:	4618      	mov	r0, r3
 80166e6:	4603      	mov	r3, r0
 80166e8:	005b      	lsls	r3, r3, #1
 80166ea:	4403      	add	r3, r0
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	440b      	add	r3, r1
 80166f0:	3309      	adds	r3, #9
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	4619      	mov	r1, r3
 80166f6:	460b      	mov	r3, r1
 80166f8:	005b      	lsls	r3, r3, #1
 80166fa:	440b      	add	r3, r1
 80166fc:	00db      	lsls	r3, r3, #3
 80166fe:	18d0      	adds	r0, r2, r3
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6899      	ldr	r1, [r3, #8]
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	785c      	ldrb	r4, [r3, #1]
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	691a      	ldr	r2, [r3, #16]
 801670c:	9200      	str	r2, [sp, #0]
 801670e:	68db      	ldr	r3, [r3, #12]
 8016710:	4622      	mov	r2, r4
 8016712:	f7fd fef9 	bl	8014508 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 8016716:	bf00      	nop
 8016718:	370c      	adds	r7, #12
 801671a:	46bd      	mov	sp, r7
 801671c:	bd90      	pop	{r4, r7, pc}
 801671e:	bf00      	nop
 8016720:	20001a40 	.word	0x20001a40
 8016724:	20001a44 	.word	0x20001a44

08016728 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 8016728:	b580      	push	{r7, lr}
 801672a:	b08a      	sub	sp, #40	@ 0x28
 801672c:	af00      	add	r7, sp, #0
 801672e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 8016730:	2301      	movs	r3, #1
 8016732:	81bb      	strh	r3, [r7, #12]
 8016734:	2300      	movs	r3, #0
 8016736:	73bb      	strb	r3, [r7, #14]
 8016738:	2300      	movs	r3, #0
 801673a:	613b      	str	r3, [r7, #16]
 801673c:	2300      	movs	r3, #0
 801673e:	617b      	str	r3, [r7, #20]
 8016740:	2300      	movs	r3, #0
 8016742:	61bb      	str	r3, [r7, #24]
 8016744:	2300      	movs	r3, #0
 8016746:	61fb      	str	r3, [r7, #28]
 8016748:	2300      	movs	r3, #0
 801674a:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	7a1b      	ldrb	r3, [r3, #8]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d007      	beq.n	8016766 <RegionUS915InitDefaults+0x3e>
 8016756:	2b00      	cmp	r3, #0
 8016758:	f2c0 8106 	blt.w	8016968 <RegionUS915InitDefaults+0x240>
 801675c:	3b01      	subs	r3, #1
 801675e:	2b01      	cmp	r3, #1
 8016760:	f200 8102 	bhi.w	8016968 <RegionUS915InitDefaults+0x240>
 8016764:	e0ce      	b.n	8016904 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	2b00      	cmp	r3, #0
 801676c:	f000 80fe 	beq.w	801696c <RegionUS915InitDefaults+0x244>
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	2b00      	cmp	r3, #0
 8016776:	f000 80f9 	beq.w	801696c <RegionUS915InitDefaults+0x244>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	4a7d      	ldr	r2, [pc, #500]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 8016780:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	685b      	ldr	r3, [r3, #4]
 8016786:	4a7c      	ldr	r2, [pc, #496]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016788:	6013      	str	r3, [r2, #0]

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801678a:	4b7a      	ldr	r3, [pc, #488]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2200      	movs	r2, #0
 8016790:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8016794:	4b77      	ldr	r3, [pc, #476]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	2200      	movs	r2, #0
 801679a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801679e:	4b75      	ldr	r3, [pc, #468]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 80167a0:	681b      	ldr	r3, [r3, #0]
 80167a2:	4618      	mov	r0, r3
 80167a4:	f107 030c 	add.w	r3, r7, #12
 80167a8:	2218      	movs	r2, #24
 80167aa:	4619      	mov	r1, r3
 80167ac:	f001 f82d 	bl	801780a <memcpy1>
            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80167b0:	2300      	movs	r3, #0
 80167b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80167b6:	e02e      	b.n	8016816 <RegionUS915InitDefaults+0xee>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 80167b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80167bc:	4a6f      	ldr	r2, [pc, #444]	@ (801697c <RegionUS915InitDefaults+0x254>)
 80167be:	fb03 f202 	mul.w	r2, r3, r2
 80167c2:	4b6f      	ldr	r3, [pc, #444]	@ (8016980 <RegionUS915InitDefaults+0x258>)
 80167c4:	4413      	add	r3, r2
 80167c6:	4a6c      	ldr	r2, [pc, #432]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80167c8:	6811      	ldr	r1, [r2, #0]
 80167ca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167ce:	4618      	mov	r0, r3
 80167d0:	4613      	mov	r3, r2
 80167d2:	005b      	lsls	r3, r3, #1
 80167d4:	4413      	add	r3, r2
 80167d6:	009b      	lsls	r3, r3, #2
 80167d8:	440b      	add	r3, r1
 80167da:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80167dc:	4b66      	ldr	r3, [pc, #408]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80167de:	6819      	ldr	r1, [r3, #0]
 80167e0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167e4:	4613      	mov	r3, r2
 80167e6:	005b      	lsls	r3, r3, #1
 80167e8:	4413      	add	r3, r2
 80167ea:	009b      	lsls	r3, r3, #2
 80167ec:	440b      	add	r3, r1
 80167ee:	3308      	adds	r3, #8
 80167f0:	2230      	movs	r2, #48	@ 0x30
 80167f2:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80167f4:	4b60      	ldr	r3, [pc, #384]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80167f6:	6819      	ldr	r1, [r3, #0]
 80167f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80167fc:	4613      	mov	r3, r2
 80167fe:	005b      	lsls	r3, r3, #1
 8016800:	4413      	add	r3, r2
 8016802:	009b      	lsls	r3, r3, #2
 8016804:	440b      	add	r3, r1
 8016806:	3309      	adds	r3, #9
 8016808:	2200      	movs	r2, #0
 801680a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801680c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016810:	3301      	adds	r3, #1
 8016812:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801681a:	2b3f      	cmp	r3, #63	@ 0x3f
 801681c:	d9cc      	bls.n	80167b8 <RegionUS915InitDefaults+0x90>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801681e:	2340      	movs	r3, #64	@ 0x40
 8016820:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016824:	e02f      	b.n	8016886 <RegionUS915InitDefaults+0x15e>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 8016826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801682a:	3b40      	subs	r3, #64	@ 0x40
 801682c:	4a55      	ldr	r2, [pc, #340]	@ (8016984 <RegionUS915InitDefaults+0x25c>)
 801682e:	fb03 f202 	mul.w	r2, r3, r2
 8016832:	4b55      	ldr	r3, [pc, #340]	@ (8016988 <RegionUS915InitDefaults+0x260>)
 8016834:	4413      	add	r3, r2
 8016836:	4a50      	ldr	r2, [pc, #320]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016838:	6811      	ldr	r1, [r2, #0]
 801683a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801683e:	4618      	mov	r0, r3
 8016840:	4613      	mov	r3, r2
 8016842:	005b      	lsls	r3, r3, #1
 8016844:	4413      	add	r3, r2
 8016846:	009b      	lsls	r3, r3, #2
 8016848:	440b      	add	r3, r1
 801684a:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801684c:	4b4a      	ldr	r3, [pc, #296]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 801684e:	6819      	ldr	r1, [r3, #0]
 8016850:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016854:	4613      	mov	r3, r2
 8016856:	005b      	lsls	r3, r3, #1
 8016858:	4413      	add	r3, r2
 801685a:	009b      	lsls	r3, r3, #2
 801685c:	440b      	add	r3, r1
 801685e:	3308      	adds	r3, #8
 8016860:	2244      	movs	r2, #68	@ 0x44
 8016862:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8016864:	4b44      	ldr	r3, [pc, #272]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016866:	6819      	ldr	r1, [r3, #0]
 8016868:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801686c:	4613      	mov	r3, r2
 801686e:	005b      	lsls	r3, r3, #1
 8016870:	4413      	add	r3, r2
 8016872:	009b      	lsls	r3, r3, #2
 8016874:	440b      	add	r3, r1
 8016876:	3309      	adds	r3, #9
 8016878:	2200      	movs	r2, #0
 801687a:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801687c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016880:	3301      	adds	r3, #1
 8016882:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016886:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801688a:	2b47      	cmp	r3, #71	@ 0x47
 801688c:	d9cb      	bls.n	8016826 <RegionUS915InitDefaults+0xfe>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801688e:	4b3a      	ldr	r3, [pc, #232]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016896:	f8a3 248c 	strh.w	r2, [r3, #1164]	@ 0x48c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 801689a:	4b37      	ldr	r3, [pc, #220]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168a2:	f8a3 248e 	strh.w	r2, [r3, #1166]	@ 0x48e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 80168a6:	4b34      	ldr	r3, [pc, #208]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168ae:	f8a3 2490 	strh.w	r2, [r3, #1168]	@ 0x490
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 80168b2:	4b31      	ldr	r3, [pc, #196]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168ba:	f8a3 2492 	strh.w	r2, [r3, #1170]	@ 0x492
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 80168be:	4b2e      	ldr	r3, [pc, #184]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	22ff      	movs	r2, #255	@ 0xff
 80168c4:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 80168c8:	4b2b      	ldr	r3, [pc, #172]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2200      	movs	r2, #0
 80168ce:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80168d2:	4b29      	ldr	r3, [pc, #164]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 80168da:	4b27      	ldr	r3, [pc, #156]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 80168e2:	2206      	movs	r2, #6
 80168e4:	4619      	mov	r1, r3
 80168e6:	f7fd fde9 	bl	80144bc <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80168ea:	4b22      	ldr	r3, [pc, #136]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80168f2:	4b21      	ldr	r3, [pc, #132]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80168fa:	2206      	movs	r2, #6
 80168fc:	4619      	mov	r1, r3
 80168fe:	f7fd fddd 	bl	80144bc <RegionCommonChanMaskCopy>
            break;
 8016902:	e034      	b.n	801696e <RegionUS915InitDefaults+0x246>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8016904:	4b1c      	ldr	r3, [pc, #112]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 801690c:	4b1a      	ldr	r3, [pc, #104]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 801690e:	681b      	ldr	r3, [r3, #0]
 8016910:	f203 438c 	addw	r3, r3, #1164	@ 0x48c
 8016914:	2206      	movs	r2, #6
 8016916:	4619      	mov	r1, r3
 8016918:	f7fd fdd0 	bl	80144bc <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801691c:	2300      	movs	r3, #0
 801691e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8016922:	e01c      	b.n	801695e <RegionUS915InitDefaults+0x236>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016924:	4b13      	ldr	r3, [pc, #76]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801692c:	3248      	adds	r2, #72	@ 0x48
 801692e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016932:	4b11      	ldr	r3, [pc, #68]	@ (8016978 <RegionUS915InitDefaults+0x250>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801693a:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 801693e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016942:	4b0c      	ldr	r3, [pc, #48]	@ (8016974 <RegionUS915InitDefaults+0x24c>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 801694a:	4001      	ands	r1, r0
 801694c:	b289      	uxth	r1, r1
 801694e:	3248      	adds	r2, #72	@ 0x48
 8016950:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016954:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016958:	3301      	adds	r3, #1
 801695a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801695e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8016962:	2b05      	cmp	r3, #5
 8016964:	d9de      	bls.n	8016924 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 8016966:	e002      	b.n	801696e <RegionUS915InitDefaults+0x246>
        }
        default:
        {
            break;
 8016968:	bf00      	nop
 801696a:	e000      	b.n	801696e <RegionUS915InitDefaults+0x246>
                return;
 801696c:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 801696e:	3728      	adds	r7, #40	@ 0x28
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}
 8016974:	20001a40 	.word	0x20001a40
 8016978:	20001a44 	.word	0x20001a44
 801697c:	00030d40 	.word	0x00030d40
 8016980:	35c80160 	.word	0x35c80160
 8016984:	00186a00 	.word	0x00186a00
 8016988:	35d2afc0 	.word	0x35d2afc0

0801698c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801698c:	b580      	push	{r7, lr}
 801698e:	b082      	sub	sp, #8
 8016990:	af00      	add	r7, sp, #0
 8016992:	6078      	str	r0, [r7, #4]
 8016994:	460b      	mov	r3, r1
 8016996:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8016998:	78fb      	ldrb	r3, [r7, #3]
 801699a:	2b0f      	cmp	r3, #15
 801699c:	d858      	bhi.n	8016a50 <RegionUS915Verify+0xc4>
 801699e:	a201      	add	r2, pc, #4	@ (adr r2, 80169a4 <RegionUS915Verify+0x18>)
 80169a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80169a4:	080169e5 	.word	0x080169e5
 80169a8:	08016a51 	.word	0x08016a51
 80169ac:	08016a51 	.word	0x08016a51
 80169b0:	08016a51 	.word	0x08016a51
 80169b4:	08016a51 	.word	0x08016a51
 80169b8:	080169f3 	.word	0x080169f3
 80169bc:	080169f3 	.word	0x080169f3
 80169c0:	08016a11 	.word	0x08016a11
 80169c4:	08016a51 	.word	0x08016a51
 80169c8:	08016a2f 	.word	0x08016a2f
 80169cc:	08016a2f 	.word	0x08016a2f
 80169d0:	08016a51 	.word	0x08016a51
 80169d4:	08016a51 	.word	0x08016a51
 80169d8:	08016a51 	.word	0x08016a51
 80169dc:	08016a51 	.word	0x08016a51
 80169e0:	08016a4d 	.word	0x08016a4d
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7ff fc9b 	bl	8016324 <VerifyRfFreq>
 80169ee:	4603      	mov	r3, r0
 80169f0:	e02f      	b.n	8016a52 <RegionUS915Verify+0xc6>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_TX_DR:
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	f993 3000 	ldrsb.w	r3, [r3]
 80169f8:	2204      	movs	r2, #4
 80169fa:	2100      	movs	r1, #0
 80169fc:	4618      	mov	r0, r3
 80169fe:	f7fd fce0 	bl	80143c2 <RegionCommonValueInRange>
 8016a02:	4603      	mov	r3, r0
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	bf14      	ite	ne
 8016a08:	2301      	movne	r3, #1
 8016a0a:	2300      	moveq	r3, #0
 8016a0c:	b2db      	uxtb	r3, r3
 8016a0e:	e020      	b.n	8016a52 <RegionUS915Verify+0xc6>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	f993 3000 	ldrsb.w	r3, [r3]
 8016a16:	220d      	movs	r2, #13
 8016a18:	2108      	movs	r1, #8
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7fd fcd1 	bl	80143c2 <RegionCommonValueInRange>
 8016a20:	4603      	mov	r3, r0
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	bf14      	ite	ne
 8016a26:	2301      	movne	r3, #1
 8016a28:	2300      	moveq	r3, #0
 8016a2a:	b2db      	uxtb	r3, r3
 8016a2c:	e011      	b.n	8016a52 <RegionUS915Verify+0xc6>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	f993 3000 	ldrsb.w	r3, [r3]
 8016a34:	220e      	movs	r2, #14
 8016a36:	2100      	movs	r1, #0
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7fd fcc2 	bl	80143c2 <RegionCommonValueInRange>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	bf14      	ite	ne
 8016a44:	2301      	movne	r3, #1
 8016a46:	2300      	moveq	r3, #0
 8016a48:	b2db      	uxtb	r3, r3
 8016a4a:	e002      	b.n	8016a52 <RegionUS915Verify+0xc6>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	e000      	b.n	8016a52 <RegionUS915Verify+0xc6>
        }
        default:
            return false;
 8016a50:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 8016a52:	4618      	mov	r0, r3
 8016a54:	3708      	adds	r7, #8
 8016a56:	46bd      	mov	sp, r7
 8016a58:	bd80      	pop	{r7, pc}
 8016a5a:	bf00      	nop

08016a5c <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	791b      	ldrb	r3, [r3, #4]
 8016a68:	2b10      	cmp	r3, #16
 8016a6a:	d160      	bne.n	8016b2e <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	330f      	adds	r3, #15
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	2b01      	cmp	r3, #1
 8016a76:	d15c      	bne.n	8016b32 <RegionUS915ApplyCFList+0xd6>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8016a78:	2300      	movs	r3, #0
 8016a7a:	73fb      	strb	r3, [r7, #15]
 8016a7c:	2300      	movs	r3, #0
 8016a7e:	73bb      	strb	r3, [r7, #14]
 8016a80:	e051      	b.n	8016b26 <RegionUS915ApplyCFList+0xca>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	681a      	ldr	r2, [r3, #0]
 8016a86:	7bbb      	ldrb	r3, [r7, #14]
 8016a88:	4413      	add	r3, r2
 8016a8a:	7819      	ldrb	r1, [r3, #0]
 8016a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	7bfa      	ldrb	r2, [r7, #15]
 8016a92:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016a96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8016a9a:	4b28      	ldr	r3, [pc, #160]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	7bfa      	ldrb	r2, [r7, #15]
 8016aa0:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016aa4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	7bbb      	ldrb	r3, [r7, #14]
 8016aae:	3301      	adds	r3, #1
 8016ab0:	4413      	add	r3, r2
 8016ab2:	781b      	ldrb	r3, [r3, #0]
 8016ab4:	021b      	lsls	r3, r3, #8
 8016ab6:	b299      	uxth	r1, r3
 8016ab8:	4b20      	ldr	r3, [pc, #128]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	7bfa      	ldrb	r2, [r7, #15]
 8016abe:	4301      	orrs	r1, r0
 8016ac0:	b289      	uxth	r1, r1
 8016ac2:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016ac6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 8016aca:	7bfb      	ldrb	r3, [r7, #15]
 8016acc:	2b04      	cmp	r3, #4
 8016ace:	d10f      	bne.n	8016af0 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8016ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	7bfa      	ldrb	r2, [r7, #15]
 8016ad6:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016ada:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016ade:	4b17      	ldr	r3, [pc, #92]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	7bfa      	ldrb	r2, [r7, #15]
 8016ae4:	b2c9      	uxtb	r1, r1
 8016ae6:	b289      	uxth	r1, r1
 8016ae8:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016aec:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8016af0:	4b13      	ldr	r3, [pc, #76]	@ (8016b40 <RegionUS915ApplyCFList+0xe4>)
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	7bfa      	ldrb	r2, [r7, #15]
 8016af6:	3248      	adds	r2, #72	@ 0x48
 8016af8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016afc:	4b0f      	ldr	r3, [pc, #60]	@ (8016b3c <RegionUS915ApplyCFList+0xe0>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	7bfa      	ldrb	r2, [r7, #15]
 8016b02:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016b06:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016b40 <RegionUS915ApplyCFList+0xe4>)
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	7bfa      	ldrb	r2, [r7, #15]
 8016b10:	4001      	ands	r1, r0
 8016b12:	b289      	uxth	r1, r1
 8016b14:	3248      	adds	r2, #72	@ 0x48
 8016b16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8016b1a:	7bfb      	ldrb	r3, [r7, #15]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	73fb      	strb	r3, [r7, #15]
 8016b20:	7bbb      	ldrb	r3, [r7, #14]
 8016b22:	3302      	adds	r3, #2
 8016b24:	73bb      	strb	r3, [r7, #14]
 8016b26:	7bfb      	ldrb	r3, [r7, #15]
 8016b28:	2b04      	cmp	r3, #4
 8016b2a:	d9aa      	bls.n	8016a82 <RegionUS915ApplyCFList+0x26>
 8016b2c:	e002      	b.n	8016b34 <RegionUS915ApplyCFList+0xd8>
        return;
 8016b2e:	bf00      	nop
 8016b30:	e000      	b.n	8016b34 <RegionUS915ApplyCFList+0xd8>
        return;
 8016b32:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8016b34:	3714      	adds	r7, #20
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bc80      	pop	{r7}
 8016b3a:	4770      	bx	lr
 8016b3c:	20001a44 	.word	0x20001a44
 8016b40:	20001a40 	.word	0x20001a40

08016b44 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8016b44:	b580      	push	{r7, lr}
 8016b46:	b084      	sub	sp, #16
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2204      	movs	r2, #4
 8016b52:	2100      	movs	r1, #0
 8016b54:	4618      	mov	r0, r3
 8016b56:	f7fd fc85 	bl	8014464 <RegionCommonCountChannels>
 8016b5a:	4603      	mov	r3, r0
 8016b5c:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8016b5e:	7bbb      	ldrb	r3, [r7, #14]
 8016b60:	2b01      	cmp	r3, #1
 8016b62:	d804      	bhi.n	8016b6e <RegionUS915ChanMaskSet+0x2a>
 8016b64:	7bbb      	ldrb	r3, [r7, #14]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d001      	beq.n	8016b6e <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e04c      	b.n	8016c08 <RegionUS915ChanMaskSet+0xc4>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	791b      	ldrb	r3, [r3, #4]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d002      	beq.n	8016b7c <RegionUS915ChanMaskSet+0x38>
 8016b76:	2b01      	cmp	r3, #1
 8016b78:	d038      	beq.n	8016bec <RegionUS915ChanMaskSet+0xa8>
 8016b7a:	e042      	b.n	8016c02 <RegionUS915ChanMaskSet+0xbe>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016b7c:	4b24      	ldr	r3, [pc, #144]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016b7e:	681b      	ldr	r3, [r3, #0]
 8016b80:	f503 6090 	add.w	r0, r3, #1152	@ 0x480
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	2206      	movs	r2, #6
 8016b8a:	4619      	mov	r1, r3
 8016b8c:	f7fd fc96 	bl	80144bc <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8016b90:	4b1f      	ldr	r3, [pc, #124]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	f8b3 2494 	ldrh.w	r2, [r3, #1172]	@ 0x494
 8016b98:	4b1d      	ldr	r3, [pc, #116]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	b2d2      	uxtb	r2, r2
 8016b9e:	b292      	uxth	r2, r2
 8016ba0:	f8a3 2494 	strh.w	r2, [r3, #1172]	@ 0x494
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8016ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	f8a3 2496 	strh.w	r2, [r3, #1174]	@ 0x496

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016bae:	2300      	movs	r3, #0
 8016bb0:	73fb      	strb	r3, [r7, #15]
 8016bb2:	e017      	b.n	8016be4 <RegionUS915ChanMaskSet+0xa0>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8016bb4:	4b17      	ldr	r3, [pc, #92]	@ (8016c14 <RegionUS915ChanMaskSet+0xd0>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	7bfa      	ldrb	r2, [r7, #15]
 8016bba:	3248      	adds	r2, #72	@ 0x48
 8016bbc:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8016bc0:	4b13      	ldr	r3, [pc, #76]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	7bfa      	ldrb	r2, [r7, #15]
 8016bc6:	f502 7210 	add.w	r2, r2, #576	@ 0x240
 8016bca:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8016bce:	4b11      	ldr	r3, [pc, #68]	@ (8016c14 <RegionUS915ChanMaskSet+0xd0>)
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	7bfa      	ldrb	r2, [r7, #15]
 8016bd4:	4001      	ands	r1, r0
 8016bd6:	b289      	uxth	r1, r1
 8016bd8:	3248      	adds	r2, #72	@ 0x48
 8016bda:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8016bde:	7bfb      	ldrb	r3, [r7, #15]
 8016be0:	3301      	adds	r3, #1
 8016be2:	73fb      	strb	r3, [r7, #15]
 8016be4:	7bfb      	ldrb	r3, [r7, #15]
 8016be6:	2b05      	cmp	r3, #5
 8016be8:	d9e4      	bls.n	8016bb4 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8016bea:	e00c      	b.n	8016c06 <RegionUS915ChanMaskSet+0xc2>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8016bec:	4b08      	ldr	r3, [pc, #32]	@ (8016c10 <RegionUS915ChanMaskSet+0xcc>)
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	f203 408c 	addw	r0, r3, #1164	@ 0x48c
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	2206      	movs	r2, #6
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	f7fd fc5e 	bl	80144bc <RegionCommonChanMaskCopy>
            break;
 8016c00:	e001      	b.n	8016c06 <RegionUS915ChanMaskSet+0xc2>
        }
        default:
            return false;
 8016c02:	2300      	movs	r3, #0
 8016c04:	e000      	b.n	8016c08 <RegionUS915ChanMaskSet+0xc4>
    }
    return true;
 8016c06:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3710      	adds	r7, #16
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	bd80      	pop	{r7, pc}
 8016c10:	20001a44 	.word	0x20001a44
 8016c14:	20001a40 	.word	0x20001a40

08016c18 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b088      	sub	sp, #32
 8016c1c:	af02      	add	r7, sp, #8
 8016c1e:	60ba      	str	r2, [r7, #8]
 8016c20:	607b      	str	r3, [r7, #4]
 8016c22:	4603      	mov	r3, r0
 8016c24:	73fb      	strb	r3, [r7, #15]
 8016c26:	460b      	mov	r3, r1
 8016c28:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 8016c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016c32:	2b0d      	cmp	r3, #13
 8016c34:	bfa8      	it	ge
 8016c36:	230d      	movge	r3, #13
 8016c38:	b25a      	sxtb	r2, r3
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c44:	4916      	ldr	r1, [pc, #88]	@ (8016ca0 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7fe f8d8 	bl	8014dfc <RegionCommonGetBandwidth>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	b2da      	uxtb	r2, r3
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	4b11      	ldr	r3, [pc, #68]	@ (8016ca4 <RegionUS915ComputeRxWindowParameters+0x8c>)
 8016c5e:	5c9a      	ldrb	r2, [r3, r2]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016c66:	4619      	mov	r1, r3
 8016c68:	4b0d      	ldr	r3, [pc, #52]	@ (8016ca0 <RegionUS915ComputeRxWindowParameters+0x88>)
 8016c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016c6e:	4619      	mov	r1, r3
 8016c70:	4610      	mov	r0, r2
 8016c72:	f7fd fe41 	bl	80148f8 <RegionCommonComputeSymbolTimeLoRa>
 8016c76:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8016c78:	4b0b      	ldr	r3, [pc, #44]	@ (8016ca8 <RegionUS915ComputeRxWindowParameters+0x90>)
 8016c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016c7c:	4798      	blx	r3
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	3308      	adds	r3, #8
 8016c82:	687a      	ldr	r2, [r7, #4]
 8016c84:	320c      	adds	r2, #12
 8016c86:	7bb9      	ldrb	r1, [r7, #14]
 8016c88:	9201      	str	r2, [sp, #4]
 8016c8a:	9300      	str	r3, [sp, #0]
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	68ba      	ldr	r2, [r7, #8]
 8016c90:	6978      	ldr	r0, [r7, #20]
 8016c92:	f7fd fe57 	bl	8014944 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8016c96:	bf00      	nop
 8016c98:	3718      	adds	r7, #24
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}
 8016c9e:	bf00      	nop
 8016ca0:	0801cfa8 	.word	0x0801cfa8
 8016ca4:	0801cf98 	.word	0x0801cf98
 8016ca8:	0801d01c 	.word	0x0801d01c

08016cac <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8016cac:	b590      	push	{r4, r7, lr}
 8016cae:	b091      	sub	sp, #68	@ 0x44
 8016cb0:	af0a      	add	r7, sp, #40	@ 0x28
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	785b      	ldrb	r3, [r3, #1]
 8016cba:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	685b      	ldr	r3, [r3, #4]
 8016cc8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8016cca:	4b34      	ldr	r3, [pc, #208]	@ (8016d9c <RegionUS915RxConfig+0xf0>)
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	4798      	blx	r3
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d001      	beq.n	8016cda <RegionUS915RxConfig+0x2e>
    {
        return false;
 8016cd6:	2300      	movs	r3, #0
 8016cd8:	e05c      	b.n	8016d94 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	7cdb      	ldrb	r3, [r3, #19]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d109      	bne.n	8016cf6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	781b      	ldrb	r3, [r3, #0]
 8016ce6:	f003 0307 	and.w	r3, r3, #7
 8016cea:	4a2d      	ldr	r2, [pc, #180]	@ (8016da0 <RegionUS915RxConfig+0xf4>)
 8016cec:	fb03 f202 	mul.w	r2, r3, r2
 8016cf0:	4b2c      	ldr	r3, [pc, #176]	@ (8016da4 <RegionUS915RxConfig+0xf8>)
 8016cf2:	4413      	add	r3, r2
 8016cf4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8016cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cfa:	4a2b      	ldr	r2, [pc, #172]	@ (8016da8 <RegionUS915RxConfig+0xfc>)
 8016cfc:	5cd3      	ldrb	r3, [r2, r3]
 8016cfe:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8016d00:	4b26      	ldr	r3, [pc, #152]	@ (8016d9c <RegionUS915RxConfig+0xf0>)
 8016d02:	68db      	ldr	r3, [r3, #12]
 8016d04:	6938      	ldr	r0, [r7, #16]
 8016d06:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016d08:	4b24      	ldr	r3, [pc, #144]	@ (8016d9c <RegionUS915RxConfig+0xf0>)
 8016d0a:	699c      	ldr	r4, [r3, #24]
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	789b      	ldrb	r3, [r3, #2]
 8016d10:	4618      	mov	r0, r3
 8016d12:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	689b      	ldr	r3, [r3, #8]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	687a      	ldr	r2, [r7, #4]
 8016d1e:	7c92      	ldrb	r2, [r2, #18]
 8016d20:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d22:	2201      	movs	r2, #1
 8016d24:	9208      	str	r2, [sp, #32]
 8016d26:	2200      	movs	r2, #0
 8016d28:	9207      	str	r2, [sp, #28]
 8016d2a:	2200      	movs	r2, #0
 8016d2c:	9206      	str	r2, [sp, #24]
 8016d2e:	2200      	movs	r2, #0
 8016d30:	9205      	str	r2, [sp, #20]
 8016d32:	2200      	movs	r2, #0
 8016d34:	9204      	str	r2, [sp, #16]
 8016d36:	2200      	movs	r2, #0
 8016d38:	9203      	str	r2, [sp, #12]
 8016d3a:	9302      	str	r3, [sp, #8]
 8016d3c:	2308      	movs	r3, #8
 8016d3e:	9301      	str	r3, [sp, #4]
 8016d40:	2300      	movs	r3, #0
 8016d42:	9300      	str	r3, [sp, #0]
 8016d44:	2301      	movs	r3, #1
 8016d46:	460a      	mov	r2, r1
 8016d48:	4601      	mov	r1, r0
 8016d4a:	2001      	movs	r0, #1
 8016d4c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	7c5b      	ldrb	r3, [r3, #17]
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d005      	beq.n	8016d62 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8016d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d5a:	4a14      	ldr	r2, [pc, #80]	@ (8016dac <RegionUS915RxConfig+0x100>)
 8016d5c:	5cd3      	ldrb	r3, [r2, r3]
 8016d5e:	75fb      	strb	r3, [r7, #23]
 8016d60:	e004      	b.n	8016d6c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8016d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d66:	4a12      	ldr	r2, [pc, #72]	@ (8016db0 <RegionUS915RxConfig+0x104>)
 8016d68:	5cd3      	ldrb	r3, [r2, r3]
 8016d6a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8016d9c <RegionUS915RxConfig+0xf0>)
 8016d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016d70:	7dfa      	ldrb	r2, [r7, #23]
 8016d72:	320d      	adds	r2, #13
 8016d74:	b2d2      	uxtb	r2, r2
 8016d76:	4611      	mov	r1, r2
 8016d78:	2001      	movs	r0, #1
 8016d7a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	7cdb      	ldrb	r3, [r3, #19]
 8016d80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8016d84:	6939      	ldr	r1, [r7, #16]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7fe f856 	bl	8014e38 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	7bfa      	ldrb	r2, [r7, #15]
 8016d90:	701a      	strb	r2, [r3, #0]
    return true;
 8016d92:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	371c      	adds	r7, #28
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd90      	pop	{r4, r7, pc}
 8016d9c:	0801d01c 	.word	0x0801d01c
 8016da0:	000927c0 	.word	0x000927c0
 8016da4:	370870a0 	.word	0x370870a0
 8016da8:	0801cf98 	.word	0x0801cf98
 8016dac:	0801d00c 	.word	0x0801d00c
 8016db0:	0801cffc 	.word	0x0801cffc

08016db4 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8016db4:	b590      	push	{r4, r7, lr}
 8016db6:	b093      	sub	sp, #76	@ 0x4c
 8016db8:	af0a      	add	r7, sp, #40	@ 0x28
 8016dba:	60f8      	str	r0, [r7, #12]
 8016dbc:	60b9      	str	r1, [r7, #8]
 8016dbe:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016dc6:	461a      	mov	r2, r3
 8016dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8016ef4 <RegionUS915TxConfig+0x140>)
 8016dca:	5c9b      	ldrb	r3, [r3, r2]
 8016dcc:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8016dd4:	4b48      	ldr	r3, [pc, #288]	@ (8016ef8 <RegionUS915TxConfig+0x144>)
 8016dd6:	681a      	ldr	r2, [r3, #0]
 8016dd8:	4b48      	ldr	r3, [pc, #288]	@ (8016efc <RegionUS915TxConfig+0x148>)
 8016dda:	6819      	ldr	r1, [r3, #0]
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	781b      	ldrb	r3, [r3, #0]
 8016de0:	461c      	mov	r4, r3
 8016de2:	4623      	mov	r3, r4
 8016de4:	005b      	lsls	r3, r3, #1
 8016de6:	4423      	add	r3, r4
 8016de8:	009b      	lsls	r3, r3, #2
 8016dea:	440b      	add	r3, r1
 8016dec:	3309      	adds	r3, #9
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	4619      	mov	r1, r3
 8016df2:	460b      	mov	r3, r1
 8016df4:	005b      	lsls	r3, r3, #1
 8016df6:	440b      	add	r3, r1
 8016df8:	00db      	lsls	r3, r3, #3
 8016dfa:	4413      	add	r3, r2
 8016dfc:	3302      	adds	r3, #2
 8016dfe:	f993 1000 	ldrsb.w	r1, [r3]
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016e08:	4b3c      	ldr	r3, [pc, #240]	@ (8016efc <RegionUS915TxConfig+0x148>)
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8016e10:	f7ff fa52 	bl	80162b8 <LimitTxPower>
 8016e14:	4603      	mov	r3, r0
 8016e16:	77bb      	strb	r3, [r7, #30]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016e1e:	4938      	ldr	r1, [pc, #224]	@ (8016f00 <RegionUS915TxConfig+0x14c>)
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7fd ffeb 	bl	8014dfc <RegionCommonGetBandwidth>
 8016e26:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8016e2c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016e30:	f04f 0200 	mov.w	r2, #0
 8016e34:	4933      	ldr	r1, [pc, #204]	@ (8016f04 <RegionUS915TxConfig+0x150>)
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fd fe3c 	bl	8014ab4 <RegionCommonComputeTxPower>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8016e40:	4b31      	ldr	r3, [pc, #196]	@ (8016f08 <RegionUS915TxConfig+0x154>)
 8016e42:	68da      	ldr	r2, [r3, #12]
 8016e44:	4b2d      	ldr	r3, [pc, #180]	@ (8016efc <RegionUS915TxConfig+0x148>)
 8016e46:	6819      	ldr	r1, [r3, #0]
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	4618      	mov	r0, r3
 8016e4e:	4603      	mov	r3, r0
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	4403      	add	r3, r0
 8016e54:	009b      	lsls	r3, r3, #2
 8016e56:	440b      	add	r3, r1
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8016e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8016f08 <RegionUS915TxConfig+0x154>)
 8016e60:	69dc      	ldr	r4, [r3, #28]
 8016e62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016e66:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8016e6a:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8016e6e:	9208      	str	r2, [sp, #32]
 8016e70:	2200      	movs	r2, #0
 8016e72:	9207      	str	r2, [sp, #28]
 8016e74:	2200      	movs	r2, #0
 8016e76:	9206      	str	r2, [sp, #24]
 8016e78:	2200      	movs	r2, #0
 8016e7a:	9205      	str	r2, [sp, #20]
 8016e7c:	2201      	movs	r2, #1
 8016e7e:	9204      	str	r2, [sp, #16]
 8016e80:	2200      	movs	r2, #0
 8016e82:	9203      	str	r2, [sp, #12]
 8016e84:	2208      	movs	r2, #8
 8016e86:	9202      	str	r2, [sp, #8]
 8016e88:	2201      	movs	r2, #1
 8016e8a:	9201      	str	r2, [sp, #4]
 8016e8c:	9300      	str	r3, [sp, #0]
 8016e8e:	69bb      	ldr	r3, [r7, #24]
 8016e90:	2200      	movs	r2, #0
 8016e92:	2001      	movs	r0, #1
 8016e94:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8016e96:	4b19      	ldr	r3, [pc, #100]	@ (8016efc <RegionUS915TxConfig+0x148>)
 8016e98:	681a      	ldr	r2, [r3, #0]
 8016e9a:	68fb      	ldr	r3, [r7, #12]
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	460b      	mov	r3, r1
 8016ea2:	005b      	lsls	r3, r3, #1
 8016ea4:	440b      	add	r3, r1
 8016ea6:	009b      	lsls	r3, r3, #2
 8016ea8:	4413      	add	r3, r2
 8016eaa:	681a      	ldr	r2, [r3, #0]
 8016eac:	68fb      	ldr	r3, [r7, #12]
 8016eae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016eb2:	4619      	mov	r1, r3
 8016eb4:	4610      	mov	r0, r2
 8016eb6:	f7fd fff1 	bl	8014e9c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8016eba:	4b13      	ldr	r3, [pc, #76]	@ (8016f08 <RegionUS915TxConfig+0x154>)
 8016ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016ebe:	68fa      	ldr	r2, [r7, #12]
 8016ec0:	8992      	ldrh	r2, [r2, #12]
 8016ec2:	b2d2      	uxtb	r2, r2
 8016ec4:	4611      	mov	r1, r2
 8016ec6:	2001      	movs	r0, #1
 8016ec8:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	899b      	ldrh	r3, [r3, #12]
 8016ed4:	4619      	mov	r1, r3
 8016ed6:	4610      	mov	r0, r2
 8016ed8:	f7ff fa68 	bl	80163ac <GetTimeOnAir>
 8016edc:	4602      	mov	r2, r0
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8016ee2:	68bb      	ldr	r3, [r7, #8]
 8016ee4:	7fba      	ldrb	r2, [r7, #30]
 8016ee6:	701a      	strb	r2, [r3, #0]
    return true;
 8016ee8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8016eea:	4618      	mov	r0, r3
 8016eec:	3724      	adds	r7, #36	@ 0x24
 8016eee:	46bd      	mov	sp, r7
 8016ef0:	bd90      	pop	{r4, r7, pc}
 8016ef2:	bf00      	nop
 8016ef4:	0801cf98 	.word	0x0801cf98
 8016ef8:	20001a40 	.word	0x20001a40
 8016efc:	20001a44 	.word	0x20001a44
 8016f00:	0801cfa8 	.word	0x0801cfa8
 8016f04:	41f00000 	.word	0x41f00000
 8016f08:	0801d01c 	.word	0x0801d01c

08016f0c <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8016f0c:	b590      	push	{r4, r7, lr}
 8016f0e:	b097      	sub	sp, #92	@ 0x5c
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
 8016f18:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8016f1a:	2307      	movs	r3, #7
 8016f1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016f20:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8016f24:	2200      	movs	r2, #0
 8016f26:	601a      	str	r2, [r3, #0]
 8016f28:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8016f30:	2300      	movs	r3, #0
 8016f32:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
 8016f36:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016f3a:	2200      	movs	r2, #0
 8016f3c:	601a      	str	r2, [r3, #0]
 8016f3e:	605a      	str	r2, [r3, #4]
 8016f40:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8016f42:	4b97      	ldr	r3, [pc, #604]	@ (80171a0 <RegionUS915LinkAdrReq+0x294>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	f503 6190 	add.w	r1, r3, #1152	@ 0x480
 8016f4a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8016f4e:	2206      	movs	r2, #6
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7fd fab3 	bl	80144bc <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8016f56:	e11b      	b.n	8017190 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	685a      	ldr	r2, [r3, #4]
 8016f5c:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8016f60:	4413      	add	r3, r2
 8016f62:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016f66:	4611      	mov	r1, r2
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7fd fbeb 	bl	8014744 <RegionCommonParseLinkAdrReq>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8016f74:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	f000 8113 	beq.w	80171a4 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8016f7e:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8016f82:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8016f86:	4413      	add	r3, r2
 8016f88:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8016f8c:	2307      	movs	r3, #7
 8016f8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8016f92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016f96:	2b06      	cmp	r3, #6
 8016f98:	d116      	bne.n	8016fc8 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8016f9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f9e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8016fa2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fa6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8016faa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8016fb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016fb6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016fba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016fbe:	b2db      	uxtb	r3, r3
 8016fc0:	b29b      	uxth	r3, r3
 8016fc2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016fc6:	e0e3      	b.n	8017190 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8016fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016fcc:	2b07      	cmp	r3, #7
 8016fce:	d112      	bne.n	8016ff6 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8016fe8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8016fec:	b2db      	uxtb	r3, r3
 8016fee:	b29b      	uxth	r3, r3
 8016ff0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8016ff4:	e0cc      	b.n	8017190 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8016ff6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8016ffa:	2b05      	cmp	r3, #5
 8016ffc:	f040 80bf 	bne.w	801717e <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8017000:	2301      	movs	r3, #1
 8017002:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8017006:	2300      	movs	r3, #0
 8017008:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 801700c:	2300      	movs	r3, #0
 801700e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8017012:	e0ae      	b.n	8017172 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8017014:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8017018:	b2da      	uxtb	r2, r3
 801701a:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 801701e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017022:	fa01 f303 	lsl.w	r3, r1, r3
 8017026:	4013      	ands	r3, r2
 8017028:	2b00      	cmp	r3, #0
 801702a:	d04d      	beq.n	80170c8 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 801702c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017030:	f003 0301 	and.w	r3, r3, #1
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b00      	cmp	r3, #0
 8017038:	d120      	bne.n	801707c <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 801703a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801703e:	005b      	lsls	r3, r3, #1
 8017040:	3358      	adds	r3, #88	@ 0x58
 8017042:	443b      	add	r3, r7
 8017044:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8017048:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801704c:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8017050:	b292      	uxth	r2, r2
 8017052:	005b      	lsls	r3, r3, #1
 8017054:	3358      	adds	r3, #88	@ 0x58
 8017056:	443b      	add	r3, r7
 8017058:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801705c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017060:	b21a      	sxth	r2, r3
 8017062:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8017066:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801706a:	fa01 f303 	lsl.w	r3, r1, r3
 801706e:	b21b      	sxth	r3, r3
 8017070:	4313      	orrs	r3, r2
 8017072:	b21b      	sxth	r3, r3
 8017074:	b29b      	uxth	r3, r3
 8017076:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801707a:	e075      	b.n	8017168 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 801707c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	3358      	adds	r3, #88	@ 0x58
 8017084:	443b      	add	r3, r7
 8017086:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801708a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801708e:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8017092:	b292      	uxth	r2, r2
 8017094:	005b      	lsls	r3, r3, #1
 8017096:	3358      	adds	r3, #88	@ 0x58
 8017098:	443b      	add	r3, r7
 801709a:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 801709e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80170a2:	b21a      	sxth	r2, r3
 80170a4:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80170a8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80170ac:	fa01 f303 	lsl.w	r3, r1, r3
 80170b0:	b21b      	sxth	r3, r3
 80170b2:	4313      	orrs	r3, r2
 80170b4:	b21b      	sxth	r3, r3
 80170b6:	b29b      	uxth	r3, r3
 80170b8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 80170bc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170c0:	3301      	adds	r3, #1
 80170c2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80170c6:	e04f      	b.n	8017168 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 80170c8:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80170cc:	f003 0301 	and.w	r3, r3, #1
 80170d0:	b2db      	uxtb	r3, r3
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d122      	bne.n	801711c <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 80170d6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	3358      	adds	r3, #88	@ 0x58
 80170de:	443b      	add	r3, r7
 80170e0:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 80170e4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80170e8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80170ec:	b292      	uxth	r2, r2
 80170ee:	005b      	lsls	r3, r3, #1
 80170f0:	3358      	adds	r3, #88	@ 0x58
 80170f2:	443b      	add	r3, r7
 80170f4:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 80170f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80170fc:	b21a      	sxth	r2, r3
 80170fe:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8017102:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017106:	fa01 f303 	lsl.w	r3, r1, r3
 801710a:	b21b      	sxth	r3, r3
 801710c:	43db      	mvns	r3, r3
 801710e:	b21b      	sxth	r3, r3
 8017110:	4013      	ands	r3, r2
 8017112:	b21b      	sxth	r3, r3
 8017114:	b29b      	uxth	r3, r3
 8017116:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801711a:	e025      	b.n	8017168 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 801711c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	3358      	adds	r3, #88	@ 0x58
 8017124:	443b      	add	r3, r7
 8017126:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801712a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 801712e:	b2d2      	uxtb	r2, r2
 8017130:	b292      	uxth	r2, r2
 8017132:	005b      	lsls	r3, r3, #1
 8017134:	3358      	adds	r3, #88	@ 0x58
 8017136:	443b      	add	r3, r7
 8017138:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 801713c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8017140:	b21a      	sxth	r2, r3
 8017142:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8017146:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801714a:	fa01 f303 	lsl.w	r3, r1, r3
 801714e:	b21b      	sxth	r3, r3
 8017150:	43db      	mvns	r3, r3
 8017152:	b21b      	sxth	r3, r3
 8017154:	4013      	ands	r3, r2
 8017156:	b21b      	sxth	r3, r3
 8017158:	b29b      	uxth	r3, r3
 801715a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 801715e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8017162:	3301      	adds	r3, #1
 8017164:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8017168:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 801716c:	3301      	adds	r3, #1
 801716e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8017172:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017176:	2b07      	cmp	r3, #7
 8017178:	f67f af4c 	bls.w	8017014 <RegionUS915LinkAdrReq+0x108>
 801717c:	e008      	b.n	8017190 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801717e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8017182:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	3358      	adds	r3, #88	@ 0x58
 801718a:	443b      	add	r3, r7
 801718c:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	7a1b      	ldrb	r3, [r3, #8]
 8017194:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8017198:	429a      	cmp	r2, r3
 801719a:	f4ff aedd 	bcc.w	8016f58 <RegionUS915LinkAdrReq+0x4c>
 801719e:	e002      	b.n	80171a6 <RegionUS915LinkAdrReq+0x29a>
 80171a0:	20001a44 	.word	0x20001a44
            break; // break loop, since no more request has been found
 80171a4:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 80171a6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80171aa:	2b03      	cmp	r3, #3
 80171ac:	dc0f      	bgt.n	80171ce <RegionUS915LinkAdrReq+0x2c2>
 80171ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80171b2:	2204      	movs	r2, #4
 80171b4:	2100      	movs	r1, #0
 80171b6:	4618      	mov	r0, r3
 80171b8:	f7fd f954 	bl	8014464 <RegionCommonCountChannels>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b01      	cmp	r3, #1
 80171c0:	d805      	bhi.n	80171ce <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 80171c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80171c6:	f023 0301 	bic.w	r3, r3, #1
 80171ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80171ce:	2302      	movs	r3, #2
 80171d0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	7a5b      	ldrb	r3, [r3, #9]
 80171d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 80171dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7ff f913 	bl	801640c <RegionUS915GetPhyParam>
 80171e6:	4603      	mov	r3, r0
 80171e8:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 80171ea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80171ee:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	7a9b      	ldrb	r3, [r3, #10]
 80171f4:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80171f6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 80171fa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80171fc:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8017200:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8017202:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8017206:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801720e:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8017216:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	7b5b      	ldrb	r3, [r3, #13]
 801721c:	b25b      	sxtb	r3, r3
 801721e:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8017220:	2348      	movs	r3, #72	@ 0x48
 8017222:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8017226:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801722a:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801722e:	b25b      	sxtb	r3, r3
 8017230:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8017234:	2304      	movs	r3, #4
 8017236:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801723a:	4b44      	ldr	r3, [pc, #272]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8017240:	230e      	movs	r3, #14
 8017242:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8017246:	2300      	movs	r3, #0
 8017248:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8017252:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8017256:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801725a:	1c9a      	adds	r2, r3, #2
 801725c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8017260:	1c59      	adds	r1, r3, #1
 8017262:	f107 0014 	add.w	r0, r7, #20
 8017266:	4623      	mov	r3, r4
 8017268:	f7fd fabe 	bl	80147e8 <RegionCommonLinkAdrReqVerifyParams>
 801726c:	4603      	mov	r3, r0
 801726e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8017272:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8017276:	2b07      	cmp	r3, #7
 8017278:	d151      	bne.n	801731e <RegionUS915LinkAdrReq+0x412>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801727a:	4b34      	ldr	r3, [pc, #208]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 8017282:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8017286:	2206      	movs	r2, #6
 8017288:	4618      	mov	r0, r3
 801728a:	f7fd f917 	bl	80144bc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 801728e:	4b30      	ldr	r3, [pc, #192]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	f8b3 1090 	ldrh.w	r1, [r3, #144]	@ 0x90
 8017296:	4b2d      	ldr	r3, [pc, #180]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	@ 0x480
 801729e:	4b2c      	ldr	r3, [pc, #176]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	400a      	ands	r2, r1
 80172a4:	b292      	uxth	r2, r2
 80172a6:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 80172aa:	4b29      	ldr	r3, [pc, #164]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	f8b3 1092 	ldrh.w	r1, [r3, #146]	@ 0x92
 80172b2:	4b26      	ldr	r3, [pc, #152]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	f8b3 2482 	ldrh.w	r2, [r3, #1154]	@ 0x482
 80172ba:	4b25      	ldr	r3, [pc, #148]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	400a      	ands	r2, r1
 80172c0:	b292      	uxth	r2, r2
 80172c2:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 80172c6:	4b22      	ldr	r3, [pc, #136]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	f8b3 1094 	ldrh.w	r1, [r3, #148]	@ 0x94
 80172ce:	4b1f      	ldr	r3, [pc, #124]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	f8b3 2484 	ldrh.w	r2, [r3, #1156]	@ 0x484
 80172d6:	4b1e      	ldr	r3, [pc, #120]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	400a      	ands	r2, r1
 80172dc:	b292      	uxth	r2, r2
 80172de:	f8a3 2094 	strh.w	r2, [r3, #148]	@ 0x94
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 80172e2:	4b1b      	ldr	r3, [pc, #108]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	f8b3 1096 	ldrh.w	r1, [r3, #150]	@ 0x96
 80172ea:	4b18      	ldr	r3, [pc, #96]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	f8b3 2486 	ldrh.w	r2, [r3, #1158]	@ 0x486
 80172f2:	4b17      	ldr	r3, [pc, #92]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	400a      	ands	r2, r1
 80172f8:	b292      	uxth	r2, r2
 80172fa:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 80172fe:	4b13      	ldr	r3, [pc, #76]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 8017300:	681a      	ldr	r2, [r3, #0]
 8017302:	4b13      	ldr	r3, [pc, #76]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 801730a:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 801730e:	4b0f      	ldr	r3, [pc, #60]	@ (801734c <RegionUS915LinkAdrReq+0x440>)
 8017310:	681a      	ldr	r2, [r3, #0]
 8017312:	4b0f      	ldr	r3, [pc, #60]	@ (8017350 <RegionUS915LinkAdrReq+0x444>)
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	f8b2 248a 	ldrh.w	r2, [r2, #1162]	@ 0x48a
 801731a:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801731e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8017322:	68bb      	ldr	r3, [r7, #8]
 8017324:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8017326:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801732e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8017336:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8017338:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801733c:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 801733e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8017342:	4618      	mov	r0, r3
 8017344:	375c      	adds	r7, #92	@ 0x5c
 8017346:	46bd      	mov	sp, r7
 8017348:	bd90      	pop	{r4, r7, pc}
 801734a:	bf00      	nop
 801734c:	20001a44 	.word	0x20001a44
 8017350:	20001a40 	.word	0x20001a40

08017354 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801735c:	2307      	movs	r3, #7
 801735e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	685b      	ldr	r3, [r3, #4]
 8017364:	4618      	mov	r0, r3
 8017366:	f7fe ffdd 	bl	8016324 <VerifyRfFreq>
 801736a:	4603      	mov	r3, r0
 801736c:	f083 0301 	eor.w	r3, r3, #1
 8017370:	b2db      	uxtb	r3, r3
 8017372:	2b00      	cmp	r3, #0
 8017374:	d003      	beq.n	801737e <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8017376:	7bfb      	ldrb	r3, [r7, #15]
 8017378:	f023 0301 	bic.w	r3, r3, #1
 801737c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	f993 3000 	ldrsb.w	r3, [r3]
 8017384:	220d      	movs	r2, #13
 8017386:	2108      	movs	r1, #8
 8017388:	4618      	mov	r0, r3
 801738a:	f7fd f81a 	bl	80143c2 <RegionCommonValueInRange>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d103      	bne.n	801739c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8017394:	7bfb      	ldrb	r3, [r7, #15]
 8017396:	f023 0302 	bic.w	r3, r3, #2
 801739a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f993 3000 	ldrsb.w	r3, [r3]
 80173a2:	2207      	movs	r2, #7
 80173a4:	2105      	movs	r1, #5
 80173a6:	4618      	mov	r0, r3
 80173a8:	f7fd f80b 	bl	80143c2 <RegionCommonValueInRange>
 80173ac:	4603      	mov	r3, r0
 80173ae:	2b01      	cmp	r3, #1
 80173b0:	d004      	beq.n	80173bc <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80173b8:	2b0d      	cmp	r3, #13
 80173ba:	dd03      	ble.n	80173c4 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
 80173be:	f023 0302 	bic.w	r3, r3, #2
 80173c2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80173c4:	687b      	ldr	r3, [r7, #4]
 80173c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80173ca:	2203      	movs	r2, #3
 80173cc:	2100      	movs	r1, #0
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fc fff7 	bl	80143c2 <RegionCommonValueInRange>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d103      	bne.n	80173e2 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80173da:	7bfb      	ldrb	r3, [r7, #15]
 80173dc:	f023 0304 	bic.w	r3, r3, #4
 80173e0:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 80173e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3710      	adds	r7, #16
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80173ec:	b480      	push	{r7}
 80173ee:	b083      	sub	sp, #12
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80173f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	370c      	adds	r7, #12
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bc80      	pop	{r7}
 8017400:	4770      	bx	lr

08017402 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8017402:	b480      	push	{r7}
 8017404:	b083      	sub	sp, #12
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801740a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801740e:	4618      	mov	r0, r3
 8017410:	370c      	adds	r7, #12
 8017412:	46bd      	mov	sp, r7
 8017414:	bc80      	pop	{r7}
 8017416:	4770      	bx	lr

08017418 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8017418:	b480      	push	{r7}
 801741a:	b083      	sub	sp, #12
 801741c:	af00      	add	r7, sp, #0
 801741e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8017420:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017424:	4618      	mov	r0, r3
 8017426:	370c      	adds	r7, #12
 8017428:	46bd      	mov	sp, r7
 801742a:	bc80      	pop	{r7}
 801742c:	4770      	bx	lr
	...

08017430 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
 8017436:	4603      	mov	r3, r0
 8017438:	460a      	mov	r2, r1
 801743a:	71fb      	strb	r3, [r7, #7]
 801743c:	4613      	mov	r3, r2
 801743e:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8017440:	79bb      	ldrb	r3, [r7, #6]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d108      	bne.n	8017458 <RegionUS915AlternateDr+0x28>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8017446:	4b16      	ldr	r3, [pc, #88]	@ (80174a0 <RegionUS915AlternateDr+0x70>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 801744e:	3201      	adds	r2, #1
 8017450:	b2d2      	uxtb	r2, r2
 8017452:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
 8017456:	e007      	b.n	8017468 <RegionUS915AlternateDr+0x38>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8017458:	4b11      	ldr	r3, [pc, #68]	@ (80174a0 <RegionUS915AlternateDr+0x70>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017460:	3a01      	subs	r2, #1
 8017462:	b2d2      	uxtb	r2, r2
 8017464:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8017468:	4b0d      	ldr	r3, [pc, #52]	@ (80174a0 <RegionUS915AlternateDr+0x70>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f893 209d 	ldrb.w	r2, [r3, #157]	@ 0x9d
 8017470:	4b0c      	ldr	r3, [pc, #48]	@ (80174a4 <RegionUS915AlternateDr+0x74>)
 8017472:	fba3 1302 	umull	r1, r3, r3, r2
 8017476:	0859      	lsrs	r1, r3, #1
 8017478:	460b      	mov	r3, r1
 801747a:	00db      	lsls	r3, r3, #3
 801747c:	440b      	add	r3, r1
 801747e:	1ad3      	subs	r3, r2, r3
 8017480:	b2db      	uxtb	r3, r3
 8017482:	2b00      	cmp	r3, #0
 8017484:	d102      	bne.n	801748c <RegionUS915AlternateDr+0x5c>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8017486:	2304      	movs	r3, #4
 8017488:	71fb      	strb	r3, [r7, #7]
 801748a:	e001      	b.n	8017490 <RegionUS915AlternateDr+0x60>
    }
    else
    {
        currentDr = DR_0;
 801748c:	2300      	movs	r3, #0
 801748e:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8017490:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8017494:	4618      	mov	r0, r3
 8017496:	370c      	adds	r7, #12
 8017498:	46bd      	mov	sp, r7
 801749a:	bc80      	pop	{r7}
 801749c:	4770      	bx	lr
 801749e:	bf00      	nop
 80174a0:	20001a40 	.word	0x20001a40
 80174a4:	38e38e39 	.word	0x38e38e39

080174a8 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80174a8:	b580      	push	{r7, lr}
 80174aa:	b0a8      	sub	sp, #160	@ 0xa0
 80174ac:	af02      	add	r7, sp, #8
 80174ae:	60f8      	str	r0, [r7, #12]
 80174b0:	60b9      	str	r1, [r7, #8]
 80174b2:	607a      	str	r2, [r7, #4]
 80174b4:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 80174b6:	2300      	movs	r3, #0
 80174b8:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 80174bc:	2300      	movs	r3, #0
 80174be:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 80174c2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80174c6:	2248      	movs	r2, #72	@ 0x48
 80174c8:	2100      	movs	r1, #0
 80174ca:	4618      	mov	r0, r3
 80174cc:	f004 ffbe 	bl	801c44c <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80174d0:	230c      	movs	r3, #12
 80174d2:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 80174d6:	4b6b      	ldr	r3, [pc, #428]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	3390      	adds	r3, #144	@ 0x90
 80174dc:	2204      	movs	r2, #4
 80174de:	2100      	movs	r1, #0
 80174e0:	4618      	mov	r0, r3
 80174e2:	f7fc ffbf 	bl	8014464 <RegionCommonCountChannels>
 80174e6:	4603      	mov	r3, r0
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d110      	bne.n	801750e <RegionUS915NextChannel+0x66>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80174ec:	4b65      	ldr	r3, [pc, #404]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 80174f4:	4b64      	ldr	r3, [pc, #400]	@ (8017688 <RegionUS915NextChannel+0x1e0>)
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80174fc:	2204      	movs	r2, #4
 80174fe:	4619      	mov	r1, r3
 8017500:	f7fc ffdc 	bl	80144bc <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8017504:	4b5f      	ldr	r3, [pc, #380]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2200      	movs	r2, #0
 801750a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017514:	2b03      	cmp	r3, #3
 8017516:	dd0e      	ble.n	8017536 <RegionUS915NextChannel+0x8e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8017518:	4b5a      	ldr	r3, [pc, #360]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8017520:	b2db      	uxtb	r3, r3
 8017522:	2b00      	cmp	r3, #0
 8017524:	d107      	bne.n	8017536 <RegionUS915NextChannel+0x8e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8017526:	4b58      	ldr	r3, [pc, #352]	@ (8017688 <RegionUS915NextChannel+0x1e0>)
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	4b56      	ldr	r3, [pc, #344]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	f8b2 2488 	ldrh.w	r2, [r2, #1160]	@ 0x488
 8017532:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	7a5b      	ldrb	r3, [r3, #9]
 801753a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 801753c:	68fb      	ldr	r3, [r7, #12]
 801753e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017542:	b2db      	uxtb	r3, r3
 8017544:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8017546:	4b4f      	ldr	r3, [pc, #316]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017548:	681b      	ldr	r3, [r3, #0]
 801754a:	3390      	adds	r3, #144	@ 0x90
 801754c:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 801754e:	4b4e      	ldr	r3, [pc, #312]	@ (8017688 <RegionUS915NextChannel+0x1e0>)
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8017554:	4b4b      	ldr	r3, [pc, #300]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 801755a:	2348      	movs	r3, #72	@ 0x48
 801755c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 801755e:	2300      	movs	r3, #0
 8017560:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	685b      	ldr	r3, [r3, #4]
 801756c:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 801756e:	68fb      	ldr	r3, [r7, #12]
 8017570:	7a9b      	ldrb	r3, [r3, #10]
 8017572:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8017576:	2301      	movs	r3, #1
 8017578:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 801757c:	68fa      	ldr	r2, [r7, #12]
 801757e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8017582:	320c      	adds	r2, #12
 8017584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017588:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 801758c:	68fb      	ldr	r3, [r7, #12]
 801758e:	7d1b      	ldrb	r3, [r3, #20]
 8017590:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	f993 2008 	ldrsb.w	r2, [r3, #8]
 801759a:	68fb      	ldr	r3, [r7, #12]
 801759c:	8adb      	ldrh	r3, [r3, #22]
 801759e:	4619      	mov	r1, r3
 80175a0:	4610      	mov	r0, r2
 80175a2:	f7fe ff03 	bl	80163ac <GetTimeOnAir>
 80175a6:	4603      	mov	r3, r0
 80175a8:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80175aa:	f107 0314 	add.w	r3, r7, #20
 80175ae:	64bb      	str	r3, [r7, #72]	@ 0x48
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80175b0:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 80175b4:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80175b8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	9301      	str	r3, [sp, #4]
 80175c0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80175c4:	9300      	str	r3, [sp, #0]
 80175c6:	460b      	mov	r3, r1
 80175c8:	6839      	ldr	r1, [r7, #0]
 80175ca:	f7fd fb62 	bl	8014c92 <RegionCommonIdentifyChannels>
 80175ce:	4603      	mov	r3, r0
 80175d0:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80175d4:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d14d      	bne.n	8017678 <RegionUS915NextChannel+0x1d0>
    {
        if( nextChanParams->Joined == true )
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	7a5b      	ldrb	r3, [r3, #9]
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d00e      	beq.n	8017602 <RegionUS915NextChannel+0x15a>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80175e4:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 80175e8:	3b01      	subs	r3, #1
 80175ea:	4619      	mov	r1, r3
 80175ec:	2000      	movs	r0, #0
 80175ee:	f000 f8f5 	bl	80177dc <randr>
 80175f2:	4603      	mov	r3, r0
 80175f4:	3398      	adds	r3, #152	@ 0x98
 80175f6:	443b      	add	r3, r7
 80175f8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 80175fc:	68bb      	ldr	r3, [r7, #8]
 80175fe:	701a      	strb	r2, [r3, #0]
 8017600:	e030      	b.n	8017664 <RegionUS915NextChannel+0x1bc>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d10f      	bne.n	801762c <RegionUS915NextChannel+0x184>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801760c:	4b1d      	ldr	r3, [pc, #116]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	f103 0090 	add.w	r0, r3, #144	@ 0x90
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8017614:	4b1b      	ldr	r3, [pc, #108]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017616:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8017618:	339c      	adds	r3, #156	@ 0x9c
 801761a:	68ba      	ldr	r2, [r7, #8]
 801761c:	4619      	mov	r1, r3
 801761e:	f7fc fc8b 	bl	8013f38 <RegionBaseUSComputeNext125kHzJoinChannel>
 8017622:	4603      	mov	r3, r0
 8017624:	2b03      	cmp	r3, #3
 8017626:	d11d      	bne.n	8017664 <RegionUS915NextChannel+0x1bc>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8017628:	2303      	movs	r3, #3
 801762a:	e027      	b.n	801767c <RegionUS915NextChannel+0x1d4>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 801762c:	2300      	movs	r3, #0
 801762e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8017632:	e004      	b.n	801763e <RegionUS915NextChannel+0x196>
                {
                    i++;
 8017634:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8017638:	3301      	adds	r3, #1
 801763a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801763e:	4b11      	ldr	r3, [pc, #68]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8017646:	b2da      	uxtb	r2, r3
 8017648:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801764c:	fa42 f303 	asr.w	r3, r2, r3
 8017650:	f003 0301 	and.w	r3, r3, #1
 8017654:	2b00      	cmp	r3, #0
 8017656:	d0ed      	beq.n	8017634 <RegionUS915NextChannel+0x18c>
                }
                *channel = 64 + i;
 8017658:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801765c:	3340      	adds	r3, #64	@ 0x40
 801765e:	b2da      	uxtb	r2, r3
 8017660:	68bb      	ldr	r3, [r7, #8]
 8017662:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8017664:	4b07      	ldr	r3, [pc, #28]	@ (8017684 <RegionUS915NextChannel+0x1dc>)
 8017666:	681b      	ldr	r3, [r3, #0]
 8017668:	f103 0090 	add.w	r0, r3, #144	@ 0x90
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	781b      	ldrb	r3, [r3, #0]
 8017670:	2248      	movs	r2, #72	@ 0x48
 8017672:	4619      	mov	r1, r3
 8017674:	f7fc fec2 	bl	80143fc <RegionCommonChanDisable>
    }
    return status;
 8017678:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801767c:	4618      	mov	r0, r3
 801767e:	3798      	adds	r7, #152	@ 0x98
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}
 8017684:	20001a40 	.word	0x20001a40
 8017688:	20001a44 	.word	0x20001a44

0801768c <RegionUS915SetContinuousWave>:
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionUS915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 801768c:	b590      	push	{r4, r7, lr}
 801768e:	b085      	sub	sp, #20
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, RegionNvmGroup2->ChannelsMask );
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	f993 0002 	ldrsb.w	r0, [r3, #2]
 801769a:	4b23      	ldr	r3, [pc, #140]	@ (8017728 <RegionUS915SetContinuousWave+0x9c>)
 801769c:	681a      	ldr	r2, [r3, #0]
 801769e:	4b23      	ldr	r3, [pc, #140]	@ (801772c <RegionUS915SetContinuousWave+0xa0>)
 80176a0:	6819      	ldr	r1, [r3, #0]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	781b      	ldrb	r3, [r3, #0]
 80176a6:	461c      	mov	r4, r3
 80176a8:	4623      	mov	r3, r4
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	4423      	add	r3, r4
 80176ae:	009b      	lsls	r3, r3, #2
 80176b0:	440b      	add	r3, r1
 80176b2:	3309      	adds	r3, #9
 80176b4:	781b      	ldrb	r3, [r3, #0]
 80176b6:	4619      	mov	r1, r3
 80176b8:	460b      	mov	r3, r1
 80176ba:	005b      	lsls	r3, r3, #1
 80176bc:	440b      	add	r3, r1
 80176be:	00db      	lsls	r3, r3, #3
 80176c0:	4413      	add	r3, r2
 80176c2:	3302      	adds	r3, #2
 80176c4:	f993 1000 	ldrsb.w	r1, [r3]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80176ce:	4b17      	ldr	r3, [pc, #92]	@ (801772c <RegionUS915SetContinuousWave+0xa0>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f503 6390 	add.w	r3, r3, #1152	@ 0x480
 80176d6:	f7fe fdef 	bl	80162b8 <LimitTxPower>
 80176da:	4603      	mov	r3, r0
 80176dc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80176de:	2300      	movs	r3, #0
 80176e0:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 80176e2:	4b12      	ldr	r3, [pc, #72]	@ (801772c <RegionUS915SetContinuousWave+0xa0>)
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	781b      	ldrb	r3, [r3, #0]
 80176ea:	4619      	mov	r1, r3
 80176ec:	460b      	mov	r3, r1
 80176ee:	005b      	lsls	r3, r3, #1
 80176f0:	440b      	add	r3, r1
 80176f2:	009b      	lsls	r3, r3, #2
 80176f4:	4413      	add	r3, r2
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 80176fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80176fe:	f04f 0200 	mov.w	r2, #0
 8017702:	490b      	ldr	r1, [pc, #44]	@ (8017730 <RegionUS915SetContinuousWave+0xa4>)
 8017704:	4618      	mov	r0, r3
 8017706:	f7fd f9d5 	bl	8014ab4 <RegionCommonComputeTxPower>
 801770a:	4603      	mov	r3, r0
 801770c:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 801770e:	4b09      	ldr	r3, [pc, #36]	@ (8017734 <RegionUS915SetContinuousWave+0xa8>)
 8017710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	8992      	ldrh	r2, [r2, #12]
 8017716:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801771a:	68b8      	ldr	r0, [r7, #8]
 801771c:	4798      	blx	r3
#endif /* REGION_US915 */
}
 801771e:	bf00      	nop
 8017720:	3714      	adds	r7, #20
 8017722:	46bd      	mov	sp, r7
 8017724:	bd90      	pop	{r4, r7, pc}
 8017726:	bf00      	nop
 8017728:	20001a40 	.word	0x20001a40
 801772c:	20001a44 	.word	0x20001a44
 8017730:	41f00000 	.word	0x41f00000
 8017734:	0801d01c 	.word	0x0801d01c

08017738 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017738:	b480      	push	{r7}
 801773a:	b085      	sub	sp, #20
 801773c:	af00      	add	r7, sp, #0
 801773e:	4603      	mov	r3, r0
 8017740:	71fb      	strb	r3, [r7, #7]
 8017742:	460b      	mov	r3, r1
 8017744:	71bb      	strb	r3, [r7, #6]
 8017746:	4613      	mov	r3, r2
 8017748:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801774a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801774e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017752:	4909      	ldr	r1, [pc, #36]	@ (8017778 <RegionUS915ApplyDrOffset+0x40>)
 8017754:	0092      	lsls	r2, r2, #2
 8017756:	440a      	add	r2, r1
 8017758:	4413      	add	r3, r2
 801775a:	781b      	ldrb	r3, [r3, #0]
 801775c:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801775e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017762:	2b00      	cmp	r3, #0
 8017764:	da01      	bge.n	801776a <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8017766:	2300      	movs	r3, #0
 8017768:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801776a:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 801776c:	4618      	mov	r0, r3
 801776e:	3714      	adds	r7, #20
 8017770:	46bd      	mov	sp, r7
 8017772:	bc80      	pop	{r7}
 8017774:	4770      	bx	lr
 8017776:	bf00      	nop
 8017778:	0801cfe8 	.word	0x0801cfe8

0801777c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 801777c:	b480      	push	{r7}
 801777e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8017780:	4b0d      	ldr	r3, [pc, #52]	@ (80177b8 <rand1+0x3c>)
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	4a0d      	ldr	r2, [pc, #52]	@ (80177bc <rand1+0x40>)
 8017786:	fb02 f303 	mul.w	r3, r2, r3
 801778a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 801778e:	3339      	adds	r3, #57	@ 0x39
 8017790:	4a09      	ldr	r2, [pc, #36]	@ (80177b8 <rand1+0x3c>)
 8017792:	6013      	str	r3, [r2, #0]
 8017794:	4b08      	ldr	r3, [pc, #32]	@ (80177b8 <rand1+0x3c>)
 8017796:	681a      	ldr	r2, [r3, #0]
 8017798:	2303      	movs	r3, #3
 801779a:	fba3 1302 	umull	r1, r3, r3, r2
 801779e:	1ad1      	subs	r1, r2, r3
 80177a0:	0849      	lsrs	r1, r1, #1
 80177a2:	440b      	add	r3, r1
 80177a4:	0f99      	lsrs	r1, r3, #30
 80177a6:	460b      	mov	r3, r1
 80177a8:	07db      	lsls	r3, r3, #31
 80177aa:	1a5b      	subs	r3, r3, r1
 80177ac:	1ad1      	subs	r1, r2, r3
 80177ae:	460b      	mov	r3, r1
}
 80177b0:	4618      	mov	r0, r3
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bc80      	pop	{r7}
 80177b6:	4770      	bx	lr
 80177b8:	20000120 	.word	0x20000120
 80177bc:	41c64e6d 	.word	0x41c64e6d

080177c0 <srand1>:

void srand1( uint32_t seed )
{
 80177c0:	b480      	push	{r7}
 80177c2:	b083      	sub	sp, #12
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
    next = seed;
 80177c8:	4a03      	ldr	r2, [pc, #12]	@ (80177d8 <srand1+0x18>)
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	6013      	str	r3, [r2, #0]
}
 80177ce:	bf00      	nop
 80177d0:	370c      	adds	r7, #12
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bc80      	pop	{r7}
 80177d6:	4770      	bx	lr
 80177d8:	20000120 	.word	0x20000120

080177dc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b082      	sub	sp, #8
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80177e6:	f7ff ffc9 	bl	801777c <rand1>
 80177ea:	4602      	mov	r2, r0
 80177ec:	6839      	ldr	r1, [r7, #0]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	1acb      	subs	r3, r1, r3
 80177f2:	3301      	adds	r3, #1
 80177f4:	fb92 f1f3 	sdiv	r1, r2, r3
 80177f8:	fb01 f303 	mul.w	r3, r1, r3
 80177fc:	1ad2      	subs	r2, r2, r3
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	4413      	add	r3, r2
}
 8017802:	4618      	mov	r0, r3
 8017804:	3708      	adds	r7, #8
 8017806:	46bd      	mov	sp, r7
 8017808:	bd80      	pop	{r7, pc}

0801780a <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 801780a:	b480      	push	{r7}
 801780c:	b085      	sub	sp, #20
 801780e:	af00      	add	r7, sp, #0
 8017810:	60f8      	str	r0, [r7, #12]
 8017812:	60b9      	str	r1, [r7, #8]
 8017814:	4613      	mov	r3, r2
 8017816:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8017818:	e007      	b.n	801782a <memcpy1+0x20>
    {
        *dst++ = *src++;
 801781a:	68ba      	ldr	r2, [r7, #8]
 801781c:	1c53      	adds	r3, r2, #1
 801781e:	60bb      	str	r3, [r7, #8]
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	1c59      	adds	r1, r3, #1
 8017824:	60f9      	str	r1, [r7, #12]
 8017826:	7812      	ldrb	r2, [r2, #0]
 8017828:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801782a:	88fb      	ldrh	r3, [r7, #6]
 801782c:	1e5a      	subs	r2, r3, #1
 801782e:	80fa      	strh	r2, [r7, #6]
 8017830:	2b00      	cmp	r3, #0
 8017832:	d1f2      	bne.n	801781a <memcpy1+0x10>
    }
}
 8017834:	bf00      	nop
 8017836:	bf00      	nop
 8017838:	3714      	adds	r7, #20
 801783a:	46bd      	mov	sp, r7
 801783c:	bc80      	pop	{r7}
 801783e:	4770      	bx	lr

08017840 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8017840:	b480      	push	{r7}
 8017842:	b085      	sub	sp, #20
 8017844:	af00      	add	r7, sp, #0
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	4613      	mov	r3, r2
 801784c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 801784e:	88fb      	ldrh	r3, [r7, #6]
 8017850:	3b01      	subs	r3, #1
 8017852:	68fa      	ldr	r2, [r7, #12]
 8017854:	4413      	add	r3, r2
 8017856:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8017858:	e007      	b.n	801786a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 801785a:	68ba      	ldr	r2, [r7, #8]
 801785c:	1c53      	adds	r3, r2, #1
 801785e:	60bb      	str	r3, [r7, #8]
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	1e59      	subs	r1, r3, #1
 8017864:	60f9      	str	r1, [r7, #12]
 8017866:	7812      	ldrb	r2, [r2, #0]
 8017868:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801786a:	88fb      	ldrh	r3, [r7, #6]
 801786c:	1e5a      	subs	r2, r3, #1
 801786e:	80fa      	strh	r2, [r7, #6]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1f2      	bne.n	801785a <memcpyr+0x1a>
    }
}
 8017874:	bf00      	nop
 8017876:	bf00      	nop
 8017878:	3714      	adds	r7, #20
 801787a:	46bd      	mov	sp, r7
 801787c:	bc80      	pop	{r7}
 801787e:	4770      	bx	lr

08017880 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8017880:	b480      	push	{r7}
 8017882:	b083      	sub	sp, #12
 8017884:	af00      	add	r7, sp, #0
 8017886:	6078      	str	r0, [r7, #4]
 8017888:	460b      	mov	r3, r1
 801788a:	70fb      	strb	r3, [r7, #3]
 801788c:	4613      	mov	r3, r2
 801788e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8017890:	e004      	b.n	801789c <memset1+0x1c>
    {
        *dst++ = value;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	1c5a      	adds	r2, r3, #1
 8017896:	607a      	str	r2, [r7, #4]
 8017898:	78fa      	ldrb	r2, [r7, #3]
 801789a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 801789c:	883b      	ldrh	r3, [r7, #0]
 801789e:	1e5a      	subs	r2, r3, #1
 80178a0:	803a      	strh	r2, [r7, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1f5      	bne.n	8017892 <memset1+0x12>
    }
}
 80178a6:	bf00      	nop
 80178a8:	bf00      	nop
 80178aa:	370c      	adds	r7, #12
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bc80      	pop	{r7}
 80178b0:	4770      	bx	lr
	...

080178b4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 80178b4:	b480      	push	{r7}
 80178b6:	b085      	sub	sp, #20
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
 80178bc:	460b      	mov	r3, r1
 80178be:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 80178c0:	f04f 33ff 	mov.w	r3, #4294967295
 80178c4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d101      	bne.n	80178d0 <Crc32+0x1c>
    {
        return 0;
 80178cc:	2300      	movs	r3, #0
 80178ce:	e026      	b.n	801791e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 80178d0:	2300      	movs	r3, #0
 80178d2:	817b      	strh	r3, [r7, #10]
 80178d4:	e01d      	b.n	8017912 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 80178d6:	897b      	ldrh	r3, [r7, #10]
 80178d8:	687a      	ldr	r2, [r7, #4]
 80178da:	4413      	add	r3, r2
 80178dc:	781b      	ldrb	r3, [r3, #0]
 80178de:	461a      	mov	r2, r3
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	4053      	eors	r3, r2
 80178e4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 80178e6:	2300      	movs	r3, #0
 80178e8:	813b      	strh	r3, [r7, #8]
 80178ea:	e00c      	b.n	8017906 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	085a      	lsrs	r2, r3, #1
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	f003 0301 	and.w	r3, r3, #1
 80178f6:	425b      	negs	r3, r3
 80178f8:	490b      	ldr	r1, [pc, #44]	@ (8017928 <Crc32+0x74>)
 80178fa:	400b      	ands	r3, r1
 80178fc:	4053      	eors	r3, r2
 80178fe:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8017900:	893b      	ldrh	r3, [r7, #8]
 8017902:	3301      	adds	r3, #1
 8017904:	813b      	strh	r3, [r7, #8]
 8017906:	893b      	ldrh	r3, [r7, #8]
 8017908:	2b07      	cmp	r3, #7
 801790a:	d9ef      	bls.n	80178ec <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 801790c:	897b      	ldrh	r3, [r7, #10]
 801790e:	3301      	adds	r3, #1
 8017910:	817b      	strh	r3, [r7, #10]
 8017912:	897a      	ldrh	r2, [r7, #10]
 8017914:	887b      	ldrh	r3, [r7, #2]
 8017916:	429a      	cmp	r2, r3
 8017918:	d3dd      	bcc.n	80178d6 <Crc32+0x22>
        }
    }

    return ~crc;
 801791a:	68fb      	ldr	r3, [r7, #12]
 801791c:	43db      	mvns	r3, r3
}
 801791e:	4618      	mov	r0, r3
 8017920:	3714      	adds	r7, #20
 8017922:	46bd      	mov	sp, r7
 8017924:	bc80      	pop	{r7}
 8017926:	4770      	bx	lr
 8017928:	edb88320 	.word	0xedb88320

0801792c <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b084      	sub	sp, #16
 8017930:	af02      	add	r7, sp, #8
 8017932:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8017934:	4a24      	ldr	r2, [pc, #144]	@ (80179c8 <RadioInit+0x9c>)
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 801793a:	4b24      	ldr	r3, [pc, #144]	@ (80179cc <RadioInit+0xa0>)
 801793c:	2200      	movs	r2, #0
 801793e:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8017940:	4b22      	ldr	r3, [pc, #136]	@ (80179cc <RadioInit+0xa0>)
 8017942:	2200      	movs	r2, #0
 8017944:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8017946:	4b21      	ldr	r3, [pc, #132]	@ (80179cc <RadioInit+0xa0>)
 8017948:	2200      	movs	r2, #0
 801794a:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801794c:	4b1f      	ldr	r3, [pc, #124]	@ (80179cc <RadioInit+0xa0>)
 801794e:	2200      	movs	r2, #0
 8017950:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8017952:	481f      	ldr	r0, [pc, #124]	@ (80179d0 <RadioInit+0xa4>)
 8017954:	f001 ffc6 	bl	80198e4 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8017958:	4b1c      	ldr	r3, [pc, #112]	@ (80179cc <RadioInit+0xa0>)
 801795a:	2200      	movs	r2, #0
 801795c:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 801795e:	4b1b      	ldr	r3, [pc, #108]	@ (80179cc <RadioInit+0xa0>)
 8017960:	2200      	movs	r2, #0
 8017962:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8017964:	f002 fa5c 	bl	8019e20 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8017968:	2100      	movs	r1, #0
 801796a:	2000      	movs	r0, #0
 801796c:	f002 fe28 	bl	801a5c0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8017970:	2204      	movs	r2, #4
 8017972:	2100      	movs	r1, #0
 8017974:	2001      	movs	r0, #1
 8017976:	f002 fbeb 	bl	801a150 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801797a:	2300      	movs	r3, #0
 801797c:	2200      	movs	r2, #0
 801797e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017982:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017986:	f002 fb1b 	bl	8019fc0 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 801798a:	f000 fe99 	bl	80186c0 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801798e:	2300      	movs	r3, #0
 8017990:	9300      	str	r3, [sp, #0]
 8017992:	4b10      	ldr	r3, [pc, #64]	@ (80179d4 <RadioInit+0xa8>)
 8017994:	2200      	movs	r2, #0
 8017996:	f04f 31ff 	mov.w	r1, #4294967295
 801799a:	480f      	ldr	r0, [pc, #60]	@ (80179d8 <RadioInit+0xac>)
 801799c:	f004 f830 	bl	801ba00 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80179a0:	2300      	movs	r3, #0
 80179a2:	9300      	str	r3, [sp, #0]
 80179a4:	4b0d      	ldr	r3, [pc, #52]	@ (80179dc <RadioInit+0xb0>)
 80179a6:	2200      	movs	r2, #0
 80179a8:	f04f 31ff 	mov.w	r1, #4294967295
 80179ac:	480c      	ldr	r0, [pc, #48]	@ (80179e0 <RadioInit+0xb4>)
 80179ae:	f004 f827 	bl	801ba00 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80179b2:	4809      	ldr	r0, [pc, #36]	@ (80179d8 <RadioInit+0xac>)
 80179b4:	f004 f8c8 	bl	801bb48 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80179b8:	4809      	ldr	r0, [pc, #36]	@ (80179e0 <RadioInit+0xb4>)
 80179ba:	f004 f8c5 	bl	801bb48 <UTIL_TIMER_Stop>
}
 80179be:	bf00      	nop
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}
 80179c6:	bf00      	nop
 80179c8:	20001b48 	.word	0x20001b48
 80179cc:	20001b4c 	.word	0x20001b4c
 80179d0:	08018ab5 	.word	0x08018ab5
 80179d4:	08018a3d 	.word	0x08018a3d
 80179d8:	20001ba8 	.word	0x20001ba8
 80179dc:	08018a51 	.word	0x08018a51
 80179e0:	20001bc0 	.word	0x20001bc0

080179e4 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 80179e4:	b580      	push	{r7, lr}
 80179e6:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 80179e8:	f001 ffc4 	bl	8019974 <SUBGRF_GetOperatingMode>
 80179ec:	4603      	mov	r3, r0
 80179ee:	2b07      	cmp	r3, #7
 80179f0:	d00a      	beq.n	8017a08 <RadioGetStatus+0x24>
 80179f2:	2b07      	cmp	r3, #7
 80179f4:	dc0a      	bgt.n	8017a0c <RadioGetStatus+0x28>
 80179f6:	2b04      	cmp	r3, #4
 80179f8:	d002      	beq.n	8017a00 <RadioGetStatus+0x1c>
 80179fa:	2b05      	cmp	r3, #5
 80179fc:	d002      	beq.n	8017a04 <RadioGetStatus+0x20>
 80179fe:	e005      	b.n	8017a0c <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017a00:	2302      	movs	r3, #2
 8017a02:	e004      	b.n	8017a0e <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017a04:	2301      	movs	r3, #1
 8017a06:	e002      	b.n	8017a0e <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8017a08:	2303      	movs	r3, #3
 8017a0a:	e000      	b.n	8017a0e <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017a0c:	2300      	movs	r3, #0
    }
}
 8017a0e:	4618      	mov	r0, r3
 8017a10:	bd80      	pop	{r7, pc}
	...

08017a14 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017a14:	b580      	push	{r7, lr}
 8017a16:	b082      	sub	sp, #8
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017a1e:	4a2a      	ldr	r2, [pc, #168]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a20:	79fb      	ldrb	r3, [r7, #7]
 8017a22:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017a24:	79fb      	ldrb	r3, [r7, #7]
 8017a26:	4618      	mov	r0, r3
 8017a28:	f003 f99d 	bl	801ad66 <RFW_SetRadioModem>
    switch( modem )
 8017a2c:	79fb      	ldrb	r3, [r7, #7]
 8017a2e:	2b05      	cmp	r3, #5
 8017a30:	d80e      	bhi.n	8017a50 <RadioSetModem+0x3c>
 8017a32:	a201      	add	r2, pc, #4	@ (adr r2, 8017a38 <RadioSetModem+0x24>)
 8017a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a38:	08017a5f 	.word	0x08017a5f
 8017a3c:	08017a6d 	.word	0x08017a6d
 8017a40:	08017a51 	.word	0x08017a51
 8017a44:	08017a93 	.word	0x08017a93
 8017a48:	08017aa1 	.word	0x08017aa1
 8017a4c:	08017aaf 	.word	0x08017aaf
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017a50:	2003      	movs	r0, #3
 8017a52:	f002 fb57 	bl	801a104 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a56:	4b1c      	ldr	r3, [pc, #112]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a58:	2200      	movs	r2, #0
 8017a5a:	735a      	strb	r2, [r3, #13]
        break;
 8017a5c:	e02f      	b.n	8017abe <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017a5e:	2000      	movs	r0, #0
 8017a60:	f002 fb50 	bl	801a104 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a64:	4b18      	ldr	r3, [pc, #96]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a66:	2200      	movs	r2, #0
 8017a68:	735a      	strb	r2, [r3, #13]
        break;
 8017a6a:	e028      	b.n	8017abe <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8017a6c:	2001      	movs	r0, #1
 8017a6e:	f002 fb49 	bl	801a104 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017a72:	4b15      	ldr	r3, [pc, #84]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a74:	7b5a      	ldrb	r2, [r3, #13]
 8017a76:	4b14      	ldr	r3, [pc, #80]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a78:	7b1b      	ldrb	r3, [r3, #12]
 8017a7a:	429a      	cmp	r2, r3
 8017a7c:	d01e      	beq.n	8017abc <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017a7e:	4b12      	ldr	r3, [pc, #72]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a80:	7b1a      	ldrb	r2, [r3, #12]
 8017a82:	4b11      	ldr	r3, [pc, #68]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a84:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017a86:	4b10      	ldr	r3, [pc, #64]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a88:	7b5b      	ldrb	r3, [r3, #13]
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	f000 ffa0 	bl	80189d0 <RadioSetPublicNetwork>
        }
        break;
 8017a90:	e014      	b.n	8017abc <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017a92:	2002      	movs	r0, #2
 8017a94:	f002 fb36 	bl	801a104 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017a98:	4b0b      	ldr	r3, [pc, #44]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	735a      	strb	r2, [r3, #13]
        break;
 8017a9e:	e00e      	b.n	8017abe <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8017aa0:	2002      	movs	r0, #2
 8017aa2:	f002 fb2f 	bl	801a104 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017aa6:	4b08      	ldr	r3, [pc, #32]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017aa8:	2200      	movs	r2, #0
 8017aaa:	735a      	strb	r2, [r3, #13]
        break;
 8017aac:	e007      	b.n	8017abe <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017aae:	2000      	movs	r0, #0
 8017ab0:	f002 fb28 	bl	801a104 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017ab4:	4b04      	ldr	r3, [pc, #16]	@ (8017ac8 <RadioSetModem+0xb4>)
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	735a      	strb	r2, [r3, #13]
        break;
 8017aba:	e000      	b.n	8017abe <RadioSetModem+0xaa>
        break;
 8017abc:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8017abe:	bf00      	nop
 8017ac0:	3708      	adds	r7, #8
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	bd80      	pop	{r7, pc}
 8017ac6:	bf00      	nop
 8017ac8:	20001b4c 	.word	0x20001b4c

08017acc <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8017ad4:	6878      	ldr	r0, [r7, #4]
 8017ad6:	f002 facf 	bl	801a078 <SUBGRF_SetRfFrequency>
}
 8017ada:	bf00      	nop
 8017adc:	3708      	adds	r7, #8
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	bd80      	pop	{r7, pc}

08017ae2 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8017ae2:	b580      	push	{r7, lr}
 8017ae4:	b090      	sub	sp, #64	@ 0x40
 8017ae6:	af0a      	add	r7, sp, #40	@ 0x28
 8017ae8:	60f8      	str	r0, [r7, #12]
 8017aea:	60b9      	str	r1, [r7, #8]
 8017aec:	603b      	str	r3, [r7, #0]
 8017aee:	4613      	mov	r3, r2
 8017af0:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8017af2:	2301      	movs	r3, #1
 8017af4:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8017af6:	2300      	movs	r3, #0
 8017af8:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8017afa:	2300      	movs	r3, #0
 8017afc:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8017afe:	f000 fdf2 	bl	80186e6 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8017b02:	2000      	movs	r0, #0
 8017b04:	f7ff ff86 	bl	8017a14 <RadioSetModem>

    RadioSetChannel( freq );
 8017b08:	68f8      	ldr	r0, [r7, #12]
 8017b0a:	f7ff ffdf 	bl	8017acc <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017b0e:	2301      	movs	r3, #1
 8017b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b12:	2300      	movs	r3, #0
 8017b14:	9308      	str	r3, [sp, #32]
 8017b16:	2300      	movs	r3, #0
 8017b18:	9307      	str	r3, [sp, #28]
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	9306      	str	r3, [sp, #24]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	9305      	str	r3, [sp, #20]
 8017b22:	2300      	movs	r3, #0
 8017b24:	9304      	str	r3, [sp, #16]
 8017b26:	2300      	movs	r3, #0
 8017b28:	9303      	str	r3, [sp, #12]
 8017b2a:	2300      	movs	r3, #0
 8017b2c:	9302      	str	r3, [sp, #8]
 8017b2e:	2303      	movs	r3, #3
 8017b30:	9301      	str	r3, [sp, #4]
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	9300      	str	r3, [sp, #0]
 8017b36:	2300      	movs	r3, #0
 8017b38:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017b3c:	68b9      	ldr	r1, [r7, #8]
 8017b3e:	2000      	movs	r0, #0
 8017b40:	f000 f83c 	bl	8017bbc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017b44:	2000      	movs	r0, #0
 8017b46:	f000 fdd5 	bl	80186f4 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8017b4a:	f000 ff6f 	bl	8018a2c <RadioGetWakeupTime>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	4618      	mov	r0, r3
 8017b52:	f7ea f86f 	bl	8001c34 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8017b56:	f004 f911 	bl	801bd7c <UTIL_TIMER_GetCurrentTime>
 8017b5a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017b5c:	e00d      	b.n	8017b7a <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017b5e:	2000      	movs	r0, #0
 8017b60:	f000 feb6 	bl	80188d0 <RadioRssi>
 8017b64:	4603      	mov	r3, r0
 8017b66:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8017b68:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017b6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	dd02      	ble.n	8017b7a <RadioIsChannelFree+0x98>
        {
            status = false;
 8017b74:	2300      	movs	r3, #0
 8017b76:	75fb      	strb	r3, [r7, #23]
            break;
 8017b78:	e006      	b.n	8017b88 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017b7a:	6938      	ldr	r0, [r7, #16]
 8017b7c:	f004 f910 	bl	801bda0 <UTIL_TIMER_GetElapsedTime>
 8017b80:	4602      	mov	r2, r0
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d8ea      	bhi.n	8017b5e <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8017b88:	f000 fdad 	bl	80186e6 <RadioStandby>

    return status;
 8017b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b8e:	4618      	mov	r0, r3
 8017b90:	3718      	adds	r7, #24
 8017b92:	46bd      	mov	sp, r7
 8017b94:	bd80      	pop	{r7, pc}

08017b96 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8017b96:	b580      	push	{r7, lr}
 8017b98:	b082      	sub	sp, #8
 8017b9a:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017b9c:	2300      	movs	r3, #0
 8017b9e:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	2100      	movs	r1, #0
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	f002 fa0a 	bl	8019fc0 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8017bac:	f001 ffb3 	bl	8019b16 <SUBGRF_GetRandom>
 8017bb0:	6078      	str	r0, [r7, #4]

    return rnd;
 8017bb2:	687b      	ldr	r3, [r7, #4]
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b08a      	sub	sp, #40	@ 0x28
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	60b9      	str	r1, [r7, #8]
 8017bc4:	607a      	str	r2, [r7, #4]
 8017bc6:	461a      	mov	r2, r3
 8017bc8:	4603      	mov	r3, r0
 8017bca:	73fb      	strb	r3, [r7, #15]
 8017bcc:	4613      	mov	r3, r2
 8017bce:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8017bd0:	4ab9      	ldr	r2, [pc, #740]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017bd2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017bd6:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8017bd8:	f003 f883 	bl	801ace2 <RFW_DeInit>
    if( rxContinuous == true )
 8017bdc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d001      	beq.n	8017be8 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8017be4:	2300      	movs	r3, #0
 8017be6:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8017be8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017bec:	2b00      	cmp	r3, #0
 8017bee:	d004      	beq.n	8017bfa <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8017bf0:	4ab2      	ldr	r2, [pc, #712]	@ (8017ebc <RadioSetRxConfig+0x300>)
 8017bf2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8017bf6:	7013      	strb	r3, [r2, #0]
 8017bf8:	e002      	b.n	8017c00 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8017bfa:	4bb0      	ldr	r3, [pc, #704]	@ (8017ebc <RadioSetRxConfig+0x300>)
 8017bfc:	22ff      	movs	r2, #255	@ 0xff
 8017bfe:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8017c00:	7bfb      	ldrb	r3, [r7, #15]
 8017c02:	2b05      	cmp	r3, #5
 8017c04:	d009      	beq.n	8017c1a <RadioSetRxConfig+0x5e>
 8017c06:	2b05      	cmp	r3, #5
 8017c08:	f300 81d7 	bgt.w	8017fba <RadioSetRxConfig+0x3fe>
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f000 80bf 	beq.w	8017d90 <RadioSetRxConfig+0x1d4>
 8017c12:	2b01      	cmp	r3, #1
 8017c14:	f000 8124 	beq.w	8017e60 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8017c18:	e1cf      	b.n	8017fba <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8017c1a:	2001      	movs	r0, #1
 8017c1c:	f002 f8c2 	bl	8019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017c20:	4ba5      	ldr	r3, [pc, #660]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c22:	2200      	movs	r2, #0
 8017c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017c28:	4aa3      	ldr	r2, [pc, #652]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8017c2e:	4ba2      	ldr	r3, [pc, #648]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c30:	2209      	movs	r2, #9
 8017c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8017c36:	4ba0      	ldr	r3, [pc, #640]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c38:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8017c3c:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017c3e:	68b8      	ldr	r0, [r7, #8]
 8017c40:	f002 ff82 	bl	801ab48 <SUBGRF_GetFskBandwidthRegValue>
 8017c44:	4603      	mov	r3, r0
 8017c46:	461a      	mov	r2, r3
 8017c48:	4b9b      	ldr	r3, [pc, #620]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017c4e:	4b9a      	ldr	r3, [pc, #616]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c50:	2200      	movs	r2, #0
 8017c52:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017c54:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017c56:	00db      	lsls	r3, r3, #3
 8017c58:	b29a      	uxth	r2, r3
 8017c5a:	4b97      	ldr	r3, [pc, #604]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c5c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8017c5e:	4b96      	ldr	r3, [pc, #600]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c60:	2200      	movs	r2, #0
 8017c62:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8017c64:	4b94      	ldr	r3, [pc, #592]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c66:	2210      	movs	r2, #16
 8017c68:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017c6a:	4b93      	ldr	r3, [pc, #588]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8017c70:	4b91      	ldr	r3, [pc, #580]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017c76:	4b91      	ldr	r3, [pc, #580]	@ (8017ebc <RadioSetRxConfig+0x300>)
 8017c78:	781a      	ldrb	r2, [r3, #0]
 8017c7a:	4b8f      	ldr	r3, [pc, #572]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c7c:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c80:	2201      	movs	r2, #1
 8017c82:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8017c84:	4b8c      	ldr	r3, [pc, #560]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017c86:	2200      	movs	r2, #0
 8017c88:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8017c8a:	2005      	movs	r0, #5
 8017c8c:	f7ff fec2 	bl	8017a14 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017c90:	488b      	ldr	r0, [pc, #556]	@ (8017ec0 <RadioSetRxConfig+0x304>)
 8017c92:	f002 fb2b 	bl	801a2ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017c96:	488b      	ldr	r0, [pc, #556]	@ (8017ec4 <RadioSetRxConfig+0x308>)
 8017c98:	f002 fbf6 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017c9c:	4a8a      	ldr	r2, [pc, #552]	@ (8017ec8 <RadioSetRxConfig+0x30c>)
 8017c9e:	f107 031c 	add.w	r3, r7, #28
 8017ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017ca6:	e883 0003 	stmia.w	r3, {r0, r1}
 8017caa:	f107 031c 	add.w	r3, r7, #28
 8017cae:	4618      	mov	r0, r3
 8017cb0:	f001 feaf 	bl	8019a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017cb4:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017cb8:	f001 fefa 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8017cbc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017cc0:	f000 fe24 	bl	801890c <RadioRead>
 8017cc4:	4603      	mov	r3, r0
 8017cc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8017cca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cce:	f023 0310 	bic.w	r3, r3, #16
 8017cd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8017cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017cda:	4619      	mov	r1, r3
 8017cdc:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8017ce0:	f000 fe02 	bl	80188e8 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8017ce4:	2104      	movs	r1, #4
 8017ce6:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8017cea:	f000 fdfd 	bl	80188e8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8017cee:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017cf2:	f000 fe0b 	bl	801890c <RadioRead>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d00:	f023 031c 	bic.w	r3, r3, #28
 8017d04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8017d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d0c:	f043 0308 	orr.w	r3, r3, #8
 8017d10:	b2db      	uxtb	r3, r3
 8017d12:	4619      	mov	r1, r3
 8017d14:	f640 009b 	movw	r0, #2203	@ 0x89b
 8017d18:	f000 fde6 	bl	80188e8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8017d1c:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017d20:	f000 fdf4 	bl	801890c <RadioRead>
 8017d24:	4603      	mov	r3, r0
 8017d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8017d2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d2e:	f023 0318 	bic.w	r3, r3, #24
 8017d32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8017d36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d3a:	f043 0318 	orr.w	r3, r3, #24
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	4619      	mov	r1, r3
 8017d42:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8017d46:	f000 fdcf 	bl	80188e8 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8017d4a:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017d4e:	f000 fddd 	bl	801890c <RadioRead>
 8017d52:	4603      	mov	r3, r0
 8017d54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8017d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8017d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8017d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017d68:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8017d6c:	b2db      	uxtb	r3, r3
 8017d6e:	4619      	mov	r1, r3
 8017d70:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8017d74:	f000 fdb8 	bl	80188e8 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017d78:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017d7a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017d7e:	fb02 f303 	mul.w	r3, r2, r3
 8017d82:	461a      	mov	r2, r3
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8017d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017d8c:	6093      	str	r3, [r2, #8]
            break;
 8017d8e:	e115      	b.n	8017fbc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017d90:	2000      	movs	r0, #0
 8017d92:	f002 f807 	bl	8019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017d96:	4b48      	ldr	r3, [pc, #288]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017d98:	2200      	movs	r2, #0
 8017d9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017d9e:	4a46      	ldr	r2, [pc, #280]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017da4:	4b44      	ldr	r3, [pc, #272]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017da6:	220b      	movs	r2, #11
 8017da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017dac:	68b8      	ldr	r0, [r7, #8]
 8017dae:	f002 fecb 	bl	801ab48 <SUBGRF_GetFskBandwidthRegValue>
 8017db2:	4603      	mov	r3, r0
 8017db4:	461a      	mov	r2, r3
 8017db6:	4b40      	ldr	r3, [pc, #256]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017db8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017dc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017dc4:	00db      	lsls	r3, r3, #3
 8017dc6:	b29a      	uxth	r2, r3
 8017dc8:	4b3b      	ldr	r3, [pc, #236]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dca:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dce:	2204      	movs	r2, #4
 8017dd0:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017dd2:	4b39      	ldr	r3, [pc, #228]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dd4:	2218      	movs	r2, #24
 8017dd6:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017dd8:	4b37      	ldr	r3, [pc, #220]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dda:	2200      	movs	r2, #0
 8017ddc:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017dde:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017de2:	f083 0301 	eor.w	r3, r3, #1
 8017de6:	b2db      	uxtb	r3, r3
 8017de8:	461a      	mov	r2, r3
 8017dea:	4b33      	ldr	r3, [pc, #204]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017dec:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017dee:	4b33      	ldr	r3, [pc, #204]	@ (8017ebc <RadioSetRxConfig+0x300>)
 8017df0:	781a      	ldrb	r2, [r3, #0]
 8017df2:	4b31      	ldr	r3, [pc, #196]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017df4:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017df6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d003      	beq.n	8017e06 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017dfe:	4b2e      	ldr	r3, [pc, #184]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e00:	22f2      	movs	r2, #242	@ 0xf2
 8017e02:	75da      	strb	r2, [r3, #23]
 8017e04:	e002      	b.n	8017e0c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017e06:	4b2c      	ldr	r3, [pc, #176]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e08:	2201      	movs	r2, #1
 8017e0a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e0e:	2201      	movs	r2, #1
 8017e10:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017e12:	f000 fc68 	bl	80186e6 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017e16:	2000      	movs	r0, #0
 8017e18:	f7ff fdfc 	bl	8017a14 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017e1c:	4828      	ldr	r0, [pc, #160]	@ (8017ec0 <RadioSetRxConfig+0x304>)
 8017e1e:	f002 fa65 	bl	801a2ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017e22:	4828      	ldr	r0, [pc, #160]	@ (8017ec4 <RadioSetRxConfig+0x308>)
 8017e24:	f002 fb30 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017e28:	4a28      	ldr	r2, [pc, #160]	@ (8017ecc <RadioSetRxConfig+0x310>)
 8017e2a:	f107 0314 	add.w	r3, r7, #20
 8017e2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017e32:	e883 0003 	stmia.w	r3, {r0, r1}
 8017e36:	f107 0314 	add.w	r3, r7, #20
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	f001 fde9 	bl	8019a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017e40:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017e44:	f001 fe34 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8017e48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017e4a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8017e4e:	fb02 f303 	mul.w	r3, r2, r3
 8017e52:	461a      	mov	r2, r3
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8017e5a:	4a17      	ldr	r2, [pc, #92]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e5c:	6093      	str	r3, [r2, #8]
            break;
 8017e5e:	e0ad      	b.n	8017fbc <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017e60:	2000      	movs	r0, #0
 8017e62:	f001 ff9f 	bl	8019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017e66:	4b14      	ldr	r3, [pc, #80]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e68:	2201      	movs	r2, #1
 8017e6a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	b2da      	uxtb	r2, r3
 8017e72:	4b11      	ldr	r3, [pc, #68]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8017e78:	4a15      	ldr	r2, [pc, #84]	@ (8017ed0 <RadioSetRxConfig+0x314>)
 8017e7a:	68bb      	ldr	r3, [r7, #8]
 8017e7c:	4413      	add	r3, r2
 8017e7e:	781a      	ldrb	r2, [r3, #0]
 8017e80:	4b0d      	ldr	r3, [pc, #52]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8017e86:	4a0c      	ldr	r2, [pc, #48]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017e88:	7bbb      	ldrb	r3, [r7, #14]
 8017e8a:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017e8e:	68bb      	ldr	r3, [r7, #8]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d105      	bne.n	8017ea0 <RadioSetRxConfig+0x2e4>
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	2b0b      	cmp	r3, #11
 8017e98:	d008      	beq.n	8017eac <RadioSetRxConfig+0x2f0>
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	2b0c      	cmp	r3, #12
 8017e9e:	d005      	beq.n	8017eac <RadioSetRxConfig+0x2f0>
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	2b01      	cmp	r3, #1
 8017ea4:	d116      	bne.n	8017ed4 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	2b0c      	cmp	r3, #12
 8017eaa:	d113      	bne.n	8017ed4 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017eac:	4b02      	ldr	r3, [pc, #8]	@ (8017eb8 <RadioSetRxConfig+0x2fc>)
 8017eae:	2201      	movs	r2, #1
 8017eb0:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017eb4:	e012      	b.n	8017edc <RadioSetRxConfig+0x320>
 8017eb6:	bf00      	nop
 8017eb8:	20001b4c 	.word	0x20001b4c
 8017ebc:	20000124 	.word	0x20000124
 8017ec0:	20001b84 	.word	0x20001b84
 8017ec4:	20001b5a 	.word	0x20001b5a
 8017ec8:	0801c9c8 	.word	0x0801c9c8
 8017ecc:	0801c9d0 	.word	0x0801c9d0
 8017ed0:	0801d0a8 	.word	0x0801d0a8
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017ed6:	2200      	movs	r2, #0
 8017ed8:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017edc:	4b39      	ldr	r3, [pc, #228]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017ede:	2201      	movs	r2, #1
 8017ee0:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ee2:	4b38      	ldr	r3, [pc, #224]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017ee8:	2b05      	cmp	r3, #5
 8017eea:	d004      	beq.n	8017ef6 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017eec:	4b35      	ldr	r3, [pc, #212]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017eee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017ef2:	2b06      	cmp	r3, #6
 8017ef4:	d10a      	bne.n	8017f0c <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 8017ef6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017ef8:	2b0b      	cmp	r3, #11
 8017efa:	d803      	bhi.n	8017f04 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017efc:	4b31      	ldr	r3, [pc, #196]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017efe:	220c      	movs	r2, #12
 8017f00:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017f02:	e006      	b.n	8017f12 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017f04:	4a2f      	ldr	r2, [pc, #188]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f06:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017f08:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017f0a:	e002      	b.n	8017f12 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f0e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017f10:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017f12:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017f16:	4b2b      	ldr	r3, [pc, #172]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f18:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8017fc8 <RadioSetRxConfig+0x40c>)
 8017f1c:	781a      	ldrb	r2, [r3, #0]
 8017f1e:	4b29      	ldr	r3, [pc, #164]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f20:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017f22:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8017f26:	4b27      	ldr	r3, [pc, #156]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f28:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017f2c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017f30:	4b24      	ldr	r3, [pc, #144]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017f36:	f000 fbd6 	bl	80186e6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017f3a:	2001      	movs	r0, #1
 8017f3c:	f7ff fd6a 	bl	8017a14 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017f40:	4822      	ldr	r0, [pc, #136]	@ (8017fcc <RadioSetRxConfig+0x410>)
 8017f42:	f002 f9d3 	bl	801a2ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017f46:	4822      	ldr	r0, [pc, #136]	@ (8017fd0 <RadioSetRxConfig+0x414>)
 8017f48:	f002 fa9e 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8017f4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017f4e:	b2db      	uxtb	r3, r3
 8017f50:	4618      	mov	r0, r3
 8017f52:	f001 ff36 	bl	8019dc2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017f56:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017f5a:	f002 fbef 	bl	801a73c <SUBGRF_ReadRegister>
 8017f5e:	4603      	mov	r3, r0
 8017f60:	f003 0301 	and.w	r3, r3, #1
 8017f64:	b2db      	uxtb	r3, r3
 8017f66:	4619      	mov	r1, r3
 8017f68:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017f6c:	f002 fbd2 	bl	801a714 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8017f70:	4b14      	ldr	r3, [pc, #80]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017f72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017f76:	2b01      	cmp	r3, #1
 8017f78:	d10d      	bne.n	8017f96 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017f7a:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f7e:	f002 fbdd 	bl	801a73c <SUBGRF_ReadRegister>
 8017f82:	4603      	mov	r3, r0
 8017f84:	f023 0304 	bic.w	r3, r3, #4
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	4619      	mov	r1, r3
 8017f8c:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f90:	f002 fbc0 	bl	801a714 <SUBGRF_WriteRegister>
 8017f94:	e00c      	b.n	8017fb0 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017f96:	f240 7036 	movw	r0, #1846	@ 0x736
 8017f9a:	f002 fbcf 	bl	801a73c <SUBGRF_ReadRegister>
 8017f9e:	4603      	mov	r3, r0
 8017fa0:	f043 0304 	orr.w	r3, r3, #4
 8017fa4:	b2db      	uxtb	r3, r3
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	f240 7036 	movw	r0, #1846	@ 0x736
 8017fac:	f002 fbb2 	bl	801a714 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017fb0:	4b04      	ldr	r3, [pc, #16]	@ (8017fc4 <RadioSetRxConfig+0x408>)
 8017fb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017fb6:	609a      	str	r2, [r3, #8]
            break;
 8017fb8:	e000      	b.n	8017fbc <RadioSetRxConfig+0x400>
            break;
 8017fba:	bf00      	nop
    }
}
 8017fbc:	bf00      	nop
 8017fbe:	3728      	adds	r7, #40	@ 0x28
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}
 8017fc4:	20001b4c 	.word	0x20001b4c
 8017fc8:	20000124 	.word	0x20000124
 8017fcc:	20001b84 	.word	0x20001b84
 8017fd0:	20001b5a 	.word	0x20001b5a

08017fd4 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b086      	sub	sp, #24
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	60ba      	str	r2, [r7, #8]
 8017fdc:	607b      	str	r3, [r7, #4]
 8017fde:	4603      	mov	r3, r0
 8017fe0:	73fb      	strb	r3, [r7, #15]
 8017fe2:	460b      	mov	r3, r1
 8017fe4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017fe6:	f002 fe7c 	bl	801ace2 <RFW_DeInit>
    switch( modem )
 8017fea:	7bfb      	ldrb	r3, [r7, #15]
 8017fec:	2b04      	cmp	r3, #4
 8017fee:	f000 80c7 	beq.w	8018180 <RadioSetTxConfig+0x1ac>
 8017ff2:	2b04      	cmp	r3, #4
 8017ff4:	f300 80d6 	bgt.w	80181a4 <RadioSetTxConfig+0x1d0>
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d002      	beq.n	8018002 <RadioSetTxConfig+0x2e>
 8017ffc:	2b01      	cmp	r3, #1
 8017ffe:	d059      	beq.n	80180b4 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8018000:	e0d0      	b.n	80181a4 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018002:	4b77      	ldr	r3, [pc, #476]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018004:	2200      	movs	r2, #0
 8018006:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801800a:	4a75      	ldr	r2, [pc, #468]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801800c:	6a3b      	ldr	r3, [r7, #32]
 801800e:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8018010:	4b73      	ldr	r3, [pc, #460]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018012:	220b      	movs	r2, #11
 8018014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8018018:	6878      	ldr	r0, [r7, #4]
 801801a:	f002 fd95 	bl	801ab48 <SUBGRF_GetFskBandwidthRegValue>
 801801e:	4603      	mov	r3, r0
 8018020:	461a      	mov	r2, r3
 8018022:	4b6f      	ldr	r3, [pc, #444]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8018028:	4a6d      	ldr	r2, [pc, #436]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801802a:	68bb      	ldr	r3, [r7, #8]
 801802c:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801802e:	4b6c      	ldr	r3, [pc, #432]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018030:	2200      	movs	r2, #0
 8018032:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8018034:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018036:	00db      	lsls	r3, r3, #3
 8018038:	b29a      	uxth	r2, r3
 801803a:	4b69      	ldr	r3, [pc, #420]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801803c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801803e:	4b68      	ldr	r3, [pc, #416]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018040:	2204      	movs	r2, #4
 8018042:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8018044:	4b66      	ldr	r3, [pc, #408]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018046:	2218      	movs	r2, #24
 8018048:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801804a:	4b65      	ldr	r3, [pc, #404]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801804c:	2200      	movs	r2, #0
 801804e:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8018050:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018054:	f083 0301 	eor.w	r3, r3, #1
 8018058:	b2db      	uxtb	r3, r3
 801805a:	461a      	mov	r2, r3
 801805c:	4b60      	ldr	r3, [pc, #384]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801805e:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8018060:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8018064:	2b00      	cmp	r3, #0
 8018066:	d003      	beq.n	8018070 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8018068:	4b5d      	ldr	r3, [pc, #372]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801806a:	22f2      	movs	r2, #242	@ 0xf2
 801806c:	75da      	strb	r2, [r3, #23]
 801806e:	e002      	b.n	8018076 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8018070:	4b5b      	ldr	r3, [pc, #364]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018072:	2201      	movs	r2, #1
 8018074:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8018076:	4b5a      	ldr	r3, [pc, #360]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018078:	2201      	movs	r2, #1
 801807a:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801807c:	f000 fb33 	bl	80186e6 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8018080:	2000      	movs	r0, #0
 8018082:	f7ff fcc7 	bl	8017a14 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018086:	4857      	ldr	r0, [pc, #348]	@ (80181e4 <RadioSetTxConfig+0x210>)
 8018088:	f002 f930 	bl	801a2ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801808c:	4856      	ldr	r0, [pc, #344]	@ (80181e8 <RadioSetTxConfig+0x214>)
 801808e:	f002 f9fb 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8018092:	4a56      	ldr	r2, [pc, #344]	@ (80181ec <RadioSetTxConfig+0x218>)
 8018094:	f107 0310 	add.w	r3, r7, #16
 8018098:	e892 0003 	ldmia.w	r2, {r0, r1}
 801809c:	e883 0003 	stmia.w	r3, {r0, r1}
 80180a0:	f107 0310 	add.w	r3, r7, #16
 80180a4:	4618      	mov	r0, r3
 80180a6:	f001 fcb4 	bl	8019a12 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80180aa:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80180ae:	f001 fcff 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
            break;
 80180b2:	e078      	b.n	80181a6 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80180b4:	4b4a      	ldr	r3, [pc, #296]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80180b6:	2201      	movs	r2, #1
 80180b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80180bc:	6a3b      	ldr	r3, [r7, #32]
 80180be:	b2da      	uxtb	r2, r3
 80180c0:	4b47      	ldr	r3, [pc, #284]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80180c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80180c6:	4a4a      	ldr	r2, [pc, #296]	@ (80181f0 <RadioSetTxConfig+0x21c>)
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	4413      	add	r3, r2
 80180cc:	781a      	ldrb	r2, [r3, #0]
 80180ce:	4b44      	ldr	r3, [pc, #272]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80180d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80180d4:	4a42      	ldr	r2, [pc, #264]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80180d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80180da:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	2b00      	cmp	r3, #0
 80180e2:	d105      	bne.n	80180f0 <RadioSetTxConfig+0x11c>
 80180e4:	6a3b      	ldr	r3, [r7, #32]
 80180e6:	2b0b      	cmp	r3, #11
 80180e8:	d008      	beq.n	80180fc <RadioSetTxConfig+0x128>
 80180ea:	6a3b      	ldr	r3, [r7, #32]
 80180ec:	2b0c      	cmp	r3, #12
 80180ee:	d005      	beq.n	80180fc <RadioSetTxConfig+0x128>
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2b01      	cmp	r3, #1
 80180f4:	d107      	bne.n	8018106 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80180f6:	6a3b      	ldr	r3, [r7, #32]
 80180f8:	2b0c      	cmp	r3, #12
 80180fa:	d104      	bne.n	8018106 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80180fc:	4b38      	ldr	r3, [pc, #224]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80180fe:	2201      	movs	r2, #1
 8018100:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8018104:	e003      	b.n	801810e <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8018106:	4b36      	ldr	r3, [pc, #216]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018108:	2200      	movs	r2, #0
 801810a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801810e:	4b34      	ldr	r3, [pc, #208]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018110:	2201      	movs	r2, #1
 8018112:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018114:	4b32      	ldr	r3, [pc, #200]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018116:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801811a:	2b05      	cmp	r3, #5
 801811c:	d004      	beq.n	8018128 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801811e:	4b30      	ldr	r3, [pc, #192]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018120:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8018124:	2b06      	cmp	r3, #6
 8018126:	d10a      	bne.n	801813e <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8018128:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801812a:	2b0b      	cmp	r3, #11
 801812c:	d803      	bhi.n	8018136 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801812e:	4b2c      	ldr	r3, [pc, #176]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018130:	220c      	movs	r2, #12
 8018132:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8018134:	e006      	b.n	8018144 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8018136:	4a2a      	ldr	r2, [pc, #168]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018138:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801813a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801813c:	e002      	b.n	8018144 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801813e:	4a28      	ldr	r2, [pc, #160]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018140:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8018142:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8018144:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8018148:	4b25      	ldr	r3, [pc, #148]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801814a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801814c:	4b29      	ldr	r3, [pc, #164]	@ (80181f4 <RadioSetTxConfig+0x220>)
 801814e:	781a      	ldrb	r2, [r3, #0]
 8018150:	4b23      	ldr	r3, [pc, #140]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018152:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8018154:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8018158:	4b21      	ldr	r3, [pc, #132]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 801815a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801815e:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8018162:	4b1f      	ldr	r3, [pc, #124]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018164:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8018168:	f000 fabd 	bl	80186e6 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801816c:	2001      	movs	r0, #1
 801816e:	f7ff fc51 	bl	8017a14 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018172:	481c      	ldr	r0, [pc, #112]	@ (80181e4 <RadioSetTxConfig+0x210>)
 8018174:	f002 f8ba 	bl	801a2ec <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018178:	481b      	ldr	r0, [pc, #108]	@ (80181e8 <RadioSetTxConfig+0x214>)
 801817a:	f002 f985 	bl	801a488 <SUBGRF_SetPacketParams>
            break;
 801817e:	e012      	b.n	80181a6 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 8018180:	2004      	movs	r0, #4
 8018182:	f7ff fc47 	bl	8017a14 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018186:	4b16      	ldr	r3, [pc, #88]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018188:	2202      	movs	r2, #2
 801818a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801818e:	4a14      	ldr	r2, [pc, #80]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018190:	6a3b      	ldr	r3, [r7, #32]
 8018192:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018194:	4b12      	ldr	r3, [pc, #72]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 8018196:	2216      	movs	r2, #22
 8018198:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801819c:	4811      	ldr	r0, [pc, #68]	@ (80181e4 <RadioSetTxConfig+0x210>)
 801819e:	f002 f8a5 	bl	801a2ec <SUBGRF_SetModulationParams>
            break;
 80181a2:	e000      	b.n	80181a6 <RadioSetTxConfig+0x1d2>
            break;
 80181a4:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80181a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80181aa:	4618      	mov	r0, r3
 80181ac:	f002 fbce 	bl	801a94c <SUBGRF_SetRfTxPower>
 80181b0:	4603      	mov	r3, r0
 80181b2:	461a      	mov	r2, r3
 80181b4:	4b0a      	ldr	r3, [pc, #40]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80181b6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80181ba:	210e      	movs	r1, #14
 80181bc:	f640 101f 	movw	r0, #2335	@ 0x91f
 80181c0:	f002 faa8 	bl	801a714 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80181c4:	4b06      	ldr	r3, [pc, #24]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80181c6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80181ca:	4618      	mov	r0, r3
 80181cc:	f002 fd9d 	bl	801ad0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80181d0:	4a03      	ldr	r2, [pc, #12]	@ (80181e0 <RadioSetTxConfig+0x20c>)
 80181d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80181d4:	6053      	str	r3, [r2, #4]
}
 80181d6:	bf00      	nop
 80181d8:	3718      	adds	r7, #24
 80181da:	46bd      	mov	sp, r7
 80181dc:	bd80      	pop	{r7, pc}
 80181de:	bf00      	nop
 80181e0:	20001b4c 	.word	0x20001b4c
 80181e4:	20001b84 	.word	0x20001b84
 80181e8:	20001b5a 	.word	0x20001b5a
 80181ec:	0801c9d0 	.word	0x0801c9d0
 80181f0:	0801d0a8 	.word	0x0801d0a8
 80181f4:	20000124 	.word	0x20000124

080181f8 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 80181f8:	b480      	push	{r7}
 80181fa:	b083      	sub	sp, #12
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
    return true;
 8018200:	2301      	movs	r3, #1
}
 8018202:	4618      	mov	r0, r3
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	bc80      	pop	{r7}
 801820a:	4770      	bx	lr

0801820c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801820c:	b480      	push	{r7}
 801820e:	b085      	sub	sp, #20
 8018210:	af00      	add	r7, sp, #0
 8018212:	4603      	mov	r3, r0
 8018214:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8018216:	2300      	movs	r3, #0
 8018218:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801821a:	79fb      	ldrb	r3, [r7, #7]
 801821c:	2b0a      	cmp	r3, #10
 801821e:	d83e      	bhi.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
 8018220:	a201      	add	r2, pc, #4	@ (adr r2, 8018228 <RadioGetLoRaBandwidthInHz+0x1c>)
 8018222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018226:	bf00      	nop
 8018228:	08018255 	.word	0x08018255
 801822c:	08018265 	.word	0x08018265
 8018230:	08018275 	.word	0x08018275
 8018234:	08018285 	.word	0x08018285
 8018238:	0801828d 	.word	0x0801828d
 801823c:	08018293 	.word	0x08018293
 8018240:	08018299 	.word	0x08018299
 8018244:	0801829f 	.word	0x0801829f
 8018248:	0801825d 	.word	0x0801825d
 801824c:	0801826d 	.word	0x0801826d
 8018250:	0801827d 	.word	0x0801827d
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8018254:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8018258:	60fb      	str	r3, [r7, #12]
        break;
 801825a:	e020      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801825c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8018260:	60fb      	str	r3, [r7, #12]
        break;
 8018262:	e01c      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8018264:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8018268:	60fb      	str	r3, [r7, #12]
        break;
 801826a:	e018      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801826c:	f245 1361 	movw	r3, #20833	@ 0x5161
 8018270:	60fb      	str	r3, [r7, #12]
        break;
 8018272:	e014      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8018274:	f647 2312 	movw	r3, #31250	@ 0x7a12
 8018278:	60fb      	str	r3, [r7, #12]
        break;
 801827a:	e010      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801827c:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 8018280:	60fb      	str	r3, [r7, #12]
        break;
 8018282:	e00c      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8018284:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8018288:	60fb      	str	r3, [r7, #12]
        break;
 801828a:	e008      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801828c:	4b07      	ldr	r3, [pc, #28]	@ (80182ac <RadioGetLoRaBandwidthInHz+0xa0>)
 801828e:	60fb      	str	r3, [r7, #12]
        break;
 8018290:	e005      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8018292:	4b07      	ldr	r3, [pc, #28]	@ (80182b0 <RadioGetLoRaBandwidthInHz+0xa4>)
 8018294:	60fb      	str	r3, [r7, #12]
        break;
 8018296:	e002      	b.n	801829e <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8018298:	4b06      	ldr	r3, [pc, #24]	@ (80182b4 <RadioGetLoRaBandwidthInHz+0xa8>)
 801829a:	60fb      	str	r3, [r7, #12]
        break;
 801829c:	bf00      	nop
    }

    return bandwidthInHz;
 801829e:	68fb      	ldr	r3, [r7, #12]
}
 80182a0:	4618      	mov	r0, r3
 80182a2:	3714      	adds	r7, #20
 80182a4:	46bd      	mov	sp, r7
 80182a6:	bc80      	pop	{r7}
 80182a8:	4770      	bx	lr
 80182aa:	bf00      	nop
 80182ac:	0001e848 	.word	0x0001e848
 80182b0:	0003d090 	.word	0x0003d090
 80182b4:	0007a120 	.word	0x0007a120

080182b8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80182b8:	b480      	push	{r7}
 80182ba:	b083      	sub	sp, #12
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
 80182c0:	4608      	mov	r0, r1
 80182c2:	4611      	mov	r1, r2
 80182c4:	461a      	mov	r2, r3
 80182c6:	4603      	mov	r3, r0
 80182c8:	70fb      	strb	r3, [r7, #3]
 80182ca:	460b      	mov	r3, r1
 80182cc:	803b      	strh	r3, [r7, #0]
 80182ce:	4613      	mov	r3, r2
 80182d0:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80182d2:	883b      	ldrh	r3, [r7, #0]
 80182d4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80182d6:	78ba      	ldrb	r2, [r7, #2]
 80182d8:	f082 0201 	eor.w	r2, r2, #1
 80182dc:	b2d2      	uxtb	r2, r2
 80182de:	2a00      	cmp	r2, #0
 80182e0:	d001      	beq.n	80182e6 <RadioGetGfskTimeOnAirNumerator+0x2e>
 80182e2:	2208      	movs	r2, #8
 80182e4:	e000      	b.n	80182e8 <RadioGetGfskTimeOnAirNumerator+0x30>
 80182e6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80182e8:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80182ea:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80182ee:	7c3b      	ldrb	r3, [r7, #16]
 80182f0:	7d39      	ldrb	r1, [r7, #20]
 80182f2:	2900      	cmp	r1, #0
 80182f4:	d001      	beq.n	80182fa <RadioGetGfskTimeOnAirNumerator+0x42>
 80182f6:	2102      	movs	r1, #2
 80182f8:	e000      	b.n	80182fc <RadioGetGfskTimeOnAirNumerator+0x44>
 80182fa:	2100      	movs	r1, #0
 80182fc:	440b      	add	r3, r1
 80182fe:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8018300:	4413      	add	r3, r2
}
 8018302:	4618      	mov	r0, r3
 8018304:	370c      	adds	r7, #12
 8018306:	46bd      	mov	sp, r7
 8018308:	bc80      	pop	{r7}
 801830a:	4770      	bx	lr

0801830c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801830c:	b480      	push	{r7}
 801830e:	b08b      	sub	sp, #44	@ 0x2c
 8018310:	af00      	add	r7, sp, #0
 8018312:	60f8      	str	r0, [r7, #12]
 8018314:	60b9      	str	r1, [r7, #8]
 8018316:	4611      	mov	r1, r2
 8018318:	461a      	mov	r2, r3
 801831a:	460b      	mov	r3, r1
 801831c:	71fb      	strb	r3, [r7, #7]
 801831e:	4613      	mov	r3, r2
 8018320:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8018322:	79fb      	ldrb	r3, [r7, #7]
 8018324:	3304      	adds	r3, #4
 8018326:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8018328:	2300      	movs	r3, #0
 801832a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	2b05      	cmp	r3, #5
 8018332:	d002      	beq.n	801833a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	2b06      	cmp	r3, #6
 8018338:	d104      	bne.n	8018344 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801833a:	88bb      	ldrh	r3, [r7, #4]
 801833c:	2b0b      	cmp	r3, #11
 801833e:	d801      	bhi.n	8018344 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8018340:	230c      	movs	r3, #12
 8018342:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	2b00      	cmp	r3, #0
 8018348:	d105      	bne.n	8018356 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	2b0b      	cmp	r3, #11
 801834e:	d008      	beq.n	8018362 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	2b0c      	cmp	r3, #12
 8018354:	d005      	beq.n	8018362 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2b01      	cmp	r3, #1
 801835a:	d105      	bne.n	8018368 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	2b0c      	cmp	r3, #12
 8018360:	d102      	bne.n	8018368 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8018362:	2301      	movs	r3, #1
 8018364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018368:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801836c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801836e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8018372:	2a00      	cmp	r2, #0
 8018374:	d001      	beq.n	801837a <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8018376:	2210      	movs	r2, #16
 8018378:	e000      	b.n	801837c <RadioGetLoRaTimeOnAirNumerator+0x70>
 801837a:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801837c:	4413      	add	r3, r2
 801837e:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8018380:	68bb      	ldr	r3, [r7, #8]
 8018382:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8018384:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8018386:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 801838a:	2a00      	cmp	r2, #0
 801838c:	d001      	beq.n	8018392 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801838e:	2200      	movs	r2, #0
 8018390:	e000      	b.n	8018394 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8018392:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8018394:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8018396:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	2b06      	cmp	r3, #6
 801839c:	d803      	bhi.n	80183a6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801839e:	68bb      	ldr	r3, [r7, #8]
 80183a0:	009b      	lsls	r3, r3, #2
 80183a2:	623b      	str	r3, [r7, #32]
 80183a4:	e00e      	b.n	80183c4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80183a6:	69fb      	ldr	r3, [r7, #28]
 80183a8:	3308      	adds	r3, #8
 80183aa:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80183ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d004      	beq.n	80183be <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	3b02      	subs	r3, #2
 80183b8:	009b      	lsls	r3, r3, #2
 80183ba:	623b      	str	r3, [r7, #32]
 80183bc:	e002      	b.n	80183c4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	009b      	lsls	r3, r3, #2
 80183c2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80183c4:	69fb      	ldr	r3, [r7, #28]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	da01      	bge.n	80183ce <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80183ca:	2300      	movs	r3, #0
 80183cc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80183ce:	69fa      	ldr	r2, [r7, #28]
 80183d0:	6a3b      	ldr	r3, [r7, #32]
 80183d2:	4413      	add	r3, r2
 80183d4:	1e5a      	subs	r2, r3, #1
 80183d6:	6a3b      	ldr	r3, [r7, #32]
 80183d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80183dc:	697a      	ldr	r2, [r7, #20]
 80183de:	fb03 f202 	mul.w	r2, r3, r2
 80183e2:	88bb      	ldrh	r3, [r7, #4]
 80183e4:	4413      	add	r3, r2
    int32_t intermediate =
 80183e6:	330c      	adds	r3, #12
 80183e8:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 80183ea:	68bb      	ldr	r3, [r7, #8]
 80183ec:	2b06      	cmp	r3, #6
 80183ee:	d802      	bhi.n	80183f6 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80183f0:	69bb      	ldr	r3, [r7, #24]
 80183f2:	3302      	adds	r3, #2
 80183f4:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80183f6:	69bb      	ldr	r3, [r7, #24]
 80183f8:	009b      	lsls	r3, r3, #2
 80183fa:	1c5a      	adds	r2, r3, #1
 80183fc:	68bb      	ldr	r3, [r7, #8]
 80183fe:	3b02      	subs	r3, #2
 8018400:	fa02 f303 	lsl.w	r3, r2, r3
}
 8018404:	4618      	mov	r0, r3
 8018406:	372c      	adds	r7, #44	@ 0x2c
 8018408:	46bd      	mov	sp, r7
 801840a:	bc80      	pop	{r7}
 801840c:	4770      	bx	lr
	...

08018410 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b08a      	sub	sp, #40	@ 0x28
 8018414:	af04      	add	r7, sp, #16
 8018416:	60b9      	str	r1, [r7, #8]
 8018418:	607a      	str	r2, [r7, #4]
 801841a:	461a      	mov	r2, r3
 801841c:	4603      	mov	r3, r0
 801841e:	73fb      	strb	r3, [r7, #15]
 8018420:	4613      	mov	r3, r2
 8018422:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8018428:	2301      	movs	r3, #1
 801842a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801842c:	7bfb      	ldrb	r3, [r7, #15]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d002      	beq.n	8018438 <RadioTimeOnAir+0x28>
 8018432:	2b01      	cmp	r3, #1
 8018434:	d017      	beq.n	8018466 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8018436:	e035      	b.n	80184a4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8018438:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801843c:	8c3a      	ldrh	r2, [r7, #32]
 801843e:	7bb9      	ldrb	r1, [r7, #14]
 8018440:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8018444:	9301      	str	r3, [sp, #4]
 8018446:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801844a:	9300      	str	r3, [sp, #0]
 801844c:	4603      	mov	r3, r0
 801844e:	6878      	ldr	r0, [r7, #4]
 8018450:	f7ff ff32 	bl	80182b8 <RadioGetGfskTimeOnAirNumerator>
 8018454:	4603      	mov	r3, r0
 8018456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801845a:	fb02 f303 	mul.w	r3, r2, r3
 801845e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	613b      	str	r3, [r7, #16]
        break;
 8018464:	e01e      	b.n	80184a4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8018466:	8c39      	ldrh	r1, [r7, #32]
 8018468:	7bba      	ldrb	r2, [r7, #14]
 801846a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801846e:	9302      	str	r3, [sp, #8]
 8018470:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8018474:	9301      	str	r3, [sp, #4]
 8018476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801847a:	9300      	str	r3, [sp, #0]
 801847c:	460b      	mov	r3, r1
 801847e:	6879      	ldr	r1, [r7, #4]
 8018480:	68b8      	ldr	r0, [r7, #8]
 8018482:	f7ff ff43 	bl	801830c <RadioGetLoRaTimeOnAirNumerator>
 8018486:	4603      	mov	r3, r0
 8018488:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801848c:	fb02 f303 	mul.w	r3, r2, r3
 8018490:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8018492:	4a0a      	ldr	r2, [pc, #40]	@ (80184bc <RadioTimeOnAir+0xac>)
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	4413      	add	r3, r2
 8018498:	781b      	ldrb	r3, [r3, #0]
 801849a:	4618      	mov	r0, r3
 801849c:	f7ff feb6 	bl	801820c <RadioGetLoRaBandwidthInHz>
 80184a0:	6138      	str	r0, [r7, #16]
        break;
 80184a2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80184a4:	697a      	ldr	r2, [r7, #20]
 80184a6:	693b      	ldr	r3, [r7, #16]
 80184a8:	4413      	add	r3, r2
 80184aa:	1e5a      	subs	r2, r3, #1
 80184ac:	693b      	ldr	r3, [r7, #16]
 80184ae:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80184b2:	4618      	mov	r0, r3
 80184b4:	3718      	adds	r7, #24
 80184b6:	46bd      	mov	sp, r7
 80184b8:	bd80      	pop	{r7, pc}
 80184ba:	bf00      	nop
 80184bc:	0801d0a8 	.word	0x0801d0a8

080184c0 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b084      	sub	sp, #16
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	460b      	mov	r3, r1
 80184ca:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80184cc:	2300      	movs	r3, #0
 80184ce:	2200      	movs	r2, #0
 80184d0:	f240 2101 	movw	r1, #513	@ 0x201
 80184d4:	f240 2001 	movw	r0, #513	@ 0x201
 80184d8:	f001 fd72 	bl	8019fc0 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80184dc:	4b73      	ldr	r3, [pc, #460]	@ (80186ac <RadioSend+0x1ec>)
 80184de:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80184e2:	2101      	movs	r1, #1
 80184e4:	4618      	mov	r0, r3
 80184e6:	f002 fa09 	bl	801a8fc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80184ea:	4b70      	ldr	r3, [pc, #448]	@ (80186ac <RadioSend+0x1ec>)
 80184ec:	781b      	ldrb	r3, [r3, #0]
 80184ee:	2b01      	cmp	r3, #1
 80184f0:	d112      	bne.n	8018518 <RadioSend+0x58>
 80184f2:	4b6e      	ldr	r3, [pc, #440]	@ (80186ac <RadioSend+0x1ec>)
 80184f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80184f8:	2b06      	cmp	r3, #6
 80184fa:	d10d      	bne.n	8018518 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 80184fc:	f640 0089 	movw	r0, #2185	@ 0x889
 8018500:	f002 f91c 	bl	801a73c <SUBGRF_ReadRegister>
 8018504:	4603      	mov	r3, r0
 8018506:	f023 0304 	bic.w	r3, r3, #4
 801850a:	b2db      	uxtb	r3, r3
 801850c:	4619      	mov	r1, r3
 801850e:	f640 0089 	movw	r0, #2185	@ 0x889
 8018512:	f002 f8ff 	bl	801a714 <SUBGRF_WriteRegister>
 8018516:	e00c      	b.n	8018532 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018518:	f640 0089 	movw	r0, #2185	@ 0x889
 801851c:	f002 f90e 	bl	801a73c <SUBGRF_ReadRegister>
 8018520:	4603      	mov	r3, r0
 8018522:	f043 0304 	orr.w	r3, r3, #4
 8018526:	b2db      	uxtb	r3, r3
 8018528:	4619      	mov	r1, r3
 801852a:	f640 0089 	movw	r0, #2185	@ 0x889
 801852e:	f002 f8f1 	bl	801a714 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8018532:	4b5e      	ldr	r3, [pc, #376]	@ (80186ac <RadioSend+0x1ec>)
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	2b04      	cmp	r3, #4
 8018538:	f200 80a8 	bhi.w	801868c <RadioSend+0x1cc>
 801853c:	a201      	add	r2, pc, #4	@ (adr r2, 8018544 <RadioSend+0x84>)
 801853e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018542:	bf00      	nop
 8018544:	08018573 	.word	0x08018573
 8018548:	08018559 	.word	0x08018559
 801854c:	08018573 	.word	0x08018573
 8018550:	080185d5 	.word	0x080185d5
 8018554:	080185f5 	.word	0x080185f5
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8018558:	4a54      	ldr	r2, [pc, #336]	@ (80186ac <RadioSend+0x1ec>)
 801855a:	78fb      	ldrb	r3, [r7, #3]
 801855c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801855e:	4854      	ldr	r0, [pc, #336]	@ (80186b0 <RadioSend+0x1f0>)
 8018560:	f001 ff92 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8018564:	78fb      	ldrb	r3, [r7, #3]
 8018566:	2200      	movs	r2, #0
 8018568:	4619      	mov	r1, r3
 801856a:	6878      	ldr	r0, [r7, #4]
 801856c:	f001 fa3e 	bl	80199ec <SUBGRF_SendPayload>
            break;
 8018570:	e08d      	b.n	801868e <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8018572:	f002 fbbc 	bl	801acee <RFW_Is_Init>
 8018576:	4603      	mov	r3, r0
 8018578:	2b01      	cmp	r3, #1
 801857a:	d11e      	bne.n	80185ba <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801857c:	f107 020d 	add.w	r2, r7, #13
 8018580:	78fb      	ldrb	r3, [r7, #3]
 8018582:	4619      	mov	r1, r3
 8018584:	6878      	ldr	r0, [r7, #4]
 8018586:	f002 fbca 	bl	801ad1e <RFW_TransmitInit>
 801858a:	4603      	mov	r3, r0
 801858c:	2b00      	cmp	r3, #0
 801858e:	d10c      	bne.n	80185aa <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8018590:	7b7a      	ldrb	r2, [r7, #13]
 8018592:	4b46      	ldr	r3, [pc, #280]	@ (80186ac <RadioSend+0x1ec>)
 8018594:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018596:	4846      	ldr	r0, [pc, #280]	@ (80186b0 <RadioSend+0x1f0>)
 8018598:	f001 ff76 	bl	801a488 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801859c:	7b7b      	ldrb	r3, [r7, #13]
 801859e:	2200      	movs	r2, #0
 80185a0:	4619      	mov	r1, r3
 80185a2:	6878      	ldr	r0, [r7, #4]
 80185a4:	f001 fa22 	bl	80199ec <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80185a8:	e071      	b.n	801868e <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80185aa:	4b42      	ldr	r3, [pc, #264]	@ (80186b4 <RadioSend+0x1f4>)
 80185ac:	2201      	movs	r2, #1
 80185ae:	2100      	movs	r1, #0
 80185b0:	2002      	movs	r0, #2
 80185b2:	f003 fcd3 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80185b6:	2303      	movs	r3, #3
 80185b8:	e073      	b.n	80186a2 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80185ba:	4a3c      	ldr	r2, [pc, #240]	@ (80186ac <RadioSend+0x1ec>)
 80185bc:	78fb      	ldrb	r3, [r7, #3]
 80185be:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185c0:	483b      	ldr	r0, [pc, #236]	@ (80186b0 <RadioSend+0x1f0>)
 80185c2:	f001 ff61 	bl	801a488 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80185c6:	78fb      	ldrb	r3, [r7, #3]
 80185c8:	2200      	movs	r2, #0
 80185ca:	4619      	mov	r1, r3
 80185cc:	6878      	ldr	r0, [r7, #4]
 80185ce:	f001 fa0d 	bl	80199ec <SUBGRF_SendPayload>
            break;
 80185d2:	e05c      	b.n	801868e <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80185d4:	4b35      	ldr	r3, [pc, #212]	@ (80186ac <RadioSend+0x1ec>)
 80185d6:	2202      	movs	r2, #2
 80185d8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80185da:	4a34      	ldr	r2, [pc, #208]	@ (80186ac <RadioSend+0x1ec>)
 80185dc:	78fb      	ldrb	r3, [r7, #3]
 80185de:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185e0:	4833      	ldr	r0, [pc, #204]	@ (80186b0 <RadioSend+0x1f0>)
 80185e2:	f001 ff51 	bl	801a488 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80185e6:	78fb      	ldrb	r3, [r7, #3]
 80185e8:	2200      	movs	r2, #0
 80185ea:	4619      	mov	r1, r3
 80185ec:	6878      	ldr	r0, [r7, #4]
 80185ee:	f001 f9fd 	bl	80199ec <SUBGRF_SendPayload>
            break;
 80185f2:	e04c      	b.n	801868e <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 80185f4:	78fb      	ldrb	r3, [r7, #3]
 80185f6:	461a      	mov	r2, r3
 80185f8:	6879      	ldr	r1, [r7, #4]
 80185fa:	482f      	ldr	r0, [pc, #188]	@ (80186b8 <RadioSend+0x1f8>)
 80185fc:	f000 fcca 	bl	8018f94 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8018600:	4b2a      	ldr	r3, [pc, #168]	@ (80186ac <RadioSend+0x1ec>)
 8018602:	2202      	movs	r2, #2
 8018604:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8018606:	78fb      	ldrb	r3, [r7, #3]
 8018608:	3301      	adds	r3, #1
 801860a:	b2da      	uxtb	r2, r3
 801860c:	4b27      	ldr	r3, [pc, #156]	@ (80186ac <RadioSend+0x1ec>)
 801860e:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018610:	4827      	ldr	r0, [pc, #156]	@ (80186b0 <RadioSend+0x1f0>)
 8018612:	f001 ff39 	bl	801a488 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8018616:	2100      	movs	r1, #0
 8018618:	20f1      	movs	r0, #241	@ 0xf1
 801861a:	f000 f965 	bl	80188e8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801861e:	2100      	movs	r1, #0
 8018620:	20f0      	movs	r0, #240	@ 0xf0
 8018622:	f000 f961 	bl	80188e8 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8018626:	4b21      	ldr	r3, [pc, #132]	@ (80186ac <RadioSend+0x1ec>)
 8018628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801862a:	2b64      	cmp	r3, #100	@ 0x64
 801862c:	d108      	bne.n	8018640 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801862e:	2170      	movs	r1, #112	@ 0x70
 8018630:	20f3      	movs	r0, #243	@ 0xf3
 8018632:	f000 f959 	bl	80188e8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8018636:	211d      	movs	r1, #29
 8018638:	20f2      	movs	r0, #242	@ 0xf2
 801863a:	f000 f955 	bl	80188e8 <RadioWrite>
 801863e:	e007      	b.n	8018650 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 8018640:	21e1      	movs	r1, #225	@ 0xe1
 8018642:	20f3      	movs	r0, #243	@ 0xf3
 8018644:	f000 f950 	bl	80188e8 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8018648:	2104      	movs	r1, #4
 801864a:	20f2      	movs	r0, #242	@ 0xf2
 801864c:	f000 f94c 	bl	80188e8 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8018650:	78fb      	ldrb	r3, [r7, #3]
 8018652:	b29b      	uxth	r3, r3
 8018654:	00db      	lsls	r3, r3, #3
 8018656:	b29b      	uxth	r3, r3
 8018658:	3302      	adds	r3, #2
 801865a:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801865c:	89fb      	ldrh	r3, [r7, #14]
 801865e:	0a1b      	lsrs	r3, r3, #8
 8018660:	b29b      	uxth	r3, r3
 8018662:	b2db      	uxtb	r3, r3
 8018664:	4619      	mov	r1, r3
 8018666:	20f4      	movs	r0, #244	@ 0xf4
 8018668:	f000 f93e 	bl	80188e8 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801866c:	89fb      	ldrh	r3, [r7, #14]
 801866e:	b2db      	uxtb	r3, r3
 8018670:	4619      	mov	r1, r3
 8018672:	20f5      	movs	r0, #245	@ 0xf5
 8018674:	f000 f938 	bl	80188e8 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8018678:	78fb      	ldrb	r3, [r7, #3]
 801867a:	3301      	adds	r3, #1
 801867c:	b2db      	uxtb	r3, r3
 801867e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8018682:	4619      	mov	r1, r3
 8018684:	480c      	ldr	r0, [pc, #48]	@ (80186b8 <RadioSend+0x1f8>)
 8018686:	f001 f9b1 	bl	80199ec <SUBGRF_SendPayload>
            break;
 801868a:	e000      	b.n	801868e <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801868c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801868e:	4b07      	ldr	r3, [pc, #28]	@ (80186ac <RadioSend+0x1ec>)
 8018690:	685b      	ldr	r3, [r3, #4]
 8018692:	4619      	mov	r1, r3
 8018694:	4809      	ldr	r0, [pc, #36]	@ (80186bc <RadioSend+0x1fc>)
 8018696:	f003 fac7 	bl	801bc28 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801869a:	4808      	ldr	r0, [pc, #32]	@ (80186bc <RadioSend+0x1fc>)
 801869c:	f003 f9e6 	bl	801ba6c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 80186a0:	2300      	movs	r3, #0
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3710      	adds	r7, #16
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
 80186aa:	bf00      	nop
 80186ac:	20001b4c 	.word	0x20001b4c
 80186b0:	20001b5a 	.word	0x20001b5a
 80186b4:	0801c9d8 	.word	0x0801c9d8
 80186b8:	20001a48 	.word	0x20001a48
 80186bc:	20001ba8 	.word	0x20001ba8

080186c0 <RadioSleep>:

static void RadioSleep( void )
{
 80186c0:	b580      	push	{r7, lr}
 80186c2:	b082      	sub	sp, #8
 80186c4:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80186c6:	2300      	movs	r3, #0
 80186c8:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80186ca:	793b      	ldrb	r3, [r7, #4]
 80186cc:	f043 0304 	orr.w	r3, r3, #4
 80186d0:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80186d2:	7938      	ldrb	r0, [r7, #4]
 80186d4:	f001 fa66 	bl	8019ba4 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80186d8:	2002      	movs	r0, #2
 80186da:	f7e9 faab 	bl	8001c34 <HAL_Delay>
}
 80186de:	bf00      	nop
 80186e0:	3708      	adds	r7, #8
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}

080186e6 <RadioStandby>:

static void RadioStandby( void )
{
 80186e6:	b580      	push	{r7, lr}
 80186e8:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80186ea:	2000      	movs	r0, #0
 80186ec:	f001 fa8e 	bl	8019c0c <SUBGRF_SetStandby>
}
 80186f0:	bf00      	nop
 80186f2:	bd80      	pop	{r7, pc}

080186f4 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80186fc:	f002 faf7 	bl	801acee <RFW_Is_Init>
 8018700:	4603      	mov	r3, r0
 8018702:	2b01      	cmp	r3, #1
 8018704:	d102      	bne.n	801870c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8018706:	f002 fb1a 	bl	801ad3e <RFW_ReceiveInit>
 801870a:	e007      	b.n	801871c <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801870c:	2300      	movs	r3, #0
 801870e:	2200      	movs	r2, #0
 8018710:	f240 2162 	movw	r1, #610	@ 0x262
 8018714:	f240 2062 	movw	r0, #610	@ 0x262
 8018718:	f001 fc52 	bl	8019fc0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	2b00      	cmp	r3, #0
 8018720:	d006      	beq.n	8018730 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8018722:	6879      	ldr	r1, [r7, #4]
 8018724:	4811      	ldr	r0, [pc, #68]	@ (801876c <RadioRx+0x78>)
 8018726:	f003 fa7f 	bl	801bc28 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801872a:	4810      	ldr	r0, [pc, #64]	@ (801876c <RadioRx+0x78>)
 801872c:	f003 f99e 	bl	801ba6c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8018730:	4b0f      	ldr	r3, [pc, #60]	@ (8018770 <RadioRx+0x7c>)
 8018732:	2200      	movs	r2, #0
 8018734:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018736:	4b0e      	ldr	r3, [pc, #56]	@ (8018770 <RadioRx+0x7c>)
 8018738:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801873c:	2100      	movs	r1, #0
 801873e:	4618      	mov	r0, r3
 8018740:	f002 f8dc 	bl	801a8fc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8018744:	4b0a      	ldr	r3, [pc, #40]	@ (8018770 <RadioRx+0x7c>)
 8018746:	785b      	ldrb	r3, [r3, #1]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d004      	beq.n	8018756 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801874c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018750:	f001 fa98 	bl	8019c84 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8018754:	e005      	b.n	8018762 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8018756:	4b06      	ldr	r3, [pc, #24]	@ (8018770 <RadioRx+0x7c>)
 8018758:	689b      	ldr	r3, [r3, #8]
 801875a:	019b      	lsls	r3, r3, #6
 801875c:	4618      	mov	r0, r3
 801875e:	f001 fa91 	bl	8019c84 <SUBGRF_SetRx>
}
 8018762:	bf00      	nop
 8018764:	3708      	adds	r7, #8
 8018766:	46bd      	mov	sp, r7
 8018768:	bd80      	pop	{r7, pc}
 801876a:	bf00      	nop
 801876c:	20001bc0 	.word	0x20001bc0
 8018770:	20001b4c 	.word	0x20001b4c

08018774 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8018774:	b580      	push	{r7, lr}
 8018776:	b082      	sub	sp, #8
 8018778:	af00      	add	r7, sp, #0
 801877a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801877c:	f002 fab7 	bl	801acee <RFW_Is_Init>
 8018780:	4603      	mov	r3, r0
 8018782:	2b01      	cmp	r3, #1
 8018784:	d102      	bne.n	801878c <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8018786:	f002 fada 	bl	801ad3e <RFW_ReceiveInit>
 801878a:	e007      	b.n	801879c <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801878c:	2300      	movs	r3, #0
 801878e:	2200      	movs	r2, #0
 8018790:	f240 2162 	movw	r1, #610	@ 0x262
 8018794:	f240 2062 	movw	r0, #610	@ 0x262
 8018798:	f001 fc12 	bl	8019fc0 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d006      	beq.n	80187b0 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80187a2:	6879      	ldr	r1, [r7, #4]
 80187a4:	4811      	ldr	r0, [pc, #68]	@ (80187ec <RadioRxBoosted+0x78>)
 80187a6:	f003 fa3f 	bl	801bc28 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80187aa:	4810      	ldr	r0, [pc, #64]	@ (80187ec <RadioRxBoosted+0x78>)
 80187ac:	f003 f95e 	bl	801ba6c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80187b0:	4b0f      	ldr	r3, [pc, #60]	@ (80187f0 <RadioRxBoosted+0x7c>)
 80187b2:	2200      	movs	r2, #0
 80187b4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80187b6:	4b0e      	ldr	r3, [pc, #56]	@ (80187f0 <RadioRxBoosted+0x7c>)
 80187b8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80187bc:	2100      	movs	r1, #0
 80187be:	4618      	mov	r0, r3
 80187c0:	f002 f89c 	bl	801a8fc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80187c4:	4b0a      	ldr	r3, [pc, #40]	@ (80187f0 <RadioRxBoosted+0x7c>)
 80187c6:	785b      	ldrb	r3, [r3, #1]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d004      	beq.n	80187d6 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80187cc:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80187d0:	f001 fa78 	bl	8019cc4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80187d4:	e005      	b.n	80187e2 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80187d6:	4b06      	ldr	r3, [pc, #24]	@ (80187f0 <RadioRxBoosted+0x7c>)
 80187d8:	689b      	ldr	r3, [r3, #8]
 80187da:	019b      	lsls	r3, r3, #6
 80187dc:	4618      	mov	r0, r3
 80187de:	f001 fa71 	bl	8019cc4 <SUBGRF_SetRxBoosted>
}
 80187e2:	bf00      	nop
 80187e4:	3708      	adds	r7, #8
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	20001bc0 	.word	0x20001bc0
 80187f0:	20001b4c 	.word	0x20001b4c

080187f4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80187f4:	b580      	push	{r7, lr}
 80187f6:	b082      	sub	sp, #8
 80187f8:	af00      	add	r7, sp, #0
 80187fa:	6078      	str	r0, [r7, #4]
 80187fc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	005a      	lsls	r2, r3, #1
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	4413      	add	r3, r2
 8018806:	4a0c      	ldr	r2, [pc, #48]	@ (8018838 <RadioSetRxDutyCycle+0x44>)
 8018808:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801880a:	2300      	movs	r3, #0
 801880c:	2200      	movs	r2, #0
 801880e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8018812:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018816:	f001 fbd3 	bl	8019fc0 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801881a:	4b07      	ldr	r3, [pc, #28]	@ (8018838 <RadioSetRxDutyCycle+0x44>)
 801881c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018820:	2100      	movs	r1, #0
 8018822:	4618      	mov	r0, r3
 8018824:	f002 f86a 	bl	801a8fc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8018828:	6839      	ldr	r1, [r7, #0]
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f001 fa6e 	bl	8019d0c <SUBGRF_SetRxDutyCycle>
}
 8018830:	bf00      	nop
 8018832:	3708      	adds	r7, #8
 8018834:	46bd      	mov	sp, r7
 8018836:	bd80      	pop	{r7, pc}
 8018838:	20001b4c 	.word	0x20001b4c

0801883c <RadioStartCad>:

static void RadioStartCad( void )
{
 801883c:	b580      	push	{r7, lr}
 801883e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8018840:	4b09      	ldr	r3, [pc, #36]	@ (8018868 <RadioStartCad+0x2c>)
 8018842:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018846:	2100      	movs	r1, #0
 8018848:	4618      	mov	r0, r3
 801884a:	f002 f857 	bl	801a8fc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801884e:	2300      	movs	r3, #0
 8018850:	2200      	movs	r2, #0
 8018852:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8018856:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801885a:	f001 fbb1 	bl	8019fc0 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801885e:	f001 fa81 	bl	8019d64 <SUBGRF_SetCad>
}
 8018862:	bf00      	nop
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	20001b4c 	.word	0x20001b4c

0801886c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b084      	sub	sp, #16
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
 8018874:	460b      	mov	r3, r1
 8018876:	70fb      	strb	r3, [r7, #3]
 8018878:	4613      	mov	r3, r2
 801887a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801887c:	883b      	ldrh	r3, [r7, #0]
 801887e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018882:	fb02 f303 	mul.w	r3, r2, r3
 8018886:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8018888:	6878      	ldr	r0, [r7, #4]
 801888a:	f001 fbf5 	bl	801a078 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801888e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018892:	4618      	mov	r0, r3
 8018894:	f002 f85a 	bl	801a94c <SUBGRF_SetRfTxPower>
 8018898:	4603      	mov	r3, r0
 801889a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801889c:	210e      	movs	r1, #14
 801889e:	f640 101f 	movw	r0, #2335	@ 0x91f
 80188a2:	f001 ff37 	bl	801a714 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80188a6:	7afb      	ldrb	r3, [r7, #11]
 80188a8:	2101      	movs	r1, #1
 80188aa:	4618      	mov	r0, r3
 80188ac:	f002 f826 	bl	801a8fc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80188b0:	f001 fa66 	bl	8019d80 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80188b4:	68f9      	ldr	r1, [r7, #12]
 80188b6:	4805      	ldr	r0, [pc, #20]	@ (80188cc <RadioSetTxContinuousWave+0x60>)
 80188b8:	f003 f9b6 	bl	801bc28 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80188bc:	4803      	ldr	r0, [pc, #12]	@ (80188cc <RadioSetTxContinuousWave+0x60>)
 80188be:	f003 f8d5 	bl	801ba6c <UTIL_TIMER_Start>
}
 80188c2:	bf00      	nop
 80188c4:	3710      	adds	r7, #16
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	20001ba8 	.word	0x20001ba8

080188d0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b082      	sub	sp, #8
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	4603      	mov	r3, r0
 80188d8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80188da:	f001 fe88 	bl	801a5ee <SUBGRF_GetRssiInst>
 80188de:	4603      	mov	r3, r0
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3708      	adds	r7, #8
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b082      	sub	sp, #8
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	4603      	mov	r3, r0
 80188f0:	460a      	mov	r2, r1
 80188f2:	80fb      	strh	r3, [r7, #6]
 80188f4:	4613      	mov	r3, r2
 80188f6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80188f8:	797a      	ldrb	r2, [r7, #5]
 80188fa:	88fb      	ldrh	r3, [r7, #6]
 80188fc:	4611      	mov	r1, r2
 80188fe:	4618      	mov	r0, r3
 8018900:	f001 ff08 	bl	801a714 <SUBGRF_WriteRegister>
}
 8018904:	bf00      	nop
 8018906:	3708      	adds	r7, #8
 8018908:	46bd      	mov	sp, r7
 801890a:	bd80      	pop	{r7, pc}

0801890c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801890c:	b580      	push	{r7, lr}
 801890e:	b082      	sub	sp, #8
 8018910:	af00      	add	r7, sp, #0
 8018912:	4603      	mov	r3, r0
 8018914:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8018916:	88fb      	ldrh	r3, [r7, #6]
 8018918:	4618      	mov	r0, r3
 801891a:	f001 ff0f 	bl	801a73c <SUBGRF_ReadRegister>
 801891e:	4603      	mov	r3, r0
}
 8018920:	4618      	mov	r0, r3
 8018922:	3708      	adds	r7, #8
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}

08018928 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
 801892e:	4603      	mov	r3, r0
 8018930:	6039      	str	r1, [r7, #0]
 8018932:	80fb      	strh	r3, [r7, #6]
 8018934:	4613      	mov	r3, r2
 8018936:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8018938:	797b      	ldrb	r3, [r7, #5]
 801893a:	b29a      	uxth	r2, r3
 801893c:	88fb      	ldrh	r3, [r7, #6]
 801893e:	6839      	ldr	r1, [r7, #0]
 8018940:	4618      	mov	r0, r3
 8018942:	f001 ff0f 	bl	801a764 <SUBGRF_WriteRegisters>
}
 8018946:	bf00      	nop
 8018948:	3708      	adds	r7, #8
 801894a:	46bd      	mov	sp, r7
 801894c:	bd80      	pop	{r7, pc}

0801894e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801894e:	b580      	push	{r7, lr}
 8018950:	b082      	sub	sp, #8
 8018952:	af00      	add	r7, sp, #0
 8018954:	4603      	mov	r3, r0
 8018956:	6039      	str	r1, [r7, #0]
 8018958:	80fb      	strh	r3, [r7, #6]
 801895a:	4613      	mov	r3, r2
 801895c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801895e:	797b      	ldrb	r3, [r7, #5]
 8018960:	b29a      	uxth	r2, r3
 8018962:	88fb      	ldrh	r3, [r7, #6]
 8018964:	6839      	ldr	r1, [r7, #0]
 8018966:	4618      	mov	r0, r3
 8018968:	f001 ff1e 	bl	801a7a8 <SUBGRF_ReadRegisters>
}
 801896c:	bf00      	nop
 801896e:	3708      	adds	r7, #8
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}

08018974 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b082      	sub	sp, #8
 8018978:	af00      	add	r7, sp, #0
 801897a:	4603      	mov	r3, r0
 801897c:	460a      	mov	r2, r1
 801897e:	71fb      	strb	r3, [r7, #7]
 8018980:	4613      	mov	r3, r2
 8018982:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8018984:	79fb      	ldrb	r3, [r7, #7]
 8018986:	2b01      	cmp	r3, #1
 8018988:	d10a      	bne.n	80189a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801898a:	4a0e      	ldr	r2, [pc, #56]	@ (80189c4 <RadioSetMaxPayloadLength+0x50>)
 801898c:	79bb      	ldrb	r3, [r7, #6]
 801898e:	7013      	strb	r3, [r2, #0]
 8018990:	4b0c      	ldr	r3, [pc, #48]	@ (80189c4 <RadioSetMaxPayloadLength+0x50>)
 8018992:	781a      	ldrb	r2, [r3, #0]
 8018994:	4b0c      	ldr	r3, [pc, #48]	@ (80189c8 <RadioSetMaxPayloadLength+0x54>)
 8018996:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8018998:	480c      	ldr	r0, [pc, #48]	@ (80189cc <RadioSetMaxPayloadLength+0x58>)
 801899a:	f001 fd75 	bl	801a488 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801899e:	e00d      	b.n	80189bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80189a0:	4b09      	ldr	r3, [pc, #36]	@ (80189c8 <RadioSetMaxPayloadLength+0x54>)
 80189a2:	7d5b      	ldrb	r3, [r3, #21]
 80189a4:	2b01      	cmp	r3, #1
 80189a6:	d109      	bne.n	80189bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80189a8:	4a06      	ldr	r2, [pc, #24]	@ (80189c4 <RadioSetMaxPayloadLength+0x50>)
 80189aa:	79bb      	ldrb	r3, [r7, #6]
 80189ac:	7013      	strb	r3, [r2, #0]
 80189ae:	4b05      	ldr	r3, [pc, #20]	@ (80189c4 <RadioSetMaxPayloadLength+0x50>)
 80189b0:	781a      	ldrb	r2, [r3, #0]
 80189b2:	4b05      	ldr	r3, [pc, #20]	@ (80189c8 <RadioSetMaxPayloadLength+0x54>)
 80189b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189b6:	4805      	ldr	r0, [pc, #20]	@ (80189cc <RadioSetMaxPayloadLength+0x58>)
 80189b8:	f001 fd66 	bl	801a488 <SUBGRF_SetPacketParams>
}
 80189bc:	bf00      	nop
 80189be:	3708      	adds	r7, #8
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	20000124 	.word	0x20000124
 80189c8:	20001b4c 	.word	0x20001b4c
 80189cc:	20001b5a 	.word	0x20001b5a

080189d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80189d0:	b580      	push	{r7, lr}
 80189d2:	b082      	sub	sp, #8
 80189d4:	af00      	add	r7, sp, #0
 80189d6:	4603      	mov	r3, r0
 80189d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80189da:	4a13      	ldr	r2, [pc, #76]	@ (8018a28 <RadioSetPublicNetwork+0x58>)
 80189dc:	79fb      	ldrb	r3, [r7, #7]
 80189de:	7313      	strb	r3, [r2, #12]
 80189e0:	4b11      	ldr	r3, [pc, #68]	@ (8018a28 <RadioSetPublicNetwork+0x58>)
 80189e2:	7b1a      	ldrb	r2, [r3, #12]
 80189e4:	4b10      	ldr	r3, [pc, #64]	@ (8018a28 <RadioSetPublicNetwork+0x58>)
 80189e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80189e8:	2001      	movs	r0, #1
 80189ea:	f7ff f813 	bl	8017a14 <RadioSetModem>
    if( enable == true )
 80189ee:	79fb      	ldrb	r3, [r7, #7]
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d00a      	beq.n	8018a0a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80189f4:	2134      	movs	r1, #52	@ 0x34
 80189f6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80189fa:	f001 fe8b 	bl	801a714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80189fe:	2144      	movs	r1, #68	@ 0x44
 8018a00:	f240 7041 	movw	r0, #1857	@ 0x741
 8018a04:	f001 fe86 	bl	801a714 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8018a08:	e009      	b.n	8018a1e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8018a0a:	2114      	movs	r1, #20
 8018a0c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8018a10:	f001 fe80 	bl	801a714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8018a14:	2124      	movs	r1, #36	@ 0x24
 8018a16:	f240 7041 	movw	r0, #1857	@ 0x741
 8018a1a:	f001 fe7b 	bl	801a714 <SUBGRF_WriteRegister>
}
 8018a1e:	bf00      	nop
 8018a20:	3708      	adds	r7, #8
 8018a22:	46bd      	mov	sp, r7
 8018a24:	bd80      	pop	{r7, pc}
 8018a26:	bf00      	nop
 8018a28:	20001b4c 	.word	0x20001b4c

08018a2c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8018a2c:	b580      	push	{r7, lr}
 8018a2e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8018a30:	f001 ffc0 	bl	801a9b4 <SUBGRF_GetRadioWakeUpTime>
 8018a34:	4603      	mov	r3, r0
 8018a36:	3303      	adds	r3, #3
}
 8018a38:	4618      	mov	r0, r3
 8018a3a:	bd80      	pop	{r7, pc}

08018a3c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b082      	sub	sp, #8
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8018a44:	f000 f80e 	bl	8018a64 <RadioOnTxTimeoutProcess>
}
 8018a48:	bf00      	nop
 8018a4a:	3708      	adds	r7, #8
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}

08018a50 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b082      	sub	sp, #8
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8018a58:	f000 f818 	bl	8018a8c <RadioOnRxTimeoutProcess>
}
 8018a5c:	bf00      	nop
 8018a5e:	3708      	adds	r7, #8
 8018a60:	46bd      	mov	sp, r7
 8018a62:	bd80      	pop	{r7, pc}

08018a64 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8018a64:	b580      	push	{r7, lr}
 8018a66:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018a68:	4b07      	ldr	r3, [pc, #28]	@ (8018a88 <RadioOnTxTimeoutProcess+0x24>)
 8018a6a:	681b      	ldr	r3, [r3, #0]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d008      	beq.n	8018a82 <RadioOnTxTimeoutProcess+0x1e>
 8018a70:	4b05      	ldr	r3, [pc, #20]	@ (8018a88 <RadioOnTxTimeoutProcess+0x24>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	685b      	ldr	r3, [r3, #4]
 8018a76:	2b00      	cmp	r3, #0
 8018a78:	d003      	beq.n	8018a82 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8018a7a:	4b03      	ldr	r3, [pc, #12]	@ (8018a88 <RadioOnTxTimeoutProcess+0x24>)
 8018a7c:	681b      	ldr	r3, [r3, #0]
 8018a7e:	685b      	ldr	r3, [r3, #4]
 8018a80:	4798      	blx	r3
    }
}
 8018a82:	bf00      	nop
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	20001b48 	.word	0x20001b48

08018a8c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8018a8c:	b580      	push	{r7, lr}
 8018a8e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018a90:	4b07      	ldr	r3, [pc, #28]	@ (8018ab0 <RadioOnRxTimeoutProcess+0x24>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d008      	beq.n	8018aaa <RadioOnRxTimeoutProcess+0x1e>
 8018a98:	4b05      	ldr	r3, [pc, #20]	@ (8018ab0 <RadioOnRxTimeoutProcess+0x24>)
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	68db      	ldr	r3, [r3, #12]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d003      	beq.n	8018aaa <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8018aa2:	4b03      	ldr	r3, [pc, #12]	@ (8018ab0 <RadioOnRxTimeoutProcess+0x24>)
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	4798      	blx	r3
    }
}
 8018aaa:	bf00      	nop
 8018aac:	bd80      	pop	{r7, pc}
 8018aae:	bf00      	nop
 8018ab0:	20001b48 	.word	0x20001b48

08018ab4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b082      	sub	sp, #8
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	4603      	mov	r3, r0
 8018abc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8018abe:	4a05      	ldr	r2, [pc, #20]	@ (8018ad4 <RadioOnDioIrq+0x20>)
 8018ac0:	88fb      	ldrh	r3, [r7, #6]
 8018ac2:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8018ac6:	f000 f807 	bl	8018ad8 <RadioIrqProcess>
}
 8018aca:	bf00      	nop
 8018acc:	3708      	adds	r7, #8
 8018ace:	46bd      	mov	sp, r7
 8018ad0:	bd80      	pop	{r7, pc}
 8018ad2:	bf00      	nop
 8018ad4:	20001b4c 	.word	0x20001b4c

08018ad8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8018ad8:	b5b0      	push	{r4, r5, r7, lr}
 8018ada:	b082      	sub	sp, #8
 8018adc:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8018ae6:	4ba8      	ldr	r3, [pc, #672]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018ae8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8018aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018af0:	f000 810d 	beq.w	8018d0e <RadioIrqProcess+0x236>
 8018af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018af8:	f300 81e8 	bgt.w	8018ecc <RadioIrqProcess+0x3f4>
 8018afc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018b00:	f000 80f1 	beq.w	8018ce6 <RadioIrqProcess+0x20e>
 8018b04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018b08:	f300 81e0 	bgt.w	8018ecc <RadioIrqProcess+0x3f4>
 8018b0c:	2b80      	cmp	r3, #128	@ 0x80
 8018b0e:	f000 80d6 	beq.w	8018cbe <RadioIrqProcess+0x1e6>
 8018b12:	2b80      	cmp	r3, #128	@ 0x80
 8018b14:	f300 81da 	bgt.w	8018ecc <RadioIrqProcess+0x3f4>
 8018b18:	2b20      	cmp	r3, #32
 8018b1a:	dc49      	bgt.n	8018bb0 <RadioIrqProcess+0xd8>
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	f340 81d5 	ble.w	8018ecc <RadioIrqProcess+0x3f4>
 8018b22:	3b01      	subs	r3, #1
 8018b24:	2b1f      	cmp	r3, #31
 8018b26:	f200 81d1 	bhi.w	8018ecc <RadioIrqProcess+0x3f4>
 8018b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8018b30 <RadioIrqProcess+0x58>)
 8018b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b30:	08018bb9 	.word	0x08018bb9
 8018b34:	08018bf3 	.word	0x08018bf3
 8018b38:	08018ecd 	.word	0x08018ecd
 8018b3c:	08018da9 	.word	0x08018da9
 8018b40:	08018ecd 	.word	0x08018ecd
 8018b44:	08018ecd 	.word	0x08018ecd
 8018b48:	08018ecd 	.word	0x08018ecd
 8018b4c:	08018e25 	.word	0x08018e25
 8018b50:	08018ecd 	.word	0x08018ecd
 8018b54:	08018ecd 	.word	0x08018ecd
 8018b58:	08018ecd 	.word	0x08018ecd
 8018b5c:	08018ecd 	.word	0x08018ecd
 8018b60:	08018ecd 	.word	0x08018ecd
 8018b64:	08018ecd 	.word	0x08018ecd
 8018b68:	08018ecd 	.word	0x08018ecd
 8018b6c:	08018e41 	.word	0x08018e41
 8018b70:	08018ecd 	.word	0x08018ecd
 8018b74:	08018ecd 	.word	0x08018ecd
 8018b78:	08018ecd 	.word	0x08018ecd
 8018b7c:	08018ecd 	.word	0x08018ecd
 8018b80:	08018ecd 	.word	0x08018ecd
 8018b84:	08018ecd 	.word	0x08018ecd
 8018b88:	08018ecd 	.word	0x08018ecd
 8018b8c:	08018ecd 	.word	0x08018ecd
 8018b90:	08018ecd 	.word	0x08018ecd
 8018b94:	08018ecd 	.word	0x08018ecd
 8018b98:	08018ecd 	.word	0x08018ecd
 8018b9c:	08018ecd 	.word	0x08018ecd
 8018ba0:	08018ecd 	.word	0x08018ecd
 8018ba4:	08018ecd 	.word	0x08018ecd
 8018ba8:	08018ecd 	.word	0x08018ecd
 8018bac:	08018e4f 	.word	0x08018e4f
 8018bb0:	2b40      	cmp	r3, #64	@ 0x40
 8018bb2:	f000 816d 	beq.w	8018e90 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8018bb6:	e189      	b.n	8018ecc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8018bb8:	4874      	ldr	r0, [pc, #464]	@ (8018d8c <RadioIrqProcess+0x2b4>)
 8018bba:	f002 ffc5 	bl	801bb48 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8018bbe:	2000      	movs	r0, #0
 8018bc0:	f001 f824 	bl	8019c0c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8018bc4:	f002 f89a 	bl	801acfc <RFW_Is_LongPacketModeEnabled>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	2b01      	cmp	r3, #1
 8018bcc:	d101      	bne.n	8018bd2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8018bce:	f002 f8be 	bl	801ad4e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8018bd2:	4b6f      	ldr	r3, [pc, #444]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	f000 817a 	beq.w	8018ed0 <RadioIrqProcess+0x3f8>
 8018bdc:	4b6c      	ldr	r3, [pc, #432]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	f000 8174 	beq.w	8018ed0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8018be8:	4b69      	ldr	r3, [pc, #420]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	4798      	blx	r3
        break;
 8018bf0:	e16e      	b.n	8018ed0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8018bf2:	4868      	ldr	r0, [pc, #416]	@ (8018d94 <RadioIrqProcess+0x2bc>)
 8018bf4:	f002 ffa8 	bl	801bb48 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018bf8:	4b63      	ldr	r3, [pc, #396]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018bfa:	785b      	ldrb	r3, [r3, #1]
 8018bfc:	f083 0301 	eor.w	r3, r3, #1
 8018c00:	b2db      	uxtb	r3, r3
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d014      	beq.n	8018c30 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8018c06:	2000      	movs	r0, #0
 8018c08:	f001 f800 	bl	8019c0c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8018c0c:	2100      	movs	r1, #0
 8018c0e:	f640 1002 	movw	r0, #2306	@ 0x902
 8018c12:	f001 fd7f 	bl	801a714 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8018c16:	f640 1044 	movw	r0, #2372	@ 0x944
 8018c1a:	f001 fd8f 	bl	801a73c <SUBGRF_ReadRegister>
 8018c1e:	4603      	mov	r3, r0
 8018c20:	f043 0302 	orr.w	r3, r3, #2
 8018c24:	b2db      	uxtb	r3, r3
 8018c26:	4619      	mov	r1, r3
 8018c28:	f640 1044 	movw	r0, #2372	@ 0x944
 8018c2c:	f001 fd72 	bl	801a714 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018c30:	1dfb      	adds	r3, r7, #7
 8018c32:	22ff      	movs	r2, #255	@ 0xff
 8018c34:	4619      	mov	r1, r3
 8018c36:	4858      	ldr	r0, [pc, #352]	@ (8018d98 <RadioIrqProcess+0x2c0>)
 8018c38:	f000 feb6 	bl	80199a8 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018c3c:	4857      	ldr	r0, [pc, #348]	@ (8018d9c <RadioIrqProcess+0x2c4>)
 8018c3e:	f001 fd17 	bl	801a670 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018c42:	4b53      	ldr	r3, [pc, #332]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	f000 8144 	beq.w	8018ed4 <RadioIrqProcess+0x3fc>
 8018c4c:	4b50      	ldr	r3, [pc, #320]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	689b      	ldr	r3, [r3, #8]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	f000 813e 	beq.w	8018ed4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8018c58:	4b4b      	ldr	r3, [pc, #300]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018c5e:	2b01      	cmp	r3, #1
 8018c60:	d10e      	bne.n	8018c80 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018c62:	4b4b      	ldr	r3, [pc, #300]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	689c      	ldr	r4, [r3, #8]
 8018c68:	79fb      	ldrb	r3, [r7, #7]
 8018c6a:	4619      	mov	r1, r3
 8018c6c:	4b46      	ldr	r3, [pc, #280]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018c6e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018c72:	461a      	mov	r2, r3
 8018c74:	4b44      	ldr	r3, [pc, #272]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018c76:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8018c7a:	4847      	ldr	r0, [pc, #284]	@ (8018d98 <RadioIrqProcess+0x2c0>)
 8018c7c:	47a0      	blx	r4
                break;
 8018c7e:	e01d      	b.n	8018cbc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018c80:	4b41      	ldr	r3, [pc, #260]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018c84:	463a      	mov	r2, r7
 8018c86:	4611      	mov	r1, r2
 8018c88:	4618      	mov	r0, r3
 8018c8a:	f001 ff85 	bl	801ab98 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018c8e:	4b40      	ldr	r3, [pc, #256]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	689c      	ldr	r4, [r3, #8]
 8018c94:	79fb      	ldrb	r3, [r7, #7]
 8018c96:	4619      	mov	r1, r3
 8018c98:	4b3b      	ldr	r3, [pc, #236]	@ (8018d88 <RadioIrqProcess+0x2b0>)
 8018c9a:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018c9e:	4618      	mov	r0, r3
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8018ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8018da0 <RadioIrqProcess+0x2c8>)
 8018ca8:	fb82 5203 	smull	r5, r2, r2, r3
 8018cac:	1192      	asrs	r2, r2, #6
 8018cae:	17db      	asrs	r3, r3, #31
 8018cb0:	1ad3      	subs	r3, r2, r3
 8018cb2:	b25b      	sxtb	r3, r3
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	4838      	ldr	r0, [pc, #224]	@ (8018d98 <RadioIrqProcess+0x2c0>)
 8018cb8:	47a0      	blx	r4
                break;
 8018cba:	bf00      	nop
        break;
 8018cbc:	e10a      	b.n	8018ed4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8018cbe:	2000      	movs	r0, #0
 8018cc0:	f000 ffa4 	bl	8019c0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018cc4:	4b32      	ldr	r3, [pc, #200]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	f000 8105 	beq.w	8018ed8 <RadioIrqProcess+0x400>
 8018cce:	4b30      	ldr	r3, [pc, #192]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	699b      	ldr	r3, [r3, #24]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	f000 80ff 	beq.w	8018ed8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8018cda:	4b2d      	ldr	r3, [pc, #180]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	699b      	ldr	r3, [r3, #24]
 8018ce0:	2000      	movs	r0, #0
 8018ce2:	4798      	blx	r3
        break;
 8018ce4:	e0f8      	b.n	8018ed8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8018ce6:	2000      	movs	r0, #0
 8018ce8:	f000 ff90 	bl	8019c0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018cec:	4b28      	ldr	r3, [pc, #160]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	f000 80f3 	beq.w	8018edc <RadioIrqProcess+0x404>
 8018cf6:	4b26      	ldr	r3, [pc, #152]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	699b      	ldr	r3, [r3, #24]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	f000 80ed 	beq.w	8018edc <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8018d02:	4b23      	ldr	r3, [pc, #140]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d04:	681b      	ldr	r3, [r3, #0]
 8018d06:	699b      	ldr	r3, [r3, #24]
 8018d08:	2001      	movs	r0, #1
 8018d0a:	4798      	blx	r3
        break;
 8018d0c:	e0e6      	b.n	8018edc <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8018d0e:	4b25      	ldr	r3, [pc, #148]	@ (8018da4 <RadioIrqProcess+0x2cc>)
 8018d10:	2201      	movs	r2, #1
 8018d12:	2100      	movs	r1, #0
 8018d14:	2002      	movs	r0, #2
 8018d16:	f003 f921 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8018d1a:	f000 fe2b 	bl	8019974 <SUBGRF_GetOperatingMode>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b04      	cmp	r3, #4
 8018d22:	d115      	bne.n	8018d50 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8018d24:	4819      	ldr	r0, [pc, #100]	@ (8018d8c <RadioIrqProcess+0x2b4>)
 8018d26:	f002 ff0f 	bl	801bb48 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018d2a:	2000      	movs	r0, #0
 8018d2c:	f000 ff6e 	bl	8019c0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8018d30:	4b17      	ldr	r3, [pc, #92]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	f000 80d3 	beq.w	8018ee0 <RadioIrqProcess+0x408>
 8018d3a:	4b15      	ldr	r3, [pc, #84]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	2b00      	cmp	r3, #0
 8018d42:	f000 80cd 	beq.w	8018ee0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8018d46:	4b12      	ldr	r3, [pc, #72]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	685b      	ldr	r3, [r3, #4]
 8018d4c:	4798      	blx	r3
        break;
 8018d4e:	e0c7      	b.n	8018ee0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8018d50:	f000 fe10 	bl	8019974 <SUBGRF_GetOperatingMode>
 8018d54:	4603      	mov	r3, r0
 8018d56:	2b05      	cmp	r3, #5
 8018d58:	f040 80c2 	bne.w	8018ee0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8018d5c:	480d      	ldr	r0, [pc, #52]	@ (8018d94 <RadioIrqProcess+0x2bc>)
 8018d5e:	f002 fef3 	bl	801bb48 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018d62:	2000      	movs	r0, #0
 8018d64:	f000 ff52 	bl	8019c0c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018d68:	4b09      	ldr	r3, [pc, #36]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	f000 80b7 	beq.w	8018ee0 <RadioIrqProcess+0x408>
 8018d72:	4b07      	ldr	r3, [pc, #28]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	68db      	ldr	r3, [r3, #12]
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 80b1 	beq.w	8018ee0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8018d7e:	4b04      	ldr	r3, [pc, #16]	@ (8018d90 <RadioIrqProcess+0x2b8>)
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	68db      	ldr	r3, [r3, #12]
 8018d84:	4798      	blx	r3
        break;
 8018d86:	e0ab      	b.n	8018ee0 <RadioIrqProcess+0x408>
 8018d88:	20001b4c 	.word	0x20001b4c
 8018d8c:	20001ba8 	.word	0x20001ba8
 8018d90:	20001b48 	.word	0x20001b48
 8018d94:	20001bc0 	.word	0x20001bc0
 8018d98:	20001a48 	.word	0x20001a48
 8018d9c:	20001b70 	.word	0x20001b70
 8018da0:	10624dd3 	.word	0x10624dd3
 8018da4:	0801c9f0 	.word	0x0801c9f0
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018da8:	4b54      	ldr	r3, [pc, #336]	@ (8018efc <RadioIrqProcess+0x424>)
 8018daa:	2201      	movs	r2, #1
 8018dac:	2100      	movs	r1, #0
 8018dae:	2002      	movs	r0, #2
 8018db0:	f003 f8d4 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8018db4:	4b52      	ldr	r3, [pc, #328]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018db6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	f000 8093 	beq.w	8018ee4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8018dbe:	4a51      	ldr	r2, [pc, #324]	@ (8018f04 <RadioIrqProcess+0x42c>)
 8018dc0:	4b4f      	ldr	r3, [pc, #316]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018dc4:	0c1b      	lsrs	r3, r3, #16
 8018dc6:	b2db      	uxtb	r3, r3
 8018dc8:	4619      	mov	r1, r3
 8018dca:	f640 1003 	movw	r0, #2307	@ 0x903
 8018dce:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8018dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8018f04 <RadioIrqProcess+0x42c>)
 8018dd2:	4b4b      	ldr	r3, [pc, #300]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018dd6:	0a1b      	lsrs	r3, r3, #8
 8018dd8:	b2db      	uxtb	r3, r3
 8018dda:	4619      	mov	r1, r3
 8018ddc:	f640 1004 	movw	r0, #2308	@ 0x904
 8018de0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8018de2:	4a48      	ldr	r2, [pc, #288]	@ (8018f04 <RadioIrqProcess+0x42c>)
 8018de4:	4b46      	ldr	r3, [pc, #280]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018de8:	b2db      	uxtb	r3, r3
 8018dea:	4619      	mov	r1, r3
 8018dec:	f640 1005 	movw	r0, #2309	@ 0x905
 8018df0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8018df2:	4c44      	ldr	r4, [pc, #272]	@ (8018f04 <RadioIrqProcess+0x42c>)
 8018df4:	4b44      	ldr	r3, [pc, #272]	@ (8018f08 <RadioIrqProcess+0x430>)
 8018df6:	f640 1002 	movw	r0, #2306	@ 0x902
 8018dfa:	4798      	blx	r3
 8018dfc:	4603      	mov	r3, r0
 8018dfe:	f043 0301 	orr.w	r3, r3, #1
 8018e02:	b2db      	uxtb	r3, r3
 8018e04:	4619      	mov	r1, r3
 8018e06:	f640 1002 	movw	r0, #2306	@ 0x902
 8018e0a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8018e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018e0e:	2200      	movs	r2, #0
 8018e10:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8018e12:	2300      	movs	r3, #0
 8018e14:	2200      	movs	r2, #0
 8018e16:	f240 2162 	movw	r1, #610	@ 0x262
 8018e1a:	f240 2062 	movw	r0, #610	@ 0x262
 8018e1e:	f001 f8cf 	bl	8019fc0 <SUBGRF_SetDioIrqParams>
        break;
 8018e22:	e05f      	b.n	8018ee4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018e24:	4b39      	ldr	r3, [pc, #228]	@ (8018f0c <RadioIrqProcess+0x434>)
 8018e26:	2201      	movs	r2, #1
 8018e28:	2100      	movs	r1, #0
 8018e2a:	2002      	movs	r0, #2
 8018e2c:	f003 f896 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8018e30:	f001 ff5d 	bl	801acee <RFW_Is_Init>
 8018e34:	4603      	mov	r3, r0
 8018e36:	2b01      	cmp	r3, #1
 8018e38:	d156      	bne.n	8018ee8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018e3a:	f001 ff8e 	bl	801ad5a <RFW_ReceivePayload>
        break;
 8018e3e:	e053      	b.n	8018ee8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8018e40:	4b33      	ldr	r3, [pc, #204]	@ (8018f10 <RadioIrqProcess+0x438>)
 8018e42:	2201      	movs	r2, #1
 8018e44:	2100      	movs	r1, #0
 8018e46:	2002      	movs	r0, #2
 8018e48:	f003 f888 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018e4c:	e051      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 8018e4e:	4831      	ldr	r0, [pc, #196]	@ (8018f14 <RadioIrqProcess+0x43c>)
 8018e50:	f002 fe7a 	bl	801bb48 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018e54:	4b2a      	ldr	r3, [pc, #168]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018e56:	785b      	ldrb	r3, [r3, #1]
 8018e58:	f083 0301 	eor.w	r3, r3, #1
 8018e5c:	b2db      	uxtb	r3, r3
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d002      	beq.n	8018e68 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 8018e62:	2000      	movs	r0, #0
 8018e64:	f000 fed2 	bl	8019c0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018e68:	4b2b      	ldr	r3, [pc, #172]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018e6a:	681b      	ldr	r3, [r3, #0]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d03d      	beq.n	8018eec <RadioIrqProcess+0x414>
 8018e70:	4b29      	ldr	r3, [pc, #164]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	68db      	ldr	r3, [r3, #12]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d038      	beq.n	8018eec <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018e7a:	4b27      	ldr	r3, [pc, #156]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	68db      	ldr	r3, [r3, #12]
 8018e80:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8018e82:	4b26      	ldr	r3, [pc, #152]	@ (8018f1c <RadioIrqProcess+0x444>)
 8018e84:	2201      	movs	r2, #1
 8018e86:	2100      	movs	r1, #0
 8018e88:	2002      	movs	r0, #2
 8018e8a:	f003 f867 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018e8e:	e02d      	b.n	8018eec <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8018e90:	4b23      	ldr	r3, [pc, #140]	@ (8018f20 <RadioIrqProcess+0x448>)
 8018e92:	2201      	movs	r2, #1
 8018e94:	2100      	movs	r1, #0
 8018e96:	2002      	movs	r0, #2
 8018e98:	f003 f860 	bl	801bf5c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018e9c:	4b18      	ldr	r3, [pc, #96]	@ (8018f00 <RadioIrqProcess+0x428>)
 8018e9e:	785b      	ldrb	r3, [r3, #1]
 8018ea0:	f083 0301 	eor.w	r3, r3, #1
 8018ea4:	b2db      	uxtb	r3, r3
 8018ea6:	2b00      	cmp	r3, #0
 8018ea8:	d002      	beq.n	8018eb0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 8018eaa:	2000      	movs	r0, #0
 8018eac:	f000 feae 	bl	8019c0c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8018eb0:	4b19      	ldr	r3, [pc, #100]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d01b      	beq.n	8018ef0 <RadioIrqProcess+0x418>
 8018eb8:	4b17      	ldr	r3, [pc, #92]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	691b      	ldr	r3, [r3, #16]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d016      	beq.n	8018ef0 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 8018ec2:	4b15      	ldr	r3, [pc, #84]	@ (8018f18 <RadioIrqProcess+0x440>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	691b      	ldr	r3, [r3, #16]
 8018ec8:	4798      	blx	r3
        break;
 8018eca:	e011      	b.n	8018ef0 <RadioIrqProcess+0x418>
        break;
 8018ecc:	bf00      	nop
 8018ece:	e010      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ed0:	bf00      	nop
 8018ed2:	e00e      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ed4:	bf00      	nop
 8018ed6:	e00c      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ed8:	bf00      	nop
 8018eda:	e00a      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018edc:	bf00      	nop
 8018ede:	e008      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ee0:	bf00      	nop
 8018ee2:	e006      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ee4:	bf00      	nop
 8018ee6:	e004      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ee8:	bf00      	nop
 8018eea:	e002      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018eec:	bf00      	nop
 8018eee:	e000      	b.n	8018ef2 <RadioIrqProcess+0x41a>
        break;
 8018ef0:	bf00      	nop
    }
}
 8018ef2:	bf00      	nop
 8018ef4:	3708      	adds	r7, #8
 8018ef6:	46bd      	mov	sp, r7
 8018ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8018efa:	bf00      	nop
 8018efc:	0801ca04 	.word	0x0801ca04
 8018f00:	20001b4c 	.word	0x20001b4c
 8018f04:	080188e9 	.word	0x080188e9
 8018f08:	0801890d 	.word	0x0801890d
 8018f0c:	0801ca10 	.word	0x0801ca10
 8018f10:	0801ca1c 	.word	0x0801ca1c
 8018f14:	20001bc0 	.word	0x20001bc0
 8018f18:	20001b48 	.word	0x20001b48
 8018f1c:	0801ca28 	.word	0x0801ca28
 8018f20:	0801ca34 	.word	0x0801ca34

08018f24 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018f24:	b580      	push	{r7, lr}
 8018f26:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018f28:	4b09      	ldr	r3, [pc, #36]	@ (8018f50 <RadioTxPrbs+0x2c>)
 8018f2a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018f2e:	2101      	movs	r1, #1
 8018f30:	4618      	mov	r0, r3
 8018f32:	f001 fce3 	bl	801a8fc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018f36:	4b07      	ldr	r3, [pc, #28]	@ (8018f54 <RadioTxPrbs+0x30>)
 8018f38:	212d      	movs	r1, #45	@ 0x2d
 8018f3a:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018f3e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8018f40:	f000 ff27 	bl	8019d92 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018f44:	4804      	ldr	r0, [pc, #16]	@ (8018f58 <RadioTxPrbs+0x34>)
 8018f46:	f000 fe7d 	bl	8019c44 <SUBGRF_SetTx>
}
 8018f4a:	bf00      	nop
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	20001b4c 	.word	0x20001b4c
 8018f54:	080188e9 	.word	0x080188e9
 8018f58:	000fffff 	.word	0x000fffff

08018f5c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b084      	sub	sp, #16
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	4603      	mov	r3, r0
 8018f64:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018f6a:	4618      	mov	r0, r3
 8018f6c:	f001 fcee 	bl	801a94c <SUBGRF_SetRfTxPower>
 8018f70:	4603      	mov	r3, r0
 8018f72:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018f74:	210e      	movs	r1, #14
 8018f76:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018f7a:	f001 fbcb 	bl	801a714 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018f7e:	7bfb      	ldrb	r3, [r7, #15]
 8018f80:	2101      	movs	r1, #1
 8018f82:	4618      	mov	r0, r3
 8018f84:	f001 fcba 	bl	801a8fc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018f88:	f000 fefa 	bl	8019d80 <SUBGRF_SetTxContinuousWave>
}
 8018f8c:	bf00      	nop
 8018f8e:	3710      	adds	r7, #16
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd80      	pop	{r7, pc}

08018f94 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8018f94:	b480      	push	{r7}
 8018f96:	b089      	sub	sp, #36	@ 0x24
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 8018fa6:	2300      	movs	r3, #0
 8018fa8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 8018faa:	2300      	movs	r3, #0
 8018fac:	61bb      	str	r3, [r7, #24]
 8018fae:	e011      	b.n	8018fd4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8018fb0:	69bb      	ldr	r3, [r7, #24]
 8018fb2:	68ba      	ldr	r2, [r7, #8]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	781a      	ldrb	r2, [r3, #0]
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	68b9      	ldr	r1, [r7, #8]
 8018fbc:	440b      	add	r3, r1
 8018fbe:	43d2      	mvns	r2, r2
 8018fc0:	b2d2      	uxtb	r2, r2
 8018fc2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8018fc4:	69bb      	ldr	r3, [r7, #24]
 8018fc6:	68fa      	ldr	r2, [r7, #12]
 8018fc8:	4413      	add	r3, r2
 8018fca:	2200      	movs	r2, #0
 8018fcc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8018fce:	69bb      	ldr	r3, [r7, #24]
 8018fd0:	3301      	adds	r3, #1
 8018fd2:	61bb      	str	r3, [r7, #24]
 8018fd4:	79fb      	ldrb	r3, [r7, #7]
 8018fd6:	69ba      	ldr	r2, [r7, #24]
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	dbe9      	blt.n	8018fb0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8018fdc:	2300      	movs	r3, #0
 8018fde:	61bb      	str	r3, [r7, #24]
 8018fe0:	e049      	b.n	8019076 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8018fe2:	69bb      	ldr	r3, [r7, #24]
 8018fe4:	425a      	negs	r2, r3
 8018fe6:	f003 0307 	and.w	r3, r3, #7
 8018fea:	f002 0207 	and.w	r2, r2, #7
 8018fee:	bf58      	it	pl
 8018ff0:	4253      	negpl	r3, r2
 8018ff2:	b2db      	uxtb	r3, r3
 8018ff4:	f1c3 0307 	rsb	r3, r3, #7
 8018ff8:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8018ffa:	69bb      	ldr	r3, [r7, #24]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	da00      	bge.n	8019002 <payload_integration+0x6e>
 8019000:	3307      	adds	r3, #7
 8019002:	10db      	asrs	r3, r3, #3
 8019004:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8019006:	69bb      	ldr	r3, [r7, #24]
 8019008:	3301      	adds	r3, #1
 801900a:	425a      	negs	r2, r3
 801900c:	f003 0307 	and.w	r3, r3, #7
 8019010:	f002 0207 	and.w	r2, r2, #7
 8019014:	bf58      	it	pl
 8019016:	4253      	negpl	r3, r2
 8019018:	b2db      	uxtb	r3, r3
 801901a:	f1c3 0307 	rsb	r3, r3, #7
 801901e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8019020:	69bb      	ldr	r3, [r7, #24]
 8019022:	3301      	adds	r3, #1
 8019024:	2b00      	cmp	r3, #0
 8019026:	da00      	bge.n	801902a <payload_integration+0x96>
 8019028:	3307      	adds	r3, #7
 801902a:	10db      	asrs	r3, r3, #3
 801902c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801902e:	7dbb      	ldrb	r3, [r7, #22]
 8019030:	68ba      	ldr	r2, [r7, #8]
 8019032:	4413      	add	r3, r2
 8019034:	781b      	ldrb	r3, [r3, #0]
 8019036:	461a      	mov	r2, r3
 8019038:	7dfb      	ldrb	r3, [r7, #23]
 801903a:	fa42 f303 	asr.w	r3, r2, r3
 801903e:	b2db      	uxtb	r3, r3
 8019040:	f003 0301 	and.w	r3, r3, #1
 8019044:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8019046:	7ffa      	ldrb	r2, [r7, #31]
 8019048:	7cfb      	ldrb	r3, [r7, #19]
 801904a:	4053      	eors	r3, r2
 801904c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801904e:	7d3b      	ldrb	r3, [r7, #20]
 8019050:	68fa      	ldr	r2, [r7, #12]
 8019052:	4413      	add	r3, r2
 8019054:	781b      	ldrb	r3, [r3, #0]
 8019056:	b25a      	sxtb	r2, r3
 8019058:	7ff9      	ldrb	r1, [r7, #31]
 801905a:	7d7b      	ldrb	r3, [r7, #21]
 801905c:	fa01 f303 	lsl.w	r3, r1, r3
 8019060:	b25b      	sxtb	r3, r3
 8019062:	4313      	orrs	r3, r2
 8019064:	b259      	sxtb	r1, r3
 8019066:	7d3b      	ldrb	r3, [r7, #20]
 8019068:	68fa      	ldr	r2, [r7, #12]
 801906a:	4413      	add	r3, r2
 801906c:	b2ca      	uxtb	r2, r1
 801906e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8019070:	69bb      	ldr	r3, [r7, #24]
 8019072:	3301      	adds	r3, #1
 8019074:	61bb      	str	r3, [r7, #24]
 8019076:	79fb      	ldrb	r3, [r7, #7]
 8019078:	00db      	lsls	r3, r3, #3
 801907a:	69ba      	ldr	r2, [r7, #24]
 801907c:	429a      	cmp	r2, r3
 801907e:	dbb0      	blt.n	8018fe2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8019080:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019084:	01db      	lsls	r3, r3, #7
 8019086:	b25a      	sxtb	r2, r3
 8019088:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801908c:	019b      	lsls	r3, r3, #6
 801908e:	b25b      	sxtb	r3, r3
 8019090:	4313      	orrs	r3, r2
 8019092:	b25b      	sxtb	r3, r3
 8019094:	7ffa      	ldrb	r2, [r7, #31]
 8019096:	2a00      	cmp	r2, #0
 8019098:	d101      	bne.n	801909e <payload_integration+0x10a>
 801909a:	2220      	movs	r2, #32
 801909c:	e000      	b.n	80190a0 <payload_integration+0x10c>
 801909e:	2200      	movs	r2, #0
 80190a0:	4313      	orrs	r3, r2
 80190a2:	b259      	sxtb	r1, r3
 80190a4:	79fb      	ldrb	r3, [r7, #7]
 80190a6:	68fa      	ldr	r2, [r7, #12]
 80190a8:	4413      	add	r3, r2
 80190aa:	b2ca      	uxtb	r2, r1
 80190ac:	701a      	strb	r2, [r3, #0]
}
 80190ae:	bf00      	nop
 80190b0:	3724      	adds	r7, #36	@ 0x24
 80190b2:	46bd      	mov	sp, r7
 80190b4:	bc80      	pop	{r7}
 80190b6:	4770      	bx	lr

080190b8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 80190b8:	b580      	push	{r7, lr}
 80190ba:	b08c      	sub	sp, #48	@ 0x30
 80190bc:	af00      	add	r7, sp, #0
 80190be:	60b9      	str	r1, [r7, #8]
 80190c0:	607a      	str	r2, [r7, #4]
 80190c2:	603b      	str	r3, [r7, #0]
 80190c4:	4603      	mov	r3, r0
 80190c6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80190c8:	2300      	movs	r3, #0
 80190ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80190cc:	f107 0320 	add.w	r3, r7, #32
 80190d0:	2200      	movs	r2, #0
 80190d2:	601a      	str	r2, [r3, #0]
 80190d4:	605a      	str	r2, [r3, #4]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80190d6:	f001 fe04 	bl	801ace2 <RFW_DeInit>

    if( rxContinuous != 0 )
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d001      	beq.n	80190e4 <RadioSetRxGenericConfig+0x2c>
    {
        symbTimeout = 0;
 80190e0:	2300      	movs	r3, #0
 80190e2:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	2b00      	cmp	r3, #0
 80190e8:	bf14      	ite	ne
 80190ea:	2301      	movne	r3, #1
 80190ec:	2300      	moveq	r3, #0
 80190ee:	b2da      	uxtb	r2, r3
 80190f0:	4ba3      	ldr	r3, [pc, #652]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80190f2:	705a      	strb	r2, [r3, #1]

    switch( modem )
 80190f4:	7bfb      	ldrb	r3, [r7, #15]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d003      	beq.n	8019102 <RadioSetRxGenericConfig+0x4a>
 80190fa:	2b01      	cmp	r3, #1
 80190fc:	f000 80dc 	beq.w	80192b8 <RadioSetRxGenericConfig+0x200>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 8019100:	e195      	b.n	801942e <RadioSetRxGenericConfig+0x376>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8019102:	68bb      	ldr	r3, [r7, #8]
 8019104:	689b      	ldr	r3, [r3, #8]
 8019106:	2b00      	cmp	r3, #0
 8019108:	d003      	beq.n	8019112 <RadioSetRxGenericConfig+0x5a>
 801910a:	68bb      	ldr	r3, [r7, #8]
 801910c:	68db      	ldr	r3, [r3, #12]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d102      	bne.n	8019118 <RadioSetRxGenericConfig+0x60>
            return -1;
 8019112:	f04f 33ff 	mov.w	r3, #4294967295
 8019116:	e18b      	b.n	8019430 <RadioSetRxGenericConfig+0x378>
        if( config->fsk.SyncWordLength > 8 )
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	7f9b      	ldrb	r3, [r3, #30]
 801911c:	2b08      	cmp	r3, #8
 801911e:	d902      	bls.n	8019126 <RadioSetRxGenericConfig+0x6e>
            return -1;
 8019120:	f04f 33ff 	mov.w	r3, #4294967295
 8019124:	e184      	b.n	8019430 <RadioSetRxGenericConfig+0x378>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019126:	68bb      	ldr	r3, [r7, #8]
 8019128:	6919      	ldr	r1, [r3, #16]
 801912a:	68bb      	ldr	r3, [r7, #8]
 801912c:	7f9b      	ldrb	r3, [r3, #30]
 801912e:	461a      	mov	r2, r3
 8019130:	f107 0320 	add.w	r3, r7, #32
 8019134:	4618      	mov	r0, r3
 8019136:	f001 fec7 	bl	801aec8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801913a:	68bb      	ldr	r3, [r7, #8]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2b00      	cmp	r3, #0
 8019140:	bf14      	ite	ne
 8019142:	2301      	movne	r3, #1
 8019144:	2300      	moveq	r3, #0
 8019146:	b2db      	uxtb	r3, r3
 8019148:	4618      	mov	r0, r3
 801914a:	f000 fe2b 	bl	8019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801914e:	4b8c      	ldr	r3, [pc, #560]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019150:	2200      	movs	r2, #0
 8019152:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019156:	68bb      	ldr	r3, [r7, #8]
 8019158:	689b      	ldr	r3, [r3, #8]
 801915a:	4a89      	ldr	r2, [pc, #548]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801915c:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801915e:	68bb      	ldr	r3, [r7, #8]
 8019160:	f893 2020 	ldrb.w	r2, [r3, #32]
 8019164:	4b86      	ldr	r3, [pc, #536]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019166:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801916a:	68bb      	ldr	r3, [r7, #8]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	4618      	mov	r0, r3
 8019170:	f001 fcea 	bl	801ab48 <SUBGRF_GetFskBandwidthRegValue>
 8019174:	4603      	mov	r3, r0
 8019176:	461a      	mov	r2, r3
 8019178:	4b81      	ldr	r3, [pc, #516]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801917a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801917e:	4b80      	ldr	r3, [pc, #512]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019180:	2200      	movs	r2, #0
 8019182:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8019184:	68bb      	ldr	r3, [r7, #8]
 8019186:	68db      	ldr	r3, [r3, #12]
 8019188:	b29b      	uxth	r3, r3
 801918a:	00db      	lsls	r3, r3, #3
 801918c:	b29a      	uxth	r2, r3
 801918e:	4b7c      	ldr	r3, [pc, #496]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019190:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	7fda      	ldrb	r2, [r3, #31]
 8019196:	4b7a      	ldr	r3, [pc, #488]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019198:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801919a:	68bb      	ldr	r3, [r7, #8]
 801919c:	7f9b      	ldrb	r3, [r3, #30]
 801919e:	00db      	lsls	r3, r3, #3
 80191a0:	b2da      	uxtb	r2, r3
 80191a2:	4b77      	ldr	r3, [pc, #476]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80191a4:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80191a6:	68bb      	ldr	r3, [r7, #8]
 80191a8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80191ac:	4b74      	ldr	r3, [pc, #464]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80191ae:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80191b0:	68bb      	ldr	r3, [r7, #8]
 80191b2:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d105      	bne.n	80191c6 <RadioSetRxGenericConfig+0x10e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80191ba:	68bb      	ldr	r3, [r7, #8]
 80191bc:	695b      	ldr	r3, [r3, #20]
 80191be:	b2da      	uxtb	r2, r3
 80191c0:	4b6f      	ldr	r3, [pc, #444]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80191c2:	759a      	strb	r2, [r3, #22]
 80191c4:	e00b      	b.n	80191de <RadioSetRxGenericConfig+0x126>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80191c6:	68bb      	ldr	r3, [r7, #8]
 80191c8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80191cc:	2b02      	cmp	r3, #2
 80191ce:	d103      	bne.n	80191d8 <RadioSetRxGenericConfig+0x120>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80191d0:	4b6b      	ldr	r3, [pc, #428]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80191d2:	22ff      	movs	r2, #255	@ 0xff
 80191d4:	759a      	strb	r2, [r3, #22]
 80191d6:	e002      	b.n	80191de <RadioSetRxGenericConfig+0x126>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80191d8:	4b69      	ldr	r3, [pc, #420]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80191da:	22ff      	movs	r2, #255	@ 0xff
 80191dc:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 80191de:	68bb      	ldr	r3, [r7, #8]
 80191e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80191e4:	2b02      	cmp	r3, #2
 80191e6:	d004      	beq.n	80191f2 <RadioSetRxGenericConfig+0x13a>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80191e8:	68bb      	ldr	r3, [r7, #8]
 80191ea:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80191ee:	2b02      	cmp	r3, #2
 80191f0:	d12d      	bne.n	801924e <RadioSetRxGenericConfig+0x196>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80191f2:	68bb      	ldr	r3, [r7, #8]
 80191f4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80191f8:	2bf1      	cmp	r3, #241	@ 0xf1
 80191fa:	d00c      	beq.n	8019216 <RadioSetRxGenericConfig+0x15e>
 80191fc:	68bb      	ldr	r3, [r7, #8]
 80191fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8019202:	2bf2      	cmp	r3, #242	@ 0xf2
 8019204:	d007      	beq.n	8019216 <RadioSetRxGenericConfig+0x15e>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019206:	68bb      	ldr	r3, [r7, #8]
 8019208:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801920c:	2b01      	cmp	r3, #1
 801920e:	d002      	beq.n	8019216 <RadioSetRxGenericConfig+0x15e>
                return -1;
 8019210:	f04f 33ff 	mov.w	r3, #4294967295
 8019214:	e10c      	b.n	8019430 <RadioSetRxGenericConfig+0x378>
            ConfigGeneric.rtx = CONFIG_RX;
 8019216:	2300      	movs	r3, #0
 8019218:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801921a:	68bb      	ldr	r3, [r7, #8]
 801921c:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801921e:	4b59      	ldr	r3, [pc, #356]	@ (8019384 <RadioSetRxGenericConfig+0x2cc>)
 8019220:	6819      	ldr	r1, [r3, #0]
 8019222:	f107 0314 	add.w	r3, r7, #20
 8019226:	4a58      	ldr	r2, [pc, #352]	@ (8019388 <RadioSetRxGenericConfig+0x2d0>)
 8019228:	4618      	mov	r0, r3
 801922a:	f001 fd4d 	bl	801acc8 <RFW_Init>
 801922e:	4603      	mov	r3, r0
 8019230:	2b00      	cmp	r3, #0
 8019232:	d002      	beq.n	801923a <RadioSetRxGenericConfig+0x182>
                return -1;
 8019234:	f04f 33ff 	mov.w	r3, #4294967295
 8019238:	e0fa      	b.n	8019430 <RadioSetRxGenericConfig+0x378>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801923a:	4b51      	ldr	r3, [pc, #324]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801923c:	2200      	movs	r2, #0
 801923e:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019240:	4b4f      	ldr	r3, [pc, #316]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019242:	2201      	movs	r2, #1
 8019244:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8019246:	4b4e      	ldr	r3, [pc, #312]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019248:	2200      	movs	r2, #0
 801924a:	755a      	strb	r2, [r3, #21]
        {
 801924c:	e00e      	b.n	801926c <RadioSetRxGenericConfig+0x1b4>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801924e:	68bb      	ldr	r3, [r7, #8]
 8019250:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8019254:	4b4a      	ldr	r3, [pc, #296]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019256:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8019258:	68bb      	ldr	r3, [r7, #8]
 801925a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801925e:	4b48      	ldr	r3, [pc, #288]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019260:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8019268:	4b45      	ldr	r3, [pc, #276]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801926a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801926c:	f7ff fa3b 	bl	80186e6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8019270:	2000      	movs	r0, #0
 8019272:	f7fe fbcf 	bl	8017a14 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8019276:	4845      	ldr	r0, [pc, #276]	@ (801938c <RadioSetRxGenericConfig+0x2d4>)
 8019278:	f001 f838 	bl	801a2ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801927c:	4844      	ldr	r0, [pc, #272]	@ (8019390 <RadioSetRxGenericConfig+0x2d8>)
 801927e:	f001 f903 	bl	801a488 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8019282:	f107 0320 	add.w	r3, r7, #32
 8019286:	4618      	mov	r0, r3
 8019288:	f000 fbc3 	bl	8019a12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	8b9b      	ldrh	r3, [r3, #28]
 8019290:	4618      	mov	r0, r3
 8019292:	f000 fc0d 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8019296:	68bb      	ldr	r3, [r7, #8]
 8019298:	8b1b      	ldrh	r3, [r3, #24]
 801929a:	4618      	mov	r0, r3
 801929c:	f000 fbe8 	bl	8019a70 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80192a6:	fb03 f202 	mul.w	r2, r3, r2
 80192aa:	68bb      	ldr	r3, [r7, #8]
 80192ac:	689b      	ldr	r3, [r3, #8]
 80192ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80192b2:	4a33      	ldr	r2, [pc, #204]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 80192b4:	6093      	str	r3, [r2, #8]
        break;
 80192b6:	e0ba      	b.n	801942e <RadioSetRxGenericConfig+0x376>
        if( config->lora.PreambleLen == 0 )
 80192b8:	68bb      	ldr	r3, [r7, #8]
 80192ba:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d102      	bne.n	80192c6 <RadioSetRxGenericConfig+0x20e>
            return -1;
 80192c0:	f04f 33ff 	mov.w	r3, #4294967295
 80192c4:	e0b4      	b.n	8019430 <RadioSetRxGenericConfig+0x378>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80192cc:	2b01      	cmp	r3, #1
 80192ce:	d104      	bne.n	80192da <RadioSetRxGenericConfig+0x222>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80192d0:	68bb      	ldr	r3, [r7, #8]
 80192d2:	695b      	ldr	r3, [r3, #20]
 80192d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80192d8:	e002      	b.n	80192e0 <RadioSetRxGenericConfig+0x228>
            MaxPayloadLength = 0xFF;
 80192da:	23ff      	movs	r3, #255	@ 0xff
 80192dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80192e0:	68bb      	ldr	r3, [r7, #8]
 80192e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80192e4:	2b00      	cmp	r3, #0
 80192e6:	bf14      	ite	ne
 80192e8:	2301      	movne	r3, #1
 80192ea:	2300      	moveq	r3, #0
 80192ec:	b2db      	uxtb	r3, r3
 80192ee:	4618      	mov	r0, r3
 80192f0:	f000 fd58 	bl	8019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80192f4:	683b      	ldr	r3, [r7, #0]
 80192f6:	b2db      	uxtb	r3, r3
 80192f8:	4618      	mov	r0, r3
 80192fa:	f000 fd62 	bl	8019dc2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80192fe:	4b20      	ldr	r3, [pc, #128]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019300:	2201      	movs	r2, #1
 8019302:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019306:	68bb      	ldr	r3, [r7, #8]
 8019308:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801930c:	4b1c      	ldr	r3, [pc, #112]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801930e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019312:	68bb      	ldr	r3, [r7, #8]
 8019314:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8019318:	4b19      	ldr	r3, [pc, #100]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801931a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801931e:	68bb      	ldr	r3, [r7, #8]
 8019320:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8019324:	4b16      	ldr	r3, [pc, #88]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019326:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801932a:	68bb      	ldr	r3, [r7, #8]
 801932c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8019330:	2b02      	cmp	r3, #2
 8019332:	d010      	beq.n	8019356 <RadioSetRxGenericConfig+0x29e>
 8019334:	2b02      	cmp	r3, #2
 8019336:	dc2d      	bgt.n	8019394 <RadioSetRxGenericConfig+0x2dc>
 8019338:	2b00      	cmp	r3, #0
 801933a:	d002      	beq.n	8019342 <RadioSetRxGenericConfig+0x28a>
 801933c:	2b01      	cmp	r3, #1
 801933e:	d005      	beq.n	801934c <RadioSetRxGenericConfig+0x294>
            break;
 8019340:	e028      	b.n	8019394 <RadioSetRxGenericConfig+0x2dc>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019342:	4b0f      	ldr	r3, [pc, #60]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019344:	2200      	movs	r2, #0
 8019346:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801934a:	e024      	b.n	8019396 <RadioSetRxGenericConfig+0x2de>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801934c:	4b0c      	ldr	r3, [pc, #48]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801934e:	2201      	movs	r2, #1
 8019350:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019354:	e01f      	b.n	8019396 <RadioSetRxGenericConfig+0x2de>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801935c:	2b0b      	cmp	r3, #11
 801935e:	d004      	beq.n	801936a <RadioSetRxGenericConfig+0x2b2>
 8019360:	68bb      	ldr	r3, [r7, #8]
 8019362:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8019366:	2b0c      	cmp	r3, #12
 8019368:	d104      	bne.n	8019374 <RadioSetRxGenericConfig+0x2bc>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801936a:	4b05      	ldr	r3, [pc, #20]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 801936c:	2201      	movs	r2, #1
 801936e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019372:	e010      	b.n	8019396 <RadioSetRxGenericConfig+0x2de>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8019374:	4b02      	ldr	r3, [pc, #8]	@ (8019380 <RadioSetRxGenericConfig+0x2c8>)
 8019376:	2200      	movs	r2, #0
 8019378:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801937c:	e00b      	b.n	8019396 <RadioSetRxGenericConfig+0x2de>
 801937e:	bf00      	nop
 8019380:	20001b4c 	.word	0x20001b4c
 8019384:	20001b48 	.word	0x20001b48
 8019388:	20001bc0 	.word	0x20001bc0
 801938c:	20001b84 	.word	0x20001b84
 8019390:	20001b5a 	.word	0x20001b5a
            break;
 8019394:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8019396:	4b28      	ldr	r3, [pc, #160]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 8019398:	2201      	movs	r2, #1
 801939a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801939c:	68bb      	ldr	r3, [r7, #8]
 801939e:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80193a0:	4b25      	ldr	r3, [pc, #148]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193a2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80193a4:	68bb      	ldr	r3, [r7, #8]
 80193a6:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80193aa:	4b23      	ldr	r3, [pc, #140]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193ac:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80193ae:	4a22      	ldr	r2, [pc, #136]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80193b4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80193b6:	68bb      	ldr	r3, [r7, #8]
 80193b8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80193bc:	4b1e      	ldr	r3, [pc, #120]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193be:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80193c2:	68bb      	ldr	r3, [r7, #8]
 80193c4:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80193c8:	4b1b      	ldr	r3, [pc, #108]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80193ce:	f7ff f98a 	bl	80186e6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80193d2:	2001      	movs	r0, #1
 80193d4:	f7fe fb1e 	bl	8017a14 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80193d8:	4818      	ldr	r0, [pc, #96]	@ (801943c <RadioSetRxGenericConfig+0x384>)
 80193da:	f000 ff87 	bl	801a2ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80193de:	4818      	ldr	r0, [pc, #96]	@ (8019440 <RadioSetRxGenericConfig+0x388>)
 80193e0:	f001 f852 	bl	801a488 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80193e4:	4b14      	ldr	r3, [pc, #80]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 80193e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80193ea:	2b01      	cmp	r3, #1
 80193ec:	d10d      	bne.n	801940a <RadioSetRxGenericConfig+0x352>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80193ee:	f240 7036 	movw	r0, #1846	@ 0x736
 80193f2:	f001 f9a3 	bl	801a73c <SUBGRF_ReadRegister>
 80193f6:	4603      	mov	r3, r0
 80193f8:	f023 0304 	bic.w	r3, r3, #4
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	4619      	mov	r1, r3
 8019400:	f240 7036 	movw	r0, #1846	@ 0x736
 8019404:	f001 f986 	bl	801a714 <SUBGRF_WriteRegister>
 8019408:	e00c      	b.n	8019424 <RadioSetRxGenericConfig+0x36c>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801940a:	f240 7036 	movw	r0, #1846	@ 0x736
 801940e:	f001 f995 	bl	801a73c <SUBGRF_ReadRegister>
 8019412:	4603      	mov	r3, r0
 8019414:	f043 0304 	orr.w	r3, r3, #4
 8019418:	b2db      	uxtb	r3, r3
 801941a:	4619      	mov	r1, r3
 801941c:	f240 7036 	movw	r0, #1846	@ 0x736
 8019420:	f001 f978 	bl	801a714 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8019424:	4b04      	ldr	r3, [pc, #16]	@ (8019438 <RadioSetRxGenericConfig+0x380>)
 8019426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801942a:	609a      	str	r2, [r3, #8]
        break;
 801942c:	bf00      	nop
    }
    return status;
 801942e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8019430:	4618      	mov	r0, r3
 8019432:	3730      	adds	r7, #48	@ 0x30
 8019434:	46bd      	mov	sp, r7
 8019436:	bd80      	pop	{r7, pc}
 8019438:	20001b4c 	.word	0x20001b4c
 801943c:	20001b84 	.word	0x20001b84
 8019440:	20001b5a 	.word	0x20001b5a

08019444 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8019444:	b580      	push	{r7, lr}
 8019446:	b08e      	sub	sp, #56	@ 0x38
 8019448:	af00      	add	r7, sp, #0
 801944a:	60b9      	str	r1, [r7, #8]
 801944c:	607b      	str	r3, [r7, #4]
 801944e:	4603      	mov	r3, r0
 8019450:	73fb      	strb	r3, [r7, #15]
 8019452:	4613      	mov	r3, r2
 8019454:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8019456:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801945a:	2200      	movs	r2, #0
 801945c:	601a      	str	r2, [r3, #0]
 801945e:	605a      	str	r2, [r3, #4]
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8019460:	f001 fc3f 	bl	801ace2 <RFW_DeInit>
    switch( modem )
 8019464:	7bfb      	ldrb	r3, [r7, #15]
 8019466:	2b03      	cmp	r3, #3
 8019468:	f200 8205 	bhi.w	8019876 <RadioSetTxGenericConfig+0x432>
 801946c:	a201      	add	r2, pc, #4	@ (adr r2, 8019474 <RadioSetTxGenericConfig+0x30>)
 801946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019472:	bf00      	nop
 8019474:	080195f9 	.word	0x080195f9
 8019478:	08019741 	.word	0x08019741
 801947c:	08019839 	.word	0x08019839
 8019480:	08019485 	.word	0x08019485
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 8019484:	68bb      	ldr	r3, [r7, #8]
 8019486:	7c9b      	ldrb	r3, [r3, #18]
 8019488:	2b08      	cmp	r3, #8
 801948a:	d902      	bls.n	8019492 <RadioSetTxGenericConfig+0x4e>
        {
            return -1;
 801948c:	f04f 33ff 	mov.w	r3, #4294967295
 8019490:	e206      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 8019492:	68bb      	ldr	r3, [r7, #8]
 8019494:	6899      	ldr	r1, [r3, #8]
 8019496:	68bb      	ldr	r3, [r7, #8]
 8019498:	7c9b      	ldrb	r3, [r3, #18]
 801949a:	461a      	mov	r2, r3
 801949c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80194a0:	4618      	mov	r0, r3
 80194a2:	f001 fd11 	bl	801aec8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80194a6:	68bb      	ldr	r3, [r7, #8]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d102      	bne.n	80194b4 <RadioSetTxGenericConfig+0x70>
        {
            return -1;
 80194ae:	f04f 33ff 	mov.w	r3, #4294967295
 80194b2:	e1f5      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
        }
        else if( config->msk.BitRate <= 10000 )
 80194b4:	68bb      	ldr	r3, [r7, #8]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80194bc:	4293      	cmp	r3, r2
 80194be:	d813      	bhi.n	80194e8 <RadioSetTxGenericConfig+0xa4>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 80194c0:	2302      	movs	r3, #2
 80194c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80194c6:	4b99      	ldr	r3, [pc, #612]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194c8:	2203      	movs	r2, #3
 80194ca:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80194cc:	4b97      	ldr	r3, [pc, #604]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194ce:	2203      	movs	r2, #3
 80194d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80194d4:	68bb      	ldr	r3, [r7, #8]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	4a94      	ldr	r2, [pc, #592]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194da:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	7cda      	ldrb	r2, [r3, #19]
 80194e0:	4b92      	ldr	r3, [pc, #584]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80194e6:	e017      	b.n	8019518 <RadioSetTxGenericConfig+0xd4>
        }
        else
        {
            radio_modem = MODEM_FSK;
 80194e8:	2300      	movs	r3, #0
 80194ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80194ee:	4b8f      	ldr	r3, [pc, #572]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194f0:	2200      	movs	r2, #0
 80194f2:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80194f4:	4b8d      	ldr	r3, [pc, #564]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80194f6:	2200      	movs	r2, #0
 80194f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80194fc:	68bb      	ldr	r3, [r7, #8]
 80194fe:	681b      	ldr	r3, [r3, #0]
 8019500:	4a8a      	ldr	r2, [pc, #552]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019502:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8019504:	68bb      	ldr	r3, [r7, #8]
 8019506:	7cda      	ldrb	r2, [r3, #19]
 8019508:	4b88      	ldr	r3, [pc, #544]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801950a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801950e:	68bb      	ldr	r3, [r7, #8]
 8019510:	681b      	ldr	r3, [r3, #0]
 8019512:	089b      	lsrs	r3, r3, #2
 8019514:	4a85      	ldr	r2, [pc, #532]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019516:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8019518:	68bb      	ldr	r3, [r7, #8]
 801951a:	685b      	ldr	r3, [r3, #4]
 801951c:	b29b      	uxth	r3, r3
 801951e:	00db      	lsls	r3, r3, #3
 8019520:	b29a      	uxth	r2, r3
 8019522:	4b82      	ldr	r3, [pc, #520]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019524:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8019526:	4b81      	ldr	r3, [pc, #516]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019528:	2204      	movs	r2, #4
 801952a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801952c:	68bb      	ldr	r3, [r7, #8]
 801952e:	7c9b      	ldrb	r3, [r3, #18]
 8019530:	00db      	lsls	r3, r3, #3
 8019532:	b2da      	uxtb	r2, r3
 8019534:	4b7d      	ldr	r3, [pc, #500]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019536:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019538:	4b7c      	ldr	r3, [pc, #496]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801953a:	2200      	movs	r2, #0
 801953c:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	7d9b      	ldrb	r3, [r3, #22]
 8019542:	2b02      	cmp	r3, #2
 8019544:	d003      	beq.n	801954e <RadioSetTxGenericConfig+0x10a>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8019546:	68bb      	ldr	r3, [r7, #8]
 8019548:	7d1b      	ldrb	r3, [r3, #20]
 801954a:	2b02      	cmp	r3, #2
 801954c:	d12b      	bne.n	80195a6 <RadioSetTxGenericConfig+0x162>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801954e:	68bb      	ldr	r3, [r7, #8]
 8019550:	7d5b      	ldrb	r3, [r3, #21]
 8019552:	2bf1      	cmp	r3, #241	@ 0xf1
 8019554:	d00a      	beq.n	801956c <RadioSetTxGenericConfig+0x128>
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	7d5b      	ldrb	r3, [r3, #21]
 801955a:	2bf2      	cmp	r3, #242	@ 0xf2
 801955c:	d006      	beq.n	801956c <RadioSetTxGenericConfig+0x128>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	7d5b      	ldrb	r3, [r3, #21]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d002      	beq.n	801956c <RadioSetTxGenericConfig+0x128>
            {
                return -1;
 8019566:	f04f 33ff 	mov.w	r3, #4294967295
 801956a:	e199      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801956c:	68bb      	ldr	r3, [r7, #8]
 801956e:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8019570:	2301      	movs	r3, #1
 8019572:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8019576:	4b6e      	ldr	r3, [pc, #440]	@ (8019730 <RadioSetTxGenericConfig+0x2ec>)
 8019578:	6819      	ldr	r1, [r3, #0]
 801957a:	f107 0320 	add.w	r3, r7, #32
 801957e:	4a6d      	ldr	r2, [pc, #436]	@ (8019734 <RadioSetTxGenericConfig+0x2f0>)
 8019580:	4618      	mov	r0, r3
 8019582:	f001 fba1 	bl	801acc8 <RFW_Init>
 8019586:	4603      	mov	r3, r0
 8019588:	2b00      	cmp	r3, #0
 801958a:	d002      	beq.n	8019592 <RadioSetTxGenericConfig+0x14e>
            {
                return -1;
 801958c:	f04f 33ff 	mov.w	r3, #4294967295
 8019590:	e186      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8019592:	4b66      	ldr	r3, [pc, #408]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019594:	2200      	movs	r2, #0
 8019596:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8019598:	4b64      	ldr	r3, [pc, #400]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801959a:	2201      	movs	r2, #1
 801959c:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801959e:	4b63      	ldr	r3, [pc, #396]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80195a0:	2200      	movs	r2, #0
 80195a2:	755a      	strb	r2, [r3, #21]
        {
 80195a4:	e00b      	b.n	80195be <RadioSetTxGenericConfig+0x17a>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80195a6:	68bb      	ldr	r3, [r7, #8]
 80195a8:	7d5a      	ldrb	r2, [r3, #21]
 80195aa:	4b60      	ldr	r3, [pc, #384]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80195ac:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80195ae:	68bb      	ldr	r3, [r7, #8]
 80195b0:	7d9a      	ldrb	r2, [r3, #22]
 80195b2:	4b5e      	ldr	r3, [pc, #376]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80195b4:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80195b6:	68bb      	ldr	r3, [r7, #8]
 80195b8:	7d1a      	ldrb	r2, [r3, #20]
 80195ba:	4b5c      	ldr	r3, [pc, #368]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80195bc:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80195be:	f7ff f892 	bl	80186e6 <RadioStandby>
        RadioSetModem( radio_modem );
 80195c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80195c6:	4618      	mov	r0, r3
 80195c8:	f7fe fa24 	bl	8017a14 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80195cc:	485a      	ldr	r0, [pc, #360]	@ (8019738 <RadioSetTxGenericConfig+0x2f4>)
 80195ce:	f000 fe8d 	bl	801a2ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80195d2:	485a      	ldr	r0, [pc, #360]	@ (801973c <RadioSetTxGenericConfig+0x2f8>)
 80195d4:	f000 ff58 	bl	801a488 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80195d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80195dc:	4618      	mov	r0, r3
 80195de:	f000 fa18 	bl	8019a12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80195e2:	68bb      	ldr	r3, [r7, #8]
 80195e4:	8a1b      	ldrh	r3, [r3, #16]
 80195e6:	4618      	mov	r0, r3
 80195e8:	f000 fa62 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 80195ec:	68bb      	ldr	r3, [r7, #8]
 80195ee:	899b      	ldrh	r3, [r3, #12]
 80195f0:	4618      	mov	r0, r3
 80195f2:	f000 fa3d 	bl	8019a70 <SUBGRF_SetCrcPolynomial>
        break;
 80195f6:	e13f      	b.n	8019878 <RadioSetTxGenericConfig+0x434>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 80195f8:	68bb      	ldr	r3, [r7, #8]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d102      	bne.n	8019606 <RadioSetTxGenericConfig+0x1c2>
        {
            return -1;
 8019600:	f04f 33ff 	mov.w	r3, #4294967295
 8019604:	e14c      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
        }
        if( config->fsk.SyncWordLength > 8 )
 8019606:	68bb      	ldr	r3, [r7, #8]
 8019608:	7c9b      	ldrb	r3, [r3, #18]
 801960a:	2b08      	cmp	r3, #8
 801960c:	d902      	bls.n	8019614 <RadioSetTxGenericConfig+0x1d0>
        {
            return -1;
 801960e:	f04f 33ff 	mov.w	r3, #4294967295
 8019612:	e145      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	6899      	ldr	r1, [r3, #8]
 8019618:	68bb      	ldr	r3, [r7, #8]
 801961a:	7c9b      	ldrb	r3, [r3, #18]
 801961c:	461a      	mov	r2, r3
 801961e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8019622:	4618      	mov	r0, r3
 8019624:	f001 fc50 	bl	801aec8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8019628:	4b40      	ldr	r3, [pc, #256]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801962a:	2200      	movs	r2, #0
 801962c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8019630:	68bb      	ldr	r3, [r7, #8]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	4a3d      	ldr	r2, [pc, #244]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019636:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8019638:	68bb      	ldr	r3, [r7, #8]
 801963a:	7cda      	ldrb	r2, [r3, #19]
 801963c:	4b3b      	ldr	r3, [pc, #236]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801963e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8019642:	68bb      	ldr	r3, [r7, #8]
 8019644:	699b      	ldr	r3, [r3, #24]
 8019646:	4a39      	ldr	r2, [pc, #228]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019648:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801964a:	4b38      	ldr	r3, [pc, #224]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801964c:	2200      	movs	r2, #0
 801964e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8019650:	68bb      	ldr	r3, [r7, #8]
 8019652:	685b      	ldr	r3, [r3, #4]
 8019654:	b29b      	uxth	r3, r3
 8019656:	00db      	lsls	r3, r3, #3
 8019658:	b29a      	uxth	r2, r3
 801965a:	4b34      	ldr	r3, [pc, #208]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801965c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801965e:	4b33      	ldr	r3, [pc, #204]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019660:	2204      	movs	r2, #4
 8019662:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8019664:	68bb      	ldr	r3, [r7, #8]
 8019666:	7c9b      	ldrb	r3, [r3, #18]
 8019668:	00db      	lsls	r3, r3, #3
 801966a:	b2da      	uxtb	r2, r3
 801966c:	4b2f      	ldr	r3, [pc, #188]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 801966e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8019670:	4b2e      	ldr	r3, [pc, #184]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 8019672:	2200      	movs	r2, #0
 8019674:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	7d9b      	ldrb	r3, [r3, #22]
 801967a:	2b02      	cmp	r3, #2
 801967c:	d003      	beq.n	8019686 <RadioSetTxGenericConfig+0x242>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801967e:	68bb      	ldr	r3, [r7, #8]
 8019680:	7d1b      	ldrb	r3, [r3, #20]
 8019682:	2b02      	cmp	r3, #2
 8019684:	d12a      	bne.n	80196dc <RadioSetTxGenericConfig+0x298>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8019686:	68bb      	ldr	r3, [r7, #8]
 8019688:	7d5b      	ldrb	r3, [r3, #21]
 801968a:	2bf1      	cmp	r3, #241	@ 0xf1
 801968c:	d00a      	beq.n	80196a4 <RadioSetTxGenericConfig+0x260>
 801968e:	68bb      	ldr	r3, [r7, #8]
 8019690:	7d5b      	ldrb	r3, [r3, #21]
 8019692:	2bf2      	cmp	r3, #242	@ 0xf2
 8019694:	d006      	beq.n	80196a4 <RadioSetTxGenericConfig+0x260>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8019696:	68bb      	ldr	r3, [r7, #8]
 8019698:	7d5b      	ldrb	r3, [r3, #21]
 801969a:	2b01      	cmp	r3, #1
 801969c:	d002      	beq.n	80196a4 <RadioSetTxGenericConfig+0x260>
            {
                return -1;
 801969e:	f04f 33ff 	mov.w	r3, #4294967295
 80196a2:	e0fd      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80196a4:	2301      	movs	r3, #1
 80196a6:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80196a8:	68bb      	ldr	r3, [r7, #8]
 80196aa:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80196ac:	4b20      	ldr	r3, [pc, #128]	@ (8019730 <RadioSetTxGenericConfig+0x2ec>)
 80196ae:	6819      	ldr	r1, [r3, #0]
 80196b0:	f107 0314 	add.w	r3, r7, #20
 80196b4:	4a1f      	ldr	r2, [pc, #124]	@ (8019734 <RadioSetTxGenericConfig+0x2f0>)
 80196b6:	4618      	mov	r0, r3
 80196b8:	f001 fb06 	bl	801acc8 <RFW_Init>
 80196bc:	4603      	mov	r3, r0
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d002      	beq.n	80196c8 <RadioSetTxGenericConfig+0x284>
            {
                return -1;
 80196c2:	f04f 33ff 	mov.w	r3, #4294967295
 80196c6:	e0eb      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80196c8:	4b18      	ldr	r3, [pc, #96]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196ca:	2200      	movs	r2, #0
 80196cc:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80196ce:	4b17      	ldr	r3, [pc, #92]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196d0:	2201      	movs	r2, #1
 80196d2:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80196d4:	4b15      	ldr	r3, [pc, #84]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196d6:	2200      	movs	r2, #0
 80196d8:	755a      	strb	r2, [r3, #21]
        {
 80196da:	e00b      	b.n	80196f4 <RadioSetTxGenericConfig+0x2b0>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	7d5a      	ldrb	r2, [r3, #21]
 80196e0:	4b12      	ldr	r3, [pc, #72]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196e2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80196e4:	68bb      	ldr	r3, [r7, #8]
 80196e6:	7d9a      	ldrb	r2, [r3, #22]
 80196e8:	4b10      	ldr	r3, [pc, #64]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196ea:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80196ec:	68bb      	ldr	r3, [r7, #8]
 80196ee:	7d1a      	ldrb	r2, [r3, #20]
 80196f0:	4b0e      	ldr	r3, [pc, #56]	@ (801972c <RadioSetTxGenericConfig+0x2e8>)
 80196f2:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80196f4:	f7fe fff7 	bl	80186e6 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80196f8:	2000      	movs	r0, #0
 80196fa:	f7fe f98b 	bl	8017a14 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80196fe:	480e      	ldr	r0, [pc, #56]	@ (8019738 <RadioSetTxGenericConfig+0x2f4>)
 8019700:	f000 fdf4 	bl	801a2ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8019704:	480d      	ldr	r0, [pc, #52]	@ (801973c <RadioSetTxGenericConfig+0x2f8>)
 8019706:	f000 febf 	bl	801a488 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801970a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801970e:	4618      	mov	r0, r3
 8019710:	f000 f97f 	bl	8019a12 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8019714:	68bb      	ldr	r3, [r7, #8]
 8019716:	8a1b      	ldrh	r3, [r3, #16]
 8019718:	4618      	mov	r0, r3
 801971a:	f000 f9c9 	bl	8019ab0 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801971e:	68bb      	ldr	r3, [r7, #8]
 8019720:	899b      	ldrh	r3, [r3, #12]
 8019722:	4618      	mov	r0, r3
 8019724:	f000 f9a4 	bl	8019a70 <SUBGRF_SetCrcPolynomial>
        break;
 8019728:	e0a6      	b.n	8019878 <RadioSetTxGenericConfig+0x434>
 801972a:	bf00      	nop
 801972c:	20001b4c 	.word	0x20001b4c
 8019730:	20001b48 	.word	0x20001b48
 8019734:	20001ba8 	.word	0x20001ba8
 8019738:	20001b84 	.word	0x20001b84
 801973c:	20001b5a 	.word	0x20001b5a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8019740:	4b59      	ldr	r3, [pc, #356]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019742:	2201      	movs	r2, #1
 8019744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	781a      	ldrb	r2, [r3, #0]
 801974c:	4b56      	ldr	r3, [pc, #344]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 801974e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8019752:	68bb      	ldr	r3, [r7, #8]
 8019754:	785a      	ldrb	r2, [r3, #1]
 8019756:	4b54      	ldr	r3, [pc, #336]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019758:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801975c:	68bb      	ldr	r3, [r7, #8]
 801975e:	789a      	ldrb	r2, [r3, #2]
 8019760:	4b51      	ldr	r3, [pc, #324]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019762:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8019766:	68bb      	ldr	r3, [r7, #8]
 8019768:	78db      	ldrb	r3, [r3, #3]
 801976a:	2b02      	cmp	r3, #2
 801976c:	d010      	beq.n	8019790 <RadioSetTxGenericConfig+0x34c>
 801976e:	2b02      	cmp	r3, #2
 8019770:	dc20      	bgt.n	80197b4 <RadioSetTxGenericConfig+0x370>
 8019772:	2b00      	cmp	r3, #0
 8019774:	d002      	beq.n	801977c <RadioSetTxGenericConfig+0x338>
 8019776:	2b01      	cmp	r3, #1
 8019778:	d005      	beq.n	8019786 <RadioSetTxGenericConfig+0x342>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801977a:	e01b      	b.n	80197b4 <RadioSetTxGenericConfig+0x370>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801977c:	4b4a      	ldr	r3, [pc, #296]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 801977e:	2200      	movs	r2, #0
 8019780:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8019784:	e017      	b.n	80197b6 <RadioSetTxGenericConfig+0x372>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8019786:	4b48      	ldr	r3, [pc, #288]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019788:	2201      	movs	r2, #1
 801978a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801978e:	e012      	b.n	80197b6 <RadioSetTxGenericConfig+0x372>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8019790:	68bb      	ldr	r3, [r7, #8]
 8019792:	781b      	ldrb	r3, [r3, #0]
 8019794:	2b0b      	cmp	r3, #11
 8019796:	d003      	beq.n	80197a0 <RadioSetTxGenericConfig+0x35c>
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	781b      	ldrb	r3, [r3, #0]
 801979c:	2b0c      	cmp	r3, #12
 801979e:	d104      	bne.n	80197aa <RadioSetTxGenericConfig+0x366>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80197a0:	4b41      	ldr	r3, [pc, #260]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197a2:	2201      	movs	r2, #1
 80197a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80197a8:	e005      	b.n	80197b6 <RadioSetTxGenericConfig+0x372>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80197aa:	4b3f      	ldr	r3, [pc, #252]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197ac:	2200      	movs	r2, #0
 80197ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80197b2:	e000      	b.n	80197b6 <RadioSetTxGenericConfig+0x372>
            break;
 80197b4:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80197b6:	4b3c      	ldr	r3, [pc, #240]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197b8:	2201      	movs	r2, #1
 80197ba:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80197bc:	68bb      	ldr	r3, [r7, #8]
 80197be:	889a      	ldrh	r2, [r3, #4]
 80197c0:	4b39      	ldr	r3, [pc, #228]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197c2:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80197c4:	68bb      	ldr	r3, [r7, #8]
 80197c6:	799a      	ldrb	r2, [r3, #6]
 80197c8:	4b37      	ldr	r3, [pc, #220]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197ca:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80197cc:	68bb      	ldr	r3, [r7, #8]
 80197ce:	79da      	ldrb	r2, [r3, #7]
 80197d0:	4b35      	ldr	r3, [pc, #212]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197d2:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80197d6:	68bb      	ldr	r3, [r7, #8]
 80197d8:	7a1a      	ldrb	r2, [r3, #8]
 80197da:	4b33      	ldr	r3, [pc, #204]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197dc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80197e0:	f7fe ff81 	bl	80186e6 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80197e4:	2001      	movs	r0, #1
 80197e6:	f7fe f915 	bl	8017a14 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80197ea:	4830      	ldr	r0, [pc, #192]	@ (80198ac <RadioSetTxGenericConfig+0x468>)
 80197ec:	f000 fd7e 	bl	801a2ec <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80197f0:	482f      	ldr	r0, [pc, #188]	@ (80198b0 <RadioSetTxGenericConfig+0x46c>)
 80197f2:	f000 fe49 	bl	801a488 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80197f6:	4b2c      	ldr	r3, [pc, #176]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 80197f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80197fc:	2b06      	cmp	r3, #6
 80197fe:	d10d      	bne.n	801981c <RadioSetTxGenericConfig+0x3d8>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8019800:	f640 0089 	movw	r0, #2185	@ 0x889
 8019804:	f000 ff9a 	bl	801a73c <SUBGRF_ReadRegister>
 8019808:	4603      	mov	r3, r0
 801980a:	f023 0304 	bic.w	r3, r3, #4
 801980e:	b2db      	uxtb	r3, r3
 8019810:	4619      	mov	r1, r3
 8019812:	f640 0089 	movw	r0, #2185	@ 0x889
 8019816:	f000 ff7d 	bl	801a714 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801981a:	e02d      	b.n	8019878 <RadioSetTxGenericConfig+0x434>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801981c:	f640 0089 	movw	r0, #2185	@ 0x889
 8019820:	f000 ff8c 	bl	801a73c <SUBGRF_ReadRegister>
 8019824:	4603      	mov	r3, r0
 8019826:	f043 0304 	orr.w	r3, r3, #4
 801982a:	b2db      	uxtb	r3, r3
 801982c:	4619      	mov	r1, r3
 801982e:	f640 0089 	movw	r0, #2185	@ 0x889
 8019832:	f000 ff6f 	bl	801a714 <SUBGRF_WriteRegister>
        break;
 8019836:	e01f      	b.n	8019878 <RadioSetTxGenericConfig+0x434>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8019838:	68bb      	ldr	r3, [r7, #8]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d004      	beq.n	801984a <RadioSetTxGenericConfig+0x406>
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	681b      	ldr	r3, [r3, #0]
 8019844:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019848:	d902      	bls.n	8019850 <RadioSetTxGenericConfig+0x40c>
        {
            return -1;
 801984a:	f04f 33ff 	mov.w	r3, #4294967295
 801984e:	e027      	b.n	80198a0 <RadioSetTxGenericConfig+0x45c>
        }
        RadioSetModem( MODEM_BPSK );
 8019850:	2003      	movs	r0, #3
 8019852:	f7fe f8df 	bl	8017a14 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8019856:	4b14      	ldr	r3, [pc, #80]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019858:	2202      	movs	r2, #2
 801985a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801985e:	68bb      	ldr	r3, [r7, #8]
 8019860:	681b      	ldr	r3, [r3, #0]
 8019862:	4a11      	ldr	r2, [pc, #68]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019864:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8019866:	4b10      	ldr	r3, [pc, #64]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019868:	2216      	movs	r2, #22
 801986a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801986e:	480f      	ldr	r0, [pc, #60]	@ (80198ac <RadioSetTxGenericConfig+0x468>)
 8019870:	f000 fd3c 	bl	801a2ec <SUBGRF_SetModulationParams>
        break;
 8019874:	e000      	b.n	8019878 <RadioSetTxGenericConfig+0x434>
    default:
        break;
 8019876:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8019878:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801987c:	4618      	mov	r0, r3
 801987e:	f001 f865 	bl	801a94c <SUBGRF_SetRfTxPower>
 8019882:	4603      	mov	r3, r0
 8019884:	461a      	mov	r2, r3
 8019886:	4b08      	ldr	r3, [pc, #32]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 8019888:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801988c:	4b06      	ldr	r3, [pc, #24]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 801988e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019892:	4618      	mov	r0, r3
 8019894:	f001 fa39 	bl	801ad0a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8019898:	4a03      	ldr	r2, [pc, #12]	@ (80198a8 <RadioSetTxGenericConfig+0x464>)
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6053      	str	r3, [r2, #4]
    return 0;
 801989e:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80198a0:	4618      	mov	r0, r3
 80198a2:	3738      	adds	r7, #56	@ 0x38
 80198a4:	46bd      	mov	sp, r7
 80198a6:	bd80      	pop	{r7, pc}
 80198a8:	20001b4c 	.word	0x20001b4c
 80198ac:	20001b84 	.word	0x20001b84
 80198b0:	20001b5a 	.word	0x20001b5a

080198b4 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80198b4:	b480      	push	{r7}
 80198b6:	b085      	sub	sp, #20
 80198b8:	af00      	add	r7, sp, #0
 80198ba:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80198bc:	2301      	movs	r3, #1
 80198be:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80198c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80198c2:	4618      	mov	r0, r3
 80198c4:	3714      	adds	r7, #20
 80198c6:	46bd      	mov	sp, r7
 80198c8:	bc80      	pop	{r7}
 80198ca:	4770      	bx	lr

080198cc <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80198cc:	b480      	push	{r7}
 80198ce:	b083      	sub	sp, #12
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	6078      	str	r0, [r7, #4]
 80198d4:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80198d6:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80198d8:	4618      	mov	r0, r3
 80198da:	370c      	adds	r7, #12
 80198dc:	46bd      	mov	sp, r7
 80198de:	bc80      	pop	{r7}
 80198e0:	4770      	bx	lr
	...

080198e4 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80198e4:	b580      	push	{r7, lr}
 80198e6:	b084      	sub	sp, #16
 80198e8:	af00      	add	r7, sp, #0
 80198ea:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d002      	beq.n	80198f8 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80198f2:	4a1d      	ldr	r2, [pc, #116]	@ (8019968 <SUBGRF_Init+0x84>)
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 80198f8:	f7e7 ffd4 	bl	80018a4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80198fc:	2002      	movs	r0, #2
 80198fe:	f001 f901 	bl	801ab04 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8019902:	4b1a      	ldr	r3, [pc, #104]	@ (801996c <SUBGRF_Init+0x88>)
 8019904:	2200      	movs	r2, #0
 8019906:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8019908:	2000      	movs	r0, #0
 801990a:	f000 f97f 	bl	8019c0c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801990e:	f7f0 f9e4 	bl	8009cda <RBI_IsTCXO>
 8019912:	4603      	mov	r3, r0
 8019914:	2b01      	cmp	r3, #1
 8019916:	d10e      	bne.n	8019936 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8019918:	2140      	movs	r1, #64	@ 0x40
 801991a:	2001      	movs	r0, #1
 801991c:	f000 fb8a 	bl	801a034 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8019920:	2100      	movs	r1, #0
 8019922:	f640 1011 	movw	r0, #2321	@ 0x911
 8019926:	f000 fef5 	bl	801a714 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801992a:	237f      	movs	r3, #127	@ 0x7f
 801992c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801992e:	7b38      	ldrb	r0, [r7, #12]
 8019930:	f000 fa8d 	bl	8019e4e <SUBGRF_Calibrate>
 8019934:	e009      	b.n	801994a <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019936:	2120      	movs	r1, #32
 8019938:	f640 1011 	movw	r0, #2321	@ 0x911
 801993c:	f000 feea 	bl	801a714 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8019940:	2120      	movs	r1, #32
 8019942:	f640 1012 	movw	r0, #2322	@ 0x912
 8019946:	f000 fee5 	bl	801a714 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801994a:	210e      	movs	r1, #14
 801994c:	f640 101f 	movw	r0, #2335	@ 0x91f
 8019950:	f000 fee0 	bl	801a714 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8019954:	f7f0 f99e 	bl	8009c94 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8019958:	4b05      	ldr	r3, [pc, #20]	@ (8019970 <SUBGRF_Init+0x8c>)
 801995a:	2201      	movs	r2, #1
 801995c:	701a      	strb	r2, [r3, #0]
}
 801995e:	bf00      	nop
 8019960:	3710      	adds	r7, #16
 8019962:	46bd      	mov	sp, r7
 8019964:	bd80      	pop	{r7, pc}
 8019966:	bf00      	nop
 8019968:	20001be4 	.word	0x20001be4
 801996c:	20001be0 	.word	0x20001be0
 8019970:	20001bd8 	.word	0x20001bd8

08019974 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8019974:	b480      	push	{r7}
 8019976:	af00      	add	r7, sp, #0
    return OperatingMode;
 8019978:	4b02      	ldr	r3, [pc, #8]	@ (8019984 <SUBGRF_GetOperatingMode+0x10>)
 801997a:	781b      	ldrb	r3, [r3, #0]
}
 801997c:	4618      	mov	r0, r3
 801997e:	46bd      	mov	sp, r7
 8019980:	bc80      	pop	{r7}
 8019982:	4770      	bx	lr
 8019984:	20001bd8 	.word	0x20001bd8

08019988 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b082      	sub	sp, #8
 801998c:	af00      	add	r7, sp, #0
 801998e:	6078      	str	r0, [r7, #4]
 8019990:	460b      	mov	r3, r1
 8019992:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8019994:	78fb      	ldrb	r3, [r7, #3]
 8019996:	461a      	mov	r2, r3
 8019998:	6879      	ldr	r1, [r7, #4]
 801999a:	2000      	movs	r0, #0
 801999c:	f000 ff26 	bl	801a7ec <SUBGRF_WriteBuffer>
}
 80199a0:	bf00      	nop
 80199a2:	3708      	adds	r7, #8
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b086      	sub	sp, #24
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	60b9      	str	r1, [r7, #8]
 80199b2:	4613      	mov	r3, r2
 80199b4:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80199b6:	2300      	movs	r3, #0
 80199b8:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80199ba:	f107 0317 	add.w	r3, r7, #23
 80199be:	4619      	mov	r1, r3
 80199c0:	68b8      	ldr	r0, [r7, #8]
 80199c2:	f000 fe29 	bl	801a618 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80199c6:	68bb      	ldr	r3, [r7, #8]
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	79fa      	ldrb	r2, [r7, #7]
 80199cc:	429a      	cmp	r2, r3
 80199ce:	d201      	bcs.n	80199d4 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80199d0:	2301      	movs	r3, #1
 80199d2:	e007      	b.n	80199e4 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80199d4:	7df8      	ldrb	r0, [r7, #23]
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	781b      	ldrb	r3, [r3, #0]
 80199da:	461a      	mov	r2, r3
 80199dc:	68f9      	ldr	r1, [r7, #12]
 80199de:	f000 ff27 	bl	801a830 <SUBGRF_ReadBuffer>

    return 0;
 80199e2:	2300      	movs	r3, #0
}
 80199e4:	4618      	mov	r0, r3
 80199e6:	3718      	adds	r7, #24
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}

080199ec <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80199ec:	b580      	push	{r7, lr}
 80199ee:	b084      	sub	sp, #16
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	60f8      	str	r0, [r7, #12]
 80199f4:	460b      	mov	r3, r1
 80199f6:	607a      	str	r2, [r7, #4]
 80199f8:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80199fa:	7afb      	ldrb	r3, [r7, #11]
 80199fc:	4619      	mov	r1, r3
 80199fe:	68f8      	ldr	r0, [r7, #12]
 8019a00:	f7ff ffc2 	bl	8019988 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8019a04:	6878      	ldr	r0, [r7, #4]
 8019a06:	f000 f91d 	bl	8019c44 <SUBGRF_SetTx>
}
 8019a0a:	bf00      	nop
 8019a0c:	3710      	adds	r7, #16
 8019a0e:	46bd      	mov	sp, r7
 8019a10:	bd80      	pop	{r7, pc}

08019a12 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8019a12:	b580      	push	{r7, lr}
 8019a14:	b082      	sub	sp, #8
 8019a16:	af00      	add	r7, sp, #0
 8019a18:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8019a1a:	2208      	movs	r2, #8
 8019a1c:	6879      	ldr	r1, [r7, #4]
 8019a1e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8019a22:	f000 fe9f 	bl	801a764 <SUBGRF_WriteRegisters>
    return 0;
 8019a26:	2300      	movs	r3, #0
}
 8019a28:	4618      	mov	r0, r3
 8019a2a:	3708      	adds	r7, #8
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}

08019a30 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8019a30:	b580      	push	{r7, lr}
 8019a32:	b084      	sub	sp, #16
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	4603      	mov	r3, r0
 8019a38:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8019a3a:	88fb      	ldrh	r3, [r7, #6]
 8019a3c:	0a1b      	lsrs	r3, r3, #8
 8019a3e:	b29b      	uxth	r3, r3
 8019a40:	b2db      	uxtb	r3, r3
 8019a42:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8019a44:	88fb      	ldrh	r3, [r7, #6]
 8019a46:	b2db      	uxtb	r3, r3
 8019a48:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019a4a:	f000 fb77 	bl	801a13c <SUBGRF_GetPacketType>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d108      	bne.n	8019a66 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8019a54:	f107 030c 	add.w	r3, r7, #12
 8019a58:	2202      	movs	r2, #2
 8019a5a:	4619      	mov	r1, r3
 8019a5c:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8019a60:	f000 fe80 	bl	801a764 <SUBGRF_WriteRegisters>
            break;
 8019a64:	e000      	b.n	8019a68 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8019a66:	bf00      	nop
    }
}
 8019a68:	bf00      	nop
 8019a6a:	3710      	adds	r7, #16
 8019a6c:	46bd      	mov	sp, r7
 8019a6e:	bd80      	pop	{r7, pc}

08019a70 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b084      	sub	sp, #16
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	4603      	mov	r3, r0
 8019a78:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8019a7a:	88fb      	ldrh	r3, [r7, #6]
 8019a7c:	0a1b      	lsrs	r3, r3, #8
 8019a7e:	b29b      	uxth	r3, r3
 8019a80:	b2db      	uxtb	r3, r3
 8019a82:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8019a84:	88fb      	ldrh	r3, [r7, #6]
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8019a8a:	f000 fb57 	bl	801a13c <SUBGRF_GetPacketType>
 8019a8e:	4603      	mov	r3, r0
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d108      	bne.n	8019aa6 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8019a94:	f107 030c 	add.w	r3, r7, #12
 8019a98:	2202      	movs	r2, #2
 8019a9a:	4619      	mov	r1, r3
 8019a9c:	f240 60be 	movw	r0, #1726	@ 0x6be
 8019aa0:	f000 fe60 	bl	801a764 <SUBGRF_WriteRegisters>
            break;
 8019aa4:	e000      	b.n	8019aa8 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8019aa6:	bf00      	nop
    }
}
 8019aa8:	bf00      	nop
 8019aaa:	3710      	adds	r7, #16
 8019aac:	46bd      	mov	sp, r7
 8019aae:	bd80      	pop	{r7, pc}

08019ab0 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8019ab0:	b580      	push	{r7, lr}
 8019ab2:	b084      	sub	sp, #16
 8019ab4:	af00      	add	r7, sp, #0
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8019aba:	2300      	movs	r3, #0
 8019abc:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8019abe:	f000 fb3d 	bl	801a13c <SUBGRF_GetPacketType>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d121      	bne.n	8019b0c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8019ac8:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019acc:	f000 fe36 	bl	801a73c <SUBGRF_ReadRegister>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	f023 0301 	bic.w	r3, r3, #1
 8019ad6:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8019ad8:	88fb      	ldrh	r3, [r7, #6]
 8019ada:	0a1b      	lsrs	r3, r3, #8
 8019adc:	b29b      	uxth	r3, r3
 8019ade:	b25b      	sxtb	r3, r3
 8019ae0:	f003 0301 	and.w	r3, r3, #1
 8019ae4:	b25a      	sxtb	r2, r3
 8019ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019aea:	4313      	orrs	r3, r2
 8019aec:	b25b      	sxtb	r3, r3
 8019aee:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8019af0:	7bfb      	ldrb	r3, [r7, #15]
 8019af2:	4619      	mov	r1, r3
 8019af4:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8019af8:	f000 fe0c 	bl	801a714 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8019afc:	88fb      	ldrh	r3, [r7, #6]
 8019afe:	b2db      	uxtb	r3, r3
 8019b00:	4619      	mov	r1, r3
 8019b02:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8019b06:	f000 fe05 	bl	801a714 <SUBGRF_WriteRegister>
            break;
 8019b0a:	e000      	b.n	8019b0e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8019b0c:	bf00      	nop
    }
}
 8019b0e:	bf00      	nop
 8019b10:	3710      	adds	r7, #16
 8019b12:	46bd      	mov	sp, r7
 8019b14:	bd80      	pop	{r7, pc}

08019b16 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8019b16:	b580      	push	{r7, lr}
 8019b18:	b082      	sub	sp, #8
 8019b1a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8019b1c:	2300      	movs	r3, #0
 8019b1e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8019b20:	2300      	movs	r3, #0
 8019b22:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8019b24:	2300      	movs	r3, #0
 8019b26:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8019b28:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019b2c:	f000 fe06 	bl	801a73c <SUBGRF_ReadRegister>
 8019b30:	4603      	mov	r3, r0
 8019b32:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8019b34:	79fb      	ldrb	r3, [r7, #7]
 8019b36:	f023 0301 	bic.w	r3, r3, #1
 8019b3a:	b2db      	uxtb	r3, r3
 8019b3c:	4619      	mov	r1, r3
 8019b3e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019b42:	f000 fde7 	bl	801a714 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8019b46:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019b4a:	f000 fdf7 	bl	801a73c <SUBGRF_ReadRegister>
 8019b4e:	4603      	mov	r3, r0
 8019b50:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8019b52:	79bb      	ldrb	r3, [r7, #6]
 8019b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019b58:	b2db      	uxtb	r3, r3
 8019b5a:	4619      	mov	r1, r3
 8019b5c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019b60:	f000 fdd8 	bl	801a714 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8019b64:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8019b68:	f000 f88c 	bl	8019c84 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8019b6c:	463b      	mov	r3, r7
 8019b6e:	2204      	movs	r2, #4
 8019b70:	4619      	mov	r1, r3
 8019b72:	f640 0019 	movw	r0, #2073	@ 0x819
 8019b76:	f000 fe17 	bl	801a7a8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8019b7a:	2000      	movs	r0, #0
 8019b7c:	f000 f846 	bl	8019c0c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8019b80:	79fb      	ldrb	r3, [r7, #7]
 8019b82:	4619      	mov	r1, r3
 8019b84:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8019b88:	f000 fdc4 	bl	801a714 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8019b8c:	79bb      	ldrb	r3, [r7, #6]
 8019b8e:	4619      	mov	r1, r3
 8019b90:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8019b94:	f000 fdbe 	bl	801a714 <SUBGRF_WriteRegister>

    return number;
 8019b98:	683b      	ldr	r3, [r7, #0]
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3708      	adds	r7, #8
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}
	...

08019ba4 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8019ba4:	b580      	push	{r7, lr}
 8019ba6:	b084      	sub	sp, #16
 8019ba8:	af00      	add	r7, sp, #0
 8019baa:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8019bac:	2000      	movs	r0, #0
 8019bae:	f7f0 f87c 	bl	8009caa <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8019bb2:	2002      	movs	r0, #2
 8019bb4:	f000 ffa6 	bl	801ab04 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019bb8:	793b      	ldrb	r3, [r7, #4]
 8019bba:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019bbe:	b2db      	uxtb	r3, r3
 8019bc0:	b25b      	sxtb	r3, r3
 8019bc2:	009b      	lsls	r3, r3, #2
 8019bc4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019bc6:	793b      	ldrb	r3, [r7, #4]
 8019bc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019bcc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019bce:	b25b      	sxtb	r3, r3
 8019bd0:	005b      	lsls	r3, r3, #1
 8019bd2:	b25b      	sxtb	r3, r3
 8019bd4:	4313      	orrs	r3, r2
 8019bd6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8019bd8:	793b      	ldrb	r3, [r7, #4]
 8019bda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8019be2:	4313      	orrs	r3, r2
 8019be4:	b25b      	sxtb	r3, r3
 8019be6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8019be8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8019bea:	f107 030f 	add.w	r3, r7, #15
 8019bee:	2201      	movs	r2, #1
 8019bf0:	4619      	mov	r1, r3
 8019bf2:	2084      	movs	r0, #132	@ 0x84
 8019bf4:	f000 fe3e 	bl	801a874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8019bf8:	4b03      	ldr	r3, [pc, #12]	@ (8019c08 <SUBGRF_SetSleep+0x64>)
 8019bfa:	2200      	movs	r2, #0
 8019bfc:	701a      	strb	r2, [r3, #0]
}
 8019bfe:	bf00      	nop
 8019c00:	3710      	adds	r7, #16
 8019c02:	46bd      	mov	sp, r7
 8019c04:	bd80      	pop	{r7, pc}
 8019c06:	bf00      	nop
 8019c08:	20001bd8 	.word	0x20001bd8

08019c0c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8019c0c:	b580      	push	{r7, lr}
 8019c0e:	b082      	sub	sp, #8
 8019c10:	af00      	add	r7, sp, #0
 8019c12:	4603      	mov	r3, r0
 8019c14:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8019c16:	1dfb      	adds	r3, r7, #7
 8019c18:	2201      	movs	r2, #1
 8019c1a:	4619      	mov	r1, r3
 8019c1c:	2080      	movs	r0, #128	@ 0x80
 8019c1e:	f000 fe29 	bl	801a874 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8019c22:	79fb      	ldrb	r3, [r7, #7]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d103      	bne.n	8019c30 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8019c28:	4b05      	ldr	r3, [pc, #20]	@ (8019c40 <SUBGRF_SetStandby+0x34>)
 8019c2a:	2201      	movs	r2, #1
 8019c2c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8019c2e:	e002      	b.n	8019c36 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8019c30:	4b03      	ldr	r3, [pc, #12]	@ (8019c40 <SUBGRF_SetStandby+0x34>)
 8019c32:	2202      	movs	r2, #2
 8019c34:	701a      	strb	r2, [r3, #0]
}
 8019c36:	bf00      	nop
 8019c38:	3708      	adds	r7, #8
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	20001bd8 	.word	0x20001bd8

08019c44 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8019c44:	b580      	push	{r7, lr}
 8019c46:	b084      	sub	sp, #16
 8019c48:	af00      	add	r7, sp, #0
 8019c4a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8019c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8019c80 <SUBGRF_SetTx+0x3c>)
 8019c4e:	2204      	movs	r2, #4
 8019c50:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	0c1b      	lsrs	r3, r3, #16
 8019c56:	b2db      	uxtb	r3, r3
 8019c58:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	0a1b      	lsrs	r3, r3, #8
 8019c5e:	b2db      	uxtb	r3, r3
 8019c60:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	b2db      	uxtb	r3, r3
 8019c66:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8019c68:	f107 030c 	add.w	r3, r7, #12
 8019c6c:	2203      	movs	r2, #3
 8019c6e:	4619      	mov	r1, r3
 8019c70:	2083      	movs	r0, #131	@ 0x83
 8019c72:	f000 fdff 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019c76:	bf00      	nop
 8019c78:	3710      	adds	r7, #16
 8019c7a:	46bd      	mov	sp, r7
 8019c7c:	bd80      	pop	{r7, pc}
 8019c7e:	bf00      	nop
 8019c80:	20001bd8 	.word	0x20001bd8

08019c84 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8019c84:	b580      	push	{r7, lr}
 8019c86:	b084      	sub	sp, #16
 8019c88:	af00      	add	r7, sp, #0
 8019c8a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8019cc0 <SUBGRF_SetRx+0x3c>)
 8019c8e:	2205      	movs	r2, #5
 8019c90:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	0c1b      	lsrs	r3, r3, #16
 8019c96:	b2db      	uxtb	r3, r3
 8019c98:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	0a1b      	lsrs	r3, r3, #8
 8019c9e:	b2db      	uxtb	r3, r3
 8019ca0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	b2db      	uxtb	r3, r3
 8019ca6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019ca8:	f107 030c 	add.w	r3, r7, #12
 8019cac:	2203      	movs	r2, #3
 8019cae:	4619      	mov	r1, r3
 8019cb0:	2082      	movs	r0, #130	@ 0x82
 8019cb2:	f000 fddf 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019cb6:	bf00      	nop
 8019cb8:	3710      	adds	r7, #16
 8019cba:	46bd      	mov	sp, r7
 8019cbc:	bd80      	pop	{r7, pc}
 8019cbe:	bf00      	nop
 8019cc0:	20001bd8 	.word	0x20001bd8

08019cc4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8019cc4:	b580      	push	{r7, lr}
 8019cc6:	b084      	sub	sp, #16
 8019cc8:	af00      	add	r7, sp, #0
 8019cca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8019ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8019d08 <SUBGRF_SetRxBoosted+0x44>)
 8019cce:	2205      	movs	r2, #5
 8019cd0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8019cd2:	2197      	movs	r1, #151	@ 0x97
 8019cd4:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8019cd8:	f000 fd1c 	bl	801a714 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	0c1b      	lsrs	r3, r3, #16
 8019ce0:	b2db      	uxtb	r3, r3
 8019ce2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	0a1b      	lsrs	r3, r3, #8
 8019ce8:	b2db      	uxtb	r3, r3
 8019cea:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	b2db      	uxtb	r3, r3
 8019cf0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8019cf2:	f107 030c 	add.w	r3, r7, #12
 8019cf6:	2203      	movs	r2, #3
 8019cf8:	4619      	mov	r1, r3
 8019cfa:	2082      	movs	r0, #130	@ 0x82
 8019cfc:	f000 fdba 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019d00:	bf00      	nop
 8019d02:	3710      	adds	r7, #16
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	20001bd8 	.word	0x20001bd8

08019d0c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8019d0c:	b580      	push	{r7, lr}
 8019d0e:	b084      	sub	sp, #16
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	6078      	str	r0, [r7, #4]
 8019d14:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	0c1b      	lsrs	r3, r3, #16
 8019d1a:	b2db      	uxtb	r3, r3
 8019d1c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	0a1b      	lsrs	r3, r3, #8
 8019d22:	b2db      	uxtb	r3, r3
 8019d24:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	b2db      	uxtb	r3, r3
 8019d2a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8019d2c:	683b      	ldr	r3, [r7, #0]
 8019d2e:	0c1b      	lsrs	r3, r3, #16
 8019d30:	b2db      	uxtb	r3, r3
 8019d32:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8019d34:	683b      	ldr	r3, [r7, #0]
 8019d36:	0a1b      	lsrs	r3, r3, #8
 8019d38:	b2db      	uxtb	r3, r3
 8019d3a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8019d3c:	683b      	ldr	r3, [r7, #0]
 8019d3e:	b2db      	uxtb	r3, r3
 8019d40:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8019d42:	f107 0308 	add.w	r3, r7, #8
 8019d46:	2206      	movs	r2, #6
 8019d48:	4619      	mov	r1, r3
 8019d4a:	2094      	movs	r0, #148	@ 0x94
 8019d4c:	f000 fd92 	bl	801a874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8019d50:	4b03      	ldr	r3, [pc, #12]	@ (8019d60 <SUBGRF_SetRxDutyCycle+0x54>)
 8019d52:	2206      	movs	r2, #6
 8019d54:	701a      	strb	r2, [r3, #0]
}
 8019d56:	bf00      	nop
 8019d58:	3710      	adds	r7, #16
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}
 8019d5e:	bf00      	nop
 8019d60:	20001bd8 	.word	0x20001bd8

08019d64 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8019d68:	2200      	movs	r2, #0
 8019d6a:	2100      	movs	r1, #0
 8019d6c:	20c5      	movs	r0, #197	@ 0xc5
 8019d6e:	f000 fd81 	bl	801a874 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8019d72:	4b02      	ldr	r3, [pc, #8]	@ (8019d7c <SUBGRF_SetCad+0x18>)
 8019d74:	2207      	movs	r2, #7
 8019d76:	701a      	strb	r2, [r3, #0]
}
 8019d78:	bf00      	nop
 8019d7a:	bd80      	pop	{r7, pc}
 8019d7c:	20001bd8 	.word	0x20001bd8

08019d80 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8019d80:	b580      	push	{r7, lr}
 8019d82:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8019d84:	2200      	movs	r2, #0
 8019d86:	2100      	movs	r1, #0
 8019d88:	20d1      	movs	r0, #209	@ 0xd1
 8019d8a:	f000 fd73 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019d8e:	bf00      	nop
 8019d90:	bd80      	pop	{r7, pc}

08019d92 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8019d92:	b580      	push	{r7, lr}
 8019d94:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8019d96:	2200      	movs	r2, #0
 8019d98:	2100      	movs	r1, #0
 8019d9a:	20d2      	movs	r0, #210	@ 0xd2
 8019d9c:	f000 fd6a 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019da0:	bf00      	nop
 8019da2:	bd80      	pop	{r7, pc}

08019da4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8019da4:	b580      	push	{r7, lr}
 8019da6:	b082      	sub	sp, #8
 8019da8:	af00      	add	r7, sp, #0
 8019daa:	4603      	mov	r3, r0
 8019dac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8019dae:	1dfb      	adds	r3, r7, #7
 8019db0:	2201      	movs	r2, #1
 8019db2:	4619      	mov	r1, r3
 8019db4:	209f      	movs	r0, #159	@ 0x9f
 8019db6:	f000 fd5d 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019dba:	bf00      	nop
 8019dbc:	3708      	adds	r7, #8
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}

08019dc2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8019dc2:	b580      	push	{r7, lr}
 8019dc4:	b084      	sub	sp, #16
 8019dc6:	af00      	add	r7, sp, #0
 8019dc8:	4603      	mov	r3, r0
 8019dca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8019dcc:	1dfb      	adds	r3, r7, #7
 8019dce:	2201      	movs	r2, #1
 8019dd0:	4619      	mov	r1, r3
 8019dd2:	20a0      	movs	r0, #160	@ 0xa0
 8019dd4:	f000 fd4e 	bl	801a874 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8019dd8:	79fb      	ldrb	r3, [r7, #7]
 8019dda:	2b3f      	cmp	r3, #63	@ 0x3f
 8019ddc:	d91c      	bls.n	8019e18 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8019dde:	79fb      	ldrb	r3, [r7, #7]
 8019de0:	085b      	lsrs	r3, r3, #1
 8019de2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8019de4:	2300      	movs	r3, #0
 8019de6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8019de8:	2300      	movs	r3, #0
 8019dea:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8019dec:	e005      	b.n	8019dfa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8019dee:	7bfb      	ldrb	r3, [r7, #15]
 8019df0:	089b      	lsrs	r3, r3, #2
 8019df2:	73fb      	strb	r3, [r7, #15]
            exp++;
 8019df4:	7bbb      	ldrb	r3, [r7, #14]
 8019df6:	3301      	adds	r3, #1
 8019df8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8019dfa:	7bfb      	ldrb	r3, [r7, #15]
 8019dfc:	2b1f      	cmp	r3, #31
 8019dfe:	d8f6      	bhi.n	8019dee <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8019e00:	7bfb      	ldrb	r3, [r7, #15]
 8019e02:	00db      	lsls	r3, r3, #3
 8019e04:	b2da      	uxtb	r2, r3
 8019e06:	7bbb      	ldrb	r3, [r7, #14]
 8019e08:	4413      	add	r3, r2
 8019e0a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8019e0c:	7b7b      	ldrb	r3, [r7, #13]
 8019e0e:	4619      	mov	r1, r3
 8019e10:	f240 7006 	movw	r0, #1798	@ 0x706
 8019e14:	f000 fc7e 	bl	801a714 <SUBGRF_WriteRegister>
    }
}
 8019e18:	bf00      	nop
 8019e1a:	3710      	adds	r7, #16
 8019e1c:	46bd      	mov	sp, r7
 8019e1e:	bd80      	pop	{r7, pc}

08019e20 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8019e20:	b580      	push	{r7, lr}
 8019e22:	b082      	sub	sp, #8
 8019e24:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8019e26:	f7ef ff63 	bl	8009cf0 <RBI_IsDCDC>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	2b01      	cmp	r3, #1
 8019e2e:	d102      	bne.n	8019e36 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8019e30:	2301      	movs	r3, #1
 8019e32:	71fb      	strb	r3, [r7, #7]
 8019e34:	e001      	b.n	8019e3a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8019e36:	2300      	movs	r3, #0
 8019e38:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019e3a:	1dfb      	adds	r3, r7, #7
 8019e3c:	2201      	movs	r2, #1
 8019e3e:	4619      	mov	r1, r3
 8019e40:	2096      	movs	r0, #150	@ 0x96
 8019e42:	f000 fd17 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019e46:	bf00      	nop
 8019e48:	3708      	adds	r7, #8
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	bd80      	pop	{r7, pc}

08019e4e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019e4e:	b580      	push	{r7, lr}
 8019e50:	b084      	sub	sp, #16
 8019e52:	af00      	add	r7, sp, #0
 8019e54:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019e56:	793b      	ldrb	r3, [r7, #4]
 8019e58:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019e5c:	b2db      	uxtb	r3, r3
 8019e5e:	b25b      	sxtb	r3, r3
 8019e60:	019b      	lsls	r3, r3, #6
 8019e62:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019e64:	793b      	ldrb	r3, [r7, #4]
 8019e66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019e6a:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019e6c:	b25b      	sxtb	r3, r3
 8019e6e:	015b      	lsls	r3, r3, #5
 8019e70:	b25b      	sxtb	r3, r3
 8019e72:	4313      	orrs	r3, r2
 8019e74:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019e76:	793b      	ldrb	r3, [r7, #4]
 8019e78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019e7c:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019e7e:	b25b      	sxtb	r3, r3
 8019e80:	011b      	lsls	r3, r3, #4
 8019e82:	b25b      	sxtb	r3, r3
 8019e84:	4313      	orrs	r3, r2
 8019e86:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019e88:	793b      	ldrb	r3, [r7, #4]
 8019e8a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019e8e:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019e90:	b25b      	sxtb	r3, r3
 8019e92:	00db      	lsls	r3, r3, #3
 8019e94:	b25b      	sxtb	r3, r3
 8019e96:	4313      	orrs	r3, r2
 8019e98:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019e9a:	793b      	ldrb	r3, [r7, #4]
 8019e9c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019ea0:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019ea2:	b25b      	sxtb	r3, r3
 8019ea4:	009b      	lsls	r3, r3, #2
 8019ea6:	b25b      	sxtb	r3, r3
 8019ea8:	4313      	orrs	r3, r2
 8019eaa:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019eac:	793b      	ldrb	r3, [r7, #4]
 8019eae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019eb2:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019eb4:	b25b      	sxtb	r3, r3
 8019eb6:	005b      	lsls	r3, r3, #1
 8019eb8:	b25b      	sxtb	r3, r3
 8019eba:	4313      	orrs	r3, r2
 8019ebc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8019ebe:	793b      	ldrb	r3, [r7, #4]
 8019ec0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019ec4:	b2db      	uxtb	r3, r3
 8019ec6:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019ec8:	4313      	orrs	r3, r2
 8019eca:	b25b      	sxtb	r3, r3
 8019ecc:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019ece:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8019ed0:	f107 030f 	add.w	r3, r7, #15
 8019ed4:	2201      	movs	r2, #1
 8019ed6:	4619      	mov	r1, r3
 8019ed8:	2089      	movs	r0, #137	@ 0x89
 8019eda:	f000 fccb 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019ede:	bf00      	nop
 8019ee0:	3710      	adds	r7, #16
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	bd80      	pop	{r7, pc}
	...

08019ee8 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8019ee8:	b580      	push	{r7, lr}
 8019eea:	b084      	sub	sp, #16
 8019eec:	af00      	add	r7, sp, #0
 8019eee:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8019f68 <SUBGRF_CalibrateImage+0x80>)
 8019ef4:	4293      	cmp	r3, r2
 8019ef6:	d904      	bls.n	8019f02 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8019ef8:	23e1      	movs	r3, #225	@ 0xe1
 8019efa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8019efc:	23e9      	movs	r3, #233	@ 0xe9
 8019efe:	737b      	strb	r3, [r7, #13]
 8019f00:	e027      	b.n	8019f52 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	4a19      	ldr	r2, [pc, #100]	@ (8019f6c <SUBGRF_CalibrateImage+0x84>)
 8019f06:	4293      	cmp	r3, r2
 8019f08:	d904      	bls.n	8019f14 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8019f0a:	23d7      	movs	r3, #215	@ 0xd7
 8019f0c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8019f0e:	23db      	movs	r3, #219	@ 0xdb
 8019f10:	737b      	strb	r3, [r7, #13]
 8019f12:	e01e      	b.n	8019f52 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	4a16      	ldr	r2, [pc, #88]	@ (8019f70 <SUBGRF_CalibrateImage+0x88>)
 8019f18:	4293      	cmp	r3, r2
 8019f1a:	d904      	bls.n	8019f26 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8019f1c:	23c1      	movs	r3, #193	@ 0xc1
 8019f1e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8019f20:	23c5      	movs	r3, #197	@ 0xc5
 8019f22:	737b      	strb	r3, [r7, #13]
 8019f24:	e015      	b.n	8019f52 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	4a12      	ldr	r2, [pc, #72]	@ (8019f74 <SUBGRF_CalibrateImage+0x8c>)
 8019f2a:	4293      	cmp	r3, r2
 8019f2c:	d904      	bls.n	8019f38 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8019f2e:	2375      	movs	r3, #117	@ 0x75
 8019f30:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8019f32:	2381      	movs	r3, #129	@ 0x81
 8019f34:	737b      	strb	r3, [r7, #13]
 8019f36:	e00c      	b.n	8019f52 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8019f78 <SUBGRF_CalibrateImage+0x90>)
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	d904      	bls.n	8019f4a <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8019f40:	236b      	movs	r3, #107	@ 0x6b
 8019f42:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019f44:	236f      	movs	r3, #111	@ 0x6f
 8019f46:	737b      	strb	r3, [r7, #13]
 8019f48:	e003      	b.n	8019f52 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8019f4a:	2329      	movs	r3, #41	@ 0x29
 8019f4c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8019f4e:	232b      	movs	r3, #43	@ 0x2b
 8019f50:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019f52:	f107 030c 	add.w	r3, r7, #12
 8019f56:	2202      	movs	r2, #2
 8019f58:	4619      	mov	r1, r3
 8019f5a:	2098      	movs	r0, #152	@ 0x98
 8019f5c:	f000 fc8a 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019f60:	bf00      	nop
 8019f62:	3710      	adds	r7, #16
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}
 8019f68:	35a4e900 	.word	0x35a4e900
 8019f6c:	32a9f880 	.word	0x32a9f880
 8019f70:	2de54480 	.word	0x2de54480
 8019f74:	1b6b0b00 	.word	0x1b6b0b00
 8019f78:	1954fc40 	.word	0x1954fc40

08019f7c <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019f7c:	b590      	push	{r4, r7, lr}
 8019f7e:	b085      	sub	sp, #20
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	4604      	mov	r4, r0
 8019f84:	4608      	mov	r0, r1
 8019f86:	4611      	mov	r1, r2
 8019f88:	461a      	mov	r2, r3
 8019f8a:	4623      	mov	r3, r4
 8019f8c:	71fb      	strb	r3, [r7, #7]
 8019f8e:	4603      	mov	r3, r0
 8019f90:	71bb      	strb	r3, [r7, #6]
 8019f92:	460b      	mov	r3, r1
 8019f94:	717b      	strb	r3, [r7, #5]
 8019f96:	4613      	mov	r3, r2
 8019f98:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8019f9a:	79fb      	ldrb	r3, [r7, #7]
 8019f9c:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019f9e:	79bb      	ldrb	r3, [r7, #6]
 8019fa0:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019fa2:	797b      	ldrb	r3, [r7, #5]
 8019fa4:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8019fa6:	793b      	ldrb	r3, [r7, #4]
 8019fa8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8019faa:	f107 030c 	add.w	r3, r7, #12
 8019fae:	2204      	movs	r2, #4
 8019fb0:	4619      	mov	r1, r3
 8019fb2:	2095      	movs	r0, #149	@ 0x95
 8019fb4:	f000 fc5e 	bl	801a874 <SUBGRF_WriteCommand>
}
 8019fb8:	bf00      	nop
 8019fba:	3714      	adds	r7, #20
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bd90      	pop	{r4, r7, pc}

08019fc0 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019fc0:	b590      	push	{r4, r7, lr}
 8019fc2:	b085      	sub	sp, #20
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	4604      	mov	r4, r0
 8019fc8:	4608      	mov	r0, r1
 8019fca:	4611      	mov	r1, r2
 8019fcc:	461a      	mov	r2, r3
 8019fce:	4623      	mov	r3, r4
 8019fd0:	80fb      	strh	r3, [r7, #6]
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	80bb      	strh	r3, [r7, #4]
 8019fd6:	460b      	mov	r3, r1
 8019fd8:	807b      	strh	r3, [r7, #2]
 8019fda:	4613      	mov	r3, r2
 8019fdc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019fde:	88fb      	ldrh	r3, [r7, #6]
 8019fe0:	0a1b      	lsrs	r3, r3, #8
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	b2db      	uxtb	r3, r3
 8019fe6:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8019fe8:	88fb      	ldrh	r3, [r7, #6]
 8019fea:	b2db      	uxtb	r3, r3
 8019fec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8019fee:	88bb      	ldrh	r3, [r7, #4]
 8019ff0:	0a1b      	lsrs	r3, r3, #8
 8019ff2:	b29b      	uxth	r3, r3
 8019ff4:	b2db      	uxtb	r3, r3
 8019ff6:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8019ff8:	88bb      	ldrh	r3, [r7, #4]
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8019ffe:	887b      	ldrh	r3, [r7, #2]
 801a000:	0a1b      	lsrs	r3, r3, #8
 801a002:	b29b      	uxth	r3, r3
 801a004:	b2db      	uxtb	r3, r3
 801a006:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801a008:	887b      	ldrh	r3, [r7, #2]
 801a00a:	b2db      	uxtb	r3, r3
 801a00c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801a00e:	883b      	ldrh	r3, [r7, #0]
 801a010:	0a1b      	lsrs	r3, r3, #8
 801a012:	b29b      	uxth	r3, r3
 801a014:	b2db      	uxtb	r3, r3
 801a016:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801a018:	883b      	ldrh	r3, [r7, #0]
 801a01a:	b2db      	uxtb	r3, r3
 801a01c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801a01e:	f107 0308 	add.w	r3, r7, #8
 801a022:	2208      	movs	r2, #8
 801a024:	4619      	mov	r1, r3
 801a026:	2008      	movs	r0, #8
 801a028:	f000 fc24 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a02c:	bf00      	nop
 801a02e:	3714      	adds	r7, #20
 801a030:	46bd      	mov	sp, r7
 801a032:	bd90      	pop	{r4, r7, pc}

0801a034 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801a034:	b580      	push	{r7, lr}
 801a036:	b084      	sub	sp, #16
 801a038:	af00      	add	r7, sp, #0
 801a03a:	4603      	mov	r3, r0
 801a03c:	6039      	str	r1, [r7, #0]
 801a03e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801a040:	79fb      	ldrb	r3, [r7, #7]
 801a042:	f003 0307 	and.w	r3, r3, #7
 801a046:	b2db      	uxtb	r3, r3
 801a048:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801a04a:	683b      	ldr	r3, [r7, #0]
 801a04c:	0c1b      	lsrs	r3, r3, #16
 801a04e:	b2db      	uxtb	r3, r3
 801a050:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801a052:	683b      	ldr	r3, [r7, #0]
 801a054:	0a1b      	lsrs	r3, r3, #8
 801a056:	b2db      	uxtb	r3, r3
 801a058:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801a05a:	683b      	ldr	r3, [r7, #0]
 801a05c:	b2db      	uxtb	r3, r3
 801a05e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801a060:	f107 030c 	add.w	r3, r7, #12
 801a064:	2204      	movs	r2, #4
 801a066:	4619      	mov	r1, r3
 801a068:	2097      	movs	r0, #151	@ 0x97
 801a06a:	f000 fc03 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a06e:	bf00      	nop
 801a070:	3710      	adds	r7, #16
 801a072:	46bd      	mov	sp, r7
 801a074:	bd80      	pop	{r7, pc}
	...

0801a078 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801a078:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a07c:	b084      	sub	sp, #16
 801a07e:	af00      	add	r7, sp, #0
 801a080:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801a082:	2300      	movs	r3, #0
 801a084:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801a086:	4b1d      	ldr	r3, [pc, #116]	@ (801a0fc <SUBGRF_SetRfFrequency+0x84>)
 801a088:	781b      	ldrb	r3, [r3, #0]
 801a08a:	f083 0301 	eor.w	r3, r3, #1
 801a08e:	b2db      	uxtb	r3, r3
 801a090:	2b00      	cmp	r3, #0
 801a092:	d005      	beq.n	801a0a0 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f7ff ff27 	bl	8019ee8 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801a09a:	4b18      	ldr	r3, [pc, #96]	@ (801a0fc <SUBGRF_SetRfFrequency+0x84>)
 801a09c:	2201      	movs	r2, #1
 801a09e:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	461c      	mov	r4, r3
 801a0a6:	4615      	mov	r5, r2
 801a0a8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a0ac:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a0b0:	4a13      	ldr	r2, [pc, #76]	@ (801a100 <SUBGRF_SetRfFrequency+0x88>)
 801a0b2:	f04f 0300 	mov.w	r3, #0
 801a0b6:	4640      	mov	r0, r8
 801a0b8:	4649      	mov	r1, r9
 801a0ba:	f7e6 fc05 	bl	80008c8 <__aeabi_uldivmod>
 801a0be:	4602      	mov	r2, r0
 801a0c0:	460b      	mov	r3, r1
 801a0c2:	4613      	mov	r3, r2
 801a0c4:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	0e1b      	lsrs	r3, r3, #24
 801a0ca:	b2db      	uxtb	r3, r3
 801a0cc:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801a0ce:	68fb      	ldr	r3, [r7, #12]
 801a0d0:	0c1b      	lsrs	r3, r3, #16
 801a0d2:	b2db      	uxtb	r3, r3
 801a0d4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	0a1b      	lsrs	r3, r3, #8
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	b2db      	uxtb	r3, r3
 801a0e2:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801a0e4:	f107 0308 	add.w	r3, r7, #8
 801a0e8:	2204      	movs	r2, #4
 801a0ea:	4619      	mov	r1, r3
 801a0ec:	2086      	movs	r0, #134	@ 0x86
 801a0ee:	f000 fbc1 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a0f2:	bf00      	nop
 801a0f4:	3710      	adds	r7, #16
 801a0f6:	46bd      	mov	sp, r7
 801a0f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a0fc:	20001be0 	.word	0x20001be0
 801a100:	01e84800 	.word	0x01e84800

0801a104 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801a104:	b580      	push	{r7, lr}
 801a106:	b082      	sub	sp, #8
 801a108:	af00      	add	r7, sp, #0
 801a10a:	4603      	mov	r3, r0
 801a10c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801a10e:	79fa      	ldrb	r2, [r7, #7]
 801a110:	4b09      	ldr	r3, [pc, #36]	@ (801a138 <SUBGRF_SetPacketType+0x34>)
 801a112:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801a114:	79fb      	ldrb	r3, [r7, #7]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d104      	bne.n	801a124 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801a11a:	2100      	movs	r1, #0
 801a11c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 801a120:	f000 faf8 	bl	801a714 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801a124:	1dfb      	adds	r3, r7, #7
 801a126:	2201      	movs	r2, #1
 801a128:	4619      	mov	r1, r3
 801a12a:	208a      	movs	r0, #138	@ 0x8a
 801a12c:	f000 fba2 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a130:	bf00      	nop
 801a132:	3708      	adds	r7, #8
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}
 801a138:	20001bd9 	.word	0x20001bd9

0801a13c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801a13c:	b480      	push	{r7}
 801a13e:	af00      	add	r7, sp, #0
    return PacketType;
 801a140:	4b02      	ldr	r3, [pc, #8]	@ (801a14c <SUBGRF_GetPacketType+0x10>)
 801a142:	781b      	ldrb	r3, [r3, #0]
}
 801a144:	4618      	mov	r0, r3
 801a146:	46bd      	mov	sp, r7
 801a148:	bc80      	pop	{r7}
 801a14a:	4770      	bx	lr
 801a14c:	20001bd9 	.word	0x20001bd9

0801a150 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	4603      	mov	r3, r0
 801a158:	71fb      	strb	r3, [r7, #7]
 801a15a:	460b      	mov	r3, r1
 801a15c:	71bb      	strb	r3, [r7, #6]
 801a15e:	4613      	mov	r3, r2
 801a160:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801a162:	79fb      	ldrb	r3, [r7, #7]
 801a164:	2b01      	cmp	r3, #1
 801a166:	d149      	bne.n	801a1fc <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801a168:	2000      	movs	r0, #0
 801a16a:	f7ef fdcc 	bl	8009d06 <RBI_GetRFOMaxPowerConfig>
 801a16e:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801a170:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a174:	68fa      	ldr	r2, [r7, #12]
 801a176:	429a      	cmp	r2, r3
 801a178:	da01      	bge.n	801a17e <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801a17a:	68fb      	ldr	r3, [r7, #12]
 801a17c:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801a17e:	68fb      	ldr	r3, [r7, #12]
 801a180:	2b0e      	cmp	r3, #14
 801a182:	d10e      	bne.n	801a1a2 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801a184:	2301      	movs	r3, #1
 801a186:	2201      	movs	r2, #1
 801a188:	2100      	movs	r1, #0
 801a18a:	2004      	movs	r0, #4
 801a18c:	f7ff fef6 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a190:	79ba      	ldrb	r2, [r7, #6]
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	b2db      	uxtb	r3, r3
 801a196:	1ad3      	subs	r3, r2, r3
 801a198:	b2db      	uxtb	r3, r3
 801a19a:	330e      	adds	r3, #14
 801a19c:	b2db      	uxtb	r3, r3
 801a19e:	71bb      	strb	r3, [r7, #6]
 801a1a0:	e01f      	b.n	801a1e2 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	2b0a      	cmp	r3, #10
 801a1a6:	d10e      	bne.n	801a1c6 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801a1a8:	2301      	movs	r3, #1
 801a1aa:	2201      	movs	r2, #1
 801a1ac:	2100      	movs	r1, #0
 801a1ae:	2001      	movs	r0, #1
 801a1b0:	f7ff fee4 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801a1b4:	79ba      	ldrb	r2, [r7, #6]
 801a1b6:	68fb      	ldr	r3, [r7, #12]
 801a1b8:	b2db      	uxtb	r3, r3
 801a1ba:	1ad3      	subs	r3, r2, r3
 801a1bc:	b2db      	uxtb	r3, r3
 801a1be:	330d      	adds	r3, #13
 801a1c0:	b2db      	uxtb	r3, r3
 801a1c2:	71bb      	strb	r3, [r7, #6]
 801a1c4:	e00d      	b.n	801a1e2 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	2201      	movs	r2, #1
 801a1ca:	2100      	movs	r1, #0
 801a1cc:	2007      	movs	r0, #7
 801a1ce:	f7ff fed5 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a1d2:	79ba      	ldrb	r2, [r7, #6]
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	b2db      	uxtb	r3, r3
 801a1d8:	1ad3      	subs	r3, r2, r3
 801a1da:	b2db      	uxtb	r3, r3
 801a1dc:	330e      	adds	r3, #14
 801a1de:	b2db      	uxtb	r3, r3
 801a1e0:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801a1e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a1e6:	f113 0f11 	cmn.w	r3, #17
 801a1ea:	da01      	bge.n	801a1f0 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801a1ec:	23ef      	movs	r3, #239	@ 0xef
 801a1ee:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801a1f0:	2118      	movs	r1, #24
 801a1f2:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a1f6:	f000 fa8d 	bl	801a714 <SUBGRF_WriteRegister>
 801a1fa:	e067      	b.n	801a2cc <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801a1fc:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a200:	f000 fa9c 	bl	801a73c <SUBGRF_ReadRegister>
 801a204:	4603      	mov	r3, r0
 801a206:	f043 031e 	orr.w	r3, r3, #30
 801a20a:	b2db      	uxtb	r3, r3
 801a20c:	4619      	mov	r1, r3
 801a20e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 801a212:	f000 fa7f 	bl	801a714 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801a216:	2001      	movs	r0, #1
 801a218:	f7ef fd75 	bl	8009d06 <RBI_GetRFOMaxPowerConfig>
 801a21c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801a21e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a222:	68fa      	ldr	r2, [r7, #12]
 801a224:	429a      	cmp	r2, r3
 801a226:	da01      	bge.n	801a22c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801a228:	68fb      	ldr	r3, [r7, #12]
 801a22a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	2b14      	cmp	r3, #20
 801a230:	d10e      	bne.n	801a250 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801a232:	2301      	movs	r3, #1
 801a234:	2200      	movs	r2, #0
 801a236:	2105      	movs	r1, #5
 801a238:	2003      	movs	r0, #3
 801a23a:	f7ff fe9f 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a23e:	79ba      	ldrb	r2, [r7, #6]
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	b2db      	uxtb	r3, r3
 801a244:	1ad3      	subs	r3, r2, r3
 801a246:	b2db      	uxtb	r3, r3
 801a248:	3316      	adds	r3, #22
 801a24a:	b2db      	uxtb	r3, r3
 801a24c:	71bb      	strb	r3, [r7, #6]
 801a24e:	e031      	b.n	801a2b4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801a250:	68fb      	ldr	r3, [r7, #12]
 801a252:	2b11      	cmp	r3, #17
 801a254:	d10e      	bne.n	801a274 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801a256:	2301      	movs	r3, #1
 801a258:	2200      	movs	r2, #0
 801a25a:	2103      	movs	r1, #3
 801a25c:	2002      	movs	r0, #2
 801a25e:	f7ff fe8d 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a262:	79ba      	ldrb	r2, [r7, #6]
 801a264:	68fb      	ldr	r3, [r7, #12]
 801a266:	b2db      	uxtb	r3, r3
 801a268:	1ad3      	subs	r3, r2, r3
 801a26a:	b2db      	uxtb	r3, r3
 801a26c:	3316      	adds	r3, #22
 801a26e:	b2db      	uxtb	r3, r3
 801a270:	71bb      	strb	r3, [r7, #6]
 801a272:	e01f      	b.n	801a2b4 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	2b0e      	cmp	r3, #14
 801a278:	d10e      	bne.n	801a298 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801a27a:	2301      	movs	r3, #1
 801a27c:	2200      	movs	r2, #0
 801a27e:	2102      	movs	r1, #2
 801a280:	2002      	movs	r0, #2
 801a282:	f7ff fe7b 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801a286:	79ba      	ldrb	r2, [r7, #6]
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	b2db      	uxtb	r3, r3
 801a28c:	1ad3      	subs	r3, r2, r3
 801a28e:	b2db      	uxtb	r3, r3
 801a290:	330e      	adds	r3, #14
 801a292:	b2db      	uxtb	r3, r3
 801a294:	71bb      	strb	r3, [r7, #6]
 801a296:	e00d      	b.n	801a2b4 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801a298:	2301      	movs	r3, #1
 801a29a:	2200      	movs	r2, #0
 801a29c:	2107      	movs	r1, #7
 801a29e:	2004      	movs	r0, #4
 801a2a0:	f7ff fe6c 	bl	8019f7c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801a2a4:	79ba      	ldrb	r2, [r7, #6]
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	b2db      	uxtb	r3, r3
 801a2aa:	1ad3      	subs	r3, r2, r3
 801a2ac:	b2db      	uxtb	r3, r3
 801a2ae:	3316      	adds	r3, #22
 801a2b0:	b2db      	uxtb	r3, r3
 801a2b2:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801a2b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801a2b8:	f113 0f09 	cmn.w	r3, #9
 801a2bc:	da01      	bge.n	801a2c2 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801a2be:	23f7      	movs	r3, #247	@ 0xf7
 801a2c0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801a2c2:	2138      	movs	r1, #56	@ 0x38
 801a2c4:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801a2c8:	f000 fa24 	bl	801a714 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801a2cc:	79bb      	ldrb	r3, [r7, #6]
 801a2ce:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801a2d0:	797b      	ldrb	r3, [r7, #5]
 801a2d2:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801a2d4:	f107 0308 	add.w	r3, r7, #8
 801a2d8:	2202      	movs	r2, #2
 801a2da:	4619      	mov	r1, r3
 801a2dc:	208e      	movs	r0, #142	@ 0x8e
 801a2de:	f000 fac9 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a2e2:	bf00      	nop
 801a2e4:	3710      	adds	r7, #16
 801a2e6:	46bd      	mov	sp, r7
 801a2e8:	bd80      	pop	{r7, pc}
	...

0801a2ec <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801a2ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801a2f0:	b086      	sub	sp, #24
 801a2f2:	af00      	add	r7, sp, #0
 801a2f4:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a2fa:	f107 0308 	add.w	r3, r7, #8
 801a2fe:	2200      	movs	r2, #0
 801a300:	601a      	str	r2, [r3, #0]
 801a302:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	781a      	ldrb	r2, [r3, #0]
 801a308:	4b5c      	ldr	r3, [pc, #368]	@ (801a47c <SUBGRF_SetModulationParams+0x190>)
 801a30a:	781b      	ldrb	r3, [r3, #0]
 801a30c:	429a      	cmp	r2, r3
 801a30e:	d004      	beq.n	801a31a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	781b      	ldrb	r3, [r3, #0]
 801a314:	4618      	mov	r0, r3
 801a316:	f7ff fef5 	bl	801a104 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801a31a:	687b      	ldr	r3, [r7, #4]
 801a31c:	781b      	ldrb	r3, [r3, #0]
 801a31e:	2b03      	cmp	r3, #3
 801a320:	f200 80a5 	bhi.w	801a46e <SUBGRF_SetModulationParams+0x182>
 801a324:	a201      	add	r2, pc, #4	@ (adr r2, 801a32c <SUBGRF_SetModulationParams+0x40>)
 801a326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a32a:	bf00      	nop
 801a32c:	0801a33d 	.word	0x0801a33d
 801a330:	0801a3fd 	.word	0x0801a3fd
 801a334:	0801a3bf 	.word	0x0801a3bf
 801a338:	0801a42b 	.word	0x0801a42b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801a33c:	2308      	movs	r3, #8
 801a33e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	685b      	ldr	r3, [r3, #4]
 801a344:	4a4e      	ldr	r2, [pc, #312]	@ (801a480 <SUBGRF_SetModulationParams+0x194>)
 801a346:	fbb2 f3f3 	udiv	r3, r2, r3
 801a34a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a34c:	697b      	ldr	r3, [r7, #20]
 801a34e:	0c1b      	lsrs	r3, r3, #16
 801a350:	b2db      	uxtb	r3, r3
 801a352:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a354:	697b      	ldr	r3, [r7, #20]
 801a356:	0a1b      	lsrs	r3, r3, #8
 801a358:	b2db      	uxtb	r3, r3
 801a35a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a35c:	697b      	ldr	r3, [r7, #20]
 801a35e:	b2db      	uxtb	r3, r3
 801a360:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	7b1b      	ldrb	r3, [r3, #12]
 801a366:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	7b5b      	ldrb	r3, [r3, #13]
 801a36c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	689b      	ldr	r3, [r3, #8]
 801a372:	2200      	movs	r2, #0
 801a374:	461c      	mov	r4, r3
 801a376:	4615      	mov	r5, r2
 801a378:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801a37c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801a380:	4a40      	ldr	r2, [pc, #256]	@ (801a484 <SUBGRF_SetModulationParams+0x198>)
 801a382:	f04f 0300 	mov.w	r3, #0
 801a386:	4640      	mov	r0, r8
 801a388:	4649      	mov	r1, r9
 801a38a:	f7e6 fa9d 	bl	80008c8 <__aeabi_uldivmod>
 801a38e:	4602      	mov	r2, r0
 801a390:	460b      	mov	r3, r1
 801a392:	4613      	mov	r3, r2
 801a394:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	0c1b      	lsrs	r3, r3, #16
 801a39a:	b2db      	uxtb	r3, r3
 801a39c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801a39e:	697b      	ldr	r3, [r7, #20]
 801a3a0:	0a1b      	lsrs	r3, r3, #8
 801a3a2:	b2db      	uxtb	r3, r3
 801a3a4:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801a3a6:	697b      	ldr	r3, [r7, #20]
 801a3a8:	b2db      	uxtb	r3, r3
 801a3aa:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a3ac:	7cfb      	ldrb	r3, [r7, #19]
 801a3ae:	b29a      	uxth	r2, r3
 801a3b0:	f107 0308 	add.w	r3, r7, #8
 801a3b4:	4619      	mov	r1, r3
 801a3b6:	208b      	movs	r0, #139	@ 0x8b
 801a3b8:	f000 fa5c 	bl	801a874 <SUBGRF_WriteCommand>
        break;
 801a3bc:	e058      	b.n	801a470 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 801a3be:	2304      	movs	r3, #4
 801a3c0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	691b      	ldr	r3, [r3, #16]
 801a3c6:	4a2e      	ldr	r2, [pc, #184]	@ (801a480 <SUBGRF_SetModulationParams+0x194>)
 801a3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3cc:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a3ce:	697b      	ldr	r3, [r7, #20]
 801a3d0:	0c1b      	lsrs	r3, r3, #16
 801a3d2:	b2db      	uxtb	r3, r3
 801a3d4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a3d6:	697b      	ldr	r3, [r7, #20]
 801a3d8:	0a1b      	lsrs	r3, r3, #8
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a3de:	697b      	ldr	r3, [r7, #20]
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	7d1b      	ldrb	r3, [r3, #20]
 801a3e8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a3ea:	7cfb      	ldrb	r3, [r7, #19]
 801a3ec:	b29a      	uxth	r2, r3
 801a3ee:	f107 0308 	add.w	r3, r7, #8
 801a3f2:	4619      	mov	r1, r3
 801a3f4:	208b      	movs	r0, #139	@ 0x8b
 801a3f6:	f000 fa3d 	bl	801a874 <SUBGRF_WriteCommand>
        break;
 801a3fa:	e039      	b.n	801a470 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 801a3fc:	2304      	movs	r3, #4
 801a3fe:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	7e1b      	ldrb	r3, [r3, #24]
 801a404:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	7e5b      	ldrb	r3, [r3, #25]
 801a40a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	7e9b      	ldrb	r3, [r3, #26]
 801a410:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	7edb      	ldrb	r3, [r3, #27]
 801a416:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a418:	7cfb      	ldrb	r3, [r7, #19]
 801a41a:	b29a      	uxth	r2, r3
 801a41c:	f107 0308 	add.w	r3, r7, #8
 801a420:	4619      	mov	r1, r3
 801a422:	208b      	movs	r0, #139	@ 0x8b
 801a424:	f000 fa26 	bl	801a874 <SUBGRF_WriteCommand>

        break;
 801a428:	e022      	b.n	801a470 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 801a42a:	2305      	movs	r3, #5
 801a42c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	4a13      	ldr	r2, [pc, #76]	@ (801a480 <SUBGRF_SetModulationParams+0x194>)
 801a434:	fbb2 f3f3 	udiv	r3, r2, r3
 801a438:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801a43a:	697b      	ldr	r3, [r7, #20]
 801a43c:	0c1b      	lsrs	r3, r3, #16
 801a43e:	b2db      	uxtb	r3, r3
 801a440:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801a442:	697b      	ldr	r3, [r7, #20]
 801a444:	0a1b      	lsrs	r3, r3, #8
 801a446:	b2db      	uxtb	r3, r3
 801a448:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801a44a:	697b      	ldr	r3, [r7, #20]
 801a44c:	b2db      	uxtb	r3, r3
 801a44e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	7b1b      	ldrb	r3, [r3, #12]
 801a454:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	7b5b      	ldrb	r3, [r3, #13]
 801a45a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801a45c:	7cfb      	ldrb	r3, [r7, #19]
 801a45e:	b29a      	uxth	r2, r3
 801a460:	f107 0308 	add.w	r3, r7, #8
 801a464:	4619      	mov	r1, r3
 801a466:	208b      	movs	r0, #139	@ 0x8b
 801a468:	f000 fa04 	bl	801a874 <SUBGRF_WriteCommand>
        break;
 801a46c:	e000      	b.n	801a470 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 801a46e:	bf00      	nop
    }
}
 801a470:	bf00      	nop
 801a472:	3718      	adds	r7, #24
 801a474:	46bd      	mov	sp, r7
 801a476:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a47a:	bf00      	nop
 801a47c:	20001bd9 	.word	0x20001bd9
 801a480:	3d090000 	.word	0x3d090000
 801a484:	01e84800 	.word	0x01e84800

0801a488 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b086      	sub	sp, #24
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801a490:	2300      	movs	r3, #0
 801a492:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801a494:	f107 030c 	add.w	r3, r7, #12
 801a498:	2200      	movs	r2, #0
 801a49a:	601a      	str	r2, [r3, #0]
 801a49c:	605a      	str	r2, [r3, #4]
 801a49e:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	781a      	ldrb	r2, [r3, #0]
 801a4a4:	4b44      	ldr	r3, [pc, #272]	@ (801a5b8 <SUBGRF_SetPacketParams+0x130>)
 801a4a6:	781b      	ldrb	r3, [r3, #0]
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d004      	beq.n	801a4b6 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	781b      	ldrb	r3, [r3, #0]
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7ff fe27 	bl	801a104 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	781b      	ldrb	r3, [r3, #0]
 801a4ba:	2b03      	cmp	r3, #3
 801a4bc:	d878      	bhi.n	801a5b0 <SUBGRF_SetPacketParams+0x128>
 801a4be:	a201      	add	r2, pc, #4	@ (adr r2, 801a4c4 <SUBGRF_SetPacketParams+0x3c>)
 801a4c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a4c4:	0801a4d5 	.word	0x0801a4d5
 801a4c8:	0801a565 	.word	0x0801a565
 801a4cc:	0801a559 	.word	0x0801a559
 801a4d0:	0801a4d5 	.word	0x0801a4d5
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	7a5b      	ldrb	r3, [r3, #9]
 801a4d8:	2bf1      	cmp	r3, #241	@ 0xf1
 801a4da:	d10a      	bne.n	801a4f2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801a4dc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801a4e0:	f7ff faa6 	bl	8019a30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801a4e4:	f248 0005 	movw	r0, #32773	@ 0x8005
 801a4e8:	f7ff fac2 	bl	8019a70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801a4ec:	2302      	movs	r3, #2
 801a4ee:	75bb      	strb	r3, [r7, #22]
 801a4f0:	e011      	b.n	801a516 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	7a5b      	ldrb	r3, [r3, #9]
 801a4f6:	2bf2      	cmp	r3, #242	@ 0xf2
 801a4f8:	d10a      	bne.n	801a510 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801a4fa:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 801a4fe:	f7ff fa97 	bl	8019a30 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801a502:	f241 0021 	movw	r0, #4129	@ 0x1021
 801a506:	f7ff fab3 	bl	8019a70 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801a50a:	2306      	movs	r3, #6
 801a50c:	75bb      	strb	r3, [r7, #22]
 801a50e:	e002      	b.n	801a516 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	7a5b      	ldrb	r3, [r3, #9]
 801a514:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801a516:	2309      	movs	r3, #9
 801a518:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	885b      	ldrh	r3, [r3, #2]
 801a51e:	0a1b      	lsrs	r3, r3, #8
 801a520:	b29b      	uxth	r3, r3
 801a522:	b2db      	uxtb	r3, r3
 801a524:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	885b      	ldrh	r3, [r3, #2]
 801a52a:	b2db      	uxtb	r3, r3
 801a52c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	791b      	ldrb	r3, [r3, #4]
 801a532:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	795b      	ldrb	r3, [r3, #5]
 801a538:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	799b      	ldrb	r3, [r3, #6]
 801a53e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801a540:	687b      	ldr	r3, [r7, #4]
 801a542:	79db      	ldrb	r3, [r3, #7]
 801a544:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	7a1b      	ldrb	r3, [r3, #8]
 801a54a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801a54c:	7dbb      	ldrb	r3, [r7, #22]
 801a54e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	7a9b      	ldrb	r3, [r3, #10]
 801a554:	753b      	strb	r3, [r7, #20]
        break;
 801a556:	e022      	b.n	801a59e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801a558:	2301      	movs	r3, #1
 801a55a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	7b1b      	ldrb	r3, [r3, #12]
 801a560:	733b      	strb	r3, [r7, #12]
        break;
 801a562:	e01c      	b.n	801a59e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801a564:	2306      	movs	r3, #6
 801a566:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	89db      	ldrh	r3, [r3, #14]
 801a56c:	0a1b      	lsrs	r3, r3, #8
 801a56e:	b29b      	uxth	r3, r3
 801a570:	b2db      	uxtb	r3, r3
 801a572:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	89db      	ldrh	r3, [r3, #14]
 801a578:	b2db      	uxtb	r3, r3
 801a57a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	7c1a      	ldrb	r2, [r3, #16]
 801a580:	4b0e      	ldr	r3, [pc, #56]	@ (801a5bc <SUBGRF_SetPacketParams+0x134>)
 801a582:	4611      	mov	r1, r2
 801a584:	7019      	strb	r1, [r3, #0]
 801a586:	4613      	mov	r3, r2
 801a588:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	7c5b      	ldrb	r3, [r3, #17]
 801a58e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	7c9b      	ldrb	r3, [r3, #18]
 801a594:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801a596:	687b      	ldr	r3, [r7, #4]
 801a598:	7cdb      	ldrb	r3, [r3, #19]
 801a59a:	747b      	strb	r3, [r7, #17]
        break;
 801a59c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801a59e:	7dfb      	ldrb	r3, [r7, #23]
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	f107 030c 	add.w	r3, r7, #12
 801a5a6:	4619      	mov	r1, r3
 801a5a8:	208c      	movs	r0, #140	@ 0x8c
 801a5aa:	f000 f963 	bl	801a874 <SUBGRF_WriteCommand>
 801a5ae:	e000      	b.n	801a5b2 <SUBGRF_SetPacketParams+0x12a>
        return;
 801a5b0:	bf00      	nop
}
 801a5b2:	3718      	adds	r7, #24
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}
 801a5b8:	20001bd9 	.word	0x20001bd9
 801a5bc:	20001bda 	.word	0x20001bda

0801a5c0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b084      	sub	sp, #16
 801a5c4:	af00      	add	r7, sp, #0
 801a5c6:	4603      	mov	r3, r0
 801a5c8:	460a      	mov	r2, r1
 801a5ca:	71fb      	strb	r3, [r7, #7]
 801a5cc:	4613      	mov	r3, r2
 801a5ce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801a5d0:	79fb      	ldrb	r3, [r7, #7]
 801a5d2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801a5d4:	79bb      	ldrb	r3, [r7, #6]
 801a5d6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801a5d8:	f107 030c 	add.w	r3, r7, #12
 801a5dc:	2202      	movs	r2, #2
 801a5de:	4619      	mov	r1, r3
 801a5e0:	208f      	movs	r0, #143	@ 0x8f
 801a5e2:	f000 f947 	bl	801a874 <SUBGRF_WriteCommand>
}
 801a5e6:	bf00      	nop
 801a5e8:	3710      	adds	r7, #16
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	bd80      	pop	{r7, pc}

0801a5ee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801a5ee:	b580      	push	{r7, lr}
 801a5f0:	b082      	sub	sp, #8
 801a5f2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801a5f8:	1d3b      	adds	r3, r7, #4
 801a5fa:	2201      	movs	r2, #1
 801a5fc:	4619      	mov	r1, r3
 801a5fe:	2015      	movs	r0, #21
 801a600:	f000 f95a 	bl	801a8b8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801a604:	793b      	ldrb	r3, [r7, #4]
 801a606:	425b      	negs	r3, r3
 801a608:	105b      	asrs	r3, r3, #1
 801a60a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801a60c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a610:	4618      	mov	r0, r3
 801a612:	3708      	adds	r7, #8
 801a614:	46bd      	mov	sp, r7
 801a616:	bd80      	pop	{r7, pc}

0801a618 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801a618:	b580      	push	{r7, lr}
 801a61a:	b084      	sub	sp, #16
 801a61c:	af00      	add	r7, sp, #0
 801a61e:	6078      	str	r0, [r7, #4]
 801a620:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801a622:	f107 030c 	add.w	r3, r7, #12
 801a626:	2202      	movs	r2, #2
 801a628:	4619      	mov	r1, r3
 801a62a:	2013      	movs	r0, #19
 801a62c:	f000 f944 	bl	801a8b8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801a630:	f7ff fd84 	bl	801a13c <SUBGRF_GetPacketType>
 801a634:	4603      	mov	r3, r0
 801a636:	2b01      	cmp	r3, #1
 801a638:	d10d      	bne.n	801a656 <SUBGRF_GetRxBufferStatus+0x3e>
 801a63a:	4b0c      	ldr	r3, [pc, #48]	@ (801a66c <SUBGRF_GetRxBufferStatus+0x54>)
 801a63c:	781b      	ldrb	r3, [r3, #0]
 801a63e:	b2db      	uxtb	r3, r3
 801a640:	2b01      	cmp	r3, #1
 801a642:	d108      	bne.n	801a656 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801a644:	f240 7002 	movw	r0, #1794	@ 0x702
 801a648:	f000 f878 	bl	801a73c <SUBGRF_ReadRegister>
 801a64c:	4603      	mov	r3, r0
 801a64e:	461a      	mov	r2, r3
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	701a      	strb	r2, [r3, #0]
 801a654:	e002      	b.n	801a65c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801a656:	7b3a      	ldrb	r2, [r7, #12]
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801a65c:	7b7a      	ldrb	r2, [r7, #13]
 801a65e:	683b      	ldr	r3, [r7, #0]
 801a660:	701a      	strb	r2, [r3, #0]
}
 801a662:	bf00      	nop
 801a664:	3710      	adds	r7, #16
 801a666:	46bd      	mov	sp, r7
 801a668:	bd80      	pop	{r7, pc}
 801a66a:	bf00      	nop
 801a66c:	20001bda 	.word	0x20001bda

0801a670 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801a670:	b580      	push	{r7, lr}
 801a672:	b084      	sub	sp, #16
 801a674:	af00      	add	r7, sp, #0
 801a676:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801a678:	f107 030c 	add.w	r3, r7, #12
 801a67c:	2203      	movs	r2, #3
 801a67e:	4619      	mov	r1, r3
 801a680:	2014      	movs	r0, #20
 801a682:	f000 f919 	bl	801a8b8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801a686:	f7ff fd59 	bl	801a13c <SUBGRF_GetPacketType>
 801a68a:	4603      	mov	r3, r0
 801a68c:	461a      	mov	r2, r3
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	781b      	ldrb	r3, [r3, #0]
 801a696:	2b00      	cmp	r3, #0
 801a698:	d002      	beq.n	801a6a0 <SUBGRF_GetPacketStatus+0x30>
 801a69a:	2b01      	cmp	r3, #1
 801a69c:	d013      	beq.n	801a6c6 <SUBGRF_GetPacketStatus+0x56>
 801a69e:	e02a      	b.n	801a6f6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801a6a0:	7b3a      	ldrb	r2, [r7, #12]
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801a6a6:	7b7b      	ldrb	r3, [r7, #13]
 801a6a8:	425b      	negs	r3, r3
 801a6aa:	105b      	asrs	r3, r3, #1
 801a6ac:	b25a      	sxtb	r2, r3
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801a6b2:	7bbb      	ldrb	r3, [r7, #14]
 801a6b4:	425b      	negs	r3, r3
 801a6b6:	105b      	asrs	r3, r3, #1
 801a6b8:	b25a      	sxtb	r2, r3
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	2200      	movs	r2, #0
 801a6c2:	609a      	str	r2, [r3, #8]
            break;
 801a6c4:	e020      	b.n	801a708 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801a6c6:	7b3b      	ldrb	r3, [r7, #12]
 801a6c8:	425b      	negs	r3, r3
 801a6ca:	105b      	asrs	r3, r3, #1
 801a6cc:	b25a      	sxtb	r2, r3
 801a6ce:	687b      	ldr	r3, [r7, #4]
 801a6d0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801a6d2:	7b7b      	ldrb	r3, [r7, #13]
 801a6d4:	b25b      	sxtb	r3, r3
 801a6d6:	3302      	adds	r3, #2
 801a6d8:	109b      	asrs	r3, r3, #2
 801a6da:	b25a      	sxtb	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801a6e0:	7bbb      	ldrb	r3, [r7, #14]
 801a6e2:	425b      	negs	r3, r3
 801a6e4:	105b      	asrs	r3, r3, #1
 801a6e6:	b25a      	sxtb	r2, r3
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801a6ec:	4b08      	ldr	r3, [pc, #32]	@ (801a710 <SUBGRF_GetPacketStatus+0xa0>)
 801a6ee:	681a      	ldr	r2, [r3, #0]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	611a      	str	r2, [r3, #16]
            break;
 801a6f4:	e008      	b.n	801a708 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801a6f6:	2214      	movs	r2, #20
 801a6f8:	2100      	movs	r1, #0
 801a6fa:	6878      	ldr	r0, [r7, #4]
 801a6fc:	f000 fc03 	bl	801af06 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	220f      	movs	r2, #15
 801a704:	701a      	strb	r2, [r3, #0]
            break;
 801a706:	bf00      	nop
    }
}
 801a708:	bf00      	nop
 801a70a:	3710      	adds	r7, #16
 801a70c:	46bd      	mov	sp, r7
 801a70e:	bd80      	pop	{r7, pc}
 801a710:	20001bdc 	.word	0x20001bdc

0801a714 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801a714:	b580      	push	{r7, lr}
 801a716:	b082      	sub	sp, #8
 801a718:	af00      	add	r7, sp, #0
 801a71a:	4603      	mov	r3, r0
 801a71c:	460a      	mov	r2, r1
 801a71e:	80fb      	strh	r3, [r7, #6]
 801a720:	4613      	mov	r3, r2
 801a722:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801a724:	1d7a      	adds	r2, r7, #5
 801a726:	88f9      	ldrh	r1, [r7, #6]
 801a728:	2301      	movs	r3, #1
 801a72a:	4803      	ldr	r0, [pc, #12]	@ (801a738 <SUBGRF_WriteRegister+0x24>)
 801a72c:	f7ec fa80 	bl	8006c30 <HAL_SUBGHZ_WriteRegisters>
}
 801a730:	bf00      	nop
 801a732:	3708      	adds	r7, #8
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	200001f4 	.word	0x200001f4

0801a73c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801a73c:	b580      	push	{r7, lr}
 801a73e:	b084      	sub	sp, #16
 801a740:	af00      	add	r7, sp, #0
 801a742:	4603      	mov	r3, r0
 801a744:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801a746:	f107 020f 	add.w	r2, r7, #15
 801a74a:	88f9      	ldrh	r1, [r7, #6]
 801a74c:	2301      	movs	r3, #1
 801a74e:	4804      	ldr	r0, [pc, #16]	@ (801a760 <SUBGRF_ReadRegister+0x24>)
 801a750:	f7ec facd 	bl	8006cee <HAL_SUBGHZ_ReadRegisters>
    return data;
 801a754:	7bfb      	ldrb	r3, [r7, #15]
}
 801a756:	4618      	mov	r0, r3
 801a758:	3710      	adds	r7, #16
 801a75a:	46bd      	mov	sp, r7
 801a75c:	bd80      	pop	{r7, pc}
 801a75e:	bf00      	nop
 801a760:	200001f4 	.word	0x200001f4

0801a764 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b086      	sub	sp, #24
 801a768:	af00      	add	r7, sp, #0
 801a76a:	4603      	mov	r3, r0
 801a76c:	6039      	str	r1, [r7, #0]
 801a76e:	80fb      	strh	r3, [r7, #6]
 801a770:	4613      	mov	r3, r2
 801a772:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a774:	f3ef 8310 	mrs	r3, PRIMASK
 801a778:	60fb      	str	r3, [r7, #12]
  return(result);
 801a77a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a77c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a77e:	b672      	cpsid	i
}
 801a780:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801a782:	88bb      	ldrh	r3, [r7, #4]
 801a784:	88f9      	ldrh	r1, [r7, #6]
 801a786:	683a      	ldr	r2, [r7, #0]
 801a788:	4806      	ldr	r0, [pc, #24]	@ (801a7a4 <SUBGRF_WriteRegisters+0x40>)
 801a78a:	f7ec fa51 	bl	8006c30 <HAL_SUBGHZ_WriteRegisters>
 801a78e:	697b      	ldr	r3, [r7, #20]
 801a790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	f383 8810 	msr	PRIMASK, r3
}
 801a798:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a79a:	bf00      	nop
 801a79c:	3718      	adds	r7, #24
 801a79e:	46bd      	mov	sp, r7
 801a7a0:	bd80      	pop	{r7, pc}
 801a7a2:	bf00      	nop
 801a7a4:	200001f4 	.word	0x200001f4

0801a7a8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b086      	sub	sp, #24
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	4603      	mov	r3, r0
 801a7b0:	6039      	str	r1, [r7, #0]
 801a7b2:	80fb      	strh	r3, [r7, #6]
 801a7b4:	4613      	mov	r3, r2
 801a7b6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7b8:	f3ef 8310 	mrs	r3, PRIMASK
 801a7bc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a7be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a7c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a7c2:	b672      	cpsid	i
}
 801a7c4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801a7c6:	88bb      	ldrh	r3, [r7, #4]
 801a7c8:	88f9      	ldrh	r1, [r7, #6]
 801a7ca:	683a      	ldr	r2, [r7, #0]
 801a7cc:	4806      	ldr	r0, [pc, #24]	@ (801a7e8 <SUBGRF_ReadRegisters+0x40>)
 801a7ce:	f7ec fa8e 	bl	8006cee <HAL_SUBGHZ_ReadRegisters>
 801a7d2:	697b      	ldr	r3, [r7, #20]
 801a7d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a7d6:	693b      	ldr	r3, [r7, #16]
 801a7d8:	f383 8810 	msr	PRIMASK, r3
}
 801a7dc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a7de:	bf00      	nop
 801a7e0:	3718      	adds	r7, #24
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	200001f4 	.word	0x200001f4

0801a7ec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a7ec:	b580      	push	{r7, lr}
 801a7ee:	b086      	sub	sp, #24
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	6039      	str	r1, [r7, #0]
 801a7f6:	71fb      	strb	r3, [r7, #7]
 801a7f8:	4613      	mov	r3, r2
 801a7fa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a7fc:	f3ef 8310 	mrs	r3, PRIMASK
 801a800:	60fb      	str	r3, [r7, #12]
  return(result);
 801a802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a806:	b672      	cpsid	i
}
 801a808:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801a80a:	79bb      	ldrb	r3, [r7, #6]
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	79f9      	ldrb	r1, [r7, #7]
 801a810:	683a      	ldr	r2, [r7, #0]
 801a812:	4806      	ldr	r0, [pc, #24]	@ (801a82c <SUBGRF_WriteBuffer+0x40>)
 801a814:	f7ec fb7f 	bl	8006f16 <HAL_SUBGHZ_WriteBuffer>
 801a818:	697b      	ldr	r3, [r7, #20]
 801a81a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a81c:	693b      	ldr	r3, [r7, #16]
 801a81e:	f383 8810 	msr	PRIMASK, r3
}
 801a822:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a824:	bf00      	nop
 801a826:	3718      	adds	r7, #24
 801a828:	46bd      	mov	sp, r7
 801a82a:	bd80      	pop	{r7, pc}
 801a82c:	200001f4 	.word	0x200001f4

0801a830 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801a830:	b580      	push	{r7, lr}
 801a832:	b086      	sub	sp, #24
 801a834:	af00      	add	r7, sp, #0
 801a836:	4603      	mov	r3, r0
 801a838:	6039      	str	r1, [r7, #0]
 801a83a:	71fb      	strb	r3, [r7, #7]
 801a83c:	4613      	mov	r3, r2
 801a83e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a840:	f3ef 8310 	mrs	r3, PRIMASK
 801a844:	60fb      	str	r3, [r7, #12]
  return(result);
 801a846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a84a:	b672      	cpsid	i
}
 801a84c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801a84e:	79bb      	ldrb	r3, [r7, #6]
 801a850:	b29b      	uxth	r3, r3
 801a852:	79f9      	ldrb	r1, [r7, #7]
 801a854:	683a      	ldr	r2, [r7, #0]
 801a856:	4806      	ldr	r0, [pc, #24]	@ (801a870 <SUBGRF_ReadBuffer+0x40>)
 801a858:	f7ec fbb0 	bl	8006fbc <HAL_SUBGHZ_ReadBuffer>
 801a85c:	697b      	ldr	r3, [r7, #20]
 801a85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a860:	693b      	ldr	r3, [r7, #16]
 801a862:	f383 8810 	msr	PRIMASK, r3
}
 801a866:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a868:	bf00      	nop
 801a86a:	3718      	adds	r7, #24
 801a86c:	46bd      	mov	sp, r7
 801a86e:	bd80      	pop	{r7, pc}
 801a870:	200001f4 	.word	0x200001f4

0801a874 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a874:	b580      	push	{r7, lr}
 801a876:	b086      	sub	sp, #24
 801a878:	af00      	add	r7, sp, #0
 801a87a:	4603      	mov	r3, r0
 801a87c:	6039      	str	r1, [r7, #0]
 801a87e:	71fb      	strb	r3, [r7, #7]
 801a880:	4613      	mov	r3, r2
 801a882:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a884:	f3ef 8310 	mrs	r3, PRIMASK
 801a888:	60fb      	str	r3, [r7, #12]
  return(result);
 801a88a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a88c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a88e:	b672      	cpsid	i
}
 801a890:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801a892:	88bb      	ldrh	r3, [r7, #4]
 801a894:	79f9      	ldrb	r1, [r7, #7]
 801a896:	683a      	ldr	r2, [r7, #0]
 801a898:	4806      	ldr	r0, [pc, #24]	@ (801a8b4 <SUBGRF_WriteCommand+0x40>)
 801a89a:	f7ec fa89 	bl	8006db0 <HAL_SUBGHZ_ExecSetCmd>
 801a89e:	697b      	ldr	r3, [r7, #20]
 801a8a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	f383 8810 	msr	PRIMASK, r3
}
 801a8a8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a8aa:	bf00      	nop
 801a8ac:	3718      	adds	r7, #24
 801a8ae:	46bd      	mov	sp, r7
 801a8b0:	bd80      	pop	{r7, pc}
 801a8b2:	bf00      	nop
 801a8b4:	200001f4 	.word	0x200001f4

0801a8b8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801a8b8:	b580      	push	{r7, lr}
 801a8ba:	b086      	sub	sp, #24
 801a8bc:	af00      	add	r7, sp, #0
 801a8be:	4603      	mov	r3, r0
 801a8c0:	6039      	str	r1, [r7, #0]
 801a8c2:	71fb      	strb	r3, [r7, #7]
 801a8c4:	4613      	mov	r3, r2
 801a8c6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801a8cc:	60fb      	str	r3, [r7, #12]
  return(result);
 801a8ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801a8d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a8d2:	b672      	cpsid	i
}
 801a8d4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801a8d6:	88bb      	ldrh	r3, [r7, #4]
 801a8d8:	79f9      	ldrb	r1, [r7, #7]
 801a8da:	683a      	ldr	r2, [r7, #0]
 801a8dc:	4806      	ldr	r0, [pc, #24]	@ (801a8f8 <SUBGRF_ReadCommand+0x40>)
 801a8de:	f7ec fac6 	bl	8006e6e <HAL_SUBGHZ_ExecGetCmd>
 801a8e2:	697b      	ldr	r3, [r7, #20]
 801a8e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a8e6:	693b      	ldr	r3, [r7, #16]
 801a8e8:	f383 8810 	msr	PRIMASK, r3
}
 801a8ec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801a8ee:	bf00      	nop
 801a8f0:	3718      	adds	r7, #24
 801a8f2:	46bd      	mov	sp, r7
 801a8f4:	bd80      	pop	{r7, pc}
 801a8f6:	bf00      	nop
 801a8f8:	200001f4 	.word	0x200001f4

0801a8fc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801a8fc:	b580      	push	{r7, lr}
 801a8fe:	b084      	sub	sp, #16
 801a900:	af00      	add	r7, sp, #0
 801a902:	4603      	mov	r3, r0
 801a904:	460a      	mov	r2, r1
 801a906:	71fb      	strb	r3, [r7, #7]
 801a908:	4613      	mov	r3, r2
 801a90a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801a90c:	2301      	movs	r3, #1
 801a90e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801a910:	79bb      	ldrb	r3, [r7, #6]
 801a912:	2b01      	cmp	r3, #1
 801a914:	d10d      	bne.n	801a932 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801a916:	79fb      	ldrb	r3, [r7, #7]
 801a918:	2b01      	cmp	r3, #1
 801a91a:	d104      	bne.n	801a926 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801a91c:	2302      	movs	r3, #2
 801a91e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801a920:	2004      	movs	r0, #4
 801a922:	f000 f8ef 	bl	801ab04 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801a926:	79fb      	ldrb	r3, [r7, #7]
 801a928:	2b02      	cmp	r3, #2
 801a92a:	d107      	bne.n	801a93c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801a92c:	2303      	movs	r3, #3
 801a92e:	73fb      	strb	r3, [r7, #15]
 801a930:	e004      	b.n	801a93c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801a932:	79bb      	ldrb	r3, [r7, #6]
 801a934:	2b00      	cmp	r3, #0
 801a936:	d101      	bne.n	801a93c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801a938:	2301      	movs	r3, #1
 801a93a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801a93c:	7bfb      	ldrb	r3, [r7, #15]
 801a93e:	4618      	mov	r0, r3
 801a940:	f7ef f9b3 	bl	8009caa <RBI_ConfigRFSwitch>
}
 801a944:	bf00      	nop
 801a946:	3710      	adds	r7, #16
 801a948:	46bd      	mov	sp, r7
 801a94a:	bd80      	pop	{r7, pc}

0801a94c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	4603      	mov	r3, r0
 801a954:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801a956:	2301      	movs	r3, #1
 801a958:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801a95a:	f7ef f9b3 	bl	8009cc4 <RBI_GetTxConfig>
 801a95e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	2b02      	cmp	r3, #2
 801a964:	d016      	beq.n	801a994 <SUBGRF_SetRfTxPower+0x48>
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	2b02      	cmp	r3, #2
 801a96a:	dc16      	bgt.n	801a99a <SUBGRF_SetRfTxPower+0x4e>
 801a96c:	68bb      	ldr	r3, [r7, #8]
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d003      	beq.n	801a97a <SUBGRF_SetRfTxPower+0x2e>
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	2b01      	cmp	r3, #1
 801a976:	d00a      	beq.n	801a98e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801a978:	e00f      	b.n	801a99a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801a97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a97e:	2b0f      	cmp	r3, #15
 801a980:	dd02      	ble.n	801a988 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801a982:	2302      	movs	r3, #2
 801a984:	73fb      	strb	r3, [r7, #15]
            break;
 801a986:	e009      	b.n	801a99c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801a988:	2301      	movs	r3, #1
 801a98a:	73fb      	strb	r3, [r7, #15]
            break;
 801a98c:	e006      	b.n	801a99c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801a98e:	2301      	movs	r3, #1
 801a990:	73fb      	strb	r3, [r7, #15]
            break;
 801a992:	e003      	b.n	801a99c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801a994:	2302      	movs	r3, #2
 801a996:	73fb      	strb	r3, [r7, #15]
            break;
 801a998:	e000      	b.n	801a99c <SUBGRF_SetRfTxPower+0x50>
            break;
 801a99a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801a99c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801a9a0:	7bfb      	ldrb	r3, [r7, #15]
 801a9a2:	2202      	movs	r2, #2
 801a9a4:	4618      	mov	r0, r3
 801a9a6:	f7ff fbd3 	bl	801a150 <SUBGRF_SetTxParams>

    return paSelect;
 801a9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	3710      	adds	r7, #16
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}

0801a9b4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801a9b4:	b480      	push	{r7}
 801a9b6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801a9b8:	2301      	movs	r3, #1
}
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	46bd      	mov	sp, r7
 801a9be:	bc80      	pop	{r7}
 801a9c0:	4770      	bx	lr
	...

0801a9c4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b082      	sub	sp, #8
 801a9c8:	af00      	add	r7, sp, #0
 801a9ca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801a9cc:	4b03      	ldr	r3, [pc, #12]	@ (801a9dc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	2001      	movs	r0, #1
 801a9d2:	4798      	blx	r3
}
 801a9d4:	bf00      	nop
 801a9d6:	3708      	adds	r7, #8
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}
 801a9dc:	20001be4 	.word	0x20001be4

0801a9e0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b082      	sub	sp, #8
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801a9e8:	4b03      	ldr	r3, [pc, #12]	@ (801a9f8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801a9ea:	681b      	ldr	r3, [r3, #0]
 801a9ec:	2002      	movs	r0, #2
 801a9ee:	4798      	blx	r3
}
 801a9f0:	bf00      	nop
 801a9f2:	3708      	adds	r7, #8
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}
 801a9f8:	20001be4 	.word	0x20001be4

0801a9fc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b082      	sub	sp, #8
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801aa04:	4b03      	ldr	r3, [pc, #12]	@ (801aa14 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	2040      	movs	r0, #64	@ 0x40
 801aa0a:	4798      	blx	r3
}
 801aa0c:	bf00      	nop
 801aa0e:	3708      	adds	r7, #8
 801aa10:	46bd      	mov	sp, r7
 801aa12:	bd80      	pop	{r7, pc}
 801aa14:	20001be4 	.word	0x20001be4

0801aa18 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801aa18:	b580      	push	{r7, lr}
 801aa1a:	b082      	sub	sp, #8
 801aa1c:	af00      	add	r7, sp, #0
 801aa1e:	6078      	str	r0, [r7, #4]
 801aa20:	460b      	mov	r3, r1
 801aa22:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801aa24:	78fb      	ldrb	r3, [r7, #3]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d002      	beq.n	801aa30 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	d005      	beq.n	801aa3a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801aa2e:	e00a      	b.n	801aa46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801aa30:	4b07      	ldr	r3, [pc, #28]	@ (801aa50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	2080      	movs	r0, #128	@ 0x80
 801aa36:	4798      	blx	r3
            break;
 801aa38:	e005      	b.n	801aa46 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801aa3a:	4b05      	ldr	r3, [pc, #20]	@ (801aa50 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801aa42:	4798      	blx	r3
            break;
 801aa44:	bf00      	nop
    }
}
 801aa46:	bf00      	nop
 801aa48:	3708      	adds	r7, #8
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bd80      	pop	{r7, pc}
 801aa4e:	bf00      	nop
 801aa50:	20001be4 	.word	0x20001be4

0801aa54 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801aa5c:	4b04      	ldr	r3, [pc, #16]	@ (801aa70 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801aa64:	4798      	blx	r3
}
 801aa66:	bf00      	nop
 801aa68:	3708      	adds	r7, #8
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	20001be4 	.word	0x20001be4

0801aa74 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa74:	b580      	push	{r7, lr}
 801aa76:	b082      	sub	sp, #8
 801aa78:	af00      	add	r7, sp, #0
 801aa7a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801aa7c:	4b03      	ldr	r3, [pc, #12]	@ (801aa8c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	2020      	movs	r0, #32
 801aa82:	4798      	blx	r3
}
 801aa84:	bf00      	nop
 801aa86:	3708      	adds	r7, #8
 801aa88:	46bd      	mov	sp, r7
 801aa8a:	bd80      	pop	{r7, pc}
 801aa8c:	20001be4 	.word	0x20001be4

0801aa90 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aa90:	b580      	push	{r7, lr}
 801aa92:	b082      	sub	sp, #8
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801aa98:	4b03      	ldr	r3, [pc, #12]	@ (801aaa8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801aa9a:	681b      	ldr	r3, [r3, #0]
 801aa9c:	2004      	movs	r0, #4
 801aa9e:	4798      	blx	r3
}
 801aaa0:	bf00      	nop
 801aaa2:	3708      	adds	r7, #8
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	bd80      	pop	{r7, pc}
 801aaa8:	20001be4 	.word	0x20001be4

0801aaac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b082      	sub	sp, #8
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801aab4:	4b03      	ldr	r3, [pc, #12]	@ (801aac4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	2008      	movs	r0, #8
 801aaba:	4798      	blx	r3
}
 801aabc:	bf00      	nop
 801aabe:	3708      	adds	r7, #8
 801aac0:	46bd      	mov	sp, r7
 801aac2:	bd80      	pop	{r7, pc}
 801aac4:	20001be4 	.word	0x20001be4

0801aac8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b082      	sub	sp, #8
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801aad0:	4b03      	ldr	r3, [pc, #12]	@ (801aae0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801aad2:	681b      	ldr	r3, [r3, #0]
 801aad4:	2010      	movs	r0, #16
 801aad6:	4798      	blx	r3
}
 801aad8:	bf00      	nop
 801aada:	3708      	adds	r7, #8
 801aadc:	46bd      	mov	sp, r7
 801aade:	bd80      	pop	{r7, pc}
 801aae0:	20001be4 	.word	0x20001be4

0801aae4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b082      	sub	sp, #8
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801aaec:	4b04      	ldr	r3, [pc, #16]	@ (801ab00 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 801aaf4:	4798      	blx	r3
}
 801aaf6:	bf00      	nop
 801aaf8:	3708      	adds	r7, #8
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}
 801aafe:	bf00      	nop
 801ab00:	20001be4 	.word	0x20001be4

0801ab04 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801ab04:	b580      	push	{r7, lr}
 801ab06:	b084      	sub	sp, #16
 801ab08:	af00      	add	r7, sp, #0
 801ab0a:	4603      	mov	r3, r0
 801ab0c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801ab0e:	f7ef f8ef 	bl	8009cf0 <RBI_IsDCDC>
 801ab12:	4603      	mov	r3, r0
 801ab14:	2b01      	cmp	r3, #1
 801ab16:	d112      	bne.n	801ab3e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801ab18:	f640 1023 	movw	r0, #2339	@ 0x923
 801ab1c:	f7ff fe0e 	bl	801a73c <SUBGRF_ReadRegister>
 801ab20:	4603      	mov	r3, r0
 801ab22:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801ab24:	7bfb      	ldrb	r3, [r7, #15]
 801ab26:	f023 0306 	bic.w	r3, r3, #6
 801ab2a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801ab2c:	7bfa      	ldrb	r2, [r7, #15]
 801ab2e:	79fb      	ldrb	r3, [r7, #7]
 801ab30:	4313      	orrs	r3, r2
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	4619      	mov	r1, r3
 801ab36:	f640 1023 	movw	r0, #2339	@ 0x923
 801ab3a:	f7ff fdeb 	bl	801a714 <SUBGRF_WriteRegister>
  }
}
 801ab3e:	bf00      	nop
 801ab40:	3710      	adds	r7, #16
 801ab42:	46bd      	mov	sp, r7
 801ab44:	bd80      	pop	{r7, pc}
	...

0801ab48 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801ab48:	b480      	push	{r7}
 801ab4a:	b085      	sub	sp, #20
 801ab4c:	af00      	add	r7, sp, #0
 801ab4e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	2b00      	cmp	r3, #0
 801ab54:	d101      	bne.n	801ab5a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801ab56:	231f      	movs	r3, #31
 801ab58:	e017      	b.n	801ab8a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ab5a:	2300      	movs	r3, #0
 801ab5c:	73fb      	strb	r3, [r7, #15]
 801ab5e:	e00f      	b.n	801ab80 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801ab60:	7bfb      	ldrb	r3, [r7, #15]
 801ab62:	4a0c      	ldr	r2, [pc, #48]	@ (801ab94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ab64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801ab68:	687a      	ldr	r2, [r7, #4]
 801ab6a:	429a      	cmp	r2, r3
 801ab6c:	d205      	bcs.n	801ab7a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801ab6e:	7bfb      	ldrb	r3, [r7, #15]
 801ab70:	4a08      	ldr	r2, [pc, #32]	@ (801ab94 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801ab72:	00db      	lsls	r3, r3, #3
 801ab74:	4413      	add	r3, r2
 801ab76:	791b      	ldrb	r3, [r3, #4]
 801ab78:	e007      	b.n	801ab8a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801ab7a:	7bfb      	ldrb	r3, [r7, #15]
 801ab7c:	3301      	adds	r3, #1
 801ab7e:	73fb      	strb	r3, [r7, #15]
 801ab80:	7bfb      	ldrb	r3, [r7, #15]
 801ab82:	2b15      	cmp	r3, #21
 801ab84:	d9ec      	bls.n	801ab60 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801ab86:	bf00      	nop
 801ab88:	e7fd      	b.n	801ab86 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801ab8a:	4618      	mov	r0, r3
 801ab8c:	3714      	adds	r7, #20
 801ab8e:	46bd      	mov	sp, r7
 801ab90:	bc80      	pop	{r7}
 801ab92:	4770      	bx	lr
 801ab94:	0801d0ac 	.word	0x0801d0ac

0801ab98 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801ab98:	b580      	push	{r7, lr}
 801ab9a:	b08a      	sub	sp, #40	@ 0x28
 801ab9c:	af00      	add	r7, sp, #0
 801ab9e:	6078      	str	r0, [r7, #4]
 801aba0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801aba2:	4b35      	ldr	r3, [pc, #212]	@ (801ac78 <SUBGRF_GetCFO+0xe0>)
 801aba4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801aba6:	f640 0007 	movw	r0, #2055	@ 0x807
 801abaa:	f7ff fdc7 	bl	801a73c <SUBGRF_ReadRegister>
 801abae:	4603      	mov	r3, r0
 801abb0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801abb2:	7ffb      	ldrb	r3, [r7, #31]
 801abb4:	08db      	lsrs	r3, r3, #3
 801abb6:	b2db      	uxtb	r3, r3
 801abb8:	f003 0303 	and.w	r3, r3, #3
 801abbc:	3328      	adds	r3, #40	@ 0x28
 801abbe:	443b      	add	r3, r7
 801abc0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801abc4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801abc6:	7ffb      	ldrb	r3, [r7, #31]
 801abc8:	f003 0307 	and.w	r3, r3, #7
 801abcc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801abce:	7fba      	ldrb	r2, [r7, #30]
 801abd0:	7f7b      	ldrb	r3, [r7, #29]
 801abd2:	3301      	adds	r3, #1
 801abd4:	fa02 f303 	lsl.w	r3, r2, r3
 801abd8:	461a      	mov	r2, r3
 801abda:	4b28      	ldr	r3, [pc, #160]	@ (801ac7c <SUBGRF_GetCFO+0xe4>)
 801abdc:	fbb3 f3f2 	udiv	r3, r3, r2
 801abe0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801abe2:	69ba      	ldr	r2, [r7, #24]
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	fbb2 f3f3 	udiv	r3, r2, r3
 801abea:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801abec:	2301      	movs	r3, #1
 801abee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801abf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801abf6:	697a      	ldr	r2, [r7, #20]
 801abf8:	fb02 f303 	mul.w	r3, r2, r3
 801abfc:	2b07      	cmp	r3, #7
 801abfe:	d802      	bhi.n	801ac06 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801ac00:	2302      	movs	r3, #2
 801ac02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801ac06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801ac0a:	697a      	ldr	r2, [r7, #20]
 801ac0c:	fb02 f303 	mul.w	r3, r2, r3
 801ac10:	2b03      	cmp	r3, #3
 801ac12:	d802      	bhi.n	801ac1a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801ac14:	2304      	movs	r3, #4
 801ac16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801ac1a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801ac1e:	69bb      	ldr	r3, [r7, #24]
 801ac20:	fb02 f303 	mul.w	r3, r2, r3
 801ac24:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801ac26:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801ac2a:	f7ff fd87 	bl	801a73c <SUBGRF_ReadRegister>
 801ac2e:	4603      	mov	r3, r0
 801ac30:	021b      	lsls	r3, r3, #8
 801ac32:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801ac36:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801ac38:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801ac3c:	f7ff fd7e 	bl	801a73c <SUBGRF_ReadRegister>
 801ac40:	4603      	mov	r3, r0
 801ac42:	461a      	mov	r2, r3
 801ac44:	6a3b      	ldr	r3, [r7, #32]
 801ac46:	4313      	orrs	r3, r2
 801ac48:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801ac4a:	6a3b      	ldr	r3, [r7, #32]
 801ac4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d005      	beq.n	801ac60 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801ac54:	6a3b      	ldr	r3, [r7, #32]
 801ac56:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801ac5a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801ac5e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	095b      	lsrs	r3, r3, #5
 801ac64:	6a3a      	ldr	r2, [r7, #32]
 801ac66:	fb02 f303 	mul.w	r3, r2, r3
 801ac6a:	11da      	asrs	r2, r3, #7
 801ac6c:	683b      	ldr	r3, [r7, #0]
 801ac6e:	601a      	str	r2, [r3, #0]
}
 801ac70:	bf00      	nop
 801ac72:	3728      	adds	r7, #40	@ 0x28
 801ac74:	46bd      	mov	sp, r7
 801ac76:	bd80      	pop	{r7, pc}
 801ac78:	0c0a0804 	.word	0x0c0a0804
 801ac7c:	01e84800 	.word	0x01e84800

0801ac80 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801ac80:	b480      	push	{r7}
 801ac82:	b087      	sub	sp, #28
 801ac84:	af00      	add	r7, sp, #0
 801ac86:	4603      	mov	r3, r0
 801ac88:	60b9      	str	r1, [r7, #8]
 801ac8a:	607a      	str	r2, [r7, #4]
 801ac8c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801ac8e:	2300      	movs	r3, #0
 801ac90:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801ac92:	f04f 33ff 	mov.w	r3, #4294967295
 801ac96:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801ac98:	697b      	ldr	r3, [r7, #20]
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	371c      	adds	r7, #28
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bc80      	pop	{r7}
 801aca2:	4770      	bx	lr

0801aca4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801aca4:	b480      	push	{r7}
 801aca6:	b087      	sub	sp, #28
 801aca8:	af00      	add	r7, sp, #0
 801acaa:	4603      	mov	r3, r0
 801acac:	60b9      	str	r1, [r7, #8]
 801acae:	607a      	str	r2, [r7, #4]
 801acb0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801acb2:	2300      	movs	r3, #0
 801acb4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801acb6:	f04f 33ff 	mov.w	r3, #4294967295
 801acba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801acbc:	697b      	ldr	r3, [r7, #20]
}
 801acbe:	4618      	mov	r0, r3
 801acc0:	371c      	adds	r7, #28
 801acc2:	46bd      	mov	sp, r7
 801acc4:	bc80      	pop	{r7}
 801acc6:	4770      	bx	lr

0801acc8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801acc8:	b480      	push	{r7}
 801acca:	b085      	sub	sp, #20
 801accc:	af00      	add	r7, sp, #0
 801acce:	60f8      	str	r0, [r7, #12]
 801acd0:	60b9      	str	r1, [r7, #8]
 801acd2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801acd4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3714      	adds	r7, #20
 801acdc:	46bd      	mov	sp, r7
 801acde:	bc80      	pop	{r7}
 801ace0:	4770      	bx	lr

0801ace2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801ace2:	b480      	push	{r7}
 801ace4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801ace6:	bf00      	nop
 801ace8:	46bd      	mov	sp, r7
 801acea:	bc80      	pop	{r7}
 801acec:	4770      	bx	lr

0801acee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801acee:	b480      	push	{r7}
 801acf0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801acf2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801acf4:	4618      	mov	r0, r3
 801acf6:	46bd      	mov	sp, r7
 801acf8:	bc80      	pop	{r7}
 801acfa:	4770      	bx	lr

0801acfc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801acfc:	b480      	push	{r7}
 801acfe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801ad00:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801ad02:	4618      	mov	r0, r3
 801ad04:	46bd      	mov	sp, r7
 801ad06:	bc80      	pop	{r7}
 801ad08:	4770      	bx	lr

0801ad0a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801ad0a:	b480      	push	{r7}
 801ad0c:	b083      	sub	sp, #12
 801ad0e:	af00      	add	r7, sp, #0
 801ad10:	4603      	mov	r3, r0
 801ad12:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801ad14:	bf00      	nop
 801ad16:	370c      	adds	r7, #12
 801ad18:	46bd      	mov	sp, r7
 801ad1a:	bc80      	pop	{r7}
 801ad1c:	4770      	bx	lr

0801ad1e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801ad1e:	b480      	push	{r7}
 801ad20:	b087      	sub	sp, #28
 801ad22:	af00      	add	r7, sp, #0
 801ad24:	60f8      	str	r0, [r7, #12]
 801ad26:	460b      	mov	r3, r1
 801ad28:	607a      	str	r2, [r7, #4]
 801ad2a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801ad2c:	f04f 33ff 	mov.w	r3, #4294967295
 801ad30:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801ad32:	697b      	ldr	r3, [r7, #20]
}
 801ad34:	4618      	mov	r0, r3
 801ad36:	371c      	adds	r7, #28
 801ad38:	46bd      	mov	sp, r7
 801ad3a:	bc80      	pop	{r7}
 801ad3c:	4770      	bx	lr

0801ad3e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801ad3e:	b480      	push	{r7}
 801ad40:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801ad42:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801ad46:	4618      	mov	r0, r3
 801ad48:	46bd      	mov	sp, r7
 801ad4a:	bc80      	pop	{r7}
 801ad4c:	4770      	bx	lr

0801ad4e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801ad4e:	b480      	push	{r7}
 801ad50:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801ad52:	bf00      	nop
 801ad54:	46bd      	mov	sp, r7
 801ad56:	bc80      	pop	{r7}
 801ad58:	4770      	bx	lr

0801ad5a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801ad5a:	b480      	push	{r7}
 801ad5c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801ad5e:	bf00      	nop
 801ad60:	46bd      	mov	sp, r7
 801ad62:	bc80      	pop	{r7}
 801ad64:	4770      	bx	lr

0801ad66 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801ad66:	b480      	push	{r7}
 801ad68:	b083      	sub	sp, #12
 801ad6a:	af00      	add	r7, sp, #0
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801ad70:	bf00      	nop
 801ad72:	370c      	adds	r7, #12
 801ad74:	46bd      	mov	sp, r7
 801ad76:	bc80      	pop	{r7}
 801ad78:	4770      	bx	lr
	...

0801ad7c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801ad7c:	b480      	push	{r7}
 801ad7e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801ad80:	4b04      	ldr	r3, [pc, #16]	@ (801ad94 <UTIL_LPM_Init+0x18>)
 801ad82:	2200      	movs	r2, #0
 801ad84:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801ad86:	4b04      	ldr	r3, [pc, #16]	@ (801ad98 <UTIL_LPM_Init+0x1c>)
 801ad88:	2200      	movs	r2, #0
 801ad8a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801ad8c:	bf00      	nop
 801ad8e:	46bd      	mov	sp, r7
 801ad90:	bc80      	pop	{r7}
 801ad92:	4770      	bx	lr
 801ad94:	20001be8 	.word	0x20001be8
 801ad98:	20001bec 	.word	0x20001bec

0801ad9c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801ad9c:	b480      	push	{r7}
 801ad9e:	b087      	sub	sp, #28
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
 801ada4:	460b      	mov	r3, r1
 801ada6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ada8:	f3ef 8310 	mrs	r3, PRIMASK
 801adac:	613b      	str	r3, [r7, #16]
  return(result);
 801adae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801adb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801adb2:	b672      	cpsid	i
}
 801adb4:	bf00      	nop
  
  switch( state )
 801adb6:	78fb      	ldrb	r3, [r7, #3]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d008      	beq.n	801adce <UTIL_LPM_SetStopMode+0x32>
 801adbc:	2b01      	cmp	r3, #1
 801adbe:	d10e      	bne.n	801adde <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801adc0:	4b0d      	ldr	r3, [pc, #52]	@ (801adf8 <UTIL_LPM_SetStopMode+0x5c>)
 801adc2:	681a      	ldr	r2, [r3, #0]
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	4313      	orrs	r3, r2
 801adc8:	4a0b      	ldr	r2, [pc, #44]	@ (801adf8 <UTIL_LPM_SetStopMode+0x5c>)
 801adca:	6013      	str	r3, [r2, #0]
      break;
 801adcc:	e008      	b.n	801ade0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	43da      	mvns	r2, r3
 801add2:	4b09      	ldr	r3, [pc, #36]	@ (801adf8 <UTIL_LPM_SetStopMode+0x5c>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	4013      	ands	r3, r2
 801add8:	4a07      	ldr	r2, [pc, #28]	@ (801adf8 <UTIL_LPM_SetStopMode+0x5c>)
 801adda:	6013      	str	r3, [r2, #0]
      break;
 801addc:	e000      	b.n	801ade0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801adde:	bf00      	nop
 801ade0:	697b      	ldr	r3, [r7, #20]
 801ade2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ade4:	68fb      	ldr	r3, [r7, #12]
 801ade6:	f383 8810 	msr	PRIMASK, r3
}
 801adea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801adec:	bf00      	nop
 801adee:	371c      	adds	r7, #28
 801adf0:	46bd      	mov	sp, r7
 801adf2:	bc80      	pop	{r7}
 801adf4:	4770      	bx	lr
 801adf6:	bf00      	nop
 801adf8:	20001be8 	.word	0x20001be8

0801adfc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801adfc:	b480      	push	{r7}
 801adfe:	b087      	sub	sp, #28
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	460b      	mov	r3, r1
 801ae06:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae08:	f3ef 8310 	mrs	r3, PRIMASK
 801ae0c:	613b      	str	r3, [r7, #16]
  return(result);
 801ae0e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801ae10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae12:	b672      	cpsid	i
}
 801ae14:	bf00      	nop
  
  switch(state)
 801ae16:	78fb      	ldrb	r3, [r7, #3]
 801ae18:	2b00      	cmp	r3, #0
 801ae1a:	d008      	beq.n	801ae2e <UTIL_LPM_SetOffMode+0x32>
 801ae1c:	2b01      	cmp	r3, #1
 801ae1e:	d10e      	bne.n	801ae3e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801ae20:	4b0d      	ldr	r3, [pc, #52]	@ (801ae58 <UTIL_LPM_SetOffMode+0x5c>)
 801ae22:	681a      	ldr	r2, [r3, #0]
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	4313      	orrs	r3, r2
 801ae28:	4a0b      	ldr	r2, [pc, #44]	@ (801ae58 <UTIL_LPM_SetOffMode+0x5c>)
 801ae2a:	6013      	str	r3, [r2, #0]
      break;
 801ae2c:	e008      	b.n	801ae40 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	43da      	mvns	r2, r3
 801ae32:	4b09      	ldr	r3, [pc, #36]	@ (801ae58 <UTIL_LPM_SetOffMode+0x5c>)
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	4013      	ands	r3, r2
 801ae38:	4a07      	ldr	r2, [pc, #28]	@ (801ae58 <UTIL_LPM_SetOffMode+0x5c>)
 801ae3a:	6013      	str	r3, [r2, #0]
      break;
 801ae3c:	e000      	b.n	801ae40 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801ae3e:	bf00      	nop
 801ae40:	697b      	ldr	r3, [r7, #20]
 801ae42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	f383 8810 	msr	PRIMASK, r3
}
 801ae4a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801ae4c:	bf00      	nop
 801ae4e:	371c      	adds	r7, #28
 801ae50:	46bd      	mov	sp, r7
 801ae52:	bc80      	pop	{r7}
 801ae54:	4770      	bx	lr
 801ae56:	bf00      	nop
 801ae58:	20001bec 	.word	0x20001bec

0801ae5c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b084      	sub	sp, #16
 801ae60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae62:	f3ef 8310 	mrs	r3, PRIMASK
 801ae66:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae68:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801ae6a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae6c:	b672      	cpsid	i
}
 801ae6e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801ae70:	4b12      	ldr	r3, [pc, #72]	@ (801aebc <UTIL_LPM_EnterLowPower+0x60>)
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d006      	beq.n	801ae86 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801ae78:	4b11      	ldr	r3, [pc, #68]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ae7a:	681b      	ldr	r3, [r3, #0]
 801ae7c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801ae7e:	4b10      	ldr	r3, [pc, #64]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ae80:	685b      	ldr	r3, [r3, #4]
 801ae82:	4798      	blx	r3
 801ae84:	e010      	b.n	801aea8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801ae86:	4b0f      	ldr	r3, [pc, #60]	@ (801aec4 <UTIL_LPM_EnterLowPower+0x68>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d006      	beq.n	801ae9c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801ae8e:	4b0c      	ldr	r3, [pc, #48]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ae90:	689b      	ldr	r3, [r3, #8]
 801ae92:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801ae94:	4b0a      	ldr	r3, [pc, #40]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	4798      	blx	r3
 801ae9a:	e005      	b.n	801aea8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801ae9c:	4b08      	ldr	r3, [pc, #32]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801ae9e:	691b      	ldr	r3, [r3, #16]
 801aea0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801aea2:	4b07      	ldr	r3, [pc, #28]	@ (801aec0 <UTIL_LPM_EnterLowPower+0x64>)
 801aea4:	695b      	ldr	r3, [r3, #20]
 801aea6:	4798      	blx	r3
 801aea8:	68fb      	ldr	r3, [r7, #12]
 801aeaa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	f383 8810 	msr	PRIMASK, r3
}
 801aeb2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801aeb4:	bf00      	nop
 801aeb6:	3710      	adds	r7, #16
 801aeb8:	46bd      	mov	sp, r7
 801aeba:	bd80      	pop	{r7, pc}
 801aebc:	20001be8 	.word	0x20001be8
 801aec0:	0801ca9c 	.word	0x0801ca9c
 801aec4:	20001bec 	.word	0x20001bec

0801aec8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801aec8:	b480      	push	{r7}
 801aeca:	b087      	sub	sp, #28
 801aecc:	af00      	add	r7, sp, #0
 801aece:	60f8      	str	r0, [r7, #12]
 801aed0:	60b9      	str	r1, [r7, #8]
 801aed2:	4613      	mov	r3, r2
 801aed4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801aeda:	68bb      	ldr	r3, [r7, #8]
 801aedc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801aede:	e007      	b.n	801aef0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801aee0:	693a      	ldr	r2, [r7, #16]
 801aee2:	1c53      	adds	r3, r2, #1
 801aee4:	613b      	str	r3, [r7, #16]
 801aee6:	697b      	ldr	r3, [r7, #20]
 801aee8:	1c59      	adds	r1, r3, #1
 801aeea:	6179      	str	r1, [r7, #20]
 801aeec:	7812      	ldrb	r2, [r2, #0]
 801aeee:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801aef0:	88fb      	ldrh	r3, [r7, #6]
 801aef2:	1e5a      	subs	r2, r3, #1
 801aef4:	80fa      	strh	r2, [r7, #6]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d1f2      	bne.n	801aee0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801aefa:	bf00      	nop
 801aefc:	bf00      	nop
 801aefe:	371c      	adds	r7, #28
 801af00:	46bd      	mov	sp, r7
 801af02:	bc80      	pop	{r7}
 801af04:	4770      	bx	lr

0801af06 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801af06:	b480      	push	{r7}
 801af08:	b085      	sub	sp, #20
 801af0a:	af00      	add	r7, sp, #0
 801af0c:	6078      	str	r0, [r7, #4]
 801af0e:	460b      	mov	r3, r1
 801af10:	70fb      	strb	r3, [r7, #3]
 801af12:	4613      	mov	r3, r2
 801af14:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801af1a:	e004      	b.n	801af26 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801af1c:	68fb      	ldr	r3, [r7, #12]
 801af1e:	1c5a      	adds	r2, r3, #1
 801af20:	60fa      	str	r2, [r7, #12]
 801af22:	78fa      	ldrb	r2, [r7, #3]
 801af24:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801af26:	883b      	ldrh	r3, [r7, #0]
 801af28:	1e5a      	subs	r2, r3, #1
 801af2a:	803a      	strh	r2, [r7, #0]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d1f5      	bne.n	801af1c <UTIL_MEM_set_8+0x16>
  }
}
 801af30:	bf00      	nop
 801af32:	bf00      	nop
 801af34:	3714      	adds	r7, #20
 801af36:	46bd      	mov	sp, r7
 801af38:	bc80      	pop	{r7}
 801af3a:	4770      	bx	lr

0801af3c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801af3c:	b082      	sub	sp, #8
 801af3e:	b480      	push	{r7}
 801af40:	b087      	sub	sp, #28
 801af42:	af00      	add	r7, sp, #0
 801af44:	60f8      	str	r0, [r7, #12]
 801af46:	1d38      	adds	r0, r7, #4
 801af48:	e880 0006 	stmia.w	r0, {r1, r2}
 801af4c:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801af4e:	2300      	movs	r3, #0
 801af50:	613b      	str	r3, [r7, #16]
 801af52:	2300      	movs	r3, #0
 801af54:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801af56:	687a      	ldr	r2, [r7, #4]
 801af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af5a:	4413      	add	r3, r2
 801af5c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801af5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801af62:	b29a      	uxth	r2, r3
 801af64:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801af68:	b29b      	uxth	r3, r3
 801af6a:	4413      	add	r3, r2
 801af6c:	b29b      	uxth	r3, r3
 801af6e:	b21b      	sxth	r3, r3
 801af70:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801af72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801af76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801af7a:	db0a      	blt.n	801af92 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801af7c:	693b      	ldr	r3, [r7, #16]
 801af7e:	3301      	adds	r3, #1
 801af80:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801af82:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801af86:	b29b      	uxth	r3, r3
 801af88:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801af8c:	b29b      	uxth	r3, r3
 801af8e:	b21b      	sxth	r3, r3
 801af90:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	461a      	mov	r2, r3
 801af96:	f107 0310 	add.w	r3, r7, #16
 801af9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801af9e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801afa2:	68f8      	ldr	r0, [r7, #12]
 801afa4:	371c      	adds	r7, #28
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bc80      	pop	{r7}
 801afaa:	b002      	add	sp, #8
 801afac:	4770      	bx	lr

0801afae <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801afae:	b082      	sub	sp, #8
 801afb0:	b480      	push	{r7}
 801afb2:	b087      	sub	sp, #28
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	60f8      	str	r0, [r7, #12]
 801afb8:	1d38      	adds	r0, r7, #4
 801afba:	e880 0006 	stmia.w	r0, {r1, r2}
 801afbe:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801afc0:	2300      	movs	r3, #0
 801afc2:	613b      	str	r3, [r7, #16]
 801afc4:	2300      	movs	r3, #0
 801afc6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801afc8:	687a      	ldr	r2, [r7, #4]
 801afca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801afd0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801afd4:	b29a      	uxth	r2, r3
 801afd6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801afda:	b29b      	uxth	r3, r3
 801afdc:	1ad3      	subs	r3, r2, r3
 801afde:	b29b      	uxth	r3, r3
 801afe0:	b21b      	sxth	r3, r3
 801afe2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801afe4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	da0a      	bge.n	801b002 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801afec:	693b      	ldr	r3, [r7, #16]
 801afee:	3b01      	subs	r3, #1
 801aff0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801aff2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801aff6:	b29b      	uxth	r3, r3
 801aff8:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801affc:	b29b      	uxth	r3, r3
 801affe:	b21b      	sxth	r3, r3
 801b000:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	461a      	mov	r2, r3
 801b006:	f107 0310 	add.w	r3, r7, #16
 801b00a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b00e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b012:	68f8      	ldr	r0, [r7, #12]
 801b014:	371c      	adds	r7, #28
 801b016:	46bd      	mov	sp, r7
 801b018:	bc80      	pop	{r7}
 801b01a:	b002      	add	sp, #8
 801b01c:	4770      	bx	lr
	...

0801b020 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801b020:	b580      	push	{r7, lr}
 801b022:	b088      	sub	sp, #32
 801b024:	af02      	add	r7, sp, #8
 801b026:	463b      	mov	r3, r7
 801b028:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b02c:	2300      	movs	r3, #0
 801b02e:	60bb      	str	r3, [r7, #8]
 801b030:	2300      	movs	r3, #0
 801b032:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b034:	4b10      	ldr	r3, [pc, #64]	@ (801b078 <SysTimeSet+0x58>)
 801b036:	691b      	ldr	r3, [r3, #16]
 801b038:	f107 0208 	add.w	r2, r7, #8
 801b03c:	3204      	adds	r2, #4
 801b03e:	4610      	mov	r0, r2
 801b040:	4798      	blx	r3
 801b042:	4603      	mov	r3, r0
 801b044:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801b046:	f107 0010 	add.w	r0, r7, #16
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	9300      	str	r3, [sp, #0]
 801b04e:	68bb      	ldr	r3, [r7, #8]
 801b050:	463a      	mov	r2, r7
 801b052:	ca06      	ldmia	r2, {r1, r2}
 801b054:	f7ff ffab 	bl	801afae <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801b058:	4b07      	ldr	r3, [pc, #28]	@ (801b078 <SysTimeSet+0x58>)
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	693a      	ldr	r2, [r7, #16]
 801b05e:	4610      	mov	r0, r2
 801b060:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801b062:	4b05      	ldr	r3, [pc, #20]	@ (801b078 <SysTimeSet+0x58>)
 801b064:	689b      	ldr	r3, [r3, #8]
 801b066:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801b06a:	4610      	mov	r0, r2
 801b06c:	4798      	blx	r3
}
 801b06e:	bf00      	nop
 801b070:	3718      	adds	r7, #24
 801b072:	46bd      	mov	sp, r7
 801b074:	bd80      	pop	{r7, pc}
 801b076:	bf00      	nop
 801b078:	0801cb80 	.word	0x0801cb80

0801b07c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b08a      	sub	sp, #40	@ 0x28
 801b080:	af02      	add	r7, sp, #8
 801b082:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b084:	2300      	movs	r3, #0
 801b086:	61bb      	str	r3, [r7, #24]
 801b088:	2300      	movs	r3, #0
 801b08a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801b08c:	2300      	movs	r3, #0
 801b08e:	613b      	str	r3, [r7, #16]
 801b090:	2300      	movs	r3, #0
 801b092:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b094:	4b14      	ldr	r3, [pc, #80]	@ (801b0e8 <SysTimeGet+0x6c>)
 801b096:	691b      	ldr	r3, [r3, #16]
 801b098:	f107 0218 	add.w	r2, r7, #24
 801b09c:	3204      	adds	r2, #4
 801b09e:	4610      	mov	r0, r2
 801b0a0:	4798      	blx	r3
 801b0a2:	4603      	mov	r3, r0
 801b0a4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b0a6:	4b10      	ldr	r3, [pc, #64]	@ (801b0e8 <SysTimeGet+0x6c>)
 801b0a8:	68db      	ldr	r3, [r3, #12]
 801b0aa:	4798      	blx	r3
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	b21b      	sxth	r3, r3
 801b0b0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b0b2:	4b0d      	ldr	r3, [pc, #52]	@ (801b0e8 <SysTimeGet+0x6c>)
 801b0b4:	685b      	ldr	r3, [r3, #4]
 801b0b6:	4798      	blx	r3
 801b0b8:	4603      	mov	r3, r0
 801b0ba:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801b0bc:	f107 0010 	add.w	r0, r7, #16
 801b0c0:	69fb      	ldr	r3, [r7, #28]
 801b0c2:	9300      	str	r3, [sp, #0]
 801b0c4:	69bb      	ldr	r3, [r7, #24]
 801b0c6:	f107 0208 	add.w	r2, r7, #8
 801b0ca:	ca06      	ldmia	r2, {r1, r2}
 801b0cc:	f7ff ff36 	bl	801af3c <SysTimeAdd>

  return sysTime;
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	461a      	mov	r2, r3
 801b0d4:	f107 0310 	add.w	r3, r7, #16
 801b0d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b0dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	3720      	adds	r7, #32
 801b0e4:	46bd      	mov	sp, r7
 801b0e6:	bd80      	pop	{r7, pc}
 801b0e8:	0801cb80 	.word	0x0801cb80

0801b0ec <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801b0ec:	b580      	push	{r7, lr}
 801b0ee:	b084      	sub	sp, #16
 801b0f0:	af00      	add	r7, sp, #0
 801b0f2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	60bb      	str	r3, [r7, #8]
 801b0f8:	2300      	movs	r3, #0
 801b0fa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801b0fc:	4b0a      	ldr	r3, [pc, #40]	@ (801b128 <SysTimeGetMcuTime+0x3c>)
 801b0fe:	691b      	ldr	r3, [r3, #16]
 801b100:	f107 0208 	add.w	r2, r7, #8
 801b104:	3204      	adds	r2, #4
 801b106:	4610      	mov	r0, r2
 801b108:	4798      	blx	r3
 801b10a:	4603      	mov	r3, r0
 801b10c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	461a      	mov	r2, r3
 801b112:	f107 0308 	add.w	r3, r7, #8
 801b116:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b11a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801b11e:	6878      	ldr	r0, [r7, #4]
 801b120:	3710      	adds	r7, #16
 801b122:	46bd      	mov	sp, r7
 801b124:	bd80      	pop	{r7, pc}
 801b126:	bf00      	nop
 801b128:	0801cb80 	.word	0x0801cb80

0801b12c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b088      	sub	sp, #32
 801b130:	af02      	add	r7, sp, #8
 801b132:	463b      	mov	r3, r7
 801b134:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b138:	4b0f      	ldr	r3, [pc, #60]	@ (801b178 <SysTimeToMs+0x4c>)
 801b13a:	68db      	ldr	r3, [r3, #12]
 801b13c:	4798      	blx	r3
 801b13e:	4603      	mov	r3, r0
 801b140:	b21b      	sxth	r3, r3
 801b142:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b144:	4b0c      	ldr	r3, [pc, #48]	@ (801b178 <SysTimeToMs+0x4c>)
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	4798      	blx	r3
 801b14a:	4603      	mov	r3, r0
 801b14c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801b14e:	f107 0008 	add.w	r0, r7, #8
 801b152:	697b      	ldr	r3, [r7, #20]
 801b154:	9300      	str	r3, [sp, #0]
 801b156:	693b      	ldr	r3, [r7, #16]
 801b158:	463a      	mov	r2, r7
 801b15a:	ca06      	ldmia	r2, {r1, r2}
 801b15c:	f7ff ff27 	bl	801afae <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801b160:	68bb      	ldr	r3, [r7, #8]
 801b162:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801b166:	fb02 f303 	mul.w	r3, r2, r3
 801b16a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801b16e:	4413      	add	r3, r2
}
 801b170:	4618      	mov	r0, r3
 801b172:	3718      	adds	r7, #24
 801b174:	46bd      	mov	sp, r7
 801b176:	bd80      	pop	{r7, pc}
 801b178:	0801cb80 	.word	0x0801cb80

0801b17c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801b17c:	b580      	push	{r7, lr}
 801b17e:	b08a      	sub	sp, #40	@ 0x28
 801b180:	af02      	add	r7, sp, #8
 801b182:	6078      	str	r0, [r7, #4]
 801b184:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801b186:	683b      	ldr	r3, [r7, #0]
 801b188:	4a19      	ldr	r2, [pc, #100]	@ (801b1f0 <SysTimeFromMs+0x74>)
 801b18a:	fba2 2303 	umull	r2, r3, r2, r3
 801b18e:	099b      	lsrs	r3, r3, #6
 801b190:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801b192:	69fb      	ldr	r3, [r7, #28]
 801b194:	617b      	str	r3, [r7, #20]
 801b196:	683b      	ldr	r3, [r7, #0]
 801b198:	b29a      	uxth	r2, r3
 801b19a:	69fb      	ldr	r3, [r7, #28]
 801b19c:	b29b      	uxth	r3, r3
 801b19e:	4619      	mov	r1, r3
 801b1a0:	0149      	lsls	r1, r1, #5
 801b1a2:	1ac9      	subs	r1, r1, r3
 801b1a4:	0089      	lsls	r1, r1, #2
 801b1a6:	440b      	add	r3, r1
 801b1a8:	00db      	lsls	r3, r3, #3
 801b1aa:	b29b      	uxth	r3, r3
 801b1ac:	1ad3      	subs	r3, r2, r3
 801b1ae:	b29b      	uxth	r3, r3
 801b1b0:	b21b      	sxth	r3, r3
 801b1b2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801b1b4:	f107 030c 	add.w	r3, r7, #12
 801b1b8:	2200      	movs	r2, #0
 801b1ba:	601a      	str	r2, [r3, #0]
 801b1bc:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801b1be:	4b0d      	ldr	r3, [pc, #52]	@ (801b1f4 <SysTimeFromMs+0x78>)
 801b1c0:	68db      	ldr	r3, [r3, #12]
 801b1c2:	4798      	blx	r3
 801b1c4:	4603      	mov	r3, r0
 801b1c6:	b21b      	sxth	r3, r3
 801b1c8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801b1ca:	4b0a      	ldr	r3, [pc, #40]	@ (801b1f4 <SysTimeFromMs+0x78>)
 801b1cc:	685b      	ldr	r3, [r3, #4]
 801b1ce:	4798      	blx	r3
 801b1d0:	4603      	mov	r3, r0
 801b1d2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801b1d4:	6878      	ldr	r0, [r7, #4]
 801b1d6:	693b      	ldr	r3, [r7, #16]
 801b1d8:	9300      	str	r3, [sp, #0]
 801b1da:	68fb      	ldr	r3, [r7, #12]
 801b1dc:	f107 0214 	add.w	r2, r7, #20
 801b1e0:	ca06      	ldmia	r2, {r1, r2}
 801b1e2:	f7ff feab 	bl	801af3c <SysTimeAdd>
}
 801b1e6:	6878      	ldr	r0, [r7, #4]
 801b1e8:	3720      	adds	r7, #32
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}
 801b1ee:	bf00      	nop
 801b1f0:	10624dd3 	.word	0x10624dd3
 801b1f4:	0801cb80 	.word	0x0801cb80

0801b1f8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801b1f8:	b480      	push	{r7}
 801b1fa:	b085      	sub	sp, #20
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
  int i = 0;
 801b200:	2300      	movs	r3, #0
 801b202:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801b204:	e00e      	b.n	801b224 <ee_skip_atoi+0x2c>
 801b206:	68fa      	ldr	r2, [r7, #12]
 801b208:	4613      	mov	r3, r2
 801b20a:	009b      	lsls	r3, r3, #2
 801b20c:	4413      	add	r3, r2
 801b20e:	005b      	lsls	r3, r3, #1
 801b210:	4618      	mov	r0, r3
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	1c59      	adds	r1, r3, #1
 801b218:	687a      	ldr	r2, [r7, #4]
 801b21a:	6011      	str	r1, [r2, #0]
 801b21c:	781b      	ldrb	r3, [r3, #0]
 801b21e:	4403      	add	r3, r0
 801b220:	3b30      	subs	r3, #48	@ 0x30
 801b222:	60fb      	str	r3, [r7, #12]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	781b      	ldrb	r3, [r3, #0]
 801b22a:	2b2f      	cmp	r3, #47	@ 0x2f
 801b22c:	d904      	bls.n	801b238 <ee_skip_atoi+0x40>
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	781b      	ldrb	r3, [r3, #0]
 801b234:	2b39      	cmp	r3, #57	@ 0x39
 801b236:	d9e6      	bls.n	801b206 <ee_skip_atoi+0xe>
  return i;
 801b238:	68fb      	ldr	r3, [r7, #12]
}
 801b23a:	4618      	mov	r0, r3
 801b23c:	3714      	adds	r7, #20
 801b23e:	46bd      	mov	sp, r7
 801b240:	bc80      	pop	{r7}
 801b242:	4770      	bx	lr

0801b244 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801b244:	b480      	push	{r7}
 801b246:	b099      	sub	sp, #100	@ 0x64
 801b248:	af00      	add	r7, sp, #0
 801b24a:	60f8      	str	r0, [r7, #12]
 801b24c:	60b9      	str	r1, [r7, #8]
 801b24e:	607a      	str	r2, [r7, #4]
 801b250:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801b252:	4b71      	ldr	r3, [pc, #452]	@ (801b418 <ee_number+0x1d4>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801b258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b25a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d002      	beq.n	801b268 <ee_number+0x24>
 801b262:	4b6e      	ldr	r3, [pc, #440]	@ (801b41c <ee_number+0x1d8>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801b268:	683b      	ldr	r3, [r7, #0]
 801b26a:	2b01      	cmp	r3, #1
 801b26c:	dd02      	ble.n	801b274 <ee_number+0x30>
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	2b24      	cmp	r3, #36	@ 0x24
 801b272:	dd01      	ble.n	801b278 <ee_number+0x34>
 801b274:	2300      	movs	r3, #0
 801b276:	e0ca      	b.n	801b40e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801b278:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b27a:	f003 0301 	and.w	r3, r3, #1
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d001      	beq.n	801b286 <ee_number+0x42>
 801b282:	2330      	movs	r3, #48	@ 0x30
 801b284:	e000      	b.n	801b288 <ee_number+0x44>
 801b286:	2320      	movs	r3, #32
 801b288:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801b28c:	2300      	movs	r3, #0
 801b28e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801b292:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b294:	f003 0302 	and.w	r3, r3, #2
 801b298:	2b00      	cmp	r3, #0
 801b29a:	d00b      	beq.n	801b2b4 <ee_number+0x70>
  {
    if (num < 0)
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	da08      	bge.n	801b2b4 <ee_number+0x70>
    {
      sign = '-';
 801b2a2:	232d      	movs	r3, #45	@ 0x2d
 801b2a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	425b      	negs	r3, r3
 801b2ac:	607b      	str	r3, [r7, #4]
      size--;
 801b2ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b2b0:	3b01      	subs	r3, #1
 801b2b2:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d11e      	bne.n	801b2fc <ee_number+0xb8>
    tmp[i++] = '0';
 801b2be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b2c0:	1c5a      	adds	r2, r3, #1
 801b2c2:	657a      	str	r2, [r7, #84]	@ 0x54
 801b2c4:	3360      	adds	r3, #96	@ 0x60
 801b2c6:	443b      	add	r3, r7
 801b2c8:	2230      	movs	r2, #48	@ 0x30
 801b2ca:	f803 2c50 	strb.w	r2, [r3, #-80]
 801b2ce:	e018      	b.n	801b302 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	683a      	ldr	r2, [r7, #0]
 801b2d4:	fbb3 f1f2 	udiv	r1, r3, r2
 801b2d8:	fb01 f202 	mul.w	r2, r1, r2
 801b2dc:	1a9b      	subs	r3, r3, r2
 801b2de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801b2e0:	441a      	add	r2, r3
 801b2e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b2e4:	1c59      	adds	r1, r3, #1
 801b2e6:	6579      	str	r1, [r7, #84]	@ 0x54
 801b2e8:	7812      	ldrb	r2, [r2, #0]
 801b2ea:	3360      	adds	r3, #96	@ 0x60
 801b2ec:	443b      	add	r3, r7
 801b2ee:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801b2f2:	687a      	ldr	r2, [r7, #4]
 801b2f4:	683b      	ldr	r3, [r7, #0]
 801b2f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801b2fa:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	2b00      	cmp	r3, #0
 801b300:	d1e6      	bne.n	801b2d0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801b302:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b304:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b306:	429a      	cmp	r2, r3
 801b308:	dd01      	ble.n	801b30e <ee_number+0xca>
 801b30a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b30c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801b30e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801b310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b312:	1ad3      	subs	r3, r2, r3
 801b314:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801b316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b318:	f003 0301 	and.w	r3, r3, #1
 801b31c:	2b00      	cmp	r3, #0
 801b31e:	d112      	bne.n	801b346 <ee_number+0x102>
 801b320:	e00c      	b.n	801b33c <ee_number+0xf8>
 801b322:	68fb      	ldr	r3, [r7, #12]
 801b324:	1c5a      	adds	r2, r3, #1
 801b326:	60fa      	str	r2, [r7, #12]
 801b328:	2220      	movs	r2, #32
 801b32a:	701a      	strb	r2, [r3, #0]
 801b32c:	68bb      	ldr	r3, [r7, #8]
 801b32e:	3b01      	subs	r3, #1
 801b330:	60bb      	str	r3, [r7, #8]
 801b332:	68bb      	ldr	r3, [r7, #8]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d101      	bne.n	801b33c <ee_number+0xf8>
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	e068      	b.n	801b40e <ee_number+0x1ca>
 801b33c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b33e:	1e5a      	subs	r2, r3, #1
 801b340:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b342:	2b00      	cmp	r3, #0
 801b344:	dced      	bgt.n	801b322 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801b346:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d01b      	beq.n	801b386 <ee_number+0x142>
 801b34e:	68fb      	ldr	r3, [r7, #12]
 801b350:	1c5a      	adds	r2, r3, #1
 801b352:	60fa      	str	r2, [r7, #12]
 801b354:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801b358:	701a      	strb	r2, [r3, #0]
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	3b01      	subs	r3, #1
 801b35e:	60bb      	str	r3, [r7, #8]
 801b360:	68bb      	ldr	r3, [r7, #8]
 801b362:	2b00      	cmp	r3, #0
 801b364:	d10f      	bne.n	801b386 <ee_number+0x142>
 801b366:	68fb      	ldr	r3, [r7, #12]
 801b368:	e051      	b.n	801b40e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801b36a:	68fb      	ldr	r3, [r7, #12]
 801b36c:	1c5a      	adds	r2, r3, #1
 801b36e:	60fa      	str	r2, [r7, #12]
 801b370:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801b374:	701a      	strb	r2, [r3, #0]
 801b376:	68bb      	ldr	r3, [r7, #8]
 801b378:	3b01      	subs	r3, #1
 801b37a:	60bb      	str	r3, [r7, #8]
 801b37c:	68bb      	ldr	r3, [r7, #8]
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d101      	bne.n	801b386 <ee_number+0x142>
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	e043      	b.n	801b40e <ee_number+0x1ca>
 801b386:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b388:	1e5a      	subs	r2, r3, #1
 801b38a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	dcec      	bgt.n	801b36a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801b390:	e00c      	b.n	801b3ac <ee_number+0x168>
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	1c5a      	adds	r2, r3, #1
 801b396:	60fa      	str	r2, [r7, #12]
 801b398:	2230      	movs	r2, #48	@ 0x30
 801b39a:	701a      	strb	r2, [r3, #0]
 801b39c:	68bb      	ldr	r3, [r7, #8]
 801b39e:	3b01      	subs	r3, #1
 801b3a0:	60bb      	str	r3, [r7, #8]
 801b3a2:	68bb      	ldr	r3, [r7, #8]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d101      	bne.n	801b3ac <ee_number+0x168>
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	e030      	b.n	801b40e <ee_number+0x1ca>
 801b3ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801b3ae:	1e5a      	subs	r2, r3, #1
 801b3b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801b3b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b3b4:	429a      	cmp	r2, r3
 801b3b6:	dbec      	blt.n	801b392 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801b3b8:	e010      	b.n	801b3dc <ee_number+0x198>
 801b3ba:	68fb      	ldr	r3, [r7, #12]
 801b3bc:	1c5a      	adds	r2, r3, #1
 801b3be:	60fa      	str	r2, [r7, #12]
 801b3c0:	f107 0110 	add.w	r1, r7, #16
 801b3c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b3c6:	440a      	add	r2, r1
 801b3c8:	7812      	ldrb	r2, [r2, #0]
 801b3ca:	701a      	strb	r2, [r3, #0]
 801b3cc:	68bb      	ldr	r3, [r7, #8]
 801b3ce:	3b01      	subs	r3, #1
 801b3d0:	60bb      	str	r3, [r7, #8]
 801b3d2:	68bb      	ldr	r3, [r7, #8]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d101      	bne.n	801b3dc <ee_number+0x198>
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	e018      	b.n	801b40e <ee_number+0x1ca>
 801b3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b3de:	1e5a      	subs	r2, r3, #1
 801b3e0:	657a      	str	r2, [r7, #84]	@ 0x54
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	dce9      	bgt.n	801b3ba <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801b3e6:	e00c      	b.n	801b402 <ee_number+0x1be>
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	1c5a      	adds	r2, r3, #1
 801b3ec:	60fa      	str	r2, [r7, #12]
 801b3ee:	2220      	movs	r2, #32
 801b3f0:	701a      	strb	r2, [r3, #0]
 801b3f2:	68bb      	ldr	r3, [r7, #8]
 801b3f4:	3b01      	subs	r3, #1
 801b3f6:	60bb      	str	r3, [r7, #8]
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d101      	bne.n	801b402 <ee_number+0x1be>
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	e005      	b.n	801b40e <ee_number+0x1ca>
 801b402:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801b404:	1e5a      	subs	r2, r3, #1
 801b406:	66ba      	str	r2, [r7, #104]	@ 0x68
 801b408:	2b00      	cmp	r3, #0
 801b40a:	dced      	bgt.n	801b3e8 <ee_number+0x1a4>

  return str;
 801b40c:	68fb      	ldr	r3, [r7, #12]
}
 801b40e:	4618      	mov	r0, r3
 801b410:	3764      	adds	r7, #100	@ 0x64
 801b412:	46bd      	mov	sp, r7
 801b414:	bc80      	pop	{r7}
 801b416:	4770      	bx	lr
 801b418:	20000128 	.word	0x20000128
 801b41c:	2000012c 	.word	0x2000012c

0801b420 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801b420:	b580      	push	{r7, lr}
 801b422:	b092      	sub	sp, #72	@ 0x48
 801b424:	af04      	add	r7, sp, #16
 801b426:	60f8      	str	r0, [r7, #12]
 801b428:	60b9      	str	r1, [r7, #8]
 801b42a:	607a      	str	r2, [r7, #4]
 801b42c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801b42e:	68bb      	ldr	r3, [r7, #8]
 801b430:	2b00      	cmp	r3, #0
 801b432:	dc01      	bgt.n	801b438 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801b434:	2300      	movs	r3, #0
 801b436:	e13e      	b.n	801b6b6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801b43c:	e128      	b.n	801b690 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801b43e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	1ad2      	subs	r2, r2, r3
 801b444:	68bb      	ldr	r3, [r7, #8]
 801b446:	3b01      	subs	r3, #1
 801b448:	429a      	cmp	r2, r3
 801b44a:	f280 812e 	bge.w	801b6aa <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	781b      	ldrb	r3, [r3, #0]
 801b452:	2b25      	cmp	r3, #37	@ 0x25
 801b454:	d006      	beq.n	801b464 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801b456:	687a      	ldr	r2, [r7, #4]
 801b458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b45a:	1c59      	adds	r1, r3, #1
 801b45c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b45e:	7812      	ldrb	r2, [r2, #0]
 801b460:	701a      	strb	r2, [r3, #0]
      continue;
 801b462:	e112      	b.n	801b68a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801b464:	2300      	movs	r3, #0
 801b466:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	3301      	adds	r3, #1
 801b46c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	781b      	ldrb	r3, [r3, #0]
 801b472:	2b30      	cmp	r3, #48	@ 0x30
 801b474:	d103      	bne.n	801b47e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801b476:	6a3b      	ldr	r3, [r7, #32]
 801b478:	f043 0301 	orr.w	r3, r3, #1
 801b47c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801b47e:	f04f 33ff 	mov.w	r3, #4294967295
 801b482:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	781b      	ldrb	r3, [r3, #0]
 801b488:	2b2f      	cmp	r3, #47	@ 0x2f
 801b48a:	d908      	bls.n	801b49e <tiny_vsnprintf_like+0x7e>
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	781b      	ldrb	r3, [r3, #0]
 801b490:	2b39      	cmp	r3, #57	@ 0x39
 801b492:	d804      	bhi.n	801b49e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801b494:	1d3b      	adds	r3, r7, #4
 801b496:	4618      	mov	r0, r3
 801b498:	f7ff feae 	bl	801b1f8 <ee_skip_atoi>
 801b49c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801b49e:	f04f 33ff 	mov.w	r3, #4294967295
 801b4a2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4a8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801b4aa:	230a      	movs	r3, #10
 801b4ac:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801b4ae:	687b      	ldr	r3, [r7, #4]
 801b4b0:	781b      	ldrb	r3, [r3, #0]
 801b4b2:	3b58      	subs	r3, #88	@ 0x58
 801b4b4:	2b20      	cmp	r3, #32
 801b4b6:	f200 8094 	bhi.w	801b5e2 <tiny_vsnprintf_like+0x1c2>
 801b4ba:	a201      	add	r2, pc, #4	@ (adr r2, 801b4c0 <tiny_vsnprintf_like+0xa0>)
 801b4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b4c0:	0801b5cb 	.word	0x0801b5cb
 801b4c4:	0801b5e3 	.word	0x0801b5e3
 801b4c8:	0801b5e3 	.word	0x0801b5e3
 801b4cc:	0801b5e3 	.word	0x0801b5e3
 801b4d0:	0801b5e3 	.word	0x0801b5e3
 801b4d4:	0801b5e3 	.word	0x0801b5e3
 801b4d8:	0801b5e3 	.word	0x0801b5e3
 801b4dc:	0801b5e3 	.word	0x0801b5e3
 801b4e0:	0801b5e3 	.word	0x0801b5e3
 801b4e4:	0801b5e3 	.word	0x0801b5e3
 801b4e8:	0801b5e3 	.word	0x0801b5e3
 801b4ec:	0801b54f 	.word	0x0801b54f
 801b4f0:	0801b5d9 	.word	0x0801b5d9
 801b4f4:	0801b5e3 	.word	0x0801b5e3
 801b4f8:	0801b5e3 	.word	0x0801b5e3
 801b4fc:	0801b5e3 	.word	0x0801b5e3
 801b500:	0801b5e3 	.word	0x0801b5e3
 801b504:	0801b5d9 	.word	0x0801b5d9
 801b508:	0801b5e3 	.word	0x0801b5e3
 801b50c:	0801b5e3 	.word	0x0801b5e3
 801b510:	0801b5e3 	.word	0x0801b5e3
 801b514:	0801b5e3 	.word	0x0801b5e3
 801b518:	0801b5e3 	.word	0x0801b5e3
 801b51c:	0801b5e3 	.word	0x0801b5e3
 801b520:	0801b5e3 	.word	0x0801b5e3
 801b524:	0801b5e3 	.word	0x0801b5e3
 801b528:	0801b5e3 	.word	0x0801b5e3
 801b52c:	0801b56f 	.word	0x0801b56f
 801b530:	0801b5e3 	.word	0x0801b5e3
 801b534:	0801b62f 	.word	0x0801b62f
 801b538:	0801b5e3 	.word	0x0801b5e3
 801b53c:	0801b5e3 	.word	0x0801b5e3
 801b540:	0801b5d3 	.word	0x0801b5d3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801b544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b546:	1c5a      	adds	r2, r3, #1
 801b548:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b54a:	2220      	movs	r2, #32
 801b54c:	701a      	strb	r2, [r3, #0]
 801b54e:	69fb      	ldr	r3, [r7, #28]
 801b550:	3b01      	subs	r3, #1
 801b552:	61fb      	str	r3, [r7, #28]
 801b554:	69fb      	ldr	r3, [r7, #28]
 801b556:	2b00      	cmp	r3, #0
 801b558:	dcf4      	bgt.n	801b544 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	1d1a      	adds	r2, r3, #4
 801b55e:	603a      	str	r2, [r7, #0]
 801b560:	6819      	ldr	r1, [r3, #0]
 801b562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b564:	1c5a      	adds	r2, r3, #1
 801b566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b568:	b2ca      	uxtb	r2, r1
 801b56a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801b56c:	e08d      	b.n	801b68a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801b56e:	683b      	ldr	r3, [r7, #0]
 801b570:	1d1a      	adds	r2, r3, #4
 801b572:	603a      	str	r2, [r7, #0]
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d101      	bne.n	801b582 <tiny_vsnprintf_like+0x162>
 801b57e:	4b50      	ldr	r3, [pc, #320]	@ (801b6c0 <tiny_vsnprintf_like+0x2a0>)
 801b580:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801b582:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b584:	f7e4 fdf8 	bl	8000178 <strlen>
 801b588:	4603      	mov	r3, r0
 801b58a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801b58c:	e004      	b.n	801b598 <tiny_vsnprintf_like+0x178>
 801b58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b590:	1c5a      	adds	r2, r3, #1
 801b592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b594:	2220      	movs	r2, #32
 801b596:	701a      	strb	r2, [r3, #0]
 801b598:	69fb      	ldr	r3, [r7, #28]
 801b59a:	1e5a      	subs	r2, r3, #1
 801b59c:	61fa      	str	r2, [r7, #28]
 801b59e:	693a      	ldr	r2, [r7, #16]
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	dbf4      	blt.n	801b58e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b5a8:	e00a      	b.n	801b5c0 <tiny_vsnprintf_like+0x1a0>
 801b5aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b5ac:	1c53      	adds	r3, r2, #1
 801b5ae:	627b      	str	r3, [r7, #36]	@ 0x24
 801b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5b2:	1c59      	adds	r1, r3, #1
 801b5b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b5b6:	7812      	ldrb	r2, [r2, #0]
 801b5b8:	701a      	strb	r2, [r3, #0]
 801b5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5bc:	3301      	adds	r3, #1
 801b5be:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b5c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b5c2:	693b      	ldr	r3, [r7, #16]
 801b5c4:	429a      	cmp	r2, r3
 801b5c6:	dbf0      	blt.n	801b5aa <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801b5c8:	e05f      	b.n	801b68a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801b5ca:	6a3b      	ldr	r3, [r7, #32]
 801b5cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b5d0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801b5d2:	2310      	movs	r3, #16
 801b5d4:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801b5d6:	e02b      	b.n	801b630 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801b5d8:	6a3b      	ldr	r3, [r7, #32]
 801b5da:	f043 0302 	orr.w	r3, r3, #2
 801b5de:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801b5e0:	e025      	b.n	801b62e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	781b      	ldrb	r3, [r3, #0]
 801b5e6:	2b25      	cmp	r3, #37	@ 0x25
 801b5e8:	d004      	beq.n	801b5f4 <tiny_vsnprintf_like+0x1d4>
 801b5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b5ec:	1c5a      	adds	r2, r3, #1
 801b5ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801b5f0:	2225      	movs	r2, #37	@ 0x25
 801b5f2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801b5f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b5f6:	68fb      	ldr	r3, [r7, #12]
 801b5f8:	1ad2      	subs	r2, r2, r3
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	3b01      	subs	r3, #1
 801b5fe:	429a      	cmp	r2, r3
 801b600:	da16      	bge.n	801b630 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	2b00      	cmp	r3, #0
 801b608:	d006      	beq.n	801b618 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801b60a:	687a      	ldr	r2, [r7, #4]
 801b60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b60e:	1c59      	adds	r1, r3, #1
 801b610:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801b612:	7812      	ldrb	r2, [r2, #0]
 801b614:	701a      	strb	r2, [r3, #0]
 801b616:	e002      	b.n	801b61e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	3b01      	subs	r3, #1
 801b61c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801b61e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b620:	68fb      	ldr	r3, [r7, #12]
 801b622:	1ad2      	subs	r2, r2, r3
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	3b01      	subs	r3, #1
 801b628:	429a      	cmp	r2, r3
 801b62a:	db2d      	blt.n	801b688 <tiny_vsnprintf_like+0x268>
 801b62c:	e000      	b.n	801b630 <tiny_vsnprintf_like+0x210>
        break;
 801b62e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801b630:	697b      	ldr	r3, [r7, #20]
 801b632:	2b6c      	cmp	r3, #108	@ 0x6c
 801b634:	d105      	bne.n	801b642 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801b636:	683b      	ldr	r3, [r7, #0]
 801b638:	1d1a      	adds	r2, r3, #4
 801b63a:	603a      	str	r2, [r7, #0]
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	637b      	str	r3, [r7, #52]	@ 0x34
 801b640:	e00f      	b.n	801b662 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801b642:	6a3b      	ldr	r3, [r7, #32]
 801b644:	f003 0302 	and.w	r3, r3, #2
 801b648:	2b00      	cmp	r3, #0
 801b64a:	d005      	beq.n	801b658 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801b64c:	683b      	ldr	r3, [r7, #0]
 801b64e:	1d1a      	adds	r2, r3, #4
 801b650:	603a      	str	r2, [r7, #0]
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	637b      	str	r3, [r7, #52]	@ 0x34
 801b656:	e004      	b.n	801b662 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801b658:	683b      	ldr	r3, [r7, #0]
 801b65a:	1d1a      	adds	r2, r3, #4
 801b65c:	603a      	str	r2, [r7, #0]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	1e5a      	subs	r2, r3, #1
 801b666:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b668:	68fb      	ldr	r3, [r7, #12]
 801b66a:	1acb      	subs	r3, r1, r3
 801b66c:	1ad1      	subs	r1, r2, r3
 801b66e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b670:	6a3b      	ldr	r3, [r7, #32]
 801b672:	9302      	str	r3, [sp, #8]
 801b674:	69bb      	ldr	r3, [r7, #24]
 801b676:	9301      	str	r3, [sp, #4]
 801b678:	69fb      	ldr	r3, [r7, #28]
 801b67a:	9300      	str	r3, [sp, #0]
 801b67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b67e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801b680:	f7ff fde0 	bl	801b244 <ee_number>
 801b684:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801b686:	e000      	b.n	801b68a <tiny_vsnprintf_like+0x26a>
        continue;
 801b688:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	3301      	adds	r3, #1
 801b68e:	607b      	str	r3, [r7, #4]
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	781b      	ldrb	r3, [r3, #0]
 801b694:	2b00      	cmp	r3, #0
 801b696:	f47f aed2 	bne.w	801b43e <tiny_vsnprintf_like+0x1e>
 801b69a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	1ad2      	subs	r2, r2, r3
 801b6a0:	68bb      	ldr	r3, [r7, #8]
 801b6a2:	3b01      	subs	r3, #1
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	f6bf aeca 	bge.w	801b43e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801b6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b6ac:	2200      	movs	r2, #0
 801b6ae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801b6b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	1ad3      	subs	r3, r2, r3
}
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	3738      	adds	r7, #56	@ 0x38
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}
 801b6be:	bf00      	nop
 801b6c0:	0801ca94 	.word	0x0801ca94

0801b6c4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b090      	sub	sp, #64	@ 0x40
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801b6cc:	4b73      	ldr	r3, [pc, #460]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801b6d2:	4b72      	ldr	r3, [pc, #456]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b6d4:	681a      	ldr	r2, [r3, #0]
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	4013      	ands	r3, r2
 801b6da:	4a70      	ldr	r2, [pc, #448]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b6dc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801b6de:	4b70      	ldr	r3, [pc, #448]	@ (801b8a0 <UTIL_SEQ_Run+0x1dc>)
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b6e4:	4b6f      	ldr	r3, [pc, #444]	@ (801b8a4 <UTIL_SEQ_Run+0x1e0>)
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b6ea:	4b6f      	ldr	r3, [pc, #444]	@ (801b8a8 <UTIL_SEQ_Run+0x1e4>)
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801b6f0:	4b6e      	ldr	r3, [pc, #440]	@ (801b8ac <UTIL_SEQ_Run+0x1e8>)
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b6f6:	e08d      	b.n	801b814 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b6fc:	e002      	b.n	801b704 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801b6fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b700:	3301      	adds	r3, #1
 801b702:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801b704:	4a6a      	ldr	r2, [pc, #424]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b708:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b70c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b70e:	401a      	ands	r2, r3
 801b710:	4b62      	ldr	r3, [pc, #392]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	4013      	ands	r3, r2
 801b716:	2b00      	cmp	r3, #0
 801b718:	d0f1      	beq.n	801b6fe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801b71a:	4a65      	ldr	r2, [pc, #404]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b71c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b71e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b724:	401a      	ands	r2, r3
 801b726:	4b5d      	ldr	r3, [pc, #372]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4013      	ands	r3, r2
 801b72c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801b72e:	4a60      	ldr	r2, [pc, #384]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b732:	00db      	lsls	r3, r3, #3
 801b734:	4413      	add	r3, r2
 801b736:	685a      	ldr	r2, [r3, #4]
 801b738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b73a:	4013      	ands	r3, r2
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d106      	bne.n	801b74e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801b740:	4a5b      	ldr	r2, [pc, #364]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b744:	00db      	lsls	r3, r3, #3
 801b746:	4413      	add	r3, r2
 801b748:	f04f 32ff 	mov.w	r2, #4294967295
 801b74c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801b74e:	4a58      	ldr	r2, [pc, #352]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b752:	00db      	lsls	r3, r3, #3
 801b754:	4413      	add	r3, r2
 801b756:	685a      	ldr	r2, [r3, #4]
 801b758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b75a:	4013      	ands	r3, r2
 801b75c:	4618      	mov	r0, r3
 801b75e:	f000 f907 	bl	801b970 <SEQ_BitPosition>
 801b762:	4603      	mov	r3, r0
 801b764:	461a      	mov	r2, r3
 801b766:	4b53      	ldr	r3, [pc, #332]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b768:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801b76a:	4a51      	ldr	r2, [pc, #324]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b76c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b76e:	00db      	lsls	r3, r3, #3
 801b770:	4413      	add	r3, r2
 801b772:	685a      	ldr	r2, [r3, #4]
 801b774:	4b4f      	ldr	r3, [pc, #316]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2101      	movs	r1, #1
 801b77a:	fa01 f303 	lsl.w	r3, r1, r3
 801b77e:	43db      	mvns	r3, r3
 801b780:	401a      	ands	r2, r3
 801b782:	494b      	ldr	r1, [pc, #300]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b786:	00db      	lsls	r3, r3, #3
 801b788:	440b      	add	r3, r1
 801b78a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b78c:	f3ef 8310 	mrs	r3, PRIMASK
 801b790:	61bb      	str	r3, [r7, #24]
  return(result);
 801b792:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b794:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801b796:	b672      	cpsid	i
}
 801b798:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801b79a:	4b46      	ldr	r3, [pc, #280]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	2201      	movs	r2, #1
 801b7a0:	fa02 f303 	lsl.w	r3, r2, r3
 801b7a4:	43da      	mvns	r2, r3
 801b7a6:	4b3e      	ldr	r3, [pc, #248]	@ (801b8a0 <UTIL_SEQ_Run+0x1dc>)
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	4013      	ands	r3, r2
 801b7ac:	4a3c      	ldr	r2, [pc, #240]	@ (801b8a0 <UTIL_SEQ_Run+0x1dc>)
 801b7ae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b7b0:	2301      	movs	r3, #1
 801b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b7b4:	e013      	b.n	801b7de <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801b7b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7b8:	3b01      	subs	r3, #1
 801b7ba:	4a3d      	ldr	r2, [pc, #244]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b7bc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801b7c0:	4b3c      	ldr	r3, [pc, #240]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	2201      	movs	r2, #1
 801b7c6:	fa02 f303 	lsl.w	r3, r2, r3
 801b7ca:	43da      	mvns	r2, r3
 801b7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7ce:	3b01      	subs	r3, #1
 801b7d0:	400a      	ands	r2, r1
 801b7d2:	4937      	ldr	r1, [pc, #220]	@ (801b8b0 <UTIL_SEQ_Run+0x1ec>)
 801b7d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801b7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7da:	3b01      	subs	r3, #1
 801b7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801b7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b7e0:	2b00      	cmp	r3, #0
 801b7e2:	d1e8      	bne.n	801b7b6 <UTIL_SEQ_Run+0xf2>
 801b7e4:	6a3b      	ldr	r3, [r7, #32]
 801b7e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b7e8:	697b      	ldr	r3, [r7, #20]
 801b7ea:	f383 8810 	msr	PRIMASK, r3
}
 801b7ee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801b7f0:	4b30      	ldr	r3, [pc, #192]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b7f2:	681b      	ldr	r3, [r3, #0]
 801b7f4:	4a30      	ldr	r2, [pc, #192]	@ (801b8b8 <UTIL_SEQ_Run+0x1f4>)
 801b7f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b7fa:	4798      	blx	r3

    local_taskset = TaskSet;
 801b7fc:	4b28      	ldr	r3, [pc, #160]	@ (801b8a0 <UTIL_SEQ_Run+0x1dc>)
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801b802:	4b28      	ldr	r3, [pc, #160]	@ (801b8a4 <UTIL_SEQ_Run+0x1e0>)
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801b808:	4b27      	ldr	r3, [pc, #156]	@ (801b8a8 <UTIL_SEQ_Run+0x1e4>)
 801b80a:	681b      	ldr	r3, [r3, #0]
 801b80c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801b80e:	4b27      	ldr	r3, [pc, #156]	@ (801b8ac <UTIL_SEQ_Run+0x1e8>)
 801b810:	681b      	ldr	r3, [r3, #0]
 801b812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801b814:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b818:	401a      	ands	r2, r3
 801b81a:	4b20      	ldr	r3, [pc, #128]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b81c:	681b      	ldr	r3, [r3, #0]
 801b81e:	4013      	ands	r3, r2
 801b820:	2b00      	cmp	r3, #0
 801b822:	d005      	beq.n	801b830 <UTIL_SEQ_Run+0x16c>
 801b824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801b826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b828:	4013      	ands	r3, r2
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	f43f af64 	beq.w	801b6f8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801b830:	4b20      	ldr	r3, [pc, #128]	@ (801b8b4 <UTIL_SEQ_Run+0x1f0>)
 801b832:	f04f 32ff 	mov.w	r2, #4294967295
 801b836:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801b838:	f000 f88e 	bl	801b958 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b83c:	f3ef 8310 	mrs	r3, PRIMASK
 801b840:	613b      	str	r3, [r7, #16]
  return(result);
 801b842:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801b844:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b846:	b672      	cpsid	i
}
 801b848:	bf00      	nop
  local_taskset = TaskSet;
 801b84a:	4b15      	ldr	r3, [pc, #84]	@ (801b8a0 <UTIL_SEQ_Run+0x1dc>)
 801b84c:	681b      	ldr	r3, [r3, #0]
 801b84e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801b850:	4b14      	ldr	r3, [pc, #80]	@ (801b8a4 <UTIL_SEQ_Run+0x1e0>)
 801b852:	681b      	ldr	r3, [r3, #0]
 801b854:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801b856:	4b14      	ldr	r3, [pc, #80]	@ (801b8a8 <UTIL_SEQ_Run+0x1e4>)
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801b85c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801b85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b860:	401a      	ands	r2, r3
 801b862:	4b0e      	ldr	r3, [pc, #56]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	4013      	ands	r3, r2
 801b868:	2b00      	cmp	r3, #0
 801b86a:	d107      	bne.n	801b87c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801b86c:	4b0f      	ldr	r3, [pc, #60]	@ (801b8ac <UTIL_SEQ_Run+0x1e8>)
 801b86e:	681a      	ldr	r2, [r3, #0]
 801b870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801b872:	4013      	ands	r3, r2
 801b874:	2b00      	cmp	r3, #0
 801b876:	d101      	bne.n	801b87c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801b878:	f7e6 f89c 	bl	80019b4 <UTIL_SEQ_Idle>
 801b87c:	69fb      	ldr	r3, [r7, #28]
 801b87e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b880:	68fb      	ldr	r3, [r7, #12]
 801b882:	f383 8810 	msr	PRIMASK, r3
}
 801b886:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801b888:	f000 f86c 	bl	801b964 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801b88c:	4a03      	ldr	r2, [pc, #12]	@ (801b89c <UTIL_SEQ_Run+0x1d8>)
 801b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b890:	6013      	str	r3, [r2, #0]

  return;
 801b892:	bf00      	nop
}
 801b894:	3740      	adds	r7, #64	@ 0x40
 801b896:	46bd      	mov	sp, r7
 801b898:	bd80      	pop	{r7, pc}
 801b89a:	bf00      	nop
 801b89c:	20000134 	.word	0x20000134
 801b8a0:	20001bf0 	.word	0x20001bf0
 801b8a4:	20001bf4 	.word	0x20001bf4
 801b8a8:	20000130 	.word	0x20000130
 801b8ac:	20001bf8 	.word	0x20001bf8
 801b8b0:	20001c10 	.word	0x20001c10
 801b8b4:	20001bfc 	.word	0x20001bfc
 801b8b8:	20001c00 	.word	0x20001c00

0801b8bc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801b8bc:	b580      	push	{r7, lr}
 801b8be:	b088      	sub	sp, #32
 801b8c0:	af00      	add	r7, sp, #0
 801b8c2:	60f8      	str	r0, [r7, #12]
 801b8c4:	60b9      	str	r1, [r7, #8]
 801b8c6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b8c8:	f3ef 8310 	mrs	r3, PRIMASK
 801b8cc:	617b      	str	r3, [r7, #20]
  return(result);
 801b8ce:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801b8d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801b8d2:	b672      	cpsid	i
}
 801b8d4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801b8d6:	68f8      	ldr	r0, [r7, #12]
 801b8d8:	f000 f84a 	bl	801b970 <SEQ_BitPosition>
 801b8dc:	4603      	mov	r3, r0
 801b8de:	4619      	mov	r1, r3
 801b8e0:	4a06      	ldr	r2, [pc, #24]	@ (801b8fc <UTIL_SEQ_RegTask+0x40>)
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801b8e8:	69fb      	ldr	r3, [r7, #28]
 801b8ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b8ec:	69bb      	ldr	r3, [r7, #24]
 801b8ee:	f383 8810 	msr	PRIMASK, r3
}
 801b8f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801b8f4:	bf00      	nop
}
 801b8f6:	3720      	adds	r7, #32
 801b8f8:	46bd      	mov	sp, r7
 801b8fa:	bd80      	pop	{r7, pc}
 801b8fc:	20001c00 	.word	0x20001c00

0801b900 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801b900:	b480      	push	{r7}
 801b902:	b087      	sub	sp, #28
 801b904:	af00      	add	r7, sp, #0
 801b906:	6078      	str	r0, [r7, #4]
 801b908:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b90a:	f3ef 8310 	mrs	r3, PRIMASK
 801b90e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b910:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801b912:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b914:	b672      	cpsid	i
}
 801b916:	bf00      	nop

  TaskSet |= TaskId_bm;
 801b918:	4b0d      	ldr	r3, [pc, #52]	@ (801b950 <UTIL_SEQ_SetTask+0x50>)
 801b91a:	681a      	ldr	r2, [r3, #0]
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	4313      	orrs	r3, r2
 801b920:	4a0b      	ldr	r2, [pc, #44]	@ (801b950 <UTIL_SEQ_SetTask+0x50>)
 801b922:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801b924:	4a0b      	ldr	r2, [pc, #44]	@ (801b954 <UTIL_SEQ_SetTask+0x54>)
 801b926:	683b      	ldr	r3, [r7, #0]
 801b928:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	431a      	orrs	r2, r3
 801b930:	4908      	ldr	r1, [pc, #32]	@ (801b954 <UTIL_SEQ_SetTask+0x54>)
 801b932:	683b      	ldr	r3, [r7, #0]
 801b934:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801b938:	697b      	ldr	r3, [r7, #20]
 801b93a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b93c:	693b      	ldr	r3, [r7, #16]
 801b93e:	f383 8810 	msr	PRIMASK, r3
}
 801b942:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801b944:	bf00      	nop
}
 801b946:	371c      	adds	r7, #28
 801b948:	46bd      	mov	sp, r7
 801b94a:	bc80      	pop	{r7}
 801b94c:	4770      	bx	lr
 801b94e:	bf00      	nop
 801b950:	20001bf0 	.word	0x20001bf0
 801b954:	20001c10 	.word	0x20001c10

0801b958 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801b958:	b480      	push	{r7}
 801b95a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b95c:	bf00      	nop
}
 801b95e:	46bd      	mov	sp, r7
 801b960:	bc80      	pop	{r7}
 801b962:	4770      	bx	lr

0801b964 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801b964:	b480      	push	{r7}
 801b966:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801b968:	bf00      	nop
}
 801b96a:	46bd      	mov	sp, r7
 801b96c:	bc80      	pop	{r7}
 801b96e:	4770      	bx	lr

0801b970 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801b970:	b480      	push	{r7}
 801b972:	b085      	sub	sp, #20
 801b974:	af00      	add	r7, sp, #0
 801b976:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801b978:	2300      	movs	r3, #0
 801b97a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801b980:	68bb      	ldr	r3, [r7, #8]
 801b982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b986:	d204      	bcs.n	801b992 <SEQ_BitPosition+0x22>
 801b988:	2310      	movs	r3, #16
 801b98a:	73fb      	strb	r3, [r7, #15]
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	041b      	lsls	r3, r3, #16
 801b990:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801b992:	68bb      	ldr	r3, [r7, #8]
 801b994:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b998:	d205      	bcs.n	801b9a6 <SEQ_BitPosition+0x36>
 801b99a:	7bfb      	ldrb	r3, [r7, #15]
 801b99c:	3308      	adds	r3, #8
 801b99e:	73fb      	strb	r3, [r7, #15]
 801b9a0:	68bb      	ldr	r3, [r7, #8]
 801b9a2:	021b      	lsls	r3, r3, #8
 801b9a4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b9ac:	d205      	bcs.n	801b9ba <SEQ_BitPosition+0x4a>
 801b9ae:	7bfb      	ldrb	r3, [r7, #15]
 801b9b0:	3304      	adds	r3, #4
 801b9b2:	73fb      	strb	r3, [r7, #15]
 801b9b4:	68bb      	ldr	r3, [r7, #8]
 801b9b6:	011b      	lsls	r3, r3, #4
 801b9b8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	0f1b      	lsrs	r3, r3, #28
 801b9be:	4a07      	ldr	r2, [pc, #28]	@ (801b9dc <SEQ_BitPosition+0x6c>)
 801b9c0:	5cd2      	ldrb	r2, [r2, r3]
 801b9c2:	7bfb      	ldrb	r3, [r7, #15]
 801b9c4:	4413      	add	r3, r2
 801b9c6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801b9c8:	7bfb      	ldrb	r3, [r7, #15]
 801b9ca:	f1c3 031f 	rsb	r3, r3, #31
 801b9ce:	b2db      	uxtb	r3, r3
}
 801b9d0:	4618      	mov	r0, r3
 801b9d2:	3714      	adds	r7, #20
 801b9d4:	46bd      	mov	sp, r7
 801b9d6:	bc80      	pop	{r7}
 801b9d8:	4770      	bx	lr
 801b9da:	bf00      	nop
 801b9dc:	0801d15c 	.word	0x0801d15c

0801b9e0 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801b9e0:	b580      	push	{r7, lr}
 801b9e2:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801b9e4:	4b04      	ldr	r3, [pc, #16]	@ (801b9f8 <UTIL_TIMER_Init+0x18>)
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801b9ea:	4b04      	ldr	r3, [pc, #16]	@ (801b9fc <UTIL_TIMER_Init+0x1c>)
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	4798      	blx	r3
 801b9f0:	4603      	mov	r3, r0
}
 801b9f2:	4618      	mov	r0, r3
 801b9f4:	bd80      	pop	{r7, pc}
 801b9f6:	bf00      	nop
 801b9f8:	20001c18 	.word	0x20001c18
 801b9fc:	0801cb54 	.word	0x0801cb54

0801ba00 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801ba00:	b580      	push	{r7, lr}
 801ba02:	b084      	sub	sp, #16
 801ba04:	af00      	add	r7, sp, #0
 801ba06:	60f8      	str	r0, [r7, #12]
 801ba08:	60b9      	str	r1, [r7, #8]
 801ba0a:	603b      	str	r3, [r7, #0]
 801ba0c:	4613      	mov	r3, r2
 801ba0e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	2b00      	cmp	r3, #0
 801ba14:	d023      	beq.n	801ba5e <UTIL_TIMER_Create+0x5e>
 801ba16:	683b      	ldr	r3, [r7, #0]
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d020      	beq.n	801ba5e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801ba1c:	68fb      	ldr	r3, [r7, #12]
 801ba1e:	2200      	movs	r2, #0
 801ba20:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801ba22:	4b11      	ldr	r3, [pc, #68]	@ (801ba68 <UTIL_TIMER_Create+0x68>)
 801ba24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ba26:	68b8      	ldr	r0, [r7, #8]
 801ba28:	4798      	blx	r3
 801ba2a:	4602      	mov	r2, r0
 801ba2c:	68fb      	ldr	r3, [r7, #12]
 801ba2e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	2200      	movs	r2, #0
 801ba34:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801ba36:	68fb      	ldr	r3, [r7, #12]
 801ba38:	2200      	movs	r2, #0
 801ba3a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ba3c:	68fb      	ldr	r3, [r7, #12]
 801ba3e:	2200      	movs	r2, #0
 801ba40:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801ba42:	68fb      	ldr	r3, [r7, #12]
 801ba44:	683a      	ldr	r2, [r7, #0]
 801ba46:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801ba48:	68fb      	ldr	r3, [r7, #12]
 801ba4a:	69ba      	ldr	r2, [r7, #24]
 801ba4c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801ba4e:	68fb      	ldr	r3, [r7, #12]
 801ba50:	79fa      	ldrb	r2, [r7, #7]
 801ba52:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801ba54:	68fb      	ldr	r3, [r7, #12]
 801ba56:	2200      	movs	r2, #0
 801ba58:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801ba5a:	2300      	movs	r3, #0
 801ba5c:	e000      	b.n	801ba60 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801ba5e:	2301      	movs	r3, #1
  }
}
 801ba60:	4618      	mov	r0, r3
 801ba62:	3710      	adds	r7, #16
 801ba64:	46bd      	mov	sp, r7
 801ba66:	bd80      	pop	{r7, pc}
 801ba68:	0801cb54 	.word	0x0801cb54

0801ba6c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ba6c:	b580      	push	{r7, lr}
 801ba6e:	b08a      	sub	sp, #40	@ 0x28
 801ba70:	af00      	add	r7, sp, #0
 801ba72:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ba74:	2300      	movs	r3, #0
 801ba76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d056      	beq.n	801bb2e <UTIL_TIMER_Start+0xc2>
 801ba80:	6878      	ldr	r0, [r7, #4]
 801ba82:	f000 f9a9 	bl	801bdd8 <TimerExists>
 801ba86:	4603      	mov	r3, r0
 801ba88:	f083 0301 	eor.w	r3, r3, #1
 801ba8c:	b2db      	uxtb	r3, r3
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	d04d      	beq.n	801bb2e <UTIL_TIMER_Start+0xc2>
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	7a5b      	ldrb	r3, [r3, #9]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d149      	bne.n	801bb2e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ba9a:	f3ef 8310 	mrs	r3, PRIMASK
 801ba9e:	613b      	str	r3, [r7, #16]
  return(result);
 801baa0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801baa2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801baa4:	b672      	cpsid	i
}
 801baa6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	685b      	ldr	r3, [r3, #4]
 801baac:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801baae:	4b24      	ldr	r3, [pc, #144]	@ (801bb40 <UTIL_TIMER_Start+0xd4>)
 801bab0:	6a1b      	ldr	r3, [r3, #32]
 801bab2:	4798      	blx	r3
 801bab4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801bab6:	6a3a      	ldr	r2, [r7, #32]
 801bab8:	69bb      	ldr	r3, [r7, #24]
 801baba:	429a      	cmp	r2, r3
 801babc:	d201      	bcs.n	801bac2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801babe:	69bb      	ldr	r3, [r7, #24]
 801bac0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	6a3a      	ldr	r2, [r7, #32]
 801bac6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	2200      	movs	r2, #0
 801bacc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	2201      	movs	r2, #1
 801bad2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	2200      	movs	r2, #0
 801bad8:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801bada:	4b1a      	ldr	r3, [pc, #104]	@ (801bb44 <UTIL_TIMER_Start+0xd8>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d106      	bne.n	801baf0 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801bae2:	4b17      	ldr	r3, [pc, #92]	@ (801bb40 <UTIL_TIMER_Start+0xd4>)
 801bae4:	691b      	ldr	r3, [r3, #16]
 801bae6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801bae8:	6878      	ldr	r0, [r7, #4]
 801baea:	f000 f9eb 	bl	801bec4 <TimerInsertNewHeadTimer>
 801baee:	e017      	b.n	801bb20 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801baf0:	4b13      	ldr	r3, [pc, #76]	@ (801bb40 <UTIL_TIMER_Start+0xd4>)
 801baf2:	699b      	ldr	r3, [r3, #24]
 801baf4:	4798      	blx	r3
 801baf6:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681a      	ldr	r2, [r3, #0]
 801bafc:	697b      	ldr	r3, [r7, #20]
 801bafe:	441a      	add	r2, r3
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681a      	ldr	r2, [r3, #0]
 801bb08:	4b0e      	ldr	r3, [pc, #56]	@ (801bb44 <UTIL_TIMER_Start+0xd8>)
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	681b      	ldr	r3, [r3, #0]
 801bb0e:	429a      	cmp	r2, r3
 801bb10:	d203      	bcs.n	801bb1a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801bb12:	6878      	ldr	r0, [r7, #4]
 801bb14:	f000 f9d6 	bl	801bec4 <TimerInsertNewHeadTimer>
 801bb18:	e002      	b.n	801bb20 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801bb1a:	6878      	ldr	r0, [r7, #4]
 801bb1c:	f000 f9a2 	bl	801be64 <TimerInsertTimer>
 801bb20:	69fb      	ldr	r3, [r7, #28]
 801bb22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	f383 8810 	msr	PRIMASK, r3
}
 801bb2a:	bf00      	nop
  {
 801bb2c:	e002      	b.n	801bb34 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801bb2e:	2301      	movs	r3, #1
 801bb30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801bb34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801bb38:	4618      	mov	r0, r3
 801bb3a:	3728      	adds	r7, #40	@ 0x28
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}
 801bb40:	0801cb54 	.word	0x0801cb54
 801bb44:	20001c18 	.word	0x20001c18

0801bb48 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801bb48:	b580      	push	{r7, lr}
 801bb4a:	b088      	sub	sp, #32
 801bb4c:	af00      	add	r7, sp, #0
 801bb4e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bb50:	2300      	movs	r3, #0
 801bb52:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d05b      	beq.n	801bc12 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb5a:	f3ef 8310 	mrs	r3, PRIMASK
 801bb5e:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb60:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bb62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb64:	b672      	cpsid	i
}
 801bb66:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801bb68:	4b2d      	ldr	r3, [pc, #180]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb6a:	681b      	ldr	r3, [r3, #0]
 801bb6c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801bb6e:	4b2c      	ldr	r3, [pc, #176]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	2201      	movs	r2, #1
 801bb78:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801bb7a:	4b29      	ldr	r3, [pc, #164]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d041      	beq.n	801bc06 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	2200      	movs	r2, #0
 801bb86:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801bb88:	4b25      	ldr	r3, [pc, #148]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	687a      	ldr	r2, [r7, #4]
 801bb8e:	429a      	cmp	r2, r3
 801bb90:	d134      	bne.n	801bbfc <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801bb92:	4b23      	ldr	r3, [pc, #140]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb94:	681b      	ldr	r3, [r3, #0]
 801bb96:	2200      	movs	r2, #0
 801bb98:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801bb9a:	4b21      	ldr	r3, [pc, #132]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	695b      	ldr	r3, [r3, #20]
 801bba0:	2b00      	cmp	r3, #0
 801bba2:	d00a      	beq.n	801bbba <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801bba4:	4b1e      	ldr	r3, [pc, #120]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bba6:	681b      	ldr	r3, [r3, #0]
 801bba8:	695b      	ldr	r3, [r3, #20]
 801bbaa:	4a1d      	ldr	r2, [pc, #116]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bbac:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801bbae:	4b1c      	ldr	r3, [pc, #112]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bbb0:	681b      	ldr	r3, [r3, #0]
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f000 f92c 	bl	801be10 <TimerSetTimeout>
 801bbb8:	e023      	b.n	801bc02 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801bbba:	4b1a      	ldr	r3, [pc, #104]	@ (801bc24 <UTIL_TIMER_Stop+0xdc>)
 801bbbc:	68db      	ldr	r3, [r3, #12]
 801bbbe:	4798      	blx	r3
            TimerListHead = NULL;
 801bbc0:	4b17      	ldr	r3, [pc, #92]	@ (801bc20 <UTIL_TIMER_Stop+0xd8>)
 801bbc2:	2200      	movs	r2, #0
 801bbc4:	601a      	str	r2, [r3, #0]
 801bbc6:	e01c      	b.n	801bc02 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801bbc8:	697a      	ldr	r2, [r7, #20]
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	429a      	cmp	r2, r3
 801bbce:	d110      	bne.n	801bbf2 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801bbd0:	697b      	ldr	r3, [r7, #20]
 801bbd2:	695b      	ldr	r3, [r3, #20]
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d006      	beq.n	801bbe6 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801bbd8:	697b      	ldr	r3, [r7, #20]
 801bbda:	695b      	ldr	r3, [r3, #20]
 801bbdc:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bbde:	69bb      	ldr	r3, [r7, #24]
 801bbe0:	697a      	ldr	r2, [r7, #20]
 801bbe2:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801bbe4:	e00d      	b.n	801bc02 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801bbe6:	2300      	movs	r3, #0
 801bbe8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801bbea:	69bb      	ldr	r3, [r7, #24]
 801bbec:	697a      	ldr	r2, [r7, #20]
 801bbee:	615a      	str	r2, [r3, #20]
            break;
 801bbf0:	e007      	b.n	801bc02 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	695b      	ldr	r3, [r3, #20]
 801bbfa:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801bbfc:	697b      	ldr	r3, [r7, #20]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d1e2      	bne.n	801bbc8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801bc02:	2300      	movs	r3, #0
 801bc04:	77fb      	strb	r3, [r7, #31]
 801bc06:	693b      	ldr	r3, [r7, #16]
 801bc08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	f383 8810 	msr	PRIMASK, r3
}
 801bc10:	e001      	b.n	801bc16 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801bc12:	2301      	movs	r3, #1
 801bc14:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801bc16:	7ffb      	ldrb	r3, [r7, #31]
}
 801bc18:	4618      	mov	r0, r3
 801bc1a:	3720      	adds	r7, #32
 801bc1c:	46bd      	mov	sp, r7
 801bc1e:	bd80      	pop	{r7, pc}
 801bc20:	20001c18 	.word	0x20001c18
 801bc24:	0801cb54 	.word	0x0801cb54

0801bc28 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b084      	sub	sp, #16
 801bc2c:	af00      	add	r7, sp, #0
 801bc2e:	6078      	str	r0, [r7, #4]
 801bc30:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801bc32:	2300      	movs	r3, #0
 801bc34:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d102      	bne.n	801bc42 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	73fb      	strb	r3, [r7, #15]
 801bc40:	e014      	b.n	801bc6c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801bc42:	4b0d      	ldr	r3, [pc, #52]	@ (801bc78 <UTIL_TIMER_SetPeriod+0x50>)
 801bc44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc46:	6838      	ldr	r0, [r7, #0]
 801bc48:	4798      	blx	r3
 801bc4a:	4602      	mov	r2, r0
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801bc50:	6878      	ldr	r0, [r7, #4]
 801bc52:	f000 f8c1 	bl	801bdd8 <TimerExists>
 801bc56:	4603      	mov	r3, r0
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d007      	beq.n	801bc6c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801bc5c:	6878      	ldr	r0, [r7, #4]
 801bc5e:	f7ff ff73 	bl	801bb48 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801bc62:	6878      	ldr	r0, [r7, #4]
 801bc64:	f7ff ff02 	bl	801ba6c <UTIL_TIMER_Start>
 801bc68:	4603      	mov	r3, r0
 801bc6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801bc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bc6e:	4618      	mov	r0, r3
 801bc70:	3710      	adds	r7, #16
 801bc72:	46bd      	mov	sp, r7
 801bc74:	bd80      	pop	{r7, pc}
 801bc76:	bf00      	nop
 801bc78:	0801cb54 	.word	0x0801cb54

0801bc7c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801bc7c:	b590      	push	{r4, r7, lr}
 801bc7e:	b089      	sub	sp, #36	@ 0x24
 801bc80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bc82:	f3ef 8310 	mrs	r3, PRIMASK
 801bc86:	60bb      	str	r3, [r7, #8]
  return(result);
 801bc88:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801bc8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801bc8c:	b672      	cpsid	i
}
 801bc8e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801bc90:	4b38      	ldr	r3, [pc, #224]	@ (801bd74 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bc92:	695b      	ldr	r3, [r3, #20]
 801bc94:	4798      	blx	r3
 801bc96:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801bc98:	4b36      	ldr	r3, [pc, #216]	@ (801bd74 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bc9a:	691b      	ldr	r3, [r3, #16]
 801bc9c:	4798      	blx	r3
 801bc9e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801bca0:	693a      	ldr	r2, [r7, #16]
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	1ad3      	subs	r3, r2, r3
 801bca6:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801bca8:	4b33      	ldr	r3, [pc, #204]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	2b00      	cmp	r3, #0
 801bcae:	d037      	beq.n	801bd20 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801bcb0:	4b31      	ldr	r3, [pc, #196]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bcb2:	681b      	ldr	r3, [r3, #0]
 801bcb4:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801bcb6:	69fb      	ldr	r3, [r7, #28]
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	68fa      	ldr	r2, [r7, #12]
 801bcbc:	429a      	cmp	r2, r3
 801bcbe:	d206      	bcs.n	801bcce <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801bcc0:	69fb      	ldr	r3, [r7, #28]
 801bcc2:	681a      	ldr	r2, [r3, #0]
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	1ad2      	subs	r2, r2, r3
 801bcc8:	69fb      	ldr	r3, [r7, #28]
 801bcca:	601a      	str	r2, [r3, #0]
 801bccc:	e002      	b.n	801bcd4 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801bcce:	69fb      	ldr	r3, [r7, #28]
 801bcd0:	2200      	movs	r2, #0
 801bcd2:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801bcd4:	69fb      	ldr	r3, [r7, #28]
 801bcd6:	695b      	ldr	r3, [r3, #20]
 801bcd8:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801bcda:	69fb      	ldr	r3, [r7, #28]
 801bcdc:	2b00      	cmp	r3, #0
 801bcde:	d1ea      	bne.n	801bcb6 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bce0:	e01e      	b.n	801bd20 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801bce2:	4b25      	ldr	r3, [pc, #148]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801bce8:	4b23      	ldr	r3, [pc, #140]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	695b      	ldr	r3, [r3, #20]
 801bcee:	4a22      	ldr	r2, [pc, #136]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bcf0:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801bcf2:	69fb      	ldr	r3, [r7, #28]
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801bcf8:	69fb      	ldr	r3, [r7, #28]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801bcfe:	69fb      	ldr	r3, [r7, #28]
 801bd00:	68db      	ldr	r3, [r3, #12]
 801bd02:	69fa      	ldr	r2, [r7, #28]
 801bd04:	6912      	ldr	r2, [r2, #16]
 801bd06:	4610      	mov	r0, r2
 801bd08:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801bd0a:	69fb      	ldr	r3, [r7, #28]
 801bd0c:	7adb      	ldrb	r3, [r3, #11]
 801bd0e:	2b01      	cmp	r3, #1
 801bd10:	d106      	bne.n	801bd20 <UTIL_TIMER_IRQ_Handler+0xa4>
 801bd12:	69fb      	ldr	r3, [r7, #28]
 801bd14:	7a9b      	ldrb	r3, [r3, #10]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d102      	bne.n	801bd20 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801bd1a:	69f8      	ldr	r0, [r7, #28]
 801bd1c:	f7ff fea6 	bl	801ba6c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801bd20:	4b15      	ldr	r3, [pc, #84]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd22:	681b      	ldr	r3, [r3, #0]
 801bd24:	2b00      	cmp	r3, #0
 801bd26:	d00d      	beq.n	801bd44 <UTIL_TIMER_IRQ_Handler+0xc8>
 801bd28:	4b13      	ldr	r3, [pc, #76]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d0d7      	beq.n	801bce2 <UTIL_TIMER_IRQ_Handler+0x66>
 801bd32:	4b11      	ldr	r3, [pc, #68]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd34:	681b      	ldr	r3, [r3, #0]
 801bd36:	681c      	ldr	r4, [r3, #0]
 801bd38:	4b0e      	ldr	r3, [pc, #56]	@ (801bd74 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801bd3a:	699b      	ldr	r3, [r3, #24]
 801bd3c:	4798      	blx	r3
 801bd3e:	4603      	mov	r3, r0
 801bd40:	429c      	cmp	r4, r3
 801bd42:	d3ce      	bcc.n	801bce2 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801bd44:	4b0c      	ldr	r3, [pc, #48]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	2b00      	cmp	r3, #0
 801bd4a:	d009      	beq.n	801bd60 <UTIL_TIMER_IRQ_Handler+0xe4>
 801bd4c:	4b0a      	ldr	r3, [pc, #40]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd4e:	681b      	ldr	r3, [r3, #0]
 801bd50:	7a1b      	ldrb	r3, [r3, #8]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d104      	bne.n	801bd60 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801bd56:	4b08      	ldr	r3, [pc, #32]	@ (801bd78 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801bd58:	681b      	ldr	r3, [r3, #0]
 801bd5a:	4618      	mov	r0, r3
 801bd5c:	f000 f858 	bl	801be10 <TimerSetTimeout>
 801bd60:	69bb      	ldr	r3, [r7, #24]
 801bd62:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	f383 8810 	msr	PRIMASK, r3
}
 801bd6a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801bd6c:	bf00      	nop
 801bd6e:	3724      	adds	r7, #36	@ 0x24
 801bd70:	46bd      	mov	sp, r7
 801bd72:	bd90      	pop	{r4, r7, pc}
 801bd74:	0801cb54 	.word	0x0801cb54
 801bd78:	20001c18 	.word	0x20001c18

0801bd7c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801bd7c:	b580      	push	{r7, lr}
 801bd7e:	b082      	sub	sp, #8
 801bd80:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801bd82:	4b06      	ldr	r3, [pc, #24]	@ (801bd9c <UTIL_TIMER_GetCurrentTime+0x20>)
 801bd84:	69db      	ldr	r3, [r3, #28]
 801bd86:	4798      	blx	r3
 801bd88:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801bd8a:	4b04      	ldr	r3, [pc, #16]	@ (801bd9c <UTIL_TIMER_GetCurrentTime+0x20>)
 801bd8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bd8e:	6878      	ldr	r0, [r7, #4]
 801bd90:	4798      	blx	r3
 801bd92:	4603      	mov	r3, r0
}
 801bd94:	4618      	mov	r0, r3
 801bd96:	3708      	adds	r7, #8
 801bd98:	46bd      	mov	sp, r7
 801bd9a:	bd80      	pop	{r7, pc}
 801bd9c:	0801cb54 	.word	0x0801cb54

0801bda0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	b084      	sub	sp, #16
 801bda4:	af00      	add	r7, sp, #0
 801bda6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801bda8:	4b0a      	ldr	r3, [pc, #40]	@ (801bdd4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bdaa:	69db      	ldr	r3, [r3, #28]
 801bdac:	4798      	blx	r3
 801bdae:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801bdb0:	4b08      	ldr	r3, [pc, #32]	@ (801bdd4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bdb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bdb4:	6878      	ldr	r0, [r7, #4]
 801bdb6:	4798      	blx	r3
 801bdb8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801bdba:	4b06      	ldr	r3, [pc, #24]	@ (801bdd4 <UTIL_TIMER_GetElapsedTime+0x34>)
 801bdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bdbe:	68f9      	ldr	r1, [r7, #12]
 801bdc0:	68ba      	ldr	r2, [r7, #8]
 801bdc2:	1a8a      	subs	r2, r1, r2
 801bdc4:	4610      	mov	r0, r2
 801bdc6:	4798      	blx	r3
 801bdc8:	4603      	mov	r3, r0
}
 801bdca:	4618      	mov	r0, r3
 801bdcc:	3710      	adds	r7, #16
 801bdce:	46bd      	mov	sp, r7
 801bdd0:	bd80      	pop	{r7, pc}
 801bdd2:	bf00      	nop
 801bdd4:	0801cb54 	.word	0x0801cb54

0801bdd8 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801bdd8:	b480      	push	{r7}
 801bdda:	b085      	sub	sp, #20
 801bddc:	af00      	add	r7, sp, #0
 801bdde:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801bde0:	4b0a      	ldr	r3, [pc, #40]	@ (801be0c <TimerExists+0x34>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801bde6:	e008      	b.n	801bdfa <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801bde8:	68fa      	ldr	r2, [r7, #12]
 801bdea:	687b      	ldr	r3, [r7, #4]
 801bdec:	429a      	cmp	r2, r3
 801bdee:	d101      	bne.n	801bdf4 <TimerExists+0x1c>
    {
      return true;
 801bdf0:	2301      	movs	r3, #1
 801bdf2:	e006      	b.n	801be02 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	695b      	ldr	r3, [r3, #20]
 801bdf8:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d1f3      	bne.n	801bde8 <TimerExists+0x10>
  }
  return false;
 801be00:	2300      	movs	r3, #0
}
 801be02:	4618      	mov	r0, r3
 801be04:	3714      	adds	r7, #20
 801be06:	46bd      	mov	sp, r7
 801be08:	bc80      	pop	{r7}
 801be0a:	4770      	bx	lr
 801be0c:	20001c18 	.word	0x20001c18

0801be10 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801be10:	b590      	push	{r4, r7, lr}
 801be12:	b085      	sub	sp, #20
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801be18:	4b11      	ldr	r3, [pc, #68]	@ (801be60 <TimerSetTimeout+0x50>)
 801be1a:	6a1b      	ldr	r3, [r3, #32]
 801be1c:	4798      	blx	r3
 801be1e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	2201      	movs	r2, #1
 801be24:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801be26:	687b      	ldr	r3, [r7, #4]
 801be28:	681c      	ldr	r4, [r3, #0]
 801be2a:	4b0d      	ldr	r3, [pc, #52]	@ (801be60 <TimerSetTimeout+0x50>)
 801be2c:	699b      	ldr	r3, [r3, #24]
 801be2e:	4798      	blx	r3
 801be30:	4602      	mov	r2, r0
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	4413      	add	r3, r2
 801be36:	429c      	cmp	r4, r3
 801be38:	d207      	bcs.n	801be4a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801be3a:	4b09      	ldr	r3, [pc, #36]	@ (801be60 <TimerSetTimeout+0x50>)
 801be3c:	699b      	ldr	r3, [r3, #24]
 801be3e:	4798      	blx	r3
 801be40:	4602      	mov	r2, r0
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	441a      	add	r2, r3
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801be4a:	4b05      	ldr	r3, [pc, #20]	@ (801be60 <TimerSetTimeout+0x50>)
 801be4c:	689b      	ldr	r3, [r3, #8]
 801be4e:	687a      	ldr	r2, [r7, #4]
 801be50:	6812      	ldr	r2, [r2, #0]
 801be52:	4610      	mov	r0, r2
 801be54:	4798      	blx	r3
}
 801be56:	bf00      	nop
 801be58:	3714      	adds	r7, #20
 801be5a:	46bd      	mov	sp, r7
 801be5c:	bd90      	pop	{r4, r7, pc}
 801be5e:	bf00      	nop
 801be60:	0801cb54 	.word	0x0801cb54

0801be64 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801be64:	b480      	push	{r7}
 801be66:	b085      	sub	sp, #20
 801be68:	af00      	add	r7, sp, #0
 801be6a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801be6c:	4b14      	ldr	r3, [pc, #80]	@ (801bec0 <TimerInsertTimer+0x5c>)
 801be6e:	681b      	ldr	r3, [r3, #0]
 801be70:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801be72:	4b13      	ldr	r3, [pc, #76]	@ (801bec0 <TimerInsertTimer+0x5c>)
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	695b      	ldr	r3, [r3, #20]
 801be78:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801be7a:	e012      	b.n	801bea2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681a      	ldr	r2, [r3, #0]
 801be80:	68bb      	ldr	r3, [r7, #8]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	429a      	cmp	r2, r3
 801be86:	d905      	bls.n	801be94 <TimerInsertTimer+0x30>
    {
        cur = next;
 801be88:	68bb      	ldr	r3, [r7, #8]
 801be8a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	695b      	ldr	r3, [r3, #20]
 801be90:	60bb      	str	r3, [r7, #8]
 801be92:	e006      	b.n	801bea2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801be94:	68fb      	ldr	r3, [r7, #12]
 801be96:	687a      	ldr	r2, [r7, #4]
 801be98:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	68ba      	ldr	r2, [r7, #8]
 801be9e:	615a      	str	r2, [r3, #20]
        return;
 801bea0:	e009      	b.n	801beb6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	695b      	ldr	r3, [r3, #20]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d1e8      	bne.n	801be7c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	687a      	ldr	r2, [r7, #4]
 801beae:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801beb0:	687b      	ldr	r3, [r7, #4]
 801beb2:	2200      	movs	r2, #0
 801beb4:	615a      	str	r2, [r3, #20]
}
 801beb6:	3714      	adds	r7, #20
 801beb8:	46bd      	mov	sp, r7
 801beba:	bc80      	pop	{r7}
 801bebc:	4770      	bx	lr
 801bebe:	bf00      	nop
 801bec0:	20001c18 	.word	0x20001c18

0801bec4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b084      	sub	sp, #16
 801bec8:	af00      	add	r7, sp, #0
 801beca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801becc:	4b0b      	ldr	r3, [pc, #44]	@ (801befc <TimerInsertNewHeadTimer+0x38>)
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801bed2:	68fb      	ldr	r3, [r7, #12]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d002      	beq.n	801bede <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801bed8:	68fb      	ldr	r3, [r7, #12]
 801beda:	2200      	movs	r2, #0
 801bedc:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	68fa      	ldr	r2, [r7, #12]
 801bee2:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801bee4:	4a05      	ldr	r2, [pc, #20]	@ (801befc <TimerInsertNewHeadTimer+0x38>)
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801beea:	4b04      	ldr	r3, [pc, #16]	@ (801befc <TimerInsertNewHeadTimer+0x38>)
 801beec:	681b      	ldr	r3, [r3, #0]
 801beee:	4618      	mov	r0, r3
 801bef0:	f7ff ff8e 	bl	801be10 <TimerSetTimeout>
}
 801bef4:	bf00      	nop
 801bef6:	3710      	adds	r7, #16
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	20001c18 	.word	0x20001c18

0801bf00 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801bf04:	2218      	movs	r2, #24
 801bf06:	2100      	movs	r1, #0
 801bf08:	4807      	ldr	r0, [pc, #28]	@ (801bf28 <UTIL_ADV_TRACE_Init+0x28>)
 801bf0a:	f7fe fffc 	bl	801af06 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801bf0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801bf12:	2100      	movs	r1, #0
 801bf14:	4805      	ldr	r0, [pc, #20]	@ (801bf2c <UTIL_ADV_TRACE_Init+0x2c>)
 801bf16:	f7fe fff6 	bl	801af06 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801bf1a:	4b05      	ldr	r3, [pc, #20]	@ (801bf30 <UTIL_ADV_TRACE_Init+0x30>)
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	4805      	ldr	r0, [pc, #20]	@ (801bf34 <UTIL_ADV_TRACE_Init+0x34>)
 801bf20:	4798      	blx	r3
 801bf22:	4603      	mov	r3, r0
}
 801bf24:	4618      	mov	r0, r3
 801bf26:	bd80      	pop	{r7, pc}
 801bf28:	20001c1c 	.word	0x20001c1c
 801bf2c:	20001c34 	.word	0x20001c34
 801bf30:	0801cb94 	.word	0x0801cb94
 801bf34:	0801c1a1 	.word	0x0801c1a1

0801bf38 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801bf38:	b480      	push	{r7}
 801bf3a:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801bf3c:	4b06      	ldr	r3, [pc, #24]	@ (801bf58 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bf3e:	8a5a      	ldrh	r2, [r3, #18]
 801bf40:	4b05      	ldr	r3, [pc, #20]	@ (801bf58 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801bf42:	8a1b      	ldrh	r3, [r3, #16]
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d101      	bne.n	801bf4c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801bf48:	2301      	movs	r3, #1
 801bf4a:	e000      	b.n	801bf4e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801bf4c:	2300      	movs	r3, #0
}
 801bf4e:	4618      	mov	r0, r3
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bc80      	pop	{r7}
 801bf54:	4770      	bx	lr
 801bf56:	bf00      	nop
 801bf58:	20001c1c 	.word	0x20001c1c

0801bf5c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801bf5c:	b408      	push	{r3}
 801bf5e:	b580      	push	{r7, lr}
 801bf60:	b08d      	sub	sp, #52	@ 0x34
 801bf62:	af00      	add	r7, sp, #0
 801bf64:	60f8      	str	r0, [r7, #12]
 801bf66:	60b9      	str	r1, [r7, #8]
 801bf68:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801bf6e:	2300      	movs	r3, #0
 801bf70:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801bf72:	4b37      	ldr	r3, [pc, #220]	@ (801c050 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bf74:	7a1b      	ldrb	r3, [r3, #8]
 801bf76:	461a      	mov	r2, r3
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	4293      	cmp	r3, r2
 801bf7c:	d902      	bls.n	801bf84 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801bf7e:	f06f 0304 	mvn.w	r3, #4
 801bf82:	e05e      	b.n	801c042 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801bf84:	4b32      	ldr	r3, [pc, #200]	@ (801c050 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bf86:	68da      	ldr	r2, [r3, #12]
 801bf88:	68bb      	ldr	r3, [r7, #8]
 801bf8a:	4013      	ands	r3, r2
 801bf8c:	68ba      	ldr	r2, [r7, #8]
 801bf8e:	429a      	cmp	r2, r3
 801bf90:	d002      	beq.n	801bf98 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801bf92:	f06f 0305 	mvn.w	r3, #5
 801bf96:	e054      	b.n	801c042 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801bf98:	4b2d      	ldr	r3, [pc, #180]	@ (801c050 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bf9a:	685b      	ldr	r3, [r3, #4]
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d00a      	beq.n	801bfb6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801bfa0:	687b      	ldr	r3, [r7, #4]
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d007      	beq.n	801bfb6 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801bfa6:	4b2a      	ldr	r3, [pc, #168]	@ (801c050 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801bfa8:	685b      	ldr	r3, [r3, #4]
 801bfaa:	f107 0116 	add.w	r1, r7, #22
 801bfae:	f107 0218 	add.w	r2, r7, #24
 801bfb2:	4610      	mov	r0, r2
 801bfb4:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801bfb6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801bfba:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801bfbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bfbe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801bfc0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bfc4:	4823      	ldr	r0, [pc, #140]	@ (801c054 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801bfc6:	f7ff fa2b 	bl	801b420 <tiny_vsnprintf_like>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801bfce:	f000 f9f1 	bl	801c3b4 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801bfd2:	8afa      	ldrh	r2, [r7, #22]
 801bfd4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801bfd6:	4413      	add	r3, r2
 801bfd8:	b29b      	uxth	r3, r3
 801bfda:	f107 0214 	add.w	r2, r7, #20
 801bfde:	4611      	mov	r1, r2
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f000 f969 	bl	801c2b8 <TRACE_AllocateBufer>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bfec:	d025      	beq.n	801c03a <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801bfee:	2300      	movs	r3, #0
 801bff0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801bff2:	e00e      	b.n	801c012 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801bff4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801bff6:	8aba      	ldrh	r2, [r7, #20]
 801bff8:	3330      	adds	r3, #48	@ 0x30
 801bffa:	443b      	add	r3, r7
 801bffc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801c000:	4b15      	ldr	r3, [pc, #84]	@ (801c058 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c002:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801c004:	8abb      	ldrh	r3, [r7, #20]
 801c006:	3301      	adds	r3, #1
 801c008:	b29b      	uxth	r3, r3
 801c00a:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801c00c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801c00e:	3301      	adds	r3, #1
 801c010:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801c012:	8afb      	ldrh	r3, [r7, #22]
 801c014:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801c016:	429a      	cmp	r2, r3
 801c018:	d3ec      	bcc.n	801bff4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801c01a:	8abb      	ldrh	r3, [r7, #20]
 801c01c:	461a      	mov	r2, r3
 801c01e:	4b0e      	ldr	r3, [pc, #56]	@ (801c058 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801c020:	18d0      	adds	r0, r2, r3
 801c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c024:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c026:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c02a:	f7ff f9f9 	bl	801b420 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801c02e:	f000 f9df 	bl	801c3f0 <TRACE_UnLock>

    return TRACE_Send();
 801c032:	f000 f831 	bl	801c098 <TRACE_Send>
 801c036:	4603      	mov	r3, r0
 801c038:	e003      	b.n	801c042 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801c03a:	f000 f9d9 	bl	801c3f0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801c03e:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801c042:	4618      	mov	r0, r3
 801c044:	3734      	adds	r7, #52	@ 0x34
 801c046:	46bd      	mov	sp, r7
 801c048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801c04c:	b001      	add	sp, #4
 801c04e:	4770      	bx	lr
 801c050:	20001c1c 	.word	0x20001c1c
 801c054:	20002034 	.word	0x20002034
 801c058:	20001c34 	.word	0x20001c34

0801c05c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801c05c:	b480      	push	{r7}
 801c05e:	b083      	sub	sp, #12
 801c060:	af00      	add	r7, sp, #0
 801c062:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801c064:	4a03      	ldr	r2, [pc, #12]	@ (801c074 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	6053      	str	r3, [r2, #4]
}
 801c06a:	bf00      	nop
 801c06c:	370c      	adds	r7, #12
 801c06e:	46bd      	mov	sp, r7
 801c070:	bc80      	pop	{r7}
 801c072:	4770      	bx	lr
 801c074:	20001c1c 	.word	0x20001c1c

0801c078 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801c078:	b480      	push	{r7}
 801c07a:	b083      	sub	sp, #12
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	4603      	mov	r3, r0
 801c080:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801c082:	4a04      	ldr	r2, [pc, #16]	@ (801c094 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801c084:	79fb      	ldrb	r3, [r7, #7]
 801c086:	7213      	strb	r3, [r2, #8]
}
 801c088:	bf00      	nop
 801c08a:	370c      	adds	r7, #12
 801c08c:	46bd      	mov	sp, r7
 801c08e:	bc80      	pop	{r7}
 801c090:	4770      	bx	lr
 801c092:	bf00      	nop
 801c094:	20001c1c 	.word	0x20001c1c

0801c098 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	b088      	sub	sp, #32
 801c09c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801c09e:	2300      	movs	r3, #0
 801c0a0:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c0a6:	f3ef 8310 	mrs	r3, PRIMASK
 801c0aa:	613b      	str	r3, [r7, #16]
  return(result);
 801c0ac:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c0ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801c0b0:	b672      	cpsid	i
}
 801c0b2:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801c0b4:	f000 f9ba 	bl	801c42c <TRACE_IsLocked>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d15d      	bne.n	801c17a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801c0be:	f000 f979 	bl	801c3b4 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801c0c2:	4b34      	ldr	r3, [pc, #208]	@ (801c194 <TRACE_Send+0xfc>)
 801c0c4:	8a1a      	ldrh	r2, [r3, #16]
 801c0c6:	4b33      	ldr	r3, [pc, #204]	@ (801c194 <TRACE_Send+0xfc>)
 801c0c8:	8a5b      	ldrh	r3, [r3, #18]
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	d04d      	beq.n	801c16a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c0ce:	4b31      	ldr	r3, [pc, #196]	@ (801c194 <TRACE_Send+0xfc>)
 801c0d0:	789b      	ldrb	r3, [r3, #2]
 801c0d2:	2b01      	cmp	r3, #1
 801c0d4:	d117      	bne.n	801c106 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801c0d6:	4b2f      	ldr	r3, [pc, #188]	@ (801c194 <TRACE_Send+0xfc>)
 801c0d8:	881a      	ldrh	r2, [r3, #0]
 801c0da:	4b2e      	ldr	r3, [pc, #184]	@ (801c194 <TRACE_Send+0xfc>)
 801c0dc:	8a1b      	ldrh	r3, [r3, #16]
 801c0de:	1ad3      	subs	r3, r2, r3
 801c0e0:	b29a      	uxth	r2, r3
 801c0e2:	4b2c      	ldr	r3, [pc, #176]	@ (801c194 <TRACE_Send+0xfc>)
 801c0e4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c0e6:	4b2b      	ldr	r3, [pc, #172]	@ (801c194 <TRACE_Send+0xfc>)
 801c0e8:	2202      	movs	r2, #2
 801c0ea:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c0ec:	4b29      	ldr	r3, [pc, #164]	@ (801c194 <TRACE_Send+0xfc>)
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c0f2:	4b28      	ldr	r3, [pc, #160]	@ (801c194 <TRACE_Send+0xfc>)
 801c0f4:	8a9b      	ldrh	r3, [r3, #20]
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d105      	bne.n	801c106 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c0fa:	4b26      	ldr	r3, [pc, #152]	@ (801c194 <TRACE_Send+0xfc>)
 801c0fc:	2200      	movs	r2, #0
 801c0fe:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c100:	4b24      	ldr	r3, [pc, #144]	@ (801c194 <TRACE_Send+0xfc>)
 801c102:	2200      	movs	r2, #0
 801c104:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c106:	4b23      	ldr	r3, [pc, #140]	@ (801c194 <TRACE_Send+0xfc>)
 801c108:	789b      	ldrb	r3, [r3, #2]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d115      	bne.n	801c13a <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c10e:	4b21      	ldr	r3, [pc, #132]	@ (801c194 <TRACE_Send+0xfc>)
 801c110:	8a5a      	ldrh	r2, [r3, #18]
 801c112:	4b20      	ldr	r3, [pc, #128]	@ (801c194 <TRACE_Send+0xfc>)
 801c114:	8a1b      	ldrh	r3, [r3, #16]
 801c116:	429a      	cmp	r2, r3
 801c118:	d908      	bls.n	801c12c <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c11a:	4b1e      	ldr	r3, [pc, #120]	@ (801c194 <TRACE_Send+0xfc>)
 801c11c:	8a5a      	ldrh	r2, [r3, #18]
 801c11e:	4b1d      	ldr	r3, [pc, #116]	@ (801c194 <TRACE_Send+0xfc>)
 801c120:	8a1b      	ldrh	r3, [r3, #16]
 801c122:	1ad3      	subs	r3, r2, r3
 801c124:	b29a      	uxth	r2, r3
 801c126:	4b1b      	ldr	r3, [pc, #108]	@ (801c194 <TRACE_Send+0xfc>)
 801c128:	829a      	strh	r2, [r3, #20]
 801c12a:	e006      	b.n	801c13a <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c12c:	4b19      	ldr	r3, [pc, #100]	@ (801c194 <TRACE_Send+0xfc>)
 801c12e:	8a1b      	ldrh	r3, [r3, #16]
 801c130:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c134:	b29a      	uxth	r2, r3
 801c136:	4b17      	ldr	r3, [pc, #92]	@ (801c194 <TRACE_Send+0xfc>)
 801c138:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c13a:	4b16      	ldr	r3, [pc, #88]	@ (801c194 <TRACE_Send+0xfc>)
 801c13c:	8a1b      	ldrh	r3, [r3, #16]
 801c13e:	461a      	mov	r2, r3
 801c140:	4b15      	ldr	r3, [pc, #84]	@ (801c198 <TRACE_Send+0x100>)
 801c142:	4413      	add	r3, r2
 801c144:	61bb      	str	r3, [r7, #24]
 801c146:	697b      	ldr	r3, [r7, #20]
 801c148:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c14a:	68fb      	ldr	r3, [r7, #12]
 801c14c:	f383 8810 	msr	PRIMASK, r3
}
 801c150:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801c152:	f7e5 fd35 	bl	8001bc0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c156:	4b11      	ldr	r3, [pc, #68]	@ (801c19c <TRACE_Send+0x104>)
 801c158:	68db      	ldr	r3, [r3, #12]
 801c15a:	4a0e      	ldr	r2, [pc, #56]	@ (801c194 <TRACE_Send+0xfc>)
 801c15c:	8a92      	ldrh	r2, [r2, #20]
 801c15e:	4611      	mov	r1, r2
 801c160:	69b8      	ldr	r0, [r7, #24]
 801c162:	4798      	blx	r3
 801c164:	4603      	mov	r3, r0
 801c166:	77fb      	strb	r3, [r7, #31]
 801c168:	e00d      	b.n	801c186 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801c16a:	f000 f941 	bl	801c3f0 <TRACE_UnLock>
 801c16e:	697b      	ldr	r3, [r7, #20]
 801c170:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c172:	68bb      	ldr	r3, [r7, #8]
 801c174:	f383 8810 	msr	PRIMASK, r3
}
 801c178:	e005      	b.n	801c186 <TRACE_Send+0xee>
 801c17a:	697b      	ldr	r3, [r7, #20]
 801c17c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	f383 8810 	msr	PRIMASK, r3
}
 801c184:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801c186:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c18a:	4618      	mov	r0, r3
 801c18c:	3720      	adds	r7, #32
 801c18e:	46bd      	mov	sp, r7
 801c190:	bd80      	pop	{r7, pc}
 801c192:	bf00      	nop
 801c194:	20001c1c 	.word	0x20001c1c
 801c198:	20001c34 	.word	0x20001c34
 801c19c:	0801cb94 	.word	0x0801cb94

0801c1a0 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801c1a0:	b580      	push	{r7, lr}
 801c1a2:	b088      	sub	sp, #32
 801c1a4:	af00      	add	r7, sp, #0
 801c1a6:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c1ac:	f3ef 8310 	mrs	r3, PRIMASK
 801c1b0:	617b      	str	r3, [r7, #20]
  return(result);
 801c1b2:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c1b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801c1b6:	b672      	cpsid	i
}
 801c1b8:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801c1ba:	4b3c      	ldr	r3, [pc, #240]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1bc:	789b      	ldrb	r3, [r3, #2]
 801c1be:	2b02      	cmp	r3, #2
 801c1c0:	d106      	bne.n	801c1d0 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c1c2:	4b3a      	ldr	r3, [pc, #232]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1c4:	2200      	movs	r2, #0
 801c1c6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c1c8:	4b38      	ldr	r3, [pc, #224]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1ca:	2200      	movs	r2, #0
 801c1cc:	821a      	strh	r2, [r3, #16]
 801c1ce:	e00a      	b.n	801c1e6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c1d0:	4b36      	ldr	r3, [pc, #216]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1d2:	8a1a      	ldrh	r2, [r3, #16]
 801c1d4:	4b35      	ldr	r3, [pc, #212]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1d6:	8a9b      	ldrh	r3, [r3, #20]
 801c1d8:	4413      	add	r3, r2
 801c1da:	b29b      	uxth	r3, r3
 801c1dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c1e0:	b29a      	uxth	r2, r3
 801c1e2:	4b32      	ldr	r3, [pc, #200]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1e4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801c1e6:	4b31      	ldr	r3, [pc, #196]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1e8:	8a1a      	ldrh	r2, [r3, #16]
 801c1ea:	4b30      	ldr	r3, [pc, #192]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1ec:	8a5b      	ldrh	r3, [r3, #18]
 801c1ee:	429a      	cmp	r2, r3
 801c1f0:	d04d      	beq.n	801c28e <TRACE_TxCpltCallback+0xee>
 801c1f2:	4b2e      	ldr	r3, [pc, #184]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1f4:	8adb      	ldrh	r3, [r3, #22]
 801c1f6:	2b01      	cmp	r3, #1
 801c1f8:	d149      	bne.n	801c28e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801c1fa:	4b2c      	ldr	r3, [pc, #176]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c1fc:	789b      	ldrb	r3, [r3, #2]
 801c1fe:	2b01      	cmp	r3, #1
 801c200:	d117      	bne.n	801c232 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801c202:	4b2a      	ldr	r3, [pc, #168]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c204:	881a      	ldrh	r2, [r3, #0]
 801c206:	4b29      	ldr	r3, [pc, #164]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c208:	8a1b      	ldrh	r3, [r3, #16]
 801c20a:	1ad3      	subs	r3, r2, r3
 801c20c:	b29a      	uxth	r2, r3
 801c20e:	4b27      	ldr	r3, [pc, #156]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c210:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801c212:	4b26      	ldr	r3, [pc, #152]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c214:	2202      	movs	r2, #2
 801c216:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801c218:	4b24      	ldr	r3, [pc, #144]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c21a:	2200      	movs	r2, #0
 801c21c:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801c21e:	4b23      	ldr	r3, [pc, #140]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c220:	8a9b      	ldrh	r3, [r3, #20]
 801c222:	2b00      	cmp	r3, #0
 801c224:	d105      	bne.n	801c232 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801c226:	4b21      	ldr	r3, [pc, #132]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c228:	2200      	movs	r2, #0
 801c22a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801c22c:	4b1f      	ldr	r3, [pc, #124]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c22e:	2200      	movs	r2, #0
 801c230:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801c232:	4b1e      	ldr	r3, [pc, #120]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c234:	789b      	ldrb	r3, [r3, #2]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d115      	bne.n	801c266 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c23a:	4b1c      	ldr	r3, [pc, #112]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c23c:	8a5a      	ldrh	r2, [r3, #18]
 801c23e:	4b1b      	ldr	r3, [pc, #108]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c240:	8a1b      	ldrh	r3, [r3, #16]
 801c242:	429a      	cmp	r2, r3
 801c244:	d908      	bls.n	801c258 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801c246:	4b19      	ldr	r3, [pc, #100]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c248:	8a5a      	ldrh	r2, [r3, #18]
 801c24a:	4b18      	ldr	r3, [pc, #96]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c24c:	8a1b      	ldrh	r3, [r3, #16]
 801c24e:	1ad3      	subs	r3, r2, r3
 801c250:	b29a      	uxth	r2, r3
 801c252:	4b16      	ldr	r3, [pc, #88]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c254:	829a      	strh	r2, [r3, #20]
 801c256:	e006      	b.n	801c266 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801c258:	4b14      	ldr	r3, [pc, #80]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c25a:	8a1b      	ldrh	r3, [r3, #16]
 801c25c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c260:	b29a      	uxth	r2, r3
 801c262:	4b12      	ldr	r3, [pc, #72]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c264:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801c266:	4b11      	ldr	r3, [pc, #68]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c268:	8a1b      	ldrh	r3, [r3, #16]
 801c26a:	461a      	mov	r2, r3
 801c26c:	4b10      	ldr	r3, [pc, #64]	@ (801c2b0 <TRACE_TxCpltCallback+0x110>)
 801c26e:	4413      	add	r3, r2
 801c270:	61fb      	str	r3, [r7, #28]
 801c272:	69bb      	ldr	r3, [r7, #24]
 801c274:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c276:	693b      	ldr	r3, [r7, #16]
 801c278:	f383 8810 	msr	PRIMASK, r3
}
 801c27c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801c27e:	4b0d      	ldr	r3, [pc, #52]	@ (801c2b4 <TRACE_TxCpltCallback+0x114>)
 801c280:	68db      	ldr	r3, [r3, #12]
 801c282:	4a0a      	ldr	r2, [pc, #40]	@ (801c2ac <TRACE_TxCpltCallback+0x10c>)
 801c284:	8a92      	ldrh	r2, [r2, #20]
 801c286:	4611      	mov	r1, r2
 801c288:	69f8      	ldr	r0, [r7, #28]
 801c28a:	4798      	blx	r3
 801c28c:	e00a      	b.n	801c2a4 <TRACE_TxCpltCallback+0x104>
 801c28e:	69bb      	ldr	r3, [r7, #24]
 801c290:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	f383 8810 	msr	PRIMASK, r3
}
 801c298:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801c29a:	f7e5 fc99 	bl	8001bd0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801c29e:	f000 f8a7 	bl	801c3f0 <TRACE_UnLock>
  }
}
 801c2a2:	bf00      	nop
 801c2a4:	bf00      	nop
 801c2a6:	3720      	adds	r7, #32
 801c2a8:	46bd      	mov	sp, r7
 801c2aa:	bd80      	pop	{r7, pc}
 801c2ac:	20001c1c 	.word	0x20001c1c
 801c2b0:	20001c34 	.word	0x20001c34
 801c2b4:	0801cb94 	.word	0x0801cb94

0801c2b8 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801c2b8:	b480      	push	{r7}
 801c2ba:	b087      	sub	sp, #28
 801c2bc:	af00      	add	r7, sp, #0
 801c2be:	4603      	mov	r3, r0
 801c2c0:	6039      	str	r1, [r7, #0]
 801c2c2:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801c2c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c2c8:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c2ca:	f3ef 8310 	mrs	r3, PRIMASK
 801c2ce:	60fb      	str	r3, [r7, #12]
  return(result);
 801c2d0:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c2d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c2d4:	b672      	cpsid	i
}
 801c2d6:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801c2d8:	4b35      	ldr	r3, [pc, #212]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c2da:	8a5a      	ldrh	r2, [r3, #18]
 801c2dc:	4b34      	ldr	r3, [pc, #208]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c2de:	8a1b      	ldrh	r3, [r3, #16]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d11b      	bne.n	801c31c <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c2e4:	4b32      	ldr	r3, [pc, #200]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c2e6:	8a5b      	ldrh	r3, [r3, #18]
 801c2e8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c2ec:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801c2ee:	88fa      	ldrh	r2, [r7, #6]
 801c2f0:	8afb      	ldrh	r3, [r7, #22]
 801c2f2:	429a      	cmp	r2, r3
 801c2f4:	d33a      	bcc.n	801c36c <TRACE_AllocateBufer+0xb4>
 801c2f6:	4b2e      	ldr	r3, [pc, #184]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c2f8:	8a1b      	ldrh	r3, [r3, #16]
 801c2fa:	88fa      	ldrh	r2, [r7, #6]
 801c2fc:	429a      	cmp	r2, r3
 801c2fe:	d235      	bcs.n	801c36c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c300:	4b2b      	ldr	r3, [pc, #172]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c302:	2201      	movs	r2, #1
 801c304:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c306:	4b2a      	ldr	r3, [pc, #168]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c308:	8a5a      	ldrh	r2, [r3, #18]
 801c30a:	4b29      	ldr	r3, [pc, #164]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c30c:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c30e:	4b28      	ldr	r3, [pc, #160]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c310:	8a1b      	ldrh	r3, [r3, #16]
 801c312:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c314:	4b26      	ldr	r3, [pc, #152]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c316:	2200      	movs	r2, #0
 801c318:	825a      	strh	r2, [r3, #18]
 801c31a:	e027      	b.n	801c36c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801c31c:	4b24      	ldr	r3, [pc, #144]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c31e:	8a5a      	ldrh	r2, [r3, #18]
 801c320:	4b23      	ldr	r3, [pc, #140]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c322:	8a1b      	ldrh	r3, [r3, #16]
 801c324:	429a      	cmp	r2, r3
 801c326:	d91b      	bls.n	801c360 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801c328:	4b21      	ldr	r3, [pc, #132]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c32a:	8a5b      	ldrh	r3, [r3, #18]
 801c32c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801c330:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801c332:	88fa      	ldrh	r2, [r7, #6]
 801c334:	8afb      	ldrh	r3, [r7, #22]
 801c336:	429a      	cmp	r2, r3
 801c338:	d318      	bcc.n	801c36c <TRACE_AllocateBufer+0xb4>
 801c33a:	4b1d      	ldr	r3, [pc, #116]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c33c:	8a1b      	ldrh	r3, [r3, #16]
 801c33e:	88fa      	ldrh	r2, [r7, #6]
 801c340:	429a      	cmp	r2, r3
 801c342:	d213      	bcs.n	801c36c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801c344:	4b1a      	ldr	r3, [pc, #104]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c346:	2201      	movs	r2, #1
 801c348:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801c34a:	4b19      	ldr	r3, [pc, #100]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c34c:	8a5a      	ldrh	r2, [r3, #18]
 801c34e:	4b18      	ldr	r3, [pc, #96]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c350:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801c352:	4b17      	ldr	r3, [pc, #92]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c354:	8a1b      	ldrh	r3, [r3, #16]
 801c356:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801c358:	4b15      	ldr	r3, [pc, #84]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c35a:	2200      	movs	r2, #0
 801c35c:	825a      	strh	r2, [r3, #18]
 801c35e:	e005      	b.n	801c36c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801c360:	4b13      	ldr	r3, [pc, #76]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c362:	8a1a      	ldrh	r2, [r3, #16]
 801c364:	4b12      	ldr	r3, [pc, #72]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c366:	8a5b      	ldrh	r3, [r3, #18]
 801c368:	1ad3      	subs	r3, r2, r3
 801c36a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801c36c:	8afa      	ldrh	r2, [r7, #22]
 801c36e:	88fb      	ldrh	r3, [r7, #6]
 801c370:	429a      	cmp	r2, r3
 801c372:	d90f      	bls.n	801c394 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801c374:	4b0e      	ldr	r3, [pc, #56]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c376:	8a5a      	ldrh	r2, [r3, #18]
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801c37c:	4b0c      	ldr	r3, [pc, #48]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c37e:	8a5a      	ldrh	r2, [r3, #18]
 801c380:	88fb      	ldrh	r3, [r7, #6]
 801c382:	4413      	add	r3, r2
 801c384:	b29b      	uxth	r3, r3
 801c386:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c38a:	b29a      	uxth	r2, r3
 801c38c:	4b08      	ldr	r3, [pc, #32]	@ (801c3b0 <TRACE_AllocateBufer+0xf8>)
 801c38e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801c390:	2300      	movs	r3, #0
 801c392:	82bb      	strh	r3, [r7, #20]
 801c394:	693b      	ldr	r3, [r7, #16]
 801c396:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c398:	68bb      	ldr	r3, [r7, #8]
 801c39a:	f383 8810 	msr	PRIMASK, r3
}
 801c39e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801c3a0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801c3a4:	4618      	mov	r0, r3
 801c3a6:	371c      	adds	r7, #28
 801c3a8:	46bd      	mov	sp, r7
 801c3aa:	bc80      	pop	{r7}
 801c3ac:	4770      	bx	lr
 801c3ae:	bf00      	nop
 801c3b0:	20001c1c 	.word	0x20001c1c

0801c3b4 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801c3b4:	b480      	push	{r7}
 801c3b6:	b085      	sub	sp, #20
 801c3b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3ba:	f3ef 8310 	mrs	r3, PRIMASK
 801c3be:	607b      	str	r3, [r7, #4]
  return(result);
 801c3c0:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c3c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c3c4:	b672      	cpsid	i
}
 801c3c6:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801c3c8:	4b08      	ldr	r3, [pc, #32]	@ (801c3ec <TRACE_Lock+0x38>)
 801c3ca:	8adb      	ldrh	r3, [r3, #22]
 801c3cc:	3301      	adds	r3, #1
 801c3ce:	b29a      	uxth	r2, r3
 801c3d0:	4b06      	ldr	r3, [pc, #24]	@ (801c3ec <TRACE_Lock+0x38>)
 801c3d2:	82da      	strh	r2, [r3, #22]
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c3d8:	68bb      	ldr	r3, [r7, #8]
 801c3da:	f383 8810 	msr	PRIMASK, r3
}
 801c3de:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c3e0:	bf00      	nop
 801c3e2:	3714      	adds	r7, #20
 801c3e4:	46bd      	mov	sp, r7
 801c3e6:	bc80      	pop	{r7}
 801c3e8:	4770      	bx	lr
 801c3ea:	bf00      	nop
 801c3ec:	20001c1c 	.word	0x20001c1c

0801c3f0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801c3f0:	b480      	push	{r7}
 801c3f2:	b085      	sub	sp, #20
 801c3f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c3f6:	f3ef 8310 	mrs	r3, PRIMASK
 801c3fa:	607b      	str	r3, [r7, #4]
  return(result);
 801c3fc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801c3fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801c400:	b672      	cpsid	i
}
 801c402:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801c404:	4b08      	ldr	r3, [pc, #32]	@ (801c428 <TRACE_UnLock+0x38>)
 801c406:	8adb      	ldrh	r3, [r3, #22]
 801c408:	3b01      	subs	r3, #1
 801c40a:	b29a      	uxth	r2, r3
 801c40c:	4b06      	ldr	r3, [pc, #24]	@ (801c428 <TRACE_UnLock+0x38>)
 801c40e:	82da      	strh	r2, [r3, #22]
 801c410:	68fb      	ldr	r3, [r7, #12]
 801c412:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c414:	68bb      	ldr	r3, [r7, #8]
 801c416:	f383 8810 	msr	PRIMASK, r3
}
 801c41a:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801c41c:	bf00      	nop
 801c41e:	3714      	adds	r7, #20
 801c420:	46bd      	mov	sp, r7
 801c422:	bc80      	pop	{r7}
 801c424:	4770      	bx	lr
 801c426:	bf00      	nop
 801c428:	20001c1c 	.word	0x20001c1c

0801c42c <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801c42c:	b480      	push	{r7}
 801c42e:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801c430:	4b05      	ldr	r3, [pc, #20]	@ (801c448 <TRACE_IsLocked+0x1c>)
 801c432:	8adb      	ldrh	r3, [r3, #22]
 801c434:	2b00      	cmp	r3, #0
 801c436:	bf14      	ite	ne
 801c438:	2301      	movne	r3, #1
 801c43a:	2300      	moveq	r3, #0
 801c43c:	b2db      	uxtb	r3, r3
}
 801c43e:	4618      	mov	r0, r3
 801c440:	46bd      	mov	sp, r7
 801c442:	bc80      	pop	{r7}
 801c444:	4770      	bx	lr
 801c446:	bf00      	nop
 801c448:	20001c1c 	.word	0x20001c1c

0801c44c <memset>:
 801c44c:	4402      	add	r2, r0
 801c44e:	4603      	mov	r3, r0
 801c450:	4293      	cmp	r3, r2
 801c452:	d100      	bne.n	801c456 <memset+0xa>
 801c454:	4770      	bx	lr
 801c456:	f803 1b01 	strb.w	r1, [r3], #1
 801c45a:	e7f9      	b.n	801c450 <memset+0x4>

0801c45c <__libc_init_array>:
 801c45c:	b570      	push	{r4, r5, r6, lr}
 801c45e:	4d0d      	ldr	r5, [pc, #52]	@ (801c494 <__libc_init_array+0x38>)
 801c460:	4c0d      	ldr	r4, [pc, #52]	@ (801c498 <__libc_init_array+0x3c>)
 801c462:	1b64      	subs	r4, r4, r5
 801c464:	10a4      	asrs	r4, r4, #2
 801c466:	2600      	movs	r6, #0
 801c468:	42a6      	cmp	r6, r4
 801c46a:	d109      	bne.n	801c480 <__libc_init_array+0x24>
 801c46c:	4d0b      	ldr	r5, [pc, #44]	@ (801c49c <__libc_init_array+0x40>)
 801c46e:	4c0c      	ldr	r4, [pc, #48]	@ (801c4a0 <__libc_init_array+0x44>)
 801c470:	f000 f89a 	bl	801c5a8 <_init>
 801c474:	1b64      	subs	r4, r4, r5
 801c476:	10a4      	asrs	r4, r4, #2
 801c478:	2600      	movs	r6, #0
 801c47a:	42a6      	cmp	r6, r4
 801c47c:	d105      	bne.n	801c48a <__libc_init_array+0x2e>
 801c47e:	bd70      	pop	{r4, r5, r6, pc}
 801c480:	f855 3b04 	ldr.w	r3, [r5], #4
 801c484:	4798      	blx	r3
 801c486:	3601      	adds	r6, #1
 801c488:	e7ee      	b.n	801c468 <__libc_init_array+0xc>
 801c48a:	f855 3b04 	ldr.w	r3, [r5], #4
 801c48e:	4798      	blx	r3
 801c490:	3601      	adds	r6, #1
 801c492:	e7f2      	b.n	801c47a <__libc_init_array+0x1e>
 801c494:	0801d24c 	.word	0x0801d24c
 801c498:	0801d24c 	.word	0x0801d24c
 801c49c:	0801d24c 	.word	0x0801d24c
 801c4a0:	0801d250 	.word	0x0801d250
 801c4a4:	00000000 	.word	0x00000000

0801c4a8 <floor>:
 801c4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c4ac:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801c4b0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801c4b4:	2e13      	cmp	r6, #19
 801c4b6:	4602      	mov	r2, r0
 801c4b8:	460b      	mov	r3, r1
 801c4ba:	460c      	mov	r4, r1
 801c4bc:	4605      	mov	r5, r0
 801c4be:	4680      	mov	r8, r0
 801c4c0:	dc35      	bgt.n	801c52e <floor+0x86>
 801c4c2:	2e00      	cmp	r6, #0
 801c4c4:	da17      	bge.n	801c4f6 <floor+0x4e>
 801c4c6:	a334      	add	r3, pc, #208	@ (adr r3, 801c598 <floor+0xf0>)
 801c4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4cc:	f7e3 fe62 	bl	8000194 <__adddf3>
 801c4d0:	2200      	movs	r2, #0
 801c4d2:	2300      	movs	r3, #0
 801c4d4:	f7e4 f892 	bl	80005fc <__aeabi_dcmpgt>
 801c4d8:	b150      	cbz	r0, 801c4f0 <floor+0x48>
 801c4da:	2c00      	cmp	r4, #0
 801c4dc:	da57      	bge.n	801c58e <floor+0xe6>
 801c4de:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801c4e2:	432c      	orrs	r4, r5
 801c4e4:	2500      	movs	r5, #0
 801c4e6:	42ac      	cmp	r4, r5
 801c4e8:	4c2d      	ldr	r4, [pc, #180]	@ (801c5a0 <floor+0xf8>)
 801c4ea:	bf08      	it	eq
 801c4ec:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801c4f0:	4623      	mov	r3, r4
 801c4f2:	462a      	mov	r2, r5
 801c4f4:	e024      	b.n	801c540 <floor+0x98>
 801c4f6:	4f2b      	ldr	r7, [pc, #172]	@ (801c5a4 <floor+0xfc>)
 801c4f8:	4137      	asrs	r7, r6
 801c4fa:	ea01 0c07 	and.w	ip, r1, r7
 801c4fe:	ea5c 0c00 	orrs.w	ip, ip, r0
 801c502:	d01d      	beq.n	801c540 <floor+0x98>
 801c504:	a324      	add	r3, pc, #144	@ (adr r3, 801c598 <floor+0xf0>)
 801c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50a:	f7e3 fe43 	bl	8000194 <__adddf3>
 801c50e:	2200      	movs	r2, #0
 801c510:	2300      	movs	r3, #0
 801c512:	f7e4 f873 	bl	80005fc <__aeabi_dcmpgt>
 801c516:	2800      	cmp	r0, #0
 801c518:	d0ea      	beq.n	801c4f0 <floor+0x48>
 801c51a:	2c00      	cmp	r4, #0
 801c51c:	bfbe      	ittt	lt
 801c51e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801c522:	4133      	asrlt	r3, r6
 801c524:	18e4      	addlt	r4, r4, r3
 801c526:	ea24 0407 	bic.w	r4, r4, r7
 801c52a:	2500      	movs	r5, #0
 801c52c:	e7e0      	b.n	801c4f0 <floor+0x48>
 801c52e:	2e33      	cmp	r6, #51	@ 0x33
 801c530:	dd0a      	ble.n	801c548 <floor+0xa0>
 801c532:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c536:	d103      	bne.n	801c540 <floor+0x98>
 801c538:	f7e3 fe2c 	bl	8000194 <__adddf3>
 801c53c:	4602      	mov	r2, r0
 801c53e:	460b      	mov	r3, r1
 801c540:	4610      	mov	r0, r2
 801c542:	4619      	mov	r1, r3
 801c544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c548:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801c54c:	f04f 3cff 	mov.w	ip, #4294967295
 801c550:	fa2c f707 	lsr.w	r7, ip, r7
 801c554:	4207      	tst	r7, r0
 801c556:	d0f3      	beq.n	801c540 <floor+0x98>
 801c558:	a30f      	add	r3, pc, #60	@ (adr r3, 801c598 <floor+0xf0>)
 801c55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c55e:	f7e3 fe19 	bl	8000194 <__adddf3>
 801c562:	2200      	movs	r2, #0
 801c564:	2300      	movs	r3, #0
 801c566:	f7e4 f849 	bl	80005fc <__aeabi_dcmpgt>
 801c56a:	2800      	cmp	r0, #0
 801c56c:	d0c0      	beq.n	801c4f0 <floor+0x48>
 801c56e:	2c00      	cmp	r4, #0
 801c570:	da0a      	bge.n	801c588 <floor+0xe0>
 801c572:	2e14      	cmp	r6, #20
 801c574:	d101      	bne.n	801c57a <floor+0xd2>
 801c576:	3401      	adds	r4, #1
 801c578:	e006      	b.n	801c588 <floor+0xe0>
 801c57a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801c57e:	2301      	movs	r3, #1
 801c580:	40b3      	lsls	r3, r6
 801c582:	441d      	add	r5, r3
 801c584:	4545      	cmp	r5, r8
 801c586:	d3f6      	bcc.n	801c576 <floor+0xce>
 801c588:	ea25 0507 	bic.w	r5, r5, r7
 801c58c:	e7b0      	b.n	801c4f0 <floor+0x48>
 801c58e:	2500      	movs	r5, #0
 801c590:	462c      	mov	r4, r5
 801c592:	e7ad      	b.n	801c4f0 <floor+0x48>
 801c594:	f3af 8000 	nop.w
 801c598:	8800759c 	.word	0x8800759c
 801c59c:	7e37e43c 	.word	0x7e37e43c
 801c5a0:	bff00000 	.word	0xbff00000
 801c5a4:	000fffff 	.word	0x000fffff

0801c5a8 <_init>:
 801c5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5aa:	bf00      	nop
 801c5ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ae:	bc08      	pop	{r3}
 801c5b0:	469e      	mov	lr, r3
 801c5b2:	4770      	bx	lr

0801c5b4 <_fini>:
 801c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5b6:	bf00      	nop
 801c5b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5ba:	bc08      	pop	{r3}
 801c5bc:	469e      	mov	lr, r3
 801c5be:	4770      	bx	lr
